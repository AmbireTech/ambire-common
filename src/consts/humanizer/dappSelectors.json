{
    "funcSelectors:0xad5c4648": "WETH()",
    "funcSelectors:0xe8e33700": "addLiquidity(address tokenA,address tokenB,uint256 amountADesired,uint256 amountBDesired,uint256 amountAMin,uint256 amountBMin,address to,uint256 deadline)",
    "funcSelectors:0xf305d719": "addLiquidityETH(address token,uint256 amountTokenDesired,uint256 amountTokenMin,uint256 amountETHMin,address to,uint256 deadline)",
    "funcSelectors:0xc45a0155": "factory()",
    "funcSelectors:0x85f8c259": "getAmountIn(uint256 amountOut,uint256 reserveIn,uint256 reserveOut)",
    "funcSelectors:0x054d50d4": "getAmountOut(uint256 amountIn,uint256 reserveIn,uint256 reserveOut)",
    "funcSelectors:0x1f00ca74": "getAmountsIn(uint256 amountOut,address[] path)",
    "funcSelectors:0xd06ca61f": "getAmountsOut(uint256 amountIn,address[] path)",
    "funcSelectors:0xad615dec": "quote(uint256 amountA,uint256 reserveA,uint256 reserveB)",
    "funcSelectors:0xbaa2abde": "removeLiquidity(address tokenA,address tokenB,uint256 liquidity,uint256 amountAMin,uint256 amountBMin,address to,uint256 deadline)",
    "funcSelectors:0x02751cec": "removeLiquidityETH(address token,uint256 liquidity,uint256 amountTokenMin,uint256 amountETHMin,address to,uint256 deadline)",
    "funcSelectors:0xaf2979eb": "removeLiquidityETHSupportingFeeOnTransferTokens(address token,uint256 liquidity,uint256 amountTokenMin,uint256 amountETHMin,address to,uint256 deadline)",
    "funcSelectors:0xded9382a": "removeLiquidityETHWithPermit(address token,uint256 liquidity,uint256 amountTokenMin,uint256 amountETHMin,address to,uint256 deadline,bool approveMax,uint8 v,bytes32 r,bytes32 s)",
    "funcSelectors:0x5b0d5984": "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address token,uint256 liquidity,uint256 amountTokenMin,uint256 amountETHMin,address to,uint256 deadline,bool approveMax,uint8 v,bytes32 r,bytes32 s)",
    "funcSelectors:0x2195995c": "removeLiquidityWithPermit(address tokenA,address tokenB,uint256 liquidity,uint256 amountAMin,uint256 amountBMin,address to,uint256 deadline,bool approveMax,uint8 v,bytes32 r,bytes32 s)",
    "funcSelectors:0xfb3bdb41": "swapETHForExactTokens(uint256 amountOut,address[] path,address to,uint256 deadline)",
    "funcSelectors:0x7ff36ab5": "swapExactETHForTokens(uint256 amountOutMin,address[] path,address to,uint256 deadline)",
    "funcSelectors:0xb6f9de95": "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256 amountOutMin,address[] path,address to,uint256 deadline)",
    "funcSelectors:0x18cbafe5": "swapExactTokensForETH(uint256 amountIn,uint256 amountOutMin,address[] path,address to,uint256 deadline)",
    "funcSelectors:0x791ac947": "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 amountIn,uint256 amountOutMin,address[] path,address to,uint256 deadline)",
    "funcSelectors:0x38ed1739": "swapExactTokensForTokens(uint256 amountIn,uint256 amountOutMin,address[] path,address to,uint256 deadline)",
    "funcSelectors:0x5c11d795": "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 amountIn,uint256 amountOutMin,address[] path,address to,uint256 deadline)",
    "funcSelectors:0x4a25d94a": "swapTokensForExactETH(uint256 amountOut,uint256 amountInMax,address[] path,address to,uint256 deadline)",
    "funcSelectors:0x8803dbee": "swapTokensForExactTokens(uint256 amountOut,uint256 amountInMax,address[] path,address to,uint256 deadline)",
    "funcSelectors:0x4aa4a4fc": "WETH9()",
    "funcSelectors:0x80fb3ad6": "exactInput(tuple params)",
    "funcSelectors:0x5d76b977": "exactInputSingle(tuple params)",
    "funcSelectors:0xd42bbb58": "exactOutput(tuple params)",
    "funcSelectors:0x5bd7800f": "exactOutputSingle(tuple params)",
    "funcSelectors:0xac9650d8": "multicall(bytes[] data)",
    "funcSelectors:0x12210e8a": "refundETH()",
    "funcSelectors:0xf3995c67": "selfPermit(address token,uint256 value,uint256 deadline,uint8 v,bytes32 r,bytes32 s)",
    "funcSelectors:0x4659a494": "selfPermitAllowed(address token,uint256 nonce,uint256 expiry,uint8 v,bytes32 r,bytes32 s)",
    "funcSelectors:0xa4a78f0c": "selfPermitAllowedIfNecessary(address token,uint256 nonce,uint256 expiry,uint8 v,bytes32 r,bytes32 s)",
    "funcSelectors:0xc2e3140a": "selfPermitIfNecessary(address token,uint256 value,uint256 deadline,uint8 v,bytes32 r,bytes32 s)",
    "funcSelectors:0xdf2ab5bb": "sweepToken(address token,uint256 amountMinimum,address recipient)",
    "funcSelectors:0xe0e189a0": "sweepTokenWithFee(address token,uint256 amountMinimum,address recipient,uint256 feeBips,address feeRecipient)",
    "funcSelectors:0xfa461e33": "uniswapV3SwapCallback(int256 amount0Delta,int256 amount1Delta,bytes data)",
    "funcSelectors:0x49404b7c": "unwrapWETH9(uint256 amountMinimum,address recipient)",
    "funcSelectors:0x9b2c0a37": "unwrapWETH9WithFee(uint256 amountMinimum,address recipient,uint256 feeBips,address feeRecipient)",
    "funcSelectors:0x571ac8b0": "approveMax(address token)",
    "funcSelectors:0xcab372ce": "approveMaxMinusOne(address token)",
    "funcSelectors:0x639d71a9": "approveZeroThenMax(address token)",
    "funcSelectors:0xab3fdd50": "approveZeroThenMaxMinusOne(address token)",
    "funcSelectors:0xb3a2af13": "callPositionManager(bytes data)",
    "funcSelectors:0xefdeed8e": "checkOracleSlippage(bytes[] paths,uint128[] amounts,uint24 maximumTickDivergence,uint32 secondsAgo)",
    "funcSelectors:0xf25801a7": "checkOracleSlippage(bytes path,uint24 maximumTickDivergence,uint32 secondsAgo)",
    "funcSelectors:0x68e0d4e1": "factoryV2()",
    "funcSelectors:0xdee00f35": "getApprovalType(address token,uint256 amount)",
    "funcSelectors:0xf13884c1": "increaseLiquidity(tuple params)",
    "funcSelectors:0x4405fca9": "mint(tuple params)",
    "funcSelectors:0x1f0464d1": "multicall(bytes32 previousBlockhash,bytes[] data)",
    "funcSelectors:0x5ae401dc": "multicall(uint256 deadline,bytes[] data)",
    "funcSelectors:0x791b98bc": "positionManager()",
    "funcSelectors:0xf2d5d56b": "pull(address token,uint256 value)",
    "funcSelectors:0x472b43f3": "swapExactTokensForTokens(uint256 amountIn,uint256 amountOutMin,address[] path,address to)",
    "funcSelectors:0x42712a67": "swapTokensForExactTokens(uint256 amountOut,uint256 amountInMax,address[] path,address to)",
    "funcSelectors:0xe90a182f": "sweepToken(address token,uint256 amountMinimum)",
    "funcSelectors:0x3068c554": "sweepTokenWithFee(address token,uint256 amountMinimum,uint256 feeBips,address feeRecipient)",
    "funcSelectors:0x49616997": "unwrapWETH9(uint256 amountMinimum)",
    "funcSelectors:0xd4ef38de": "unwrapWETH9WithFee(uint256 amountMinimum,uint256 feeBips,address feeRecipient)",
    "funcSelectors:0x1c58db4f": "wrapETH(uint256 value)",
    "funcSelectors:0x3644e515": "DOMAIN_SEPARATOR()",
    "funcSelectors:0x30adf81f": "PERMIT_TYPEHASH()",
    "funcSelectors:0x095ea7b3": "approve(address spender,uint256 amount)",
    "funcSelectors:0x70a08231": "balanceOf(address account)",
    "funcSelectors:0x6c0360eb": "baseURI()",
    "funcSelectors:0x42966c68": "burn(uint256 _value)",
    "funcSelectors:0x302e5bb1": "collect(tuple params)",
    "funcSelectors:0x13ead562": "createAndInitializePoolIfNecessary(address token0,address token1,uint24 fee,uint160 sqrtPriceX96)",
    "funcSelectors:0xc6887a9d": "decreaseLiquidity(tuple params)",
    "funcSelectors:0x081812fc": "getApproved(uint256 tokenId)",
    "funcSelectors:0xe985e9c5": "isApprovedForAll(address owner,address operator)",
    "funcSelectors:0x06fdde03": "name()",
    "funcSelectors:0x6352211e": "ownerOf(uint256 tokenId)",
    "funcSelectors:0x7ac2ff7b": "permit(address spender,uint256 tokenId,uint256 deadline,uint8 v,bytes32 r,bytes32 s)",
    "funcSelectors:0x99fbab88": "positions(uint256 tokenId)",
    "funcSelectors:0x42842e0e": "safeTransferFrom(address from,address to,uint256 tokenId)",
    "funcSelectors:0xb88d4fde": "safeTransferFrom(address from,address to,uint256 tokenId,bytes _data)",
    "funcSelectors:0xa22cb465": "setApprovalForAll(address operator,bool approved)",
    "funcSelectors:0x01ffc9a7": "supportsInterface(bytes4 interfaceId)",
    "funcSelectors:0x95d89b41": "symbol()",
    "funcSelectors:0x4f6ccce7": "tokenByIndex(uint256 index)",
    "funcSelectors:0x2f745c59": "tokenOfOwnerByIndex(address owner,uint256 index)",
    "funcSelectors:0xc87b56dd": "tokenURI(uint256 tokenId)",
    "funcSelectors:0x18160ddd": "totalSupply()",
    "funcSelectors:0x23b872dd": "transferFrom(address sender,address recipient,uint256 amount)",
    "funcSelectors:0xd3487997": "uniswapV3MintCallback(uint256 amount0Owed,uint256 amount1Owed,bytes data)",
    "errorSelectors:0xa3281672": "BalanceTooLow()",
    "errorSelectors:0xae9bdf00": "BuyPunkFailed()",
    "errorSelectors:0x6f5ffb7e": "ContractLocked()",
    "errorSelectors:0x1231ae40": "ETHNotAccepted()",
    "errorSelectors:0x2c4029e9": "ExecutionFailed(uint256 commandIndex,bytes message)",
    "errorSelectors:0xe7002877": "FromAddressIsNotOwner()",
    "errorSelectors:0x6a12f104": "InsufficientETH()",
    "errorSelectors:0x675cae38": "InsufficientToken()",
    "errorSelectors:0xdeaa01e6": "InvalidBips()",
    "errorSelectors:0xd76a1e9e": "InvalidCommandType(uint256 commandType)",
    "errorSelectors:0x483a6929": "InvalidOwnerERC1155()",
    "errorSelectors:0x7dbe7e89": "InvalidOwnerERC721()",
    "errorSelectors:0x20db8267": "InvalidPath()",
    "errorSelectors:0x7b9c8916": "InvalidReserves()",
    "errorSelectors:0x5461585f": "InvalidSpender()",
    "errorSelectors:0xff633a38": "LengthMismatch()",
    "errorSelectors:0x3b99b53d": "SliceOutOfBounds()",
    "errorSelectors:0x5bf6f916": "TransactionDeadlinePassed()",
    "errorSelectors:0x7d529919": "UnableToClaim()",
    "errorSelectors:0xc4bd89a9": "UnsafeCast()",
    "errorSelectors:0xae52ad0c": "V2InvalidPath()",
    "errorSelectors:0x849eaf98": "V2TooLittleReceived()",
    "errorSelectors:0x8ab0bc16": "V2TooMuchRequested()",
    "errorSelectors:0xd4e0248e": "V3InvalidAmountOut()",
    "errorSelectors:0x32b13d91": "V3InvalidCaller()",
    "errorSelectors:0x316cf0eb": "V3InvalidSwap()",
    "errorSelectors:0x39d35496": "V3TooLittleReceived()",
    "errorSelectors:0x739dbe52": "V3TooMuchRequested()",
    "funcSelectors:0x709a1cc2": "collectRewards(bytes looksRareClaim)",
    "funcSelectors:0x24856bc3": "execute(bytes commands,bytes[] inputs)",
    "funcSelectors:0x3593564c": "execute(bytes commands,bytes[] inputs,uint256 deadline)",
    "funcSelectors:0xbc197c81": "onERC1155BatchReceived(address ,address ,uint256[] ,uint256[] ,bytes )",
    "funcSelectors:0xf23a6e61": "onERC1155Received(address ,address ,uint256 ,uint256 ,bytes )",
    "funcSelectors:0x150b7a02": "onERC721Received(address ,address ,uint256 ,bytes )",
    "funcSelectors:0x2335c76b": "authenticator()",
    "funcSelectors:0xf698da25": "domainSeparator()",
    "funcSelectors:0x2479fb6e": "filledAmount(bytes )",
    "funcSelectors:0xed9f35ce": "freeFilledAmountStorage(bytes[] orderUids)",
    "funcSelectors:0xa2a7d51b": "freePreSignatureStorage(bytes[] orderUids)",
    "funcSelectors:0x5624b25b": "getStorageAt(uint256 offset,uint256 length)",
    "funcSelectors:0x15337bc0": "invalidateOrder(bytes orderUid)",
    "funcSelectors:0xd08d33d1": "preSignature(bytes )",
    "funcSelectors:0xec6cb13f": "setPreSignature(bytes orderUid,bool signed)",
    "funcSelectors:0x4e3fe62b": "settle(address[] tokens,uint256[] clearingPrices,tuple[] trades,tuple[][3] interactions)",
    "funcSelectors:0xf84436bd": "simulateDelegatecall(address targetContract,bytes calldataPayload)",
    "funcSelectors:0x43218e19": "simulateDelegatecallInternal(address targetContract,bytes calldataPayload)",
    "funcSelectors:0x046406f3": "swap(tuple[] swaps,address[] tokens,tuple trade)",
    "funcSelectors:0xfbfa77cf": "vault()",
    "funcSelectors:0x9b552cc2": "vaultRelayer()",
    "funcSelectors:0x454db034": "batchSwapWithFee(uint8 kind,tuple[] swaps,address[] tokens,tuple funds,int256[] limits,uint256 deadline,tuple feeTransfer)",
    "funcSelectors:0x5c6ae164": "transferFromAccounts(tuple[] transfers)",
    "funcSelectors:0x8da5cb5b": "owner()",
    "funcSelectors:0x715018a6": "renounceOwnership()",
    "funcSelectors:0x15dacbea": "transferFrom(address token,address from,address to,uint256 amount)",
    "funcSelectors:0xf2fde38b": "transferOwnership(address newOwner)",
    "funcSelectors:0xa217fddf": "DEFAULT_ADMIN_ROLE()",
    "funcSelectors:0x30d643b5": "ROUTER_ROLE()",
    "funcSelectors:0x7a3226ec": "WHITELISTED_ROLE()",
    "funcSelectors:0x9a5a98d3": "getAdapterData(bytes32 key)",
    "funcSelectors:0x5459060d": "getFeeWallet()",
    "funcSelectors:0xdc9cc645": "getImplementation(bytes4 selector)",
    "funcSelectors:0x6df77496": "getPartnerFeeStructure(address partner)",
    "funcSelectors:0x248a9ca3": "getRoleAdmin(bytes32 role)",
    "funcSelectors:0x9010d07c": "getRoleMember(bytes32 role,uint256 index)",
    "funcSelectors:0xca15c873": "getRoleMemberCount(bytes32 role)",
    "funcSelectors:0xaa97ef02": "getRouterData(bytes32 key)",
    "funcSelectors:0xd2c4b598": "getTokenTransferProxy()",
    "funcSelectors:0x0d8e6e2c": "getVersion()",
    "funcSelectors:0x2f2ff15d": "grantRole(bytes32 role,address account)",
    "funcSelectors:0x91d14854": "hasRole(bytes32 role,address account)",
    "funcSelectors:0x18800219": "initializeAdapter(address adapter,bytes data)",
    "funcSelectors:0x60e35507": "initializeRouter(address router,bytes data)",
    "funcSelectors:0x3a9243d7": "isAdapterInitialized(bytes32 key)",
    "funcSelectors:0x9812f33b": "isRouterInitialized(bytes32 key)",
    "funcSelectors:0xaa5b2458": "registerPartner(address partner,uint256 _partnerShare,bool _noPositiveSlippage,bool _positiveSlippageToUser,uint16 _feePercent,string partnerId,bytes _data)",
    "funcSelectors:0x36568abe": "renounceRole(bytes32 role,address account)",
    "funcSelectors:0xd547741f": "revokeRole(bytes32 role,address account)",
    "funcSelectors:0x90d49b9d": "setFeeWallet(address _feeWallet)",
    "funcSelectors:0x0815f6fd": "setImplementation(bytes4 selector,address implementation)",
    "funcSelectors:0xa64b6e5f": "transferTokens(address token,address destination,uint256 amount)",
    "errorSelectors:0xd81b2f2e": "AllowanceExpired(uint256 deadline)",
    "errorSelectors:0x24d35a26": "ExcessiveInvalidation()",
    "errorSelectors:0xf96fb071": "InsufficientAllowance(uint256 amount)",
    "errorSelectors:0x3728b83d": "InvalidAmount(uint256 maxAmount)",
    "errorSelectors:0xb0669cbc": "InvalidContractSignature()",
    "errorSelectors:0x756688fe": "InvalidNonce()",
    "errorSelectors:0x8baa579f": "InvalidSignature()",
    "errorSelectors:0x4be6321b": "InvalidSignatureLength()",
    "errorSelectors:0x815e1d64": "InvalidSigner()",
    "errorSelectors:0xcd21db4f": "SignatureExpired(uint256 signatureDeadline)",
    "funcSelectors:0x927da105": "allowance(address ,address ,address )",
    "funcSelectors:0x87517c45": "approve(address token,address spender,uint160 amount,uint48 expiration)",
    "funcSelectors:0x65d9723c": "invalidateNonces(address token,address spender,uint48 newNonce)",
    "funcSelectors:0x3ff9dcb1": "invalidateUnorderedNonces(uint256 wordPos,uint256 mask)",
    "funcSelectors:0xab1bc1f8": "lockdown(tuple[] approvals)",
    "funcSelectors:0x4fe02b44": "nonceBitmap(address ,uint256 )",
    "funcSelectors:0xe4d1b8e4": "permit(address owner,tuple permitSingle,bytes signature)",
    "funcSelectors:0x8c1b8baa": "permitTransferFrom(tuple permit,tuple transferDetails,address owner,bytes signature)",
    "funcSelectors:0xd8ea8a80": "permitTransferFrom(tuple permit,tuple[] transferDetails,address owner,bytes signature)",
    "funcSelectors:0x9f97ecd0": "permitWitnessTransferFrom(tuple permit,tuple transferDetails,address owner,bytes32 witness,string witnessTypeString,bytes signature)",
    "funcSelectors:0xcec4be07": "permitWitnessTransferFrom(tuple permit,tuple[] transferDetails,address owner,bytes32 witness,string witnessTypeString,bytes signature)",
    "funcSelectors:0x855a2299": "transferFrom(tuple[] transferDetails)",
    "funcSelectors:0x36c78516": "transferFrom(address from,address to,uint160 amount,address token)",
    "funcSelectors:0x6b2ace87": "bentoBox()",
    "funcSelectors:0x8456cb59": "pause()",
    "funcSelectors:0x2646478b": "processRoute(address tokenIn,uint256 amountIn,address tokenOut,uint256 amountOutMin,address to,bytes route)",
    "funcSelectors:0x046f7da2": "resume()",
    "funcSelectors:0x9a1f3406": "setPriviledge(address user,bool priviledge)",
    "funcSelectors:0x93b3774c": "transferValueAndprocessRoute(address transferValueTo,uint256 amountValueTransfer,address tokenIn,uint256 amountIn,address tokenOut,uint256 amountOutMin,address to,bytes route)",
    "funcSelectors:0x2e1a7d4d": "withdraw(uint256 _shares)",
    "funcSelectors:0x313ce567": "decimals()",
    "funcSelectors:0xa9059cbb": "transfer(address recipient,uint256 amount)",
    "funcSelectors:0xd0e30db0": "deposit()",
    "funcSelectors:0xdd62ed3e": "allowance(address owner,address spender)",
    "funcSelectors:0x074b2e43": "FLASHLOAN_PREMIUM_TOTAL()",
    "funcSelectors:0x8afaff02": "LENDINGPOOL_REVISION()",
    "funcSelectors:0xf8119d51": "MAX_NUMBER_RESERVES()",
    "funcSelectors:0xe82fec2f": "MAX_STABLE_RATE_BORROW_SIZE_PERCENT()",
    "funcSelectors:0xa415bcad": "borrow(address asset,uint256 amount,uint256 interestRateMode,uint16 referralCode,address onBehalfOf)",
    "funcSelectors:0xe8eda9df": "deposit(address asset,uint256 amount,address onBehalfOf,uint16 referralCode)",
    "funcSelectors:0xd5ed3933": "finalizeTransfer(address asset,address from,address to,uint256 amount,uint256 balanceFromBefore,uint256 balanceToBefore)",
    "funcSelectors:0xab9c4b5d": "flashLoan(address receiverAddress,address[] assets,uint256[] amounts,uint256[] modes,address onBehalfOf,bytes params,uint16 referralCode)",
    "funcSelectors:0xfe65acfe": "getAddressesProvider()",
    "funcSelectors:0xc44b11f7": "getConfiguration(address asset)",
    "funcSelectors:0x35ea6a75": "getReserveData(address asset)",
    "funcSelectors:0xd15e0053": "getReserveNormalizedIncome(address asset)",
    "funcSelectors:0x386497fd": "getReserveNormalizedVariableDebt(address asset)",
    "funcSelectors:0xd1946dbc": "getReservesList()",
    "funcSelectors:0xbf92857c": "getUserAccountData(address user)",
    "funcSelectors:0x4417a583": "getUserConfiguration(address user)",
    "funcSelectors:0x7a708e92": "initReserve(address asset,address aTokenAddress,address stableDebtAddress,address variableDebtAddress,address interestRateStrategyAddress)",
    "funcSelectors:0xc4d66de8": "initialize(address _adapter)",
    "funcSelectors:0x00a718a9": "liquidationCall(address collateralAsset,address debtAsset,address user,uint256 debtToCover,bool receiveAToken)",
    "funcSelectors:0x5c975abb": "paused()",
    "funcSelectors:0xcd112382": "rebalanceStableBorrowRate(address asset,address user)",
    "funcSelectors:0x573ade81": "repay(address asset,uint256 amount,uint256 rateMode,address onBehalfOf)",
    "funcSelectors:0xb8d29276": "setConfiguration(address asset,uint256 configuration)",
    "funcSelectors:0xbedb86fb": "setPause(bool val)",
    "funcSelectors:0x1d2118f9": "setReserveInterestRateStrategyAddress(address asset,address rateStrategyAddress)",
    "funcSelectors:0x5a3b74b9": "setUserUseReserveAsCollateral(address asset,bool useAsCollateral)",
    "funcSelectors:0x94ba89a2": "swapBorrowRateMode(address asset,uint256 rateMode)",
    "funcSelectors:0x69328dec": "withdraw(address asset,uint256 amount,address to)",
    "funcSelectors:0xfd149529": "authorizeLendingPool(address lendingPool)",
    "funcSelectors:0x66514c97": "borrowETH(address ,uint256 amount,uint256 interesRateMode,uint16 referralCode)",
    "funcSelectors:0x474cf53d": "depositETH(address ,address onBehalfOf,uint16 referralCode)",
    "funcSelectors:0xeed88b8d": "emergencyEtherTransfer(address to,uint256 amount)",
    "funcSelectors:0xa3d5b255": "emergencyTokenTransfer(address token,address to,uint256 amount)",
    "funcSelectors:0xaffa8817": "getWETHAddress()",
    "funcSelectors:0x02c5fcf8": "repayETH(address ,uint256 amount,uint256 rateMode,address onBehalfOf)",
    "funcSelectors:0x80500d20": "withdrawETH(address ,uint256 amount,address to)",
    "funcSelectors:0xd4c40b6c": "withdrawETHWithPermit(address ,uint256 amount,address to,uint256 deadline,uint8 permitV,bytes32 permitR,bytes32 permitS)",
    "funcSelectors:0xf851a440": "admin()",
    "funcSelectors:0x5c60da1b": "implementation()",
    "funcSelectors:0xd1f57894": "initialize(address _logic,bytes _data)",
    "funcSelectors:0x3659cfe6": "upgradeTo(address newImplementation)",
    "funcSelectors:0x4f1ef286": "upgradeToAndCall(address newImplementation,bytes data)",
    "funcSelectors:0x026b1d5f": "getPool()",
    "funcSelectors:0x21b051fe": "batchSwap(uint8 kind,tuple[] swaps,address[] assets,tuple funds,int256[] limits,uint256 deadline)",
    "funcSelectors:0x7d3aeb96": "deregisterTokens(bytes32 poolId,address[] tokens)",
    "funcSelectors:0xd4ecadaa": "exitPool(bytes32 poolId,address sender,address recipient,tuple request)",
    "funcSelectors:0x5c38449e": "flashLoan(address recipient,address[] tokens,uint256[] amounts,bytes userData)",
    "funcSelectors:0x851c1bb3": "getActionId(bytes4 selector)",
    "funcSelectors:0xaaabadc5": "getAuthorizer()",
    "funcSelectors:0xed24911d": "getDomainSeparator()",
    "funcSelectors:0x0f5a6efa": "getInternalBalance(address user,address[] tokens)",
    "funcSelectors:0x90193b7c": "getNextNonce(address user)",
    "funcSelectors:0x1c0de051": "getPausedState()",
    "funcSelectors:0xf6c00927": "getPool(bytes32 poolId)",
    "funcSelectors:0xb05f8e48": "getPoolTokenInfo(bytes32 poolId,address token)",
    "funcSelectors:0xf94d4668": "getPoolTokens(bytes32 poolId)",
    "funcSelectors:0xd2946c2b": "getProtocolFeesCollector()",
    "funcSelectors:0xfec90d72": "hasApprovedRelayer(address user,address relayer)",
    "funcSelectors:0x854efd9b": "joinPool(bytes32 poolId,address sender,address recipient,tuple request)",
    "funcSelectors:0x03f4a834": "managePoolBalance(tuple[] ops)",
    "funcSelectors:0x1ec24dd9": "manageUserBalance(tuple[] ops)",
    "funcSelectors:0x60b8cb04": "queryBatchSwap(uint8 kind,tuple[] swaps,address[] assets,tuple funds)",
    "funcSelectors:0x09b2760f": "registerPool(uint8 specialization)",
    "funcSelectors:0x66a9c7d2": "registerTokens(bytes32 poolId,address[] tokens,address[] assetManagers)",
    "funcSelectors:0x058a628f": "setAuthorizer(address newAuthorizer)",
    "funcSelectors:0x16c38b3c": "setPaused(bool isPause)",
    "funcSelectors:0xfa6e671d": "setRelayerApproval(address sender,address relayer,bool approved)",
    "funcSelectors:0xc8fd2b5b": "swap(tuple singleSwap,tuple funds,uint256 limit,uint256 deadline)",
    "funcSelectors:0x8f283970": "changeAdmin(address newAdmin)",
    "errorSelectors:0x8164f842": "ApprovalFailed()",
    "errorSelectors:0xf27f64e4": "ERC20TransferFailed()",
    "errorSelectors:0x6d963f88": "EthTransferFailed()",
    "errorSelectors:0x06cc02d1": "InvalidSilo()",
    "errorSelectors:0x02549074": "InvalidSiloRepository()",
    "errorSelectors:0x73d39f9d": "TokenIsNotAContract()",
    "errorSelectors:0x25e9714f": "UnsupportedAction()",
    "funcSelectors:0xfab5b395": "execute(tuple[] _actions)",
    "funcSelectors:0xbde12718": "siloRepository()",
    "funcSelectors:0x25d5bf4e": "siloRouterPing()",
    "funcSelectors:0x17fcb39b": "wrappedNativeToken()",
    "funcSelectors:0x31dca466": "addRoutes(tuple[] _routes)",
    "funcSelectors:0xffcdf4ed": "disableRoute(uint256 _routeId)",
    "funcSelectors:0xb00890d9": "outboundTransferTo(tuple _userRequest)",
    "funcSelectors:0x6ccae054": "rescueFunds(address token,address userAddress,uint256 amount)",
    "funcSelectors:0x726f16d8": "routes(uint256 )",
    "funcSelectors:0x022490c8": "outboundTransferTo(uint256 _amount,address _from,address _to,address _token,uint256 _toChainId,bytes _data)",
    "funcSelectors:0x7b103999": "registry()",
    "funcSelectors:0xf887ea40": "router()",
    "funcSelectors:0xc57a8825": "updateRegistryAddress(address newRegistry)",
    "funcSelectors:0x607e20e3": "BAYC_PROVENANCE()",
    "funcSelectors:0xbb8a16bd": "MAX_APES()",
    "funcSelectors:0x18e20a38": "REVEAL_TIMESTAMP()",
    "funcSelectors:0x7a3f451e": "apePrice()",
    "funcSelectors:0x7d17fcbe": "emergencySetStartingIndexBlock()",
    "funcSelectors:0x34918dfd": "flipSaleState()",
    "funcSelectors:0x571dff3b": "maxApePurchase()",
    "funcSelectors:0xa723533e": "mintApe(uint256 numberOfTokens)",
    "funcSelectors:0xb0f67427": "reserveApes()",
    "funcSelectors:0xeb8d2444": "saleIsActive()",
    "funcSelectors:0x55f804b3": "setBaseURI(string _baseURI)",
    "funcSelectors:0x10969523": "setProvenanceHash(string provenanceHash)",
    "funcSelectors:0x018a2c37": "setRevealTimestamp(uint256 revealTimeStamp)",
    "funcSelectors:0xe9866550": "setStartingIndex()",
    "funcSelectors:0xcb774d47": "startingIndex()",
    "funcSelectors:0xe36d6498": "startingIndexBlock()",
    "funcSelectors:0x3ccfd60b": "withdraw()",
    "funcSelectors:0x83b43589": "initialize(address token,address governance,address rewards,string nameOverride,string symbolOverride)",
    "funcSelectors:0xa5b81fdf": "initialize(address token,address governance,address rewards,string nameOverride,string symbolOverride,address guardian)",
    "funcSelectors:0x538baeab": "initialize(address token,address governance,address rewards,string nameOverride,string symbolOverride,address guardian,address management)",
    "funcSelectors:0x25829410": "apiVersion()",
    "funcSelectors:0xc47f0027": "setName(string name)",
    "funcSelectors:0xb84c8246": "setSymbol(string symbol)",
    "funcSelectors:0xab033ea9": "setGovernance(address addr)",
    "funcSelectors:0x238efcbc": "acceptGovernance()",
    "funcSelectors:0xd4a22bde": "setManagement(address management)",
    "funcSelectors:0xec38a862": "setRewards(address _rewards)",
    "funcSelectors:0x7a550365": "setLockedProfitDegradation(uint256 degradation)",
    "funcSelectors:0xbdc8144b": "setDepositLimit(uint256 limit)",
    "funcSelectors:0x70897b23": "setPerformanceFee(uint256 fee)",
    "funcSelectors:0xfe56e232": "setManagementFee(uint256 fee)",
    "funcSelectors:0x8a0dac4a": "setGuardian(address newGuardian)",
    "funcSelectors:0x14c64402": "setEmergencyShutdown(bool active)",
    "funcSelectors:0x94148415": "setWithdrawalQueue(address[20] queue)",
    "funcSelectors:0x39509351": "increaseAllowance(address spender,uint256 addedValue)",
    "funcSelectors:0xa457c2d7": "decreaseAllowance(address spender,uint256 subtractedValue)",
    "funcSelectors:0x9fd5a6cf": "permit(address owner,address spender,uint256 amount,uint256 expiry,bytes signature)",
    "funcSelectors:0x01e1d114": "totalAssets()",
    "funcSelectors:0xb6b55f25": "deposit(uint256 _amount)",
    "funcSelectors:0x6e553f65": "deposit(uint256 _amount,address recipient)",
    "funcSelectors:0x75de2902": "maxAvailableShares()",
    "funcSelectors:0x00f714ce": "withdraw(uint256 maxShares,address recipient)",
    "funcSelectors:0xe63697c8": "withdraw(uint256 maxShares,address recipient,uint256 maxLoss)",
    "funcSelectors:0x99530b06": "pricePerShare()",
    "funcSelectors:0x14b4e26e": "addStrategy(address strategy,uint256 debtRatio,uint256 minDebtPerHarvest,uint256 maxDebtPerHarvest,uint256 performanceFee)",
    "funcSelectors:0x7c6a4f24": "updateStrategyDebtRatio(address strategy,uint256 debtRatio)",
    "funcSelectors:0xe722befe": "updateStrategyMinDebtPerHarvest(address strategy,uint256 minDebtPerHarvest)",
    "funcSelectors:0x4757a156": "updateStrategyMaxDebtPerHarvest(address strategy,uint256 maxDebtPerHarvest)",
    "funcSelectors:0xd0194ed6": "updateStrategyPerformanceFee(address strategy,uint256 performanceFee)",
    "funcSelectors:0x6cb56d19": "migrateStrategy(address oldVersion,address newVersion)",
    "funcSelectors:0xa0e4af9a": "revokeStrategy()",
    "funcSelectors:0xbb994d48": "revokeStrategy(address strategy)",
    "funcSelectors:0xf76e4caa": "addStrategyToQueue(address strategy)",
    "funcSelectors:0xb22439f5": "removeStrategyFromQueue(address strategy)",
    "funcSelectors:0xbf3759b5": "debtOutstanding()",
    "funcSelectors:0xbdcf36bb": "debtOutstanding(address strategy)",
    "funcSelectors:0x112c1f9b": "creditAvailable()",
    "funcSelectors:0xd7648013": "creditAvailable(address strategy)",
    "funcSelectors:0x153c27c4": "availableDepositLimit()",
    "funcSelectors:0xd3406abd": "expectedReturn()",
    "funcSelectors:0x33586b67": "expectedReturn(address strategy)",
    "funcSelectors:0xa1d9bafc": "report(uint256 gain,uint256 loss,uint256 _debtPayment)",
    "funcSelectors:0x01681a62": "sweep(address token)",
    "funcSelectors:0x6ea056a9": "sweep(address token,uint256 amount)",
    "funcSelectors:0xfc0c546a": "token()",
    "funcSelectors:0x5aa6e675": "governance()",
    "funcSelectors:0x88a8d602": "management()",
    "funcSelectors:0x452a9320": "guardian()",
    "funcSelectors:0x39ebf823": "strategies(address arg0)",
    "funcSelectors:0xc822adda": "withdrawalQueue(uint256 arg0)",
    "funcSelectors:0x3403c2fc": "emergencyShutdown()",
    "funcSelectors:0xecf70858": "depositLimit()",
    "funcSelectors:0xcea55f57": "debtRatio()",
    "funcSelectors:0xfc7b9c18": "totalDebt()",
    "funcSelectors:0xc3535b52": "lastReport()",
    "funcSelectors:0x3629c8de": "activation()",
    "funcSelectors:0x44b81396": "lockedProfit()",
    "funcSelectors:0x42232716": "lockedProfitDegradation()",
    "funcSelectors:0x9ec5a894": "rewards()",
    "funcSelectors:0xa6f7f5d6": "managementFee()",
    "funcSelectors:0x87788782": "performanceFee()",
    "funcSelectors:0x7ecebe00": "nonces(address owner)",
    "funcSelectors:0x1ce6236f": "allowedToDrain()",
    "funcSelectors:0x9c4ae2d0": "deploy(bytes code,uint256 salt)",
    "funcSelectors:0x49c81579": "deployAndCall(bytes code,uint256 salt,address callee,bytes data)",
    "funcSelectors:0x358fadac": "deployAndExecute(bytes code,uint256 salt,tuple[] txns,bytes signature)",
    "funcSelectors:0xd9caed12": "withdraw(address token,address to,uint256 tokenAmount)",
    "funcSelectors:0x31131761": "batchCall(tuple[] txns)",
    "funcSelectors:0xc066f75e": "ADXToken()",
    "funcSelectors:0xb6dcaf65": "ADXUSDOracle()",
    "funcSelectors:0x996cba68": "claim(address tokenOut,address to,uint256 amount)",
    "funcSelectors:0x839df945": "commitments(bytes32 )",
    "funcSelectors:0xa59f3e0c": "enter(uint256 amount)",
    "funcSelectors:0xf893d346": "enterTo(address recipient,uint256 amount)",
    "funcSelectors:0x9b4ee064": "leave(uint256 shares,bool skipMint)",
    "funcSelectors:0x1322ed44": "limitLastReset()",
    "funcSelectors:0xc6257b4c": "limitRemaining()",
    "funcSelectors:0xe336ac44": "lockedShares(address )",
    "funcSelectors:0x2017422d": "maxDailyPenaltiesPromilles()",
    "funcSelectors:0xc7f9218a": "penalize(uint256 adxAmount)",
    "funcSelectors:0xd505accf": "permit(address _owner,address _spender,uint256 _value,uint256 _deadline,uint8 _v,bytes32 _r,bytes32 _s)",
    "funcSelectors:0x8a07b419": "rageLeave(uint256 shares,bool skipMint)",
    "funcSelectors:0x6e6eff3e": "rageReceivedPromilles()",
    "funcSelectors:0x82734027": "setDailyPenaltyMax(uint256 max)",
    "funcSelectors:0x070141c1": "setRageReceived(uint256 rageReceived)",
    "funcSelectors:0xc4911ee0": "setTimeToUnbond(uint256 time)",
    "funcSelectors:0x38156a97": "setWhitelistedClaimToken(address token,bool whitelisted)",
    "funcSelectors:0x447b15f4": "shareValue()",
    "funcSelectors:0xadec4a50": "timeToUnbond()",
    "funcSelectors:0x8ec0a9eb": "unbondingCommitmentWorth(address owner,uint256 shares,uint256 unlocksAt)",
    "funcSelectors:0x2681f7e4": "uniswap()",
    "funcSelectors:0x3a5381b5": "validator()",
    "funcSelectors:0x72a3b8b3": "whitelistedClaimTokens(address )",
    "funcSelectors:0x33cfcd3b": "withdraw(uint256 shares,uint256 unlocksAt,bool skipMint)",
    "funcSelectors:0x0eefdbad": "tokenTransferProxy()",
    "funcSelectors:0x10796a47": "staticCall(address target,bytes calldata,bytes extradata)",
    "funcSelectors:0x14350c24": "changeMinimumMakerProtocolFee(uint256 newMinimumMakerProtocolFee)",
    "funcSelectors:0x1a6b13e2": "changeMinimumTakerProtocolFee(uint256 newMinimumTakerProtocolFee)",
    "funcSelectors:0x239e83df": "guardedArrayReplace(bytes array,bytes desired,bytes mask)",
    "funcSelectors:0x28a8ee68": "minimumTakerProtocolFee()",
    "funcSelectors:0x31e63199": "codename()",
    "funcSelectors:0x3464af6a": "testCopyAddress(address addr)",
    "funcSelectors:0x3e1e292a": "testCopy(bytes arrToCopy)",
    "funcSelectors:0x3f67ee0d": "calculateCurrentPrice_(address[7] addrs,uint256[9] uints,uint8 feeMethod,uint8 side,uint8 saleKind,uint8 howToCall,bytes calldata,bytes replacementPattern,bytes staticExtradata)",
    "funcSelectors:0x514f0330": "changeProtocolFeeRecipient(address _protocolFeeRecipient)",
    "funcSelectors:0x54fd4d50": "version()",
    "funcSelectors:0x562b2ebc": "orderCalldataCanMatch(bytes buyCalldata,bytes buyReplacementPattern,bytes sellCalldata,bytes sellReplacementPattern)",
    "funcSelectors:0x60bef33a": "validateOrder_(address[7] addrs,uint256[9] uints,uint8 feeMethod,uint8 side,uint8 saleKind,uint8 howToCall,bytes calldata,bytes replacementPattern,bytes staticExtradata,uint8 v,bytes32 r,bytes32 s)",
    "funcSelectors:0x63d36c0b": "calculateFinalPrice(uint8 side,uint8 saleKind,uint256 basePrice,uint256 extra,uint256 listingTime,uint256 expirationTime)",
    "funcSelectors:0x64df049e": "protocolFeeRecipient()",
    "funcSelectors:0x71d02b38": "hashOrder_(address[7] addrs,uint256[9] uints,uint8 feeMethod,uint8 side,uint8 saleKind,uint8 howToCall,bytes calldata,bytes replacementPattern,bytes staticExtradata)",
    "funcSelectors:0x72593b4c": "ordersCanMatch_(address[14] addrs,uint256[18] uints,uint8[8] feeMethodsSidesKindsHowToCalls,bytes calldataBuy,bytes calldataSell,bytes replacementPatternBuy,bytes replacementPatternSell,bytes staticExtradataBuy,bytes staticExtradataSell)",
    "funcSelectors:0x79666868": "approveOrder_(address[7] addrs,uint256[9] uints,uint8 feeMethod,uint8 side,uint8 saleKind,uint8 howToCall,bytes calldata,bytes replacementPattern,bytes staticExtradata,bool orderbookInclusionDesired)",
    "funcSelectors:0x7ccefc52": "minimumMakerProtocolFee()",
    "funcSelectors:0x7d766981": "hashToSign_(address[7] addrs,uint256[9] uints,uint8 feeMethod,uint8 side,uint8 saleKind,uint8 howToCall,bytes calldata,bytes replacementPattern,bytes staticExtradata)",
    "funcSelectors:0x8076f005": "cancelledOrFinalized(bytes32 )",
    "funcSelectors:0xa25eb5d9": "exchangeToken()",
    "funcSelectors:0xa8a41c70": "cancelOrder_(address[7] addrs,uint256[9] uints,uint8 feeMethod,uint8 side,uint8 saleKind,uint8 howToCall,bytes calldata,bytes replacementPattern,bytes staticExtradata,uint8 v,bytes32 r,bytes32 s)",
    "funcSelectors:0xab834bab": "atomicMatch_(address[14] addrs,uint256[18] uints,uint8[8] feeMethodsSidesKindsHowToCalls,bytes calldataBuy,bytes calldataSell,bytes replacementPatternBuy,bytes replacementPatternSell,bytes staticExtradataBuy,bytes staticExtradataSell,uint8[2] vs,bytes32[5] rssMetadata)",
    "funcSelectors:0xca595b9a": "validateOrderParameters_(address[7] addrs,uint256[9] uints,uint8 feeMethod,uint8 side,uint8 saleKind,uint8 howToCall,bytes calldata,bytes replacementPattern,bytes staticExtradata)",
    "funcSelectors:0xcae6047f": "INVERSE_BASIS_POINT()",
    "funcSelectors:0xd537e131": "calculateMatchPrice_(address[14] addrs,uint256[18] uints,uint8[8] feeMethodsSidesKindsHowToCalls,bytes calldataBuy,bytes calldataSell,bytes replacementPatternBuy,bytes replacementPatternSell,bytes staticExtradataBuy,bytes staticExtradataSell)",
    "funcSelectors:0xe57d4adb": "approvedOrders(bytes32 )",
    "errorSelectors:0x3f009769": "CreatorPayoutAddressCannotBeZeroAddress()",
    "errorSelectors:0x798701ac": "DuplicateFeeRecipient()",
    "errorSelectors:0xd48fd2e6": "DuplicatePayer()",
    "errorSelectors:0x5136e8d5": "FeeRecipientCannotBeZeroAddress()",
    "errorSelectors:0xf477d26f": "FeeRecipientNotAllowed()",
    "errorSelectors:0x0998fbbd": "FeeRecipientNotPresent()",
    "errorSelectors:0x0d35e921": "IncorrectPayment(uint256 got,uint256 want)",
    "errorSelectors:0x3329f932": "InvalidFeeBps(uint256 feeBps)",
    "errorSelectors:0x09bde339": "InvalidProof()",
    "errorSelectors:0xd855c4f4": "InvalidSignature(address recoveredSigner)",
    "errorSelectors:0x6e1d357d": "InvalidSignedEndTime(uint256 got,uint256 maximum)",
    "errorSelectors:0x79fc44ed": "InvalidSignedFeeBps(uint256 got,uint256 minimumOrMaximum)",
    "errorSelectors:0x6d029c50": "InvalidSignedMaxTokenSupplyForStage(uint256 got,uint256 maximum)",
    "errorSelectors:0x4f430578": "InvalidSignedMaxTotalMintableByWallet(uint256 got,uint256 maximum)",
    "errorSelectors:0xa0c3ed0a": "InvalidSignedMintPrice(uint256 got,uint256 minimum)",
    "errorSelectors:0x333d33d0": "InvalidSignedStartTime(uint256 got,uint256 minimum)",
    "errorSelectors:0x198441cb": "MintQuantityCannotBeZero()",
    "errorSelectors:0xedc01273": "MintQuantityExceedsMaxMintedPerWallet(uint256 total,uint256 allowed)",
    "errorSelectors:0xe12d2314": "MintQuantityExceedsMaxSupply(uint256 total,uint256 maxSupply)",
    "errorSelectors:0xb98dabea": "MintQuantityExceedsMaxTokenSupplyForStage(uint256 total,uint256 maxTokenSupplyForStage)",
    "errorSelectors:0x13da22f2": "NotActive(uint256 currentTimestamp,uint256 startTimestamp,uint256 endTimestamp)",
    "errorSelectors:0x32c5d8cf": "OnlyINonFungibleSeaDropToken(address sender)",
    "errorSelectors:0xd34468bc": "PayerCannotBeZeroAddress()",
    "errorSelectors:0x1fe7da08": "PayerNotAllowed()",
    "errorSelectors:0x4cc11713": "PayerNotPresent()",
    "errorSelectors:0x900bb2c9": "SignatureAlreadyUsed()",
    "errorSelectors:0xdb8b2fad": "SignedMintsMustRestrictFeeRecipients()",
    "errorSelectors:0xcfb6108a": "SignerCannotBeZeroAddress()",
    "errorSelectors:0xb40637e4": "SignerNotPresent()",
    "errorSelectors:0x17817dd8": "TokenGatedDropAllowedNftTokenCannotBeDropToken()",
    "errorSelectors:0x67156a2d": "TokenGatedDropAllowedNftTokenCannotBeZeroAddress()",
    "errorSelectors:0x2b60a32f": "TokenGatedDropStageNotPresent()",
    "errorSelectors:0xda8c7bc7": "TokenGatedNotTokenOwner(address nftContract,address allowedNftToken,uint256 allowedNftTokenId)",
    "errorSelectors:0xa93f299b": "TokenGatedTokenIdAlreadyRedeemed(address nftContract,address allowedNftToken,uint256 allowedNftTokenId)",
    "funcSelectors:0x32bf11f5": "getAllowListMerkleRoot(address nftContract)",
    "funcSelectors:0x68632274": "getAllowedFeeRecipients(address nftContract)",
    "funcSelectors:0x88aa3d37": "getAllowedNftTokenIdIsRedeemed(address nftContract,address allowedNftToken,uint256 allowedNftTokenId)",
    "funcSelectors:0x5cb3c4d3": "getCreatorPayoutAddress(address nftContract)",
    "funcSelectors:0x322e75d1": "getFeeRecipientIsAllowed(address nftContract,address feeRecipient)",
    "funcSelectors:0xe583141d": "getPayerIsAllowed(address nftContract,address payer)",
    "funcSelectors:0x7c35b982": "getPayers(address nftContract)",
    "funcSelectors:0xbc6a629c": "getPublicDrop(address nftContract)",
    "funcSelectors:0x81bf9af3": "getSignedMintValidationParams(address nftContract,address signer)",
    "funcSelectors:0x7e3ba6af": "getSigners(address nftContract)",
    "funcSelectors:0x2db526eb": "getTokenGatedAllowedTokens(address nftContract)",
    "funcSelectors:0x0b0e8a6e": "getTokenGatedDrop(address nftContract,address allowedNftToken)",
    "funcSelectors:0xbee6ee81": "mintAllowList(address nftContract,address feeRecipient,address minterIfNotPayer,uint256 quantity,tuple mintParams,bytes32[] proof)",
    "funcSelectors:0x81436ff3": "mintAllowedTokenHolder(address nftContract,address feeRecipient,address minterIfNotPayer,tuple mintParams)",
    "funcSelectors:0x161ac21f": "mintPublic(address nftContract,address feeRecipient,address minterIfNotPayer,uint256 quantity)",
    "funcSelectors:0xf5d31682": "mintSigned(address nftContract,address feeRecipient,address minterIfNotPayer,uint256 quantity,tuple mintParams,uint256 salt,bytes signature)",
    "funcSelectors:0xb4d2858f": "updateAllowList(tuple allowListData)",
    "funcSelectors:0x8e7d1e43": "updateAllowedFeeRecipient(address feeRecipient,bool allowed)",
    "funcSelectors:0x12738db8": "updateCreatorPayoutAddress(address _payoutAddress)",
    "funcSelectors:0xb957d0cb": "updateDropURI(string dropURI)",
    "funcSelectors:0x7f2a5cca": "updatePayer(address payer,bool allowed)",
    "funcSelectors:0x9c329327": "updatePublicDrop(tuple publicDrop)",
    "funcSelectors:0xb45b28f1": "updateSignedMintValidationParams(address signer,tuple signedMintValidationParams)",
    "funcSelectors:0xc4418ed8": "updateTokenGatedDrop(address allowedNftToken,tuple dropStage)",
    "funcSelectors:0x06bf53d0": "LIMIT_ORDER_RFQ_TYPEHASH()",
    "funcSelectors:0x825caba1": "cancelOrderRFQ(uint256 orderInfo)",
    "funcSelectors:0x83197ef0": "destroy()",
    "funcSelectors:0x567fd222": "fillOrderRFQ(tuple order,bytes signature,uint256 makingAmount,uint256 takingAmount)",
    "funcSelectors:0xd5fa1f14": "fillOrderRFQTo(tuple order,bytes signature,uint256 makingAmount,uint256 takingAmount,address target)",
    "funcSelectors:0x36e3aaaf": "fillOrderRFQToWithPermit(tuple order,bytes signature,uint256 makingAmount,uint256 takingAmount,address target,bytes permit)",
    "funcSelectors:0x56f16124": "invalidatorForOrderRFQ(address maker,uint256 slot)",
    "funcSelectors:0x78e3214f": "rescueFunds(address token,uint256 amount)",
    "funcSelectors:0x6b1ef56f": "swap(address caller,tuple desc,bytes data)",
    "funcSelectors:0xe449022e": "uniswapV3Swap(uint256 amount,uint256 minReturn,uint256[] pools)",
    "funcSelectors:0xbc80f1a8": "uniswapV3SwapTo(address recipient,uint256 amount,uint256 minReturn,uint256[] pools)",
    "funcSelectors:0x2521b930": "uniswapV3SwapToWithPermit(address recipient,address srcToken,uint256 amount,uint256 minReturn,uint256[] pools,bytes permit)",
    "funcSelectors:0x2e95b6c8": "unoswap(address srcToken,uint256 amount,uint256 minReturn,bytes32[] pools)",
    "funcSelectors:0xa1251d75": "unoswapWithPermit(address srcToken,uint256 amount,uint256 minReturn,bytes32[] pools,bytes permit)",
    "funcSelectors:0x6afdd850": "PERMIT2()",
    "funcSelectors:0xbd99d7e1": "_roles(bytes32 )",
    "funcSelectors:0x47786d00": "execute(tuple[] txs,int8 eventType,bytes32 eventData,bytes signature)",
    "funcSelectors:0xfc442176": "init(address[] _dests,address[] _tokens,address[] _providers,address[] _providerSpenders,address[] _signers,address _ownerAddress)",
    "funcSelectors:0xd4808566": "payWithAnyToken(tuple orderInfo,tuple[] swapInfo,tuple paymentMethod)",
    "funcSelectors:0xea4ab55d": "setDestinations(address[] dests,address[] tokens,bytes32 flag)",
    "funcSelectors:0x63c48dc9": "setProviders(address[] _providers,address[] _providerSpenders,bytes32 flag)",
    "funcSelectors:0xf1469009": "setSigners(address[] signers,bytes32 flag)",
    "funcSelectors:0x13f73eaa": "_blocked(address )",
    "funcSelectors:0xe8a3d485": "contractURI()",
    "funcSelectors:0xc34b3a41": "denomination(uint256 tokenId)",
    "funcSelectors:0xea2707d7": "init(address[] signers_,address[] forwarders_,address[] minters_,address ownerAddress_,string contractMetadataUri_,address royaltiesReceiver_,uint96 royaltiesFeeNumerator_)",
    "funcSelectors:0xb608b5f7": "mint(tuple order,tuple[] tokens)",
    "funcSelectors:0xf4134964": "redeem(tuple order,uint256[] burnTokenId,tuple[] tokens)",
    "funcSelectors:0x2a55205a": "royaltyInfo(uint256 tokenId,uint256 salePrice)",
    "funcSelectors:0xbcca0d2c": "setBlocked(address[] addr_,bytes32 flag)",
    "funcSelectors:0x938e3d7b": "setContractURI(string uri)",
    "funcSelectors:0x04634d8d": "setDefaultRoyalty(address receiver,uint96 feeNumerator)",
    "funcSelectors:0xbcf1ef13": "setRoles(address[] addr_,bytes32 roleFlag,bytes32 action)",
    "funcSelectors:0x831867f4": "transferFromMany(address[] from,address[] to,uint256[] tokenId)",
    "funcSelectors:0x7398b7ea": "ACC_CAKE_PRECISION()",
    "funcSelectors:0xcc6db2da": "BOOST_PRECISION()",
    "funcSelectors:0x4ca6ef28": "CAKE()",
    "funcSelectors:0xe39e1323": "CAKE_RATE_TOTAL_PRECISION()",
    "funcSelectors:0x39aae5ba": "MASTERCHEF_CAKE_PER_BLOCK()",
    "funcSelectors:0xedd8b170": "MASTER_CHEF()",
    "funcSelectors:0x61621aaa": "MASTER_PID()",
    "funcSelectors:0x69b02128": "MAX_BOOST_PRECISION()",
    "funcSelectors:0xc507aeaa": "add(uint256 _allocPoint,address _lpToken,bool _isRegular,bool _withUpdate)",
    "funcSelectors:0xdfcedeee": "boostContract()",
    "funcSelectors:0x81bdf98c": "burnAdmin()",
    "funcSelectors:0x777a97f8": "burnCake(bool _withUpdate)",
    "funcSelectors:0x1e9b828b": "cakePerBlock(bool _isRegular)",
    "funcSelectors:0x9dcc1b5f": "cakePerBlockToBurn()",
    "funcSelectors:0xe0f91f6c": "cakeRateToBurn()",
    "funcSelectors:0xaa47bc8e": "cakeRateToRegularFarm()",
    "funcSelectors:0x1ce06d57": "cakeRateToSpecialFarm()",
    "funcSelectors:0xe2bbb158": "deposit(uint256 _value,uint256 _forTime)",
    "funcSelectors:0x5312ea8e": "emergencyWithdraw(uint256 _pid)",
    "funcSelectors:0x033186e8": "getBoostMultiplier(address _user,uint256 _pid)",
    "funcSelectors:0x4f70b15a": "harvestFromMasterChef()",
    "funcSelectors:0x19ab453c": "init(address dummyToken)",
    "funcSelectors:0x78db4c34": "lastBurnedBlock()",
    "funcSelectors:0x78ed5d1f": "lpToken(uint256 )",
    "funcSelectors:0x630b5ba1": "massUpdatePools()",
    "funcSelectors:0x1175a1dd": "pendingCake(uint256 _pid,address _user)",
    "funcSelectors:0x1526fe27": "poolInfo(uint256 )",
    "funcSelectors:0x081e3eda": "poolLength()",
    "funcSelectors:0x64482f79": "set(uint256 _pid,uint256 _allocPoint,bool _withUpdate)",
    "funcSelectors:0xc40d337b": "totalRegularAllocPoint()",
    "funcSelectors:0x99d7e84a": "totalSpecialAllocPoint()",
    "funcSelectors:0x9dd2fcc3": "updateBoostContract(address _newBoostContract)",
    "funcSelectors:0x041a84c9": "updateBoostMultiplier(address _user,uint256 _pid,uint256 _newMultiplier)",
    "funcSelectors:0x0bb844bc": "updateBurnAdmin(address _newAdmin)",
    "funcSelectors:0xdc6363df": "updateCakeRate(uint256 _burnRate,uint256 _regularFarmRate,uint256 _specialFarmRate,bool _withUpdate)",
    "funcSelectors:0x51eb05a6": "updatePool(uint256 _pid)",
    "funcSelectors:0xac1d0609": "updateWhiteList(address _user,bool _isValid)",
    "funcSelectors:0x93f1a40b": "userInfo(uint256 ,address )",
    "funcSelectors:0x372c12b1": "whiteList(address )",
    "funcSelectors:0x441a3e70": "withdraw(uint256 _pid,uint256 _amount)",
    "funcSelectors:0xa82719c8": "bondingCurveAllowed(address )",
    "funcSelectors:0x1fba95e8": "callAllowed(address )",
    "funcSelectors:0x9c3c11d2": "changeProtocolFeeMultiplier(uint256 _protocolFeeMultiplier)",
    "funcSelectors:0x2b008738": "createPairERC20(tuple params)",
    "funcSelectors:0xce9c095d": "createPairETH(address _nft,address _bondingCurve,address _assetRecipient,uint8 _poolType,uint128 _delta,uint96 _fee,uint128 _spotPrice,uint256[] _initialNFTIDs)",
    "funcSelectors:0x1cad5a40": "depositERC20(address token,address recipient,uint256 amount)",
    "funcSelectors:0x2cdb394b": "depositNFTs(address _nft,uint256[] ids,address recipient)",
    "funcSelectors:0xa427f1ad": "enumerableERC20Template()",
    "funcSelectors:0xad2e5770": "enumerableETHTemplate()",
    "funcSelectors:0x08f25a8f": "isPair(address potentialPair,uint8 variant)",
    "funcSelectors:0x4c6bc433": "missingEnumerableERC20Template()",
    "funcSelectors:0x004885ea": "missingEnumerableETHTemplate()",
    "funcSelectors:0x1ce4c78b": "protocolFeeMultiplier()",
    "funcSelectors:0xa93ec68b": "routerStatus(address )",
    "funcSelectors:0x4bf107c1": "setBondingCurveAllowed(address bondingCurve,bool isAllowed)",
    "funcSelectors:0xebd0f693": "setCallAllowed(address target,bool isAllowed)",
    "funcSelectors:0x6cc88edb": "setRouterAllowed(address _router,bool isAllowed)",
    "funcSelectors:0xcc5bc20b": "withdrawERC20ProtocolFees(address token,uint256 amount)",
    "funcSelectors:0xb483eddc": "withdrawETHProtocolFees()",
    "funcSelectors:0x4b456d0c": "pairTransferERC20From(address token,address from,address to,uint256 amount,uint8 variant)",
    "funcSelectors:0x748ff339": "pairTransferNFTFrom(address nft,address from,address to,uint256 id,uint8 variant)",
    "funcSelectors:0xed120367": "robustSwapERC20ForAnyNFTs(tuple[] swapList,uint256 inputAmount,address nftRecipient,uint256 deadline)",
    "funcSelectors:0xcdefcf27": "robustSwapERC20ForSpecificNFTs(tuple[] swapList,uint256 inputAmount,address nftRecipient,uint256 deadline)",
    "funcSelectors:0x9d6c7099": "robustSwapERC20ForSpecificNFTsAndNFTsToToken(tuple params)",
    "funcSelectors:0x7a349ab6": "robustSwapETHForAnyNFTs(tuple[] swapList,address ethRecipient,address nftRecipient,uint256 deadline)",
    "funcSelectors:0x90725bfb": "robustSwapETHForSpecificNFTs(tuple[] swapList,address ethRecipient,address nftRecipient,uint256 deadline)",
    "funcSelectors:0x871f8111": "robustSwapETHForSpecificNFTsAndNFTsToToken(tuple params)",
    "funcSelectors:0xce090e8b": "robustSwapNFTsForToken(tuple[] swapList,address tokenRecipient,uint256 deadline)",
    "funcSelectors:0x22921dd5": "swapERC20ForAnyNFTs(tuple[] swapList,uint256 inputAmount,address nftRecipient,uint256 deadline)",
    "funcSelectors:0xcbaf01b2": "swapERC20ForSpecificNFTs(tuple[] swapList,uint256 inputAmount,address nftRecipient,uint256 deadline)",
    "funcSelectors:0x94f5738c": "swapETHForAnyNFTs(tuple[] swapList,address ethRecipient,address nftRecipient,uint256 deadline)",
    "funcSelectors:0x000b5d2f": "swapETHForSpecificNFTs(tuple[] swapList,address ethRecipient,address nftRecipient,uint256 deadline)",
    "funcSelectors:0x545cc292": "swapNFTsForAnyNFTsThroughERC20(tuple trade,uint256 inputAmount,uint256 minOutput,address nftRecipient,uint256 deadline)",
    "funcSelectors:0xfb7c988b": "swapNFTsForAnyNFTsThroughETH(tuple trade,uint256 minOutput,address ethRecipient,address nftRecipient,uint256 deadline)",
    "funcSelectors:0x2cc7d1e1": "swapNFTsForSpecificNFTsThroughERC20(tuple trade,uint256 inputAmount,uint256 minOutput,address nftRecipient,uint256 deadline)",
    "funcSelectors:0x347364ce": "swapNFTsForSpecificNFTsThroughETH(tuple trade,uint256 minOutput,address ethRecipient,address nftRecipient,uint256 deadline)",
    "funcSelectors:0x31079460": "swapNFTsForToken(tuple[] swapList,uint256 minOutput,address tokenRecipient,uint256 deadline)",
    "errorSelectors:0xe4f2c5ac": "BondingCurveError(uint8 error)",
    "errorSelectors:0xedf1b1fc": "Ownable_NewOwnerZeroAddress()",
    "errorSelectors:0x5eee3ad1": "Ownable_NotOwner()",
    "funcSelectors:0x3bfa67fe": "assetRecipient()",
    "funcSelectors:0xeff1d50e": "bondingCurve()",
    "funcSelectors:0x1b8b921d": "call(address target,bytes data)",
    "funcSelectors:0xf4629549": "changeAssetRecipient(address newRecipient)",
    "funcSelectors:0x6809f664": "changeDelta(uint128 newDelta)",
    "funcSelectors:0x6b7a2200": "changeFee(uint96 newFee)",
    "funcSelectors:0xd8a1890c": "changeSpotPrice(uint128 newSpotPrice)",
    "funcSelectors:0x12b495a8": "delta()",
    "funcSelectors:0xddca3f43": "fee()",
    "funcSelectors:0x2f4fefaf": "getAllHeldIds()",
    "funcSelectors:0x79eac6c2": "getAssetRecipient()",
    "funcSelectors:0xa5cb2b91": "getBuyNFTQuote(uint256 numNFTs)",
    "funcSelectors:0x0c295e56": "getSellNFTQuote(uint256 numNFTs)",
    "funcSelectors:0xfd17aef9": "initialize(address _owner,address _assetRecipient,uint128 _delta,uint96 _fee,uint128 _spotPrice)",
    "funcSelectors:0x1e9701d4": "multicall(bytes[] calls,bool revertOnFail)",
    "funcSelectors:0x47ccca02": "nft()",
    "funcSelectors:0x3053fc58": "pairVariant()",
    "funcSelectors:0xb1dd61b6": "poolType()",
    "funcSelectors:0x398482d8": "spotPrice()",
    "funcSelectors:0xb1d3f1c1": "swapNFTsForToken(uint256[] nftIds,uint256 minExpectedTokenOutput,address tokenRecipient,bool isRouter,address routerCaller)",
    "funcSelectors:0x28b8aee1": "swapTokenForAnyNFTs(uint256 numNFTs,uint256 maxExpectedTokenInput,address nftRecipient,bool isRouter,address routerCaller)",
    "funcSelectors:0x6d8b99f7": "swapTokenForSpecificNFTs(uint256[] nftIds,uint256 maxExpectedTokenInput,address nftRecipient,bool isRouter,address routerCaller)",
    "funcSelectors:0x90386bbf": "withdrawAllETH()",
    "funcSelectors:0xa5ceac99": "withdrawERC1155(address a,uint256[] ids,uint256[] amounts)",
    "funcSelectors:0xa1db9782": "withdrawERC20(address a,uint256 amount)",
    "funcSelectors:0x13edab81": "withdrawERC721(address a,uint256[] nftIds)",
    "funcSelectors:0xf14210a6": "withdrawETH(uint256 amount)",
    "errorSelectors:0x6b2f2183": "AmountTooBig()",
    "errorSelectors:0xa020d7b8": "HighFee()",
    "errorSelectors:0x52f17a74": "HighPlatformFeeRatio()",
    "errorSelectors:0x8b52594f": "IntervalNotAllowed()",
    "errorSelectors:0x89db1695": "InvalidAllowedTokensInput()",
    "errorSelectors:0x58d620b3": "InvalidFee()",
    "errorSelectors:0x5fabb610": "InvalidInterval()",
    "errorSelectors:0xbf3cad0b": "InvalidMask()",
    "errorSelectors:0x5dd49b5d": "InvalidPairs()",
    "errorSelectors:0xce7e065e": "InvalidPosition()",
    "errorSelectors:0xc1ab6dc1": "InvalidToken()",
    "errorSelectors:0x672215de": "InvalidTokens()",
    "errorSelectors:0xd562e29f": "LiquidityNotReturned()",
    "errorSelectors:0x8df1af62": "NoSwapsToExecute()",
    "errorSelectors:0x60acc76a": "PositionDoesNotMatchToken()",
    "errorSelectors:0xda045aa0": "UnallowedToken()",
    "errorSelectors:0x5c427cd9": "UnauthorizedCaller()",
    "errorSelectors:0xd92e233d": "ZeroAddress()",
    "errorSelectors:0x1f2a2005": "ZeroAmount()",
    "errorSelectors:0x792432d6": "ZeroSwaps()",
    "funcSelectors:0x7d361dd3": "IMMEDIATE_ROLE()",
    "funcSelectors:0xbc063e1a": "MAX_FEE()",
    "funcSelectors:0x1b8b8c34": "MAX_PLATFORM_FEE_RATIO()",
    "funcSelectors:0xfc448158": "PLATFORM_WITHDRAW_ROLE()",
    "funcSelectors:0x64857370": "PRIVILEGED_SWAPPER_ROLE()",
    "funcSelectors:0x4eeeb3eb": "TIME_LOCKED_ROLE()",
    "funcSelectors:0x0b1aa984": "accumRatio(address ,address ,bytes1 ,uint32 )",
    "funcSelectors:0x582cf84b": "activeSwapIntervals(address ,address )",
    "funcSelectors:0x3feb1493": "addSwapIntervalsToAllowedList(uint32[] _swapIntervals)",
    "funcSelectors:0x480e5da1": "allowedSwapIntervals()",
    "funcSelectors:0xe744092e": "allowedTokens(address )",
    "funcSelectors:0xd99dfb1d": "deposit(address _from,address _to,uint256 _amount,uint32 _amountOfSwaps,uint32 _swapInterval,address _owner,tuple[] _permissions)",
    "funcSelectors:0x8830d937": "deposit(address _from,address _to,uint256 _amount,uint32 _amountOfSwaps,uint32 _swapInterval,address _owner,tuple[] _permissions,bytes _miscellaneous)",
    "funcSelectors:0x6ca411e4": "getNextSwapInfo(address[] _tokens,tuple[] _pairs,bool _calculatePrivilegedAvailability,bytes _oracleData)",
    "funcSelectors:0xded700a6": "increasePosition(uint256 _positionId,uint256 _amount,uint32 _newAmountOfSwaps)",
    "funcSelectors:0x7dc0d1d0": "oracle()",
    "funcSelectors:0xcc7a2049": "permissionManager()",
    "funcSelectors:0xc67e32e9": "platformBalance(address )",
    "funcSelectors:0x57ae1cec": "platformFeeRatio()",
    "funcSelectors:0xf1accf39": "reducePosition(uint256 _positionId,uint256 _amount,uint32 _newAmountOfSwaps,address _recipient)",
    "funcSelectors:0x7d8e8603": "removeSwapIntervalsFromAllowedList(uint32[] _swapIntervals)",
    "funcSelectors:0x74ae623b": "setAllowedTokens(address[] _tokens,bool[] _allowed)",
    "funcSelectors:0x7adbf973": "setOracle(address _oracle)",
    "funcSelectors:0x6eefd134": "setPlatformFeeRatio(uint16 _platformFeeRatio)",
    "funcSelectors:0xd6d788c3": "setSwapFee(uint32 _swapFee)",
    "funcSelectors:0xbe0cd37b": "swap(address[] _tokens,tuple[] _pairsToSwap,address _rewardRecipient,address _callbackHandler,uint256[] _borrow,bytes _callbackData,bytes _oracleData)",
    "funcSelectors:0x4aa91aee": "swapAmountDelta(address ,address ,bytes1 ,uint32 )",
    "funcSelectors:0x808ba8e0": "swapData(address ,address ,bytes1 )",
    "funcSelectors:0x54cf2aeb": "swapFee()",
    "funcSelectors:0x72ada4c5": "terminate(uint256 _positionId,address _recipientUnswapped,address _recipientSwapped)",
    "funcSelectors:0x16cd7af8": "tokenMagnitude(address )",
    "funcSelectors:0x36639580": "totalCreatedPositions()",
    "funcSelectors:0x3f4ba83a": "unpause()",
    "funcSelectors:0x5b6fd01d": "userPosition(uint256 _positionId)",
    "funcSelectors:0xd044082f": "withdrawFromPlatformBalance(tuple[] _amounts,address _recipient)",
    "funcSelectors:0x17621890": "withdrawSwapped(uint256 _positionId,address _recipient)",
    "funcSelectors:0x574ec04c": "withdrawSwappedMany(tuple[] _positions,address _recipient)",
    "errorSelectors:0xe6250e33": "GovernorIsZeroAddress()",
    "errorSelectors:0x1f0b33c3": "InvalidAllowanceTarget(address spender)",
    "errorSelectors:0xe0a8b920": "OnlyGovernor()",
    "errorSelectors:0x9ba0305d": "OnlyPendingGovernor()",
    "errorSelectors:0x763dfca0": "ReceivedTooLittleTokenOut(uint256 received,uint256 expected)",
    "errorSelectors:0xfb1b9220": "SimulatedCall(tuple result)",
    "errorSelectors:0x220d24fd": "SwapperNotAllowlisted(address swapper)",
    "funcSelectors:0x585cc6a5": "PROTOCOL_TOKEN()",
    "funcSelectors:0xb3b48afb": "SWAPPER_REGISTRY()",
    "funcSelectors:0x13f6986d": "acceptPendingGovernor()",
    "funcSelectors:0x910cab11": "allowanceTarget()",
    "funcSelectors:0xd390039a": "batchPermitTakeFromCaller(tuple[] _tokens,uint256 _nonce,uint256 _deadline,bytes _signature,address _recipient)",
    "funcSelectors:0x0d474cbf": "deposit(address _hub,address _from,address _to,uint256 _amount,uint32 _amountOfSwaps,uint32 _swapInterval,address _owner,tuple[] _permissions,bytes _miscellaneous)",
    "funcSelectors:0x9e200e21": "depositWithBalanceOnContract(address _hub,address _from,address _to,uint32 _amountOfSwaps,uint32 _swapInterval,address _owner,tuple[] _permissions,bytes _miscellaneous)",
    "funcSelectors:0x23760bb1": "getNextSwapInfo(address _hub,tuple[] _pairs,bool _calculatePrivilegedAvailability,bytes _oracleData)",
    "funcSelectors:0x0c340a24": "governor()",
    "funcSelectors:0x05ce20d6": "increasePosition(address _hub,uint256 _positionId,uint256 _amount,uint32 _newSwaps)",
    "funcSelectors:0x40c5710c": "increasePositionWithBalanceOnContract(address _hub,uint256 _positionId,uint32 _newSwaps)",
    "funcSelectors:0xe43581b8": "isGovernor(address _account)",
    "funcSelectors:0xdf08aed5": "isPendingGovernor(address _account)",
    "funcSelectors:0x40424466": "legacyGetNextSwapInfo(address _hub,tuple[] _pairs)",
    "funcSelectors:0xc995a762": "multiPermissionPermit(address _permissionManager,tuple[] _permissions,uint256 _deadline,uint8 _v,bytes32 _r,bytes32 _s)",
    "funcSelectors:0xe3056a34": "pendingGovernor()",
    "funcSelectors:0x8736624e": "permissionPermit(address _permissionManager,tuple[] _permissions,uint256 _tokenId,uint256 _deadline,uint8 _v,bytes32 _r,bytes32 _s)",
    "funcSelectors:0xd9a673ef": "permitTakeFromCaller(address _token,uint256 _amount,uint256 _nonce,uint256 _deadline,bytes _signature,address _recipient)",
    "funcSelectors:0xdb8266de": "reducePosition(address _hub,uint256 _positionId,uint256 _amount,uint32 _newSwaps,address _recipient)",
    "funcSelectors:0x2ac121a3": "revokeAllowances(tuple[] _revokeActions)",
    "funcSelectors:0x5d25d6eb": "runSwap(address _allowanceToken,uint256 _value,bytes _swapData,address _tokenOut,uint256 _minTokenOut)",
    "funcSelectors:0x3142cadf": "secondsUntilNextSwap(address _hub,tuple[] _pairs,bool _calculatePrivilegedAvailability)",
    "funcSelectors:0x340b532f": "sendBalanceOnContractToRecipient(address _token,address _recipient)",
    "funcSelectors:0x3a79d674": "sendToRecipient(address _token,uint256 _amount,address _recipient)",
    "funcSelectors:0xf235757f": "setPendingGovernor(address _pendingGovernor)",
    "funcSelectors:0xeffca705": "setSwapper(address _newSwapper,address _newAllowanceTarget)",
    "funcSelectors:0x3ed242b4": "simulate(bytes[] _calls)",
    "funcSelectors:0xbcbef206": "simulateAndRevert(bytes _call)",
    "funcSelectors:0x2b3297f9": "swapper()",
    "funcSelectors:0x37b0c09d": "takeFromCaller(address _token,uint256 _amount,address _recipient)",
    "funcSelectors:0x5f963dcf": "terminate(address _hub,uint256 _positionId,address _recipientUnswapped,address _recipientSwapped)",
    "funcSelectors:0x1f66925c": "withdrawSwapped(address _hub,uint256 _positionId,address _recipient)",
    "funcSelectors:0xffdeb00d": "withdrawSwappedMany(address _hub,tuple[] _positions,address _recipient)",
    "funcSelectors:0x126082cf": "BASIS_POINTS_DIVISOR()",
    "funcSelectors:0xe1f21c67": "approve(address _token,address _spender,uint256 _amount)",
    "funcSelectors:0x24f74697": "callbackGasLimit()",
    "funcSelectors:0x60a362e2": "cancelDecreasePosition(bytes32 _key,address _executionFeeReceiver)",
    "funcSelectors:0x225fc9fd": "cancelIncreasePosition(bytes32 _key,address _executionFeeReceiver)",
    "funcSelectors:0x7be7d141": "createDecreasePosition(address[] _path,address _indexToken,uint256 _collateralDelta,uint256 _sizeDelta,bool _isLong,address _receiver,uint256 _acceptablePrice,uint256 _minOut,uint256 _executionFee,bool _withdrawETH,address _callbackTarget)",
    "funcSelectors:0xf2ae372f": "createIncreasePosition(address[] _path,address _indexToken,uint256 _amountIn,uint256 _minOut,uint256 _sizeDelta,bool _isLong,uint256 _acceptablePrice,uint256 _executionFee,bytes32 _referralCode,address _callbackTarget)",
    "funcSelectors:0x5b88e8c6": "createIncreasePositionETH(address[] _path,address _indexToken,uint256 _minOut,uint256 _sizeDelta,bool _isLong,uint256 _acceptablePrice,uint256 _executionFee,bytes32 _referralCode,address _callbackTarget)",
    "funcSelectors:0x4278555f": "decreasePositionRequestKeys(uint256 )",
    "funcSelectors:0x1bca8cf0": "decreasePositionRequestKeysStart()",
    "funcSelectors:0x1f285106": "decreasePositionRequests(bytes32 )",
    "funcSelectors:0xfa444577": "decreasePositionsIndex(address )",
    "funcSelectors:0x67a52793": "depositFee()",
    "funcSelectors:0x0d4d003d": "executeDecreasePosition(bytes32 _key,address _executionFeeReceiver)",
    "funcSelectors:0xf3883d8b": "executeDecreasePositions(uint256 _endIndex,address _executionFeeReceiver)",
    "funcSelectors:0x27b42c0f": "executeIncreasePosition(bytes32 _key,address _executionFeeReceiver)",
    "funcSelectors:0x9a208100": "executeIncreasePositions(uint256 _endIndex,address _executionFeeReceiver)",
    "funcSelectors:0x1ce9cb8f": "feeReserves(address )",
    "funcSelectors:0x5d5c22e8": "getDecreasePositionRequestPath(bytes32 _key)",
    "funcSelectors:0x95e9bbd7": "getIncreasePositionRequestPath(bytes32 _key)",
    "funcSelectors:0x62f8a3fe": "getRequestKey(address _account,uint256 _index)",
    "funcSelectors:0xf2cea6a5": "getRequestQueueLengths()",
    "funcSelectors:0x12d43a51": "gov()",
    "funcSelectors:0x98d1e03a": "increasePositionBufferBps()",
    "funcSelectors:0x04225954": "increasePositionRequestKeys(uint256 )",
    "funcSelectors:0x9b578620": "increasePositionRequestKeysStart()",
    "funcSelectors:0xfaf990f3": "increasePositionRequests(bytes32 )",
    "funcSelectors:0x633451de": "increasePositionsIndex(address )",
    "funcSelectors:0x3e72a262": "isLeverageEnabled()",
    "funcSelectors:0x36eba48a": "isPositionKeeper(address )",
    "funcSelectors:0x1045c74e": "maxGlobalLongSizes(address )",
    "funcSelectors:0x9698d25a": "maxGlobalShortSizes(address )",
    "funcSelectors:0xcb0269c9": "maxTimeDelay()",
    "funcSelectors:0x5841fcaa": "minBlockDelayKeeper()",
    "funcSelectors:0x63ae2103": "minExecutionFee()",
    "funcSelectors:0x3a2a80c7": "minTimeDelayPublic()",
    "funcSelectors:0x006cc35e": "referralStorage()",
    "funcSelectors:0x24a084df": "sendValue(address _receiver,uint256 _amount)",
    "funcSelectors:0x704b6c02": "setAdmin(address _admin)",
    "funcSelectors:0x8a54942f": "setCallbackGasLimit(uint256 _callbackGasLimit)",
    "funcSelectors:0x4067b132": "setDelayValues(uint256 _minBlockDelayKeeper,uint256 _minTimeDelayPublic,uint256 _maxTimeDelay)",
    "funcSelectors:0x490ae210": "setDepositFee(uint256 _depositFee)",
    "funcSelectors:0xcfad57a2": "setGov(address _gov)",
    "funcSelectors:0x233bfe3b": "setIncreasePositionBufferBps(uint256 _increasePositionBufferBps)",
    "funcSelectors:0x7c2eb9f7": "setIsLeverageEnabled(bool _isLeverageEnabled)",
    "funcSelectors:0xef12c67e": "setMaxGlobalSizes(address[] _tokens,uint256[] _longSizes,uint256[] _shortSizes)",
    "funcSelectors:0xfc2cee62": "setMinExecutionFee(uint256 _minExecutionFee)",
    "funcSelectors:0x3422ead1": "setPositionKeeper(address _account,bool _isActive)",
    "funcSelectors:0xae4d7f9a": "setReferralStorage(address _referralStorage)",
    "funcSelectors:0x308aa81f": "setRequestKeysStartValues(uint256 _increasePositionRequestKeysStart,uint256 _decreasePositionRequestKeysStart)",
    "funcSelectors:0x657bc5d0": "shortsTracker()",
    "funcSelectors:0x3fc8cef3": "weth()",
    "funcSelectors:0xf2555278": "withdrawFees(address _token,address _receiver)",
    "errorSelectors:0xbdec9c0d": "CompactedArrayOutOfBounds(uint256[] compactedValues,uint256 index,uint256 slotIndex,string label)",
    "errorSelectors:0xdd70e0c9": "DisabledFeature(bytes32 key)",
    "errorSelectors:0x09f8c937": "DisabledMarket(address market)",
    "errorSelectors:0x693ebfba": "EmptyCompactedBlockNumber(uint256 index)",
    "errorSelectors:0x05fbc1ae": "EmptyMarket()",
    "errorSelectors:0x16307797": "EmptyOrder()",
    "errorSelectors:0x4e48dcda": "EndOfOracleSimulation()",
    "errorSelectors:0x5dac504d": "InsufficientExecutionFee(uint256 minExecutionFee,uint256 executionFee)",
    "errorSelectors:0xbb416f93": "InsufficientExecutionGas(uint256 startingGas,uint256 estimatedGasLimit,uint256 minAdditionalGasForExecution)",
    "errorSelectors:0x79293964": "InsufficientExecutionGasForErrorHandling(uint256 startingGas,uint256 minHandleErrorGas)",
    "errorSelectors:0x3083b9e5": "InsufficientHandleExecutionErrorGas(uint256 gas,uint256 minHandleExecutionErrorGas)",
    "errorSelectors:0xe5feddc0": "InvalidKeeperForFrozenOrder(address keeper)",
    "errorSelectors:0x663de023": "InvalidPrimaryPricesForSimulation(uint256 primaryTokensLength,uint256 primaryPricesLength)",
    "errorSelectors:0xcb9bd134": "InvalidSwapMarket(address market)",
    "errorSelectors:0x9aba92cb": "OrderNotUpdatable(uint256 orderType)",
    "errorSelectors:0xe8266438": "RequestNotYetCancellable(uint256 requestAge,uint256 requestExpirationAge,string requestType)",
    "errorSelectors:0xa35b150b": "Unauthorized(address msgSender,string role)",
    "errorSelectors:0xb6029281": "UnsupportedOracleBlockNumberType(uint256 oracleBlockNumberType)",
    "errorSelectors:0xc1c00831": "UnsupportedOrderType()",
    "funcSelectors:0xb08b94f8": "_executeOrder(bytes32 key,tuple order,tuple oracleParams,address keeper)",
    "funcSelectors:0x7489ec23": "cancelOrder(bytes32 key)",
    "funcSelectors:0xdcfce366": "createOrder(address account,tuple params)",
    "funcSelectors:0x660d0d67": "dataStore()",
    "funcSelectors:0x9ff78c30": "eventEmitter()",
    "funcSelectors:0x97017239": "executeOrder(bytes32 key,tuple oracleParams)",
    "funcSelectors:0x93845e46": "orderVault()",
    "funcSelectors:0x4a4a7b04": "roleStore()",
    "funcSelectors:0x6f748dfb": "simulateExecuteOrder(bytes32 key,tuple simulatedOracleParams)",
    "funcSelectors:0x8a53aaac": "swapHandler()",
    "funcSelectors:0x4477f2c6": "updateOrder(bytes32 key,uint256 sizeDeltaUsd,uint256 acceptablePrice,uint256 triggerPrice,uint256 minOutputAmount,tuple order)",
    "errorSelectors:0xec6d89c8": "CollateralAlreadyClaimed(uint256 adjustedClaimableAmount,uint256 claimedAmount)",
    "errorSelectors:0xe474a425": "EmptyAddressInMarketTokenBalanceValidation(address market,address token)",
    "errorSelectors:0x95b66fe9": "EmptyDeposit()",
    "errorSelectors:0xe9b78bd4": "EmptyHoldingAddress()",
    "errorSelectors:0xd551823d": "EmptyReceiver()",
    "errorSelectors:0x9fc297fa": "EmptyTokenTranferGasLimit(address token)",
    "errorSelectors:0x5b3043dd": "InvalidClaimAffiliateRewardsInput(uint256 marketsLength,uint256 tokensLength)",
    "errorSelectors:0x42c0d1f2": "InvalidClaimCollateralInput(uint256 marketsLength,uint256 tokensLength,uint256 timeKeysLength)",
    "errorSelectors:0x7363cfa5": "InvalidClaimFundingFeesInput(uint256 marketsLength,uint256 tokensLength)",
    "errorSelectors:0x74cee48d": "InvalidClaimUiFeesInput(uint256 marketsLength,uint256 tokensLength)",
    "errorSelectors:0x33a1ea6b": "InvalidMarketTokenBalance(address market,address token,uint256 balance,uint256 expectedMinBalance)",
    "errorSelectors:0x9dd026db": "InvalidMarketTokenBalanceForClaimableFunding(address market,address token,uint256 balance,uint256 claimableFundingFeeAmount)",
    "errorSelectors:0x808c464f": "InvalidMarketTokenBalanceForCollateralAmount(address market,address token,uint256 balance,uint256 collateralAmount)",
    "errorSelectors:0x81468139": "InvalidUiFeeFactor(uint256 uiFeeFactor,uint256 maxUiFeeFactor)",
    "errorSelectors:0x979dc780": "TokenTransferError(address token,address receiver,uint256 amount)",
    "funcSelectors:0x31404484": "cancelDeposit(bytes32 key)",
    "funcSelectors:0x7213c5a0": "cancelWithdrawal(bytes32 key)",
    "funcSelectors:0x49287a22": "claimAffiliateRewards(address[] markets,address[] tokens,address receiver)",
    "funcSelectors:0xe9249b57": "claimCollateral(address[] markets,address[] tokens,uint256[] timeKeys,address receiver)",
    "funcSelectors:0xc41b1ab3": "claimFundingFees(address[] markets,address[] tokens,address receiver)",
    "funcSelectors:0x01a9cbb2": "claimUiFees(address[] markets,address[] tokens,address receiver)",
    "funcSelectors:0xbb69470e": "createDeposit(tuple params)",
    "funcSelectors:0xd8b6cc2f": "createOrder(tuple params)",
    "funcSelectors:0xa19048e4": "createWithdrawal(tuple params)",
    "funcSelectors:0x9c8b2cfb": "depositHandler()",
    "funcSelectors:0xb5848305": "orderHandler()",
    "funcSelectors:0x53ead2d3": "sendNativeToken(address receiver,uint256 amount)",
    "funcSelectors:0xe6d66ac8": "sendTokens(address token,address receiver,uint256 amount)",
    "funcSelectors:0x7d39aaf1": "sendWnt(address receiver,uint256 amount)",
    "funcSelectors:0x073fb09e": "setSavedCallbackContract(address market,address callbackContract)",
    "funcSelectors:0x5a03cd94": "setUiFeeFactor(uint256 uiFeeFactor)",
    "funcSelectors:0xc023b6f5": "simulateExecuteDeposit(bytes32 key,tuple simulatedOracleParams)",
    "funcSelectors:0x2997caea": "simulateExecuteWithdrawal(bytes32 key,tuple simulatedOracleParams)",
    "funcSelectors:0xaab286f8": "updateOrder(bytes32 key,uint256 sizeDeltaUsd,uint256 acceptablePrice,uint256 triggerPrice,uint256 minOutputAmount)",
    "funcSelectors:0x2c2f3c07": "withdrawalHandler()",
    "errorSelectors:0xa24a13a6": "ArrayLengthMismatch()",
    "errorSelectors:0xc963e34d": "IncorrectBridgeRatios()",
    "errorSelectors:0x7c91ccdd": "OnlyNominee()",
    "errorSelectors:0x5fc483c5": "OnlyOwner()",
    "errorSelectors:0x8579befe": "ZeroAddressNotAllowed()",
    "funcSelectors:0x52283e35": "BRIDGE_AFTER_SWAP_SELECTOR()",
    "funcSelectors:0xa69685b5": "CENT_PERCENT()",
    "funcSelectors:0xa7fc7a07": "addController(address controllerAddress)",
    "funcSelectors:0x8c95ff1e": "addRoute(address routeAddress)",
    "funcSelectors:0x915ad7e9": "addressAt(uint32 routeId)",
    "funcSelectors:0x3bd1adec": "claimOwner()",
    "funcSelectors:0x15b9a8b8": "controllerCount()",
    "funcSelectors:0x90ea7413": "controllers(uint32 )",
    "funcSelectors:0x734427c8": "disableController(uint32 controllerId)",
    "funcSelectors:0x9e0bbd9f": "disableRoute(uint32 routeId)",
    "funcSelectors:0x42cf3527": "disabledRouteAddress()",
    "funcSelectors:0xeded0939": "executeController(tuple socketControllerRequest)",
    "funcSelectors:0xb856ef4c": "executeControllers(tuple[] controllerRequests)",
    "funcSelectors:0x1028c2bd": "executeRoute(uint32 routeId,bytes routeData)",
    "funcSelectors:0xc3540448": "executeRoutes(uint32[] routeIds,bytes[] dataItems)",
    "funcSelectors:0xa67f534d": "getController(uint32 controllerId)",
    "funcSelectors:0x7095d471": "getRoute(uint32 routeId)",
    "funcSelectors:0x5b94db27": "nominateOwner(address nominee_)",
    "funcSelectors:0x20f99c0a": "nominee()",
    "funcSelectors:0xe42e0ea9": "rescueEther(address userAddress,uint256 amount)",
    "funcSelectors:0x263af8e8": "routes(uint32 )",
    "funcSelectors:0xfd326921": "routesCount()",
    "funcSelectors:0x82230446": "setApprovalForRouters(address[] routeAddresses,address[] tokenAddresses,bool isMax)",
    "funcSelectors:0x116474a0": "swapAndMultiBridge(tuple swapMultiBridgeRequest)",
    "funcSelectors:0x73b295c2": "WAVAX()",
    "funcSelectors:0xf91b3f72": "addLiquidityAVAX(address token,uint256 amountTokenDesired,uint256 amountTokenMin,uint256 amountAVAXMin,address to,uint256 deadline)",
    "funcSelectors:0x33c6b725": "removeLiquidityAVAX(address token,uint256 liquidity,uint256 amountTokenMin,uint256 amountAVAXMin,address to,uint256 deadline)",
    "funcSelectors:0x73bc79cf": "removeLiquidityAVAXSupportingFeeOnTransferTokens(address token,uint256 liquidity,uint256 amountTokenMin,uint256 amountAVAXMin,address to,uint256 deadline)",
    "funcSelectors:0x2c407024": "removeLiquidityAVAXWithPermit(address token,uint256 liquidity,uint256 amountTokenMin,uint256 amountAVAXMin,address to,uint256 deadline,bool approveMax,uint8 v,bytes32 r,bytes32 s)",
    "funcSelectors:0x9fc27226": "removeLiquidityAVAXWithPermitSupportingFeeOnTransferTokens(address token,uint256 liquidity,uint256 amountTokenMin,uint256 amountAVAXMin,address to,uint256 deadline,bool approveMax,uint8 v,bytes32 r,bytes32 s)",
    "funcSelectors:0x8a657e67": "swapAVAXForExactTokens(uint256 amountOut,address[] path,address to,uint256 deadline)",
    "funcSelectors:0xa2a1623d": "swapExactAVAXForTokens(uint256 amountOutMin,address[] path,address to,uint256 deadline)",
    "funcSelectors:0xc57559dd": "swapExactAVAXForTokensSupportingFeeOnTransferTokens(uint256 amountOutMin,address[] path,address to,uint256 deadline)",
    "funcSelectors:0x676528d1": "swapExactTokensForAVAX(uint256 amountIn,uint256 amountOutMin,address[] path,address to,uint256 deadline)",
    "funcSelectors:0x762b1562": "swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 amountIn,uint256 amountOutMin,address[] path,address to,uint256 deadline)",
    "funcSelectors:0x7a42416a": "swapTokensForExactAVAX(uint256 amountOut,uint256 amountInMax,address[] path,address to,uint256 deadline)",
    "funcSelectors:0x07da68f5": "stop()",
    "funcSelectors:0x0803fac0": "hasInitialized()",
    "funcSelectors:0x136dd43c": "STAKING_CONTROL_ROLE()",
    "funcSelectors:0x19208451": "getSharesByPooledEth(uint256 _ethAmount)",
    "funcSelectors:0x1ea7ca89": "isStakingPaused()",
    "funcSelectors:0x2914b9bd": "getEVMScriptExecutor(bytes _script)",
    "funcSelectors:0x2cb5f784": "setStakingLimit(uint256 _maxStakeLimit,uint256 _stakeLimitIncreasePerBlock)",
    "funcSelectors:0x2de03aa1": "RESUME_ROLE()",
    "funcSelectors:0x2f85e57c": "finalizeUpgrade_v2(address _lidoLocator,address _eip712StETH)",
    "funcSelectors:0x32f0a3b5": "getRecoveryVault()",
    "funcSelectors:0x37cfdaca": "getTotalPooledEther()",
    "funcSelectors:0x38998624": "unsafeChangeDepositedValidators(uint256 _newDepositedValidators)",
    "funcSelectors:0x389ed267": "PAUSE_ROLE()",
    "funcSelectors:0x3b19e84a": "getTreasury()",
    "funcSelectors:0x3f683b6a": "isStopped()",
    "funcSelectors:0x47b714e0": "getBufferedEther()",
    "funcSelectors:0x485cc955": "initialize(address _lidoLocator,address _eip712StETH)",
    "funcSelectors:0x4ad509b2": "receiveELRewards()",
    "funcSelectors:0x56396715": "getWithdrawalCredentials()",
    "funcSelectors:0x609c4c6c": "getCurrentStakeLimit()",
    "funcSelectors:0x665b4b0b": "getStakeLimitFullInfo()",
    "funcSelectors:0x6d780459": "transferSharesFrom(address _sender,address _recipient,uint256 _sharesAmount)",
    "funcSelectors:0x7475f913": "resumeStaking()",
    "funcSelectors:0x752f77f1": "getFeeDistribution()",
    "funcSelectors:0x78ffcfe2": "receiveWithdrawals()",
    "funcSelectors:0x7a28fb88": "getPooledEthByShares(uint256 _sharesAmount)",
    "funcSelectors:0x7e7db6e1": "allowRecoverability(address token)",
    "funcSelectors:0x80afdea8": "appId()",
    "funcSelectors:0x833b1fce": "getOracle()",
    "funcSelectors:0x84b0196e": "eip712Domain()",
    "funcSelectors:0x8aa10435": "getContractVersion()",
    "funcSelectors:0x8b3dd749": "getInitializationBlock()",
    "funcSelectors:0x8fcb4e5b": "transferShares(address _recipient,uint256 _sharesAmount)",
    "funcSelectors:0x9861f8e5": "getEIP712StETH()",
    "funcSelectors:0x9d4941d8": "transferToVault(address )",
    "funcSelectors:0xa1658fad": "canPerform(address _sender,bytes32 _role,uint256[] _params)",
    "funcSelectors:0xa1903eab": "submit(address _referral)",
    "funcSelectors:0xa479e508": "getEVMScriptRegistry()",
    "funcSelectors:0xaa0b7db7": "deposit(uint256 _maxDepositsCount,uint256 _stakingModuleId,bytes _depositCalldata)",
    "funcSelectors:0xad1394e9": "UNSAFE_CHANGE_DEPOSITED_VALIDATORS_ROLE()",
    "funcSelectors:0xae2e3538": "getBeaconStat()",
    "funcSelectors:0xb3320d9a": "removeStakingLimit()",
    "funcSelectors:0xbac3f3c5": "handleOracleReport(uint256 _reportTimestamp,uint256 _timeElapsed,uint256 _clValidators,uint256 _clBalance,uint256 _withdrawalVaultBalance,uint256 _elRewardsVaultBalance,uint256 _sharesRequestedToBurn,uint256[] _withdrawalFinalizationBatches,uint256 _simulatedShareRate)",
    "funcSelectors:0xced72f87": "getFee()",
    "funcSelectors:0xd4aae0c4": "kernel()",
    "funcSelectors:0xd5002f2e": "getTotalShares()",
    "funcSelectors:0xde4796ed": "isPetrified()",
    "funcSelectors:0xe654ff17": "getLidoLocator()",
    "funcSelectors:0xe78a5875": "canDeposit()",
    "funcSelectors:0xeb85262f": "STAKING_PAUSE_ROLE()",
    "funcSelectors:0xf2cfa87d": "getDepositableEther()",
    "funcSelectors:0xf5eb42dc": "sharesOf(address _account)",
    "funcSelectors:0xf999c506": "pauseStaking()",
    "funcSelectors:0xfa64ebac": "getTotalELRewardsCollected()",
    "errorSelectors:0x02d715c2": "AdminZeroAddress()",
    "errorSelectors:0x93f51786": "ApprovalToOwner()",
    "errorSelectors:0xb06307db": "ApproveToCaller()",
    "errorSelectors:0x4c59bf28": "ArraysLengthMismatch(uint256 _firstArrayLength,uint256 _secondArrayLength)",
    "errorSelectors:0xcdf129c4": "BatchesAreNotSorted()",
    "errorSelectors:0x0f0b498d": "CantSendValueRecipientMayHaveReverted()",
    "errorSelectors:0x12de1df3": "EmptyBatches()",
    "errorSelectors:0x167679d5": "InvalidContractVersionIncrement()",
    "errorSelectors:0xcee778e2": "InvalidHint(uint256 _hint)",
    "errorSelectors:0x01e4f954": "InvalidOwnerAddress(address )",
    "errorSelectors:0x34819c03": "InvalidReportTimestamp()",
    "errorSelectors:0xc969e0f2": "InvalidRequestId(uint256 _requestId)",
    "errorSelectors:0x71894257": "InvalidRequestIdRange(uint256 startId,uint256 endId)",
    "errorSelectors:0xbaf3f0f7": "InvalidState()",
    "errorSelectors:0x61394a84": "NonZeroContractVersionOnInit()",
    "errorSelectors:0x8a0d3779": "NotEnoughEther()",
    "errorSelectors:0x23295f0e": "NotOwner(address _sender,address _owner)",
    "errorSelectors:0xaee697e7": "NotOwnerOrApproved(address sender)",
    "errorSelectors:0x41aaefac": "NotOwnerOrApprovedForAll(address sender)",
    "errorSelectors:0x73c5d8a6": "PauseUntilMustBeInFuture()",
    "errorSelectors:0xb047186b": "PausedExpected()",
    "errorSelectors:0xf0e0cc2d": "RequestAlreadyClaimed(uint256 _requestId)",
    "errorSelectors:0x8ebfb78d": "RequestAmountTooLarge(uint256 _amountOfStETH)",
    "errorSelectors:0xb89b87c8": "RequestAmountTooSmall(uint256 _amountOfStETH)",
    "errorSelectors:0x374e8bd1": "RequestIdsNotSorted()",
    "errorSelectors:0x4ae50228": "RequestNotFoundOrNotFinalized(uint256 _requestId)",
    "errorSelectors:0x14378398": "ResumedExpected()",
    "errorSelectors:0x305a27a9": "StringTooLong(string str)",
    "errorSelectors:0x252dfe81": "TooMuchEtherToFinalize(uint256 sent,uint256 maxExpected)",
    "errorSelectors:0xc0eeaa61": "TransferFromIncorrectOwner(address from,address realOwner)",
    "errorSelectors:0x160fca8a": "TransferFromZeroAddress()",
    "errorSelectors:0x09f844e3": "TransferToNonIERC721Receiver(address )",
    "errorSelectors:0x52ce6f21": "TransferToThemselves()",
    "errorSelectors:0xea553b34": "TransferToZeroAddress()",
    "errorSelectors:0x0eaf9e0c": "UnexpectedContractVersion(uint256 expected,uint256 received)",
    "errorSelectors:0x91dc1cb4": "ZeroAmountOfETH()",
    "errorSelectors:0x71178d66": "ZeroMetadata()",
    "errorSelectors:0xad58bfc7": "ZeroPauseDuration()",
    "errorSelectors:0xd27b4443": "ZeroRecipient()",
    "errorSelectors:0xe4e97357": "ZeroShareRate()",
    "errorSelectors:0xda16d767": "ZeroTimestamp()",
    "funcSelectors:0xe7c0835d": "BUNKER_MODE_DISABLED_TIMESTAMP()",
    "funcSelectors:0x220ca2f4": "FINALIZE_ROLE()",
    "funcSelectors:0xb7bdf748": "MANAGE_TOKEN_URI_ROLE()",
    "funcSelectors:0x29fd065d": "MAX_BATCHES_LENGTH()",
    "funcSelectors:0xdb2296cd": "MAX_STETH_WITHDRAWAL_AMOUNT()",
    "funcSelectors:0x0d25a957": "MIN_STETH_WITHDRAWAL_AMOUNT()",
    "funcSelectors:0x07e2cea5": "ORACLE_ROLE()",
    "funcSelectors:0xa302ee38": "PAUSE_INFINITELY()",
    "funcSelectors:0xe00bfe50": "STETH()",
    "funcSelectors:0xd9fb643a": "WSTETH()",
    "funcSelectors:0x9b36be58": "bunkerModeSinceTimestamp()",
    "funcSelectors:0xbc8f8200": "calculateFinalizationBatches(uint256 _maxShareRate,uint256 _maxTimestamp,uint256 _maxRequestsPerCall,tuple _state)",
    "funcSelectors:0xf8444436": "claimWithdrawal(uint256 _requestId)",
    "funcSelectors:0xe3afe0a3": "claimWithdrawals(uint256[] _requestIds,uint256[] _hints)",
    "funcSelectors:0x5e7eead9": "claimWithdrawalsTo(uint256[] _requestIds,uint256[] _hints,address _recipient)",
    "funcSelectors:0xb6013cef": "finalize(uint256 _lastRequestIdToBeFinalized,uint256 _maxShareRate)",
    "funcSelectors:0x62abe3fa": "findCheckpointHints(uint256[] _requestIds,uint256 _firstIndex,uint256 _lastIndex)",
    "funcSelectors:0x714c5398": "getBaseURI()",
    "funcSelectors:0xc97912d8": "getClaimableEther(uint256[] _requestIds,uint256[] _hints)",
    "funcSelectors:0x526eae3e": "getLastCheckpointIndex()",
    "funcSelectors:0x4f069a13": "getLastFinalizedRequestId()",
    "funcSelectors:0x19c2b4c3": "getLastRequestId()",
    "funcSelectors:0xf6fa8a47": "getLockedEtherAmount()",
    "funcSelectors:0x46a086b4": "getNFTDescriptorAddress()",
    "funcSelectors:0x589ff76c": "getResumeSinceTimestamp()",
    "funcSelectors:0x7d031b65": "getWithdrawalRequests(address _owner)",
    "funcSelectors:0xb8c4b85a": "getWithdrawalStatus(uint256[] _requestIds)",
    "funcSelectors:0x2b95b781": "isBunkerModeActive()",
    "funcSelectors:0xb187bd26": "isPaused()",
    "funcSelectors:0x96992fed": "onOracleReport(bool _isBunkerModeNow,uint256 _bunkerStartTimestamp,uint256 _currentReportTimestamp)",
    "funcSelectors:0xf3f449c7": "pauseFor(uint256 _duration)",
    "funcSelectors:0xabe9cfc8": "pauseUntil(uint256 _pauseUntilInclusive)",
    "funcSelectors:0xa52e9c9f": "prefinalize(uint256[] _batches,uint256 _maxShareRate)",
    "funcSelectors:0xd6681042": "requestWithdrawals(uint256[] _amounts,address _owner)",
    "funcSelectors:0xbed7c109": "requestWithdrawalsWithPermit(uint256[] _amounts,address _owner,tuple _permit)",
    "funcSelectors:0x19aa6257": "requestWithdrawalsWstETH(uint256[] _amounts,address _owner)",
    "funcSelectors:0x518ef692": "requestWithdrawalsWstETHWithPermit(uint256[] _amounts,address _owner,tuple _permit)",
    "funcSelectors:0x92b18a47": "setNFTDescriptorAddress(address _nftDescriptorAddress)",
    "funcSelectors:0xc2fc7aff": "unfinalizedRequestNumber()",
    "funcSelectors:0xd0fb84e8": "unfinalizedStETH()",
    "funcSelectors:0x98fabd3a": "DAO()",
    "funcSelectors:0x309756fb": "UNPAUSE_ROLE()",
    "funcSelectors:0xafd290a7": "calculatePendingBufferedTokens()",
    "funcSelectors:0x46e04a2f": "claimTokens(uint256 _tokenId)",
    "funcSelectors:0x4cfeb862": "claimTokensFromValidatorToContract(uint256 _index)",
    "funcSelectors:0x917a52f5": "convertMaticToStMatic(uint256 _amountInMatic)",
    "funcSelectors:0xd968447c": "convertStMaticToMatic(uint256 _amountInStMatic)",
    "funcSelectors:0x4162169f": "dao()",
    "funcSelectors:0xc89e4361": "delegate()",
    "funcSelectors:0x0d7abc33": "delegationLowerBound()",
    "funcSelectors:0x6f4a2cd0": "distributeRewards()",
    "funcSelectors:0x964a7596": "entityFees()",
    "funcSelectors:0xe062b10b": "fxStateRootTunnel()",
    "funcSelectors:0x676e5550": "getLiquidRewards(address _validatorShare)",
    "funcSelectors:0x720bcf1d": "getMaticFromTokenId(uint256 _tokenId)",
    "funcSelectors:0x253d1735": "getToken2WithdrawRequests(uint256 _tokenId)",
    "funcSelectors:0xe00222a0": "getTotalPooledMatic()",
    "funcSelectors:0x1e7ff8f6": "getTotalStake(address _validatorShare)",
    "funcSelectors:0x7e978af8": "getTotalStakeAcrossAllValidators()",
    "funcSelectors:0x916b9eba": "getTotalWithdrawRequest()",
    "funcSelectors:0x35876476": "initialize(address _nodeOperatorRegistry,address _token,address _dao,address _insurance,address _stakeManager,address _poLidoNFT,address _fxStateRootTunnel)",
    "funcSelectors:0x89cf3204": "insurance()",
    "funcSelectors:0x71975a3e": "lastWithdrawnValidatorId()",
    "funcSelectors:0xe8f8708f": "nodeOperatorRegistry()",
    "funcSelectors:0x7029c90e": "poLidoNFT()",
    "funcSelectors:0xb0e21e8a": "protocolFee()",
    "funcSelectors:0xd280f14f": "rebalanceDelegatedTokens()",
    "funcSelectors:0xccc143b8": "requestWithdraw(uint256 _amount,address _referral)",
    "funcSelectors:0x509c5df6": "reservedFunds()",
    "funcSelectors:0xa2452947": "rewardDistributionLowerBound()",
    "funcSelectors:0x9a3cac6a": "setDaoAddress(address _newDAO)",
    "funcSelectors:0x7682c902": "setDelegationLowerBound(uint256 _delegationLowerBound)",
    "funcSelectors:0xf6794fdb": "setFees(uint8 _daoFee,uint8 _operatorsFee,uint8 _insuranceFee)",
    "funcSelectors:0x70bf9fe9": "setFxStateRootTunnel(address _newFxStateRootTunnel)",
    "funcSelectors:0xbb208f55": "setInsuranceAddress(address _address)",
    "funcSelectors:0x0f2b2639": "setNodeOperatorRegistryAddress(address _address)",
    "funcSelectors:0x15539d3f": "setPoLidoNFT(address _newLidoNFT)",
    "funcSelectors:0x4e91f811": "setProtocolFee(uint8 _newProtocolFee)",
    "funcSelectors:0x3b573c4a": "setRewardDistributionLowerBound(uint256 _newRewardDistributionLowerBound)",
    "funcSelectors:0x788bc78c": "setVersion(string _newVersion)",
    "funcSelectors:0xf1a13fce": "stMaticWithdrawRequest(uint256 )",
    "funcSelectors:0x7542ff95": "stakeManager()",
    "funcSelectors:0xf532e86a": "submit(uint256 _amount,address _referral)",
    "funcSelectors:0xe259faf7": "submitHandler()",
    "funcSelectors:0x893818a3": "submitThreshold()",
    "funcSelectors:0xf08711fe": "token2WithdrawRequest(uint256 )",
    "funcSelectors:0xc697d2c7": "token2WithdrawRequests(uint256 ,uint256 )",
    "funcSelectors:0x52349b17": "totalBuffered()",
    "funcSelectors:0xc75e7832": "withdrawTotalDelegated(address _validatorShare)",
    "funcSelectors:0xb94bb57a": "destinations(bytes32 )",
    "funcSelectors:0xc0600939": "init(address[] _dests,address[] _tokens,address[] _providers,address[] _providerSpenders,address _ownerAddress)",
    "funcSelectors:0x5639a77f": "payWithAnyToken(bytes32 orderId,uint64 refId,address swapProvider,address providerSpender,bytes swapCalldata,address tokenFrom,address tokenTo,uint256 amountFrom,uint256 minAmountTo,address dest)",
    "funcSelectors:0x0ff5e72b": "payWithEth(bytes32 orderId,uint64 refId,uint256 amountFrom,uint256 minAmountTo,address swapProvider,bytes swapCalldata,address dest,address token)",
    "funcSelectors:0x526aa6bf": "payWithUsdToken(bytes32 orderId,uint64 refId,uint256 amount,address dest,address token)",
    "funcSelectors:0x1acc050e": "providers(bytes32 )",
    "errorSelectors:0x38647caa": "OnlySocketDeployer()",
    "errorSelectors:0xb20ca365": "OnlySocketGatewayOwner()",
    "funcSelectors:0xdf2ebdbb": "NATIVE_TOKEN_ADDRESS()",
    "funcSelectors:0x0edc9afe": "STARGATE_L1_SWAP_BRIDGE_SELECTOR()",
    "funcSelectors:0xed801ee8": "STARGATE_L2_ERC20_EXTERNAL_BRIDGE_FUNCTION_SELECTOR()",
    "funcSelectors:0x8871de7b": "STARGATE_L2_NATIVE_EXTERNAL_BRIDGE_FUNCTION_SELECTOR()",
    "funcSelectors:0x3c72b6c3": "StargateIdentifier()",
    "funcSelectors:0xd0949f99": "UINT256_MAX()",
    "funcSelectors:0xb3dc8da4": "bridgeAfterSwap(uint256 amount,bytes bridgeData)",
    "funcSelectors:0x27f58fca": "bridgeERC20To(address token,address senderAddress,address receiverAddress,uint256 amount,tuple stargateBridgeExtraData)",
    "funcSelectors:0x7ba7a61b": "bridgeNativeTo(address senderAddress,address receiverAddress,uint256 amount,tuple stargateBridgeExtraData)",
    "funcSelectors:0x24d97a4a": "killme()",
    "funcSelectors:0xbc852760": "socketDeployFactory()",
    "funcSelectors:0x678fcd61": "socketGateway()",
    "funcSelectors:0x79285133": "socketRoute()",
    "funcSelectors:0x38e31d39": "stargateEthVault()",
    "funcSelectors:0x1fb07544": "swapAndBridge(uint32 swapId,bytes swapData,tuple stargateBridgeData)",
    "errorSelectors:0x8b7ac980": "ExecutionResult(uint256 preOpGas,uint256 paid,uint48 validAfter,uint48 validUntil,bool targetSuccess,bytes targetResult)",
    "errorSelectors:0x220266b6": "FailedOp(uint256 opIndex,string reason)",
    "errorSelectors:0x6ca7b806": "SenderAddressResult(address sender)",
    "errorSelectors:0x86a9f750": "SignatureValidationFailed(address aggregator)",
    "errorSelectors:0x8c476844": "ValidationResult(tuple returnInfo,tuple senderInfo,tuple factoryInfo,tuple paymasterInfo)",
    "errorSelectors:0x67fa5e75": "ValidationResultWithAggregation(tuple returnInfo,tuple senderInfo,tuple factoryInfo,tuple paymasterInfo,tuple aggregatorInfo)",
    "funcSelectors:0x8f41ec5a": "SIG_VALIDATION_FAILED()",
    "funcSelectors:0x957122ab": "_validateSenderAndPaymaster(bytes initCode,address sender,bytes paymasterAndData)",
    "funcSelectors:0x0396cb60": "addStake(uint32 unstakeDelaySec)",
    "funcSelectors:0xb760faf9": "depositTo(address account)",
    "funcSelectors:0xfc7e286d": "deposits(address )",
    "funcSelectors:0x5287ce12": "getDepositInfo(address account)",
    "funcSelectors:0x35567e1a": "getNonce(address sender,uint192 key)",
    "funcSelectors:0x9b249f69": "getSenderAddress(bytes initCode)",
    "funcSelectors:0x369b02f3": "getUserOpHash(tuple userOp)",
    "funcSelectors:0x58bc7094": "handleAggregatedOps(tuple[] opsPerAggregator,address beneficiary)",
    "funcSelectors:0x05fa054c": "handleOps(tuple[] ops,address beneficiary)",
    "funcSelectors:0x0bd28e3b": "incrementNonce(uint192 key)",
    "funcSelectors:0x36ab61cb": "innerHandleOp(bytes callData,tuple opInfo,bytes context)",
    "funcSelectors:0x1b2e01b8": "nonceSequenceNumber(address ,uint192 )",
    "funcSelectors:0xd5b0f01d": "simulateHandleOp(tuple op,address target,bytes targetCallData)",
    "funcSelectors:0xfb4a65bb": "simulateValidation(tuple userOp)",
    "funcSelectors:0xbb9fe6bf": "unlockStake()",
    "funcSelectors:0xc23a5cea": "withdrawStake(address withdrawAddress)",
    "funcSelectors:0x205c2878": "withdrawTo(address withdrawAddress,uint256 withdrawAmount)",
    "funcSelectors:0xb0ac19a0": "computeAddress2(uint256 salt)",
    "funcSelectors:0xd8ccd0f3": "free(uint256 value)",
    "funcSelectors:0x5f2e2b45": "freeFrom(address from,uint256 value)",
    "funcSelectors:0x079d229f": "freeFromUpTo(address from,uint256 value)",
    "funcSelectors:0x6366b936": "freeUpTo(uint256 value)",
    "funcSelectors:0xa0712d68": "mint(uint256 mintAmount)",
    "funcSelectors:0xd89135cd": "totalBurned()",
    "funcSelectors:0xa2309ff8": "totalMinted()",
    "funcSelectors:0x0562b1a4": "setMarketActiveState(bool state)",
    "funcSelectors:0x008244c8": "executeReserveReserveTradeWithData(address makerReserve,address takerReserve,tuple trade,bytes32[] makerData,bytes32[] takerData)",
    "funcSelectors:0x54b8cd08": "settleReserveReserveTradeWithData(tuple tradeInput,bytes32[] makerData,bytes32[] takerData)",
    "funcSelectors:0x61f1ad44": "settleReserveReserveTrade(tuple tradeInput)",
    "funcSelectors:0x0902f1ac": "getReserves()",
    "funcSelectors:0x12fde4b7": "getFeeCollector()",
    "funcSelectors:0x268139d5": "removePublicReserveAddress(address reserve)",
    "funcSelectors:0xee4ca163": "ringTradeFromInput(tuple packed)",
    "funcSelectors:0x2c580a1f": "nominateFeeCollector(address collector)",
    "funcSelectors:0x338b5dea": "depositToken(address token,uint256 amount)",
    "funcSelectors:0x3af89d03": "directWithdrawal(address token,uint256 amount)",
    "funcSelectors:0x49c35605": "multiSigTransfer(address token,uint256 amount,uint64 nonce,uint8 v,bytes32 r,bytes32 s,address receiving_address)",
    "funcSelectors:0x4a0c3c3b": "delegateAddress(address delegate)",
    "funcSelectors:0x60ad9693": "orderFromInput(tuple orderInput)",
    "funcSelectors:0x36062d6c": "batchSettleTrades(tuple[] orderInput,tuple[] tradeInput)",
    "funcSelectors:0x59b07e7a": "removeTokenAddressFromArr(address token)",
    "funcSelectors:0x5d7bdccd": "multiSigSend(address token,uint256 amount,uint64 nonce,uint8 v,bytes32 r,bytes32 s,address receiving_address)",
    "funcSelectors:0x33f7636f": "executeReserveReserveTrade(address makerReserve,address takerReserve,tuple trade)",
    "funcSelectors:0x5e75228f": "swap(address sell_token,uint256 sell_amount,address buy_token,uint256 min_output,uint256 deadline)",
    "funcSelectors:0x61902470": "cacheTokenAddress(address token,uint256 index)",
    "funcSelectors:0x660c5132": "getBestReserve(address sell_token,uint256 sell_amount,address buy_token)",
    "funcSelectors:0x66c0bd24": "getTokenIndex(address token)",
    "funcSelectors:0x6849dbe5": "nominateArbiter(address arbiter,bool status)",
    "funcSelectors:0xf6bef201": "reserveTradeFromInput(tuple packed)",
    "funcSelectors:0x72521dcd": "lockFeeCollector()",
    "funcSelectors:0x73ee4d09": "executeReserveTrade(address sellToken,uint256 sellAmount,address buyToken,uint256 buyAmount,address reserve)",
    "funcSelectors:0x7bae7c22": "swapWithReserve(address sell_token,uint256 sell_amount,address buy_token,uint256 min_output,address reserve,uint256 deadline)",
    "funcSelectors:0x862f9f5a": "getLastBlockedTimestamp(address user)",
    "funcSelectors:0x888d0e1d": "multiSigOrderBatchCancel(bytes32[] orderHashes,uint8 v,bytes32 r,bytes32 s)",
    "funcSelectors:0x570c7772": "settleReserveTradeWithData(tuple orderInput,tuple tradeInput,bytes32[] data)",
    "funcSelectors:0x28f49637": "reserveReserveTradeFromInput(tuple packed)",
    "funcSelectors:0x94785a0c": "blockFundsForSingleSigWithdrawal(address token,uint256 amount)",
    "funcSelectors:0x98a968c1": "depositWrappedEther(uint256 amount)",
    "funcSelectors:0x98ea5fca": "depositEther()",
    "funcSelectors:0x9946ce7d": "getTokenFromIndex(uint256 index)",
    "funcSelectors:0x9bafc515": "userSigWithdrawal(bytes32 packedInput1,bytes32 packedInput2,bytes32 r,bytes32 s)",
    "funcSelectors:0x9e892372": "multiSigWithdrawal(address token,uint256 amount,uint64 nonce,uint8 v,bytes32 r,bytes32 s)",
    "funcSelectors:0xa2c38a23": "initiateSingleSigWithdrawal(address token,uint256 amount)",
    "funcSelectors:0xe3d91ce3": "settleRingTrade(tuple[] orderInput,tuple[] tradeInput)",
    "funcSelectors:0xa4d72d7c": "getReserveFromIndex(uint256 index)",
    "funcSelectors:0xa6f9dae1": "changeOwner(address new_owner)",
    "funcSelectors:0xaa6ca808": "getTokens()",
    "funcSelectors:0xb695d805": "changeSingleSigWaitingPeriod(uint256 waiting_period)",
    "funcSelectors:0x27f2cb0b": "tradeFromInput(tuple packed)",
    "funcSelectors:0xc47b8164": "cacheReserveAddress(address reserve,uint256 index,bool is_public)",
    "funcSelectors:0xd0de4a63": "settleTrade(tuple makerOrderInput,tuple takerOrderInput,tuple tradeInput)",
    "funcSelectors:0xcabfc903": "getSwapOutput(address sell_token,uint256 sell_amount,address buy_token)",
    "funcSelectors:0xd0847f1c": "mintGasTokens(uint256 amount)",
    "funcSelectors:0xd4fac45d": "getBalance(address token,address user)",
    "funcSelectors:0xdedcc21b": "getReserveIndex(address reserve)",
    "funcSelectors:0x0a757da2": "settleRingTradeWithData(tuple[] orderInput,tuple[] tradeInput,bytes32[][] data)",
    "funcSelectors:0xe4e695fe": "getAvailableGasTokens()",
    "funcSelectors:0xebf26a42": "revokeDelegation(address delegate,uint8 v,bytes32 r,bytes32 s)",
    "funcSelectors:0xf6188339": "getBlocked(address token,address holder)",
    "funcSelectors:0xf8cd6e01": "executeReserveTradeWithData(address sellToken,uint256 sellAmount,address buyToken,uint256 buyAmount,address reserve,bytes32[] data)",
    "funcSelectors:0x2fbf0980": "settleReserveTrade(tuple orderInput,tuple tradeInput)",
    "funcSelectors:0x07f7aafb": "approveContract(address _contract)",
    "funcSelectors:0x69dc9ff3": "contracts(address )",
    "funcSelectors:0xb7e2077e": "denyContract(address _contract)",
    "funcSelectors:0xa8034df1": "grantApproval()",
    "funcSelectors:0x90d02b3c": "revokeApproval()",
    "funcSelectors:0x4a3e3a1f": "revokedApproval(address )",
    "funcSelectors:0x74a9402e": "transferERC1155(address collection,address from,address to,uint256 tokenId,uint256 amount)",
    "funcSelectors:0xda3e8ce4": "transferERC20(address token,address from,address to,uint256 amount)",
    "funcSelectors:0x789f93f6": "transferERC721(address collection,address from,address to,uint256 tokenId)",
    "funcSelectors:0xca72da8e": "transferERC721Unsafe(address collection,address from,address to,uint256 tokenId)",
    "funcSelectors:0x66d38203": "setup(address token_addr)",
    "funcSelectors:0x422f1043": "addLiquidity(uint256 min_liquidity,uint256 max_tokens,uint256 deadline)",
    "funcSelectors:0xf88bf15a": "removeLiquidity(uint256 amount,uint256 min_eth,uint256 min_tokens,uint256 deadline)",
    "funcSelectors:0x89402a72": "__default__()",
    "funcSelectors:0xf39b5b9b": "ethToTokenSwapInput(uint256 min_tokens,uint256 deadline)",
    "funcSelectors:0xad65d76d": "ethToTokenTransferInput(uint256 min_tokens,uint256 deadline,address recipient)",
    "funcSelectors:0x6b1d4db7": "ethToTokenSwapOutput(uint256 tokens_bought,uint256 deadline)",
    "funcSelectors:0x0b573638": "ethToTokenTransferOutput(uint256 tokens_bought,uint256 deadline,address recipient)",
    "funcSelectors:0x95e3c50b": "tokenToEthSwapInput(uint256 tokens_sold,uint256 min_eth,uint256 deadline)",
    "funcSelectors:0x7237e031": "tokenToEthTransferInput(uint256 tokens_sold,uint256 min_eth,uint256 deadline,address recipient)",
    "funcSelectors:0x013efd8b": "tokenToEthSwapOutput(uint256 eth_bought,uint256 max_tokens,uint256 deadline)",
    "funcSelectors:0xd4e4841d": "tokenToEthTransferOutput(uint256 eth_bought,uint256 max_tokens,uint256 deadline,address recipient)",
    "funcSelectors:0xddf7e1a7": "tokenToTokenSwapInput(uint256 tokens_sold,uint256 min_tokens_bought,uint256 min_eth_bought,uint256 deadline,address token_addr)",
    "funcSelectors:0xf552d91b": "tokenToTokenTransferInput(uint256 tokens_sold,uint256 min_tokens_bought,uint256 min_eth_bought,uint256 deadline,address recipient,address token_addr)",
    "funcSelectors:0xb040d545": "tokenToTokenSwapOutput(uint256 tokens_bought,uint256 max_tokens_sold,uint256 max_eth_sold,uint256 deadline,address token_addr)",
    "funcSelectors:0xf3c0efe9": "tokenToTokenTransferOutput(uint256 tokens_bought,uint256 max_tokens_sold,uint256 max_eth_sold,uint256 deadline,address recipient,address token_addr)",
    "funcSelectors:0xb1cb43bf": "tokenToExchangeSwapInput(uint256 tokens_sold,uint256 min_tokens_bought,uint256 min_eth_bought,uint256 deadline,address exchange_addr)",
    "funcSelectors:0xec384a3e": "tokenToExchangeTransferInput(uint256 tokens_sold,uint256 min_tokens_bought,uint256 min_eth_bought,uint256 deadline,address recipient,address exchange_addr)",
    "funcSelectors:0xea650c7d": "tokenToExchangeSwapOutput(uint256 tokens_bought,uint256 max_tokens_sold,uint256 max_eth_sold,uint256 deadline,address exchange_addr)",
    "funcSelectors:0x981a1327": "tokenToExchangeTransferOutput(uint256 tokens_bought,uint256 max_tokens_sold,uint256 max_eth_sold,uint256 deadline,address recipient,address exchange_addr)",
    "funcSelectors:0xcd7724c3": "getEthToTokenInputPrice(uint256 eth_sold)",
    "funcSelectors:0x59e94862": "getEthToTokenOutputPrice(uint256 tokens_bought)",
    "funcSelectors:0x95b68fe7": "getTokenToEthInputPrice(uint256 tokens_sold)",
    "funcSelectors:0x2640f62c": "getTokenToEthOutputPrice(uint256 eth_bought)",
    "funcSelectors:0x9d76ea58": "tokenAddress()",
    "funcSelectors:0x966dae0e": "factoryAddress()",
    "errorSelectors:0xb29526b9": "BearAlreadyClaimedReward()",
    "errorSelectors:0x3c16d2dc": "BitAlreadyClaimedReward()",
    "errorSelectors:0x49e27cff": "InvalidOwner()",
    "errorSelectors:0x9430a17e": "NonExistentToken()",
    "errorSelectors:0x5fd76e04": "NotCompleted()",
    "errorSelectors:0x091fe61c": "NotYourToken()",
    "errorSelectors:0xa3df9bcf": "StakingNotEnabled()",
    "errorSelectors:0x8cd22d19": "TransferNotAllowed()",
    "funcSelectors:0x27e235e3": "balances(address )",
    "funcSelectors:0xdc39f583": "bearsClaimed(uint256 )",
    "funcSelectors:0x4c7cecdd": "bitsClaimed(uint256 )",
    "funcSelectors:0xb1a8adfd": "enter(uint256[] bears,uint256[] bits)",
    "funcSelectors:0x9c87e0a8": "escape(uint256[] bears)",
    "funcSelectors:0xb0297e68": "exit(uint256[] bears,uint256[] rewards,bytes signature)",
    "funcSelectors:0xf9374284": "killaBearsContract()",
    "funcSelectors:0x7670f7dd": "killaBitsContract()",
    "funcSelectors:0x220cce97": "rewardsContract()",
    "funcSelectors:0x3a6462e4": "setRewarder(address addr)",
    "funcSelectors:0xb77a2c1c": "stakeTime()",
    "funcSelectors:0xd5a44f86": "stakes(uint256 )",
    "funcSelectors:0x1cfff51b": "stakingEnabled()",
    "funcSelectors:0x233a095d": "stakingEnabledFor(address )",
    "funcSelectors:0x69805981": "toggleStaking(bool enabled)",
    "funcSelectors:0x1a91ca5f": "toggleStakingFor(address who,bool enabled)",
    "funcSelectors:0xe2a7b501": "tridentCLSwapCallback(int256 amount0Delta,int256 amount1Delta,bytes data)",
    "funcSelectors:0x819faf7b": "aave()",
    "funcSelectors:0x06a3fe59": "aaveToken()",
    "funcSelectors:0x99b71d5c": "approveToken()",
    "funcSelectors:0x57ded9c9": "apr()",
    "funcSelectors:0xb69ef8a8": "balance()",
    "funcSelectors:0xcf8ca426": "balanceAave()",
    "funcSelectors:0x61c1ec55": "balanceCompound()",
    "funcSelectors:0xa7287971": "balanceCompoundInToken()",
    "funcSelectors:0x39c0a7e1": "balanceDydx()",
    "funcSelectors:0x0eb2a267": "balanceFulcrum()",
    "funcSelectors:0xf5a41dea": "balanceFulcrumInToken()",
    "funcSelectors:0x7137ef99": "calcPoolValueInToken()",
    "funcSelectors:0xf69e2046": "compound()",
    "funcSelectors:0xd9d7858a": "dToken()",
    "funcSelectors:0x8e4ec6ef": "dydx()",
    "funcSelectors:0x58782c21": "fulcrum()",
    "funcSelectors:0xf7c1ec77": "getAave()",
    "funcSelectors:0xf82ce27d": "getAaveCore()",
    "funcSelectors:0x77c7b8fc": "getPricePerFullShare()",
    "funcSelectors:0x8f32d59b": "isOwner()",
    "funcSelectors:0x16f0115b": "pool()",
    "funcSelectors:0x085d4883": "provider()",
    "funcSelectors:0x7d7c2a1c": "rebalance()",
    "funcSelectors:0xa160176d": "recommend()",
    "funcSelectors:0x46357473": "set_new_APR(address _new_APR)",
    "funcSelectors:0xf5ff1916": "set_new_COMPOUND(address _new_COMPOUND)",
    "funcSelectors:0x9ff011b9": "set_new_DTOKEN(uint256 _new_DTOKEN)",
    "funcSelectors:0x65aab749": "supplyAave(uint256 amount)",
    "funcSelectors:0xe849d659": "supplyCompound(uint256 amount)",
    "funcSelectors:0x06636c1c": "supplyDydx(uint256 amount)",
    "funcSelectors:0x8124955c": "supplyFulcrum(uint256 amount)",
    "funcSelectors:0xf60a15ed": "inCaseETHGetsStuck()",
    "funcSelectors:0x2e8d6e18": "inCaseTokenGetsStuck(address _TokenAddress)",
    "funcSelectors:0x2afcf480": "invest(uint256 _amount)",
    "funcSelectors:0x3990ab4f": "investSelf()",
    "funcSelectors:0xdb006a75": "redeem(uint256 redeemTokens)",
    "funcSelectors:0x812adb06": "set_new_AAVE(address _new_AAVE)",
    "funcSelectors:0xa9de245b": "set_new_ATOKEN(address _new_ATOKEN)",
    "funcSelectors:0x2c7a5ae4": "set_new_DYDX(address _new_DYDX)",
    "funcSelectors:0xbbf31644": "set_new_FULCRUM(address _new_FULCRUM)",
    "funcSelectors:0x6c25b346": "dai(address _account)",
    "funcSelectors:0xc11645bc": "daiJoin()",
    "funcSelectors:0xbe22f546": "daiToken()",
    "funcSelectors:0x4a03707c": "draw(address src,uint256 wad)",
    "funcSelectors:0xef693bed": "exit(address src,uint256 wad)",
    "funcSelectors:0x3b4da69f": "join(address dst,uint256 wad)",
    "funcSelectors:0xbb35783b": "move(address src,address dst,uint256 wad)",
    "funcSelectors:0x8fcbaf0c": "permit(address holder,address spender,uint256 nonce,uint256 expiry,bool allowed,uint8 v,bytes32 r,bytes32 s)",
    "funcSelectors:0x4ba2363a": "pot()",
    "funcSelectors:0x36569e77": "vat()",
    "funcSelectors:0x06394c9b": "changeOperator(address _newOperator)",
    "funcSelectors:0x17cc915c": "nullifierHashes(bytes32 )",
    "funcSelectors:0x21a0adb6": "withdraw(bytes _proof,bytes32 _root,bytes32 _nullifierHash,address _recipient,address _relayer,uint256 _fee,uint256 _refund)",
    "funcSelectors:0x2b7ac3f3": "verifier()",
    "funcSelectors:0x38bf282e": "hashLeftRight(bytes32 _left,bytes32 _right)",
    "funcSelectors:0x414a37ba": "FIELD_SIZE()",
    "funcSelectors:0x4ecf518b": "levels()",
    "funcSelectors:0x570ca735": "operator()",
    "funcSelectors:0x6d9833e3": "isKnownRoot(bytes32 _root)",
    "funcSelectors:0x8bca6d16": "denomination()",
    "funcSelectors:0x90eeb02b": "currentRootIndex()",
    "funcSelectors:0x97fc007c": "updateVerifier(address _newVerifier)",
    "funcSelectors:0x9fa12d0b": "isSpentArray(bytes32[] _nullifierHashes)",
    "funcSelectors:0xb214faa5": "deposit(bytes32 _commitment)",
    "funcSelectors:0xba70f757": "getLastRoot()",
    "funcSelectors:0xc2b40ae4": "roots(uint256 )",
    "funcSelectors:0xcd87a3b4": "ROOT_HISTORY_SIZE()",
    "funcSelectors:0xe5285dcc": "isSpent(bytes32 _nullifierHash)",
    "funcSelectors:0xe8295588": "zeros(uint256 )",
    "funcSelectors:0xec732959": "ZERO_VALUE()",
    "funcSelectors:0xf178e47c": "filledSubtrees(uint256 )",
    "funcSelectors:0xfc7e9c6f": "nextIndex()",
    "funcSelectors:0x0b82d33d": "withdrawBalanceDifference()",
    "funcSelectors:0x0e7c1cb5": "originalToken()",
    "funcSelectors:0x1d6f757d": "withdraw(uint256 _value,uint8 v,bytes32 r,bytes32 s,uint256 signatureValidUntilBlock)",
    "funcSelectors:0x45164b3e": "TRANSFER_PROXY_VEFX()",
    "funcSelectors:0x74f1d6ce": "keccak(address _sender,address _wrapper,uint256 _validTill)",
    "funcSelectors:0x7df73e27": "isSigner(address )",
    "funcSelectors:0x8b257d3d": "isValidSignature(bytes32 hash,uint8 v,bytes32 r,bytes32 s)",
    "funcSelectors:0xad93640f": "TRANSFER_PROXY_V2()",
    "funcSelectors:0xcc891023": "depositLock(address )",
    "funcSelectors:0xdc42f2ed": "withdrawDifferentToken(address _differentToken)",
    "funcSelectors:0xeb12d61e": "addSigner(address _newSigner)",
    "errorSelectors:0x0bdbb71b": "CanNoLongerEscape()",
    "funcSelectors:0x64da4178": "adminEscape(uint256[] bears)",
    "funcSelectors:0xb76aa710": "adminExit(address holder,uint256[] bears,uint256[] rewards)",
    "funcSelectors:0xc7e3677b": "escapeAndMarkAsClaimed(uint256[] bears)",
    "funcSelectors:0xd2f7265a": "exchange()",
    "funcSelectors:0x99f0d6c5": "transferNFT(address collection,uint256 tokenId,uint256 ,address from,address to)",
    "funcSelectors:0x118e31b7": "getBorrowBalance(address account,address asset)",
    "funcSelectors:0x24021127": "_setOriginationFee(uint256 originationFeeMantissa)",
    "funcSelectors:0x26617c28": "_setPaused(bool requestedState)",
    "funcSelectors:0x26782247": "pendingAdmin()",
    "funcSelectors:0x3be59443": "_setOracle(address newOracle)",
    "funcSelectors:0x4706c375": "_withdrawEquity(address asset,uint256 amount)",
    "funcSelectors:0x4b8a3529": "borrow(address asset,uint256 amount)",
    "funcSelectors:0x5cf756d2": "_setMarketInterestRateModel(address asset,address interestRateModel)",
    "funcSelectors:0x5e9a523c": "assetPrices(address asset)",
    "funcSelectors:0x5ec88c79": "getAccountLiquidity(address account)",
    "funcSelectors:0x6e2ede03": "getCollateralMarketsLength()",
    "funcSelectors:0x8053fcbe": "liquidationDiscount()",
    "funcSelectors:0x8e8f294b": "markets(address )",
    "funcSelectors:0x9f180cf1": "calculateAccountValues(address userAddress)",
    "funcSelectors:0xabdb5ea8": "repayBorrow(address asset,uint256 amount)",
    "funcSelectors:0xb4eae1cb": "collateralRatio()",
    "funcSelectors:0xb71d1a0c": "_setPendingAdmin(address newPendingAdmin)",
    "funcSelectors:0xb7adddac": "supplyBalances(address ,address )",
    "funcSelectors:0xb8bb5c42": "originationFee()",
    "funcSelectors:0xba377731": "getSupplyBalance(address account,address asset)",
    "funcSelectors:0xbeb54615": "collateralMarkets(uint256 )",
    "funcSelectors:0xc1abfaa3": "_supportMarket(address asset,address interestRateModel)",
    "funcSelectors:0xc365a646": "_setRiskParameters(uint256 collateralRatioMantissa,uint256 liquidationDiscountMantissa)",
    "funcSelectors:0xdbe2bc84": "_suspendMarket(address asset)",
    "funcSelectors:0xe61604cf": "liquidateBorrow(address targetAccount,address assetBorrow,address assetCollateral,uint256 requestedAmountClose)",
    "funcSelectors:0xe9c714f2": "_acceptAdmin()",
    "funcSelectors:0xf2b9fdb8": "supply(address asset,uint256 amount)",
    "funcSelectors:0xf3fef3a3": "withdraw(address token,uint256 amount)",
    "funcSelectors:0xfc7d42d7": "borrowBalances(address ,address )",
    "funcSelectors:0xd6d75f51": "moneyMarket()",
    "funcSelectors:0x01d22ccd": "rebalancer()",
    "funcSelectors:0x194a62a8": "redeemInterestBearingTokens(uint256 _amount)",
    "funcSelectors:0x1a5d6705": "getParamsForRedeemIdleToken(uint256 _amount,bool _skipRebalance)",
    "funcSelectors:0x1aaa4a18": "setMinRateDifference(uint256 _rate)",
    "funcSelectors:0x22c9f971": "minRateDifference()",
    "funcSelectors:0x36a00082": "allAvailableTokens(uint256 )",
    "funcSelectors:0x3b97e856": "tokenDecimals()",
    "funcSelectors:0x3cfcef64": "mintIdleToken(uint256 _amount,uint256[] _clientProtocolAmounts)",
    "funcSelectors:0x408cfe24": "iToken()",
    "funcSelectors:0x45c8026c": "protocolWrappers(address )",
    "funcSelectors:0x46fbf68e": "isPauser(address account)",
    "funcSelectors:0x47ce6522": "getParamsForMintIdleToken(uint256 _amount)",
    "funcSelectors:0x56a5178b": "claimITokens(uint256[] _clientProtocolAmounts)",
    "funcSelectors:0x6922d7b6": "setPriceCalculator(address _priceCalculator)",
    "funcSelectors:0x69ad6af2": "rebalance(uint256 _newAmount,uint256[] _clientProtocolAmounts)",
    "funcSelectors:0x6cfd1553": "setRebalancer(address _rebalancer)",
    "funcSelectors:0x6ef8d66d": "renouncePauser()",
    "funcSelectors:0x7e2a53af": "setIToken(address _iToken)",
    "funcSelectors:0x7ff9b596": "tokenPrice()",
    "funcSelectors:0x82ba653d": "setManualPlay(bool _manualPlay)",
    "funcSelectors:0x82dc1ec4": "addPauser(address account)",
    "funcSelectors:0x8b95e335": "priceCalculator()",
    "funcSelectors:0x9fc7875b": "manualPlay()",
    "funcSelectors:0xb13bd491": "getAPRs()",
    "funcSelectors:0xbf959bb8": "currentTokensUsed(uint256 )",
    "funcSelectors:0xc4a664b8": "getParamsForRebalance(uint256 _newAmount)",
    "funcSelectors:0xc85c93aa": "redeemIdleToken(uint256 _amount,bool _skipRebalance,uint256[] _clientProtocolAmounts)",
    "funcSelectors:0xf2ce5806": "setProtocolWrapper(address _token,address _wrapper)",
    "funcSelectors:0xf2d50ba6": "lastITokenPrice()",
    "funcSelectors:0x913664b8": "discountedSwap(address caller,tuple desc,bytes data)",
    "funcSelectors:0x22102cdd": "discountedSwap(address caller,tuple desc,tuple[] calls)",
    "funcSelectors:0x32af3139": "swap(address caller,tuple desc,tuple[] calls)",
    "errorSelectors:0x4ca88867": "AccessDenied()",
    "errorSelectors:0xbd71636d": "AdvanceNonceFailed()",
    "errorSelectors:0x41a26a63": "AlreadyFilled()",
    "errorSelectors:0x1f1b8f61": "ArbitraryStaticCallFailed()",
    "errorSelectors:0xb2c02722": "BadPool()",
    "errorSelectors:0x5cd5d233": "BadSignature()",
    "errorSelectors:0xb12d13eb": "ETHTransferFailed()",
    "errorSelectors:0x67e7c0f6": "EmptyPools()",
    "errorSelectors:0x1b10b0f9": "EthDepositRejected()",
    "errorSelectors:0x110b8e73": "GetAmountCallFailed()",
    "errorSelectors:0xef356d7a": "IncorrectDataLength()",
    "errorSelectors:0xf4d678b8": "InsufficientBalance()",
    "errorSelectors:0x1841b4e1": "InvalidMsgValue()",
    "errorSelectors:0xf71fbda2": "InvalidatedOrder()",
    "errorSelectors:0xaa34b696": "MakingAmountExceeded()",
    "errorSelectors:0x481ea392": "MakingAmountTooLow()",
    "errorSelectors:0x00e2a522": "OnlyOneAmountShouldBeZero()",
    "errorSelectors:0xc56873ba": "OrderExpired()",
    "errorSelectors:0xd9e1c6dc": "PermitLengthTooLow()",
    "errorSelectors:0xb6629c02": "PredicateIsNotTrue()",
    "errorSelectors:0xd4dfdafe": "PrivateOrder()",
    "errorSelectors:0x17c2b1f1": "RFQBadSignature()",
    "errorSelectors:0xe8c66321": "RFQPrivateOrder()",
    "errorSelectors:0x07b6e79f": "RFQSwapWithZeroAmount()",
    "errorSelectors:0x692e45e0": "RFQZeroTargetIsForbidden()",
    "errorSelectors:0xc5f2be51": "ReentrancyDetected()",
    "errorSelectors:0xecef3664": "RemainingAmountIsZero()",
    "errorSelectors:0x85cd58dc": "ReservesCallFailed()",
    "errorSelectors:0xf32bec2f": "ReturnAmountIsNotEnough()",
    "errorSelectors:0x68275857": "SafePermitBadLength()",
    "errorSelectors:0xfb7f5079": "SafeTransferFailed()",
    "errorSelectors:0xf4059071": "SafeTransferFromFailed()",
    "errorSelectors:0x1934afc8": "SimulationResults(bool success,bytes res)",
    "errorSelectors:0xcf0b4d3a": "SwapAmountTooLarge()",
    "errorSelectors:0xfba5a276": "SwapWithZeroAmount()",
    "errorSelectors:0x7f902a93": "TakingAmountExceeded()",
    "errorSelectors:0x939c4204": "TakingAmountIncreased()",
    "errorSelectors:0xfb8ae129": "TakingAmountTooHigh()",
    "errorSelectors:0x70a03f48": "TransferFromMakerToTakerFailed()",
    "errorSelectors:0x478a5205": "TransferFromTakerToMakerFailed()",
    "errorSelectors:0xb838de96": "UnknownOrder()",
    "errorSelectors:0x49986e73": "WrongAmount()",
    "errorSelectors:0xbec74c85": "WrongGetter()",
    "errorSelectors:0x0262dde4": "ZeroMinReturn()",
    "errorSelectors:0x28ebf247": "ZeroReturnAmount()",
    "errorSelectors:0xb0c4d05f": "ZeroTargetIsForbidden()",
    "funcSelectors:0x72c244a8": "advanceNonce(uint8 amount)",
    "funcSelectors:0xbfa75143": "and(uint256 offsets,bytes data)",
    "funcSelectors:0xbf15fcd8": "arbitraryStaticCall(address target,bytes data)",
    "funcSelectors:0x3089c27d": "cancelOrder(tuple order)",
    "funcSelectors:0xbddccd35": "cancelOrderRFQ(uint256 orderInfo,uint256 additionalMask)",
    "funcSelectors:0x513000d6": "checkPredicate(tuple order)",
    "funcSelectors:0x84bd6d29": "clipperSwap(address clipperExchange,address srcToken,address dstToken,uint256 inputAmount,uint256 outputAmount,uint256 goodUntil,bytes32 r,bytes32 vs)",
    "funcSelectors:0x093d4fa5": "clipperSwapTo(address clipperExchange,address recipient,address srcToken,address dstToken,uint256 inputAmount,uint256 outputAmount,uint256 goodUntil,bytes32 r,bytes32 vs)",
    "funcSelectors:0xc805a666": "clipperSwapToWithPermit(address clipperExchange,address recipient,address srcToken,address dstToken,uint256 inputAmount,uint256 outputAmount,uint256 goodUntil,bytes32 r,bytes32 vs,bytes permit)",
    "funcSelectors:0x6fe7b0ba": "eq(uint256 value,bytes data)",
    "funcSelectors:0xa06869de": "fillOrder(tuple order,bytes signature,bytes interaction,uint256 makingAmount,uint256 takingAmount,uint256 skipPermitAndThresholdAmount)",
    "funcSelectors:0xfa1914c1": "fillOrderRFQ(tuple order,bytes signature,uint256 flagsAndAmount)",
    "funcSelectors:0xcaa35c67": "fillOrderRFQCompact(tuple order,bytes32 r,bytes32 vs,uint256 flagsAndAmount)",
    "funcSelectors:0xf275460b": "fillOrderRFQTo(tuple order,bytes signature,uint256 flagsAndAmount,address target)",
    "funcSelectors:0x9266ba5f": "fillOrderRFQToWithPermit(tuple order,bytes signature,uint256 flagsAndAmount,address target,bytes permit)",
    "funcSelectors:0x825a2581": "fillOrderTo(tuple order_,bytes signature,bytes interaction,uint256 makingAmount,uint256 takingAmount,uint256 skipPermitAndThresholdAmount,address target)",
    "funcSelectors:0xee184ad7": "fillOrderToWithPermit(tuple order,bytes signature,bytes interaction,uint256 makingAmount,uint256 takingAmount,uint256 skipPermitAndThresholdAmount,address target,bytes permit)",
    "funcSelectors:0x4f38e2b8": "gt(uint256 value,bytes data)",
    "funcSelectors:0xabace27a": "hashOrder(tuple order)",
    "funcSelectors:0xc53a0292": "increaseNonce()",
    "funcSelectors:0xca4ece22": "lt(uint256 value,bytes data)",
    "funcSelectors:0x70ae92d2": "nonce(address )",
    "funcSelectors:0xcf6fc6e3": "nonceEquals(address makerAddress,uint256 makerNonce)",
    "funcSelectors:0x74261145": "or(uint256 offsets,bytes data)",
    "funcSelectors:0xbc1ed74c": "remaining(bytes32 orderHash)",
    "funcSelectors:0x7e54f092": "remainingRaw(bytes32 orderHash)",
    "funcSelectors:0x942461bb": "remainingsRaw(bytes32[] orderHashes)",
    "funcSelectors:0xbd61951d": "simulate(address target,bytes data)",
    "funcSelectors:0xf770ee89": "swap(address executor,tuple desc,bytes permit,bytes data)",
    "funcSelectors:0x63592c2b": "timestampBelow(uint256 time)",
    "funcSelectors:0x2cc2878d": "timestampBelowAndNonceEquals(uint256 timeNonceAccount)",
    "funcSelectors:0x0502b1c5": "unoswap(address srcToken,uint256 amount,uint256 minReturn,uint256[] pools)",
    "funcSelectors:0xf78dc253": "unoswapTo(address recipient,address srcToken,uint256 amount,uint256 minReturn,uint256[] pools)",
    "funcSelectors:0x3c15fd91": "unoswapToWithPermit(address recipient,address srcToken,uint256 amount,uint256 minReturn,uint256[] pools,bytes permit)",
    "funcSelectors:0xb0431182": "clipperSwap(address srcToken,address dstToken,uint256 amount,uint256 minReturn)",
    "funcSelectors:0x9994dd15": "clipperSwapTo(address recipient,address srcToken,address dstToken,uint256 amount,uint256 minReturn)",
    "funcSelectors:0xd6a92a5d": "clipperSwapToWithPermit(address recipient,address srcToken,address dstToken,uint256 amount,uint256 minReturn,bytes permit)",
    "funcSelectors:0x8059bc34": "getOrdersInfoRespectingBalancesAndAllowances(address token,address zrx,address zrxTokenProxy,tuple[] orders)",
    "funcSelectors:0xc91ad835": "marketSellOrdersProportion(address tokenSell,address tokenBuy,address zrxExchange,address zrxTokenProxy,tuple[] orders,bytes[] signatures,uint256 mul,uint256 div)",
    "funcSelectors:0xae4dd0fc": "withdrawAllToken(address token)",
    "funcSelectors:0xbf86d690": "isShutdown()",
    "funcSelectors:0xc9b27359": "infiniteApproveIfNeeded(address token,address to)",
    "funcSelectors:0xe8edc816": "spender()",
    "funcSelectors:0xf88309d7": "swap(address fromToken,address toToken,uint256 fromTokenAmount,uint256 minReturnAmount,uint256 guaranteedAmount,address referrer,address[] callAddresses,bytes callDataConcat,uint256[] starts,uint256[] gasLimitsAndValues)",
    "funcSelectors:0xfc0e74d1": "shutdown()",
    "funcSelectors:0xdb9ee7fa": "marketSellOrders(address makerAsset,address zrxExchange,address zrxTokenProxy,uint256 takerAssetFillAmount,tuple[] orders,bytes[] signatures)",
    "funcSelectors:0x54dd5f74": "LIMIT_ORDER_TYPEHASH()",
    "funcSelectors:0x961d5b1e": "and(address[] targets,bytes[] data)",
    "funcSelectors:0x36006bf3": "doublePrice(address oracle1,address oracle2,uint256 spread,uint256 amount)",
    "funcSelectors:0x32565d61": "eq(uint256 value,address target,bytes data)",
    "funcSelectors:0x6d95ebef": "fillOrder(tuple order,bytes signature,uint256 makingAmount,uint256 takingAmount,uint256 thresholdAmount)",
    "funcSelectors:0x66fb0e92": "fillOrderTo(tuple order,bytes signature,uint256 makingAmount,uint256 takingAmount,uint256 thresholdAmount,address target)",
    "funcSelectors:0x57505636": "fillOrderToWithPermit(tuple order,bytes signature,uint256 makingAmount,uint256 takingAmount,uint256 thresholdAmount,address target,bytes permit)",
    "funcSelectors:0xf4a215c3": "getMakerAmount(uint256 orderMakerAmount,uint256 orderTakerAmount,uint256 swapTakerAmount)",
    "funcSelectors:0x296637bf": "getTakerAmount(uint256 orderMakerAmount,uint256 orderTakerAmount,uint256 swapMakerAmount)",
    "funcSelectors:0x057702e9": "gt(uint256 value,address target,bytes data)",
    "funcSelectors:0x871919d5": "lt(uint256 value,address target,bytes data)",
    "funcSelectors:0xe6133301": "or(address[] targets,bytes[] data)",
    "funcSelectors:0x7f29a59d": "simulateCalls(address[] targets,bytes[] data)",
    "funcSelectors:0xc05435f1": "singlePrice(address oracle,uint256 inverseAndSpread,uint256 amount)",
    "errorSelectors:0x42200566": "CalldataEmptyButInitNotZero()",
    "errorSelectors:0x79c9df22": "FacetAddressIsNotZero()",
    "errorSelectors:0xc68ec83a": "FacetAddressIsZero()",
    "errorSelectors:0xe3500600": "FacetContainsNoCode()",
    "errorSelectors:0xa023275d": "FunctionAlreadyExists()",
    "errorSelectors:0xa9ad62f8": "FunctionDoesNotExist()",
    "errorSelectors:0xc3c5ec37": "FunctionIsImmutable()",
    "errorSelectors:0xe548e6b5": "IncorrectFacetCutAction()",
    "errorSelectors:0xc53ebed5": "InitReverted()",
    "errorSelectors:0x98116860": "InitZeroButCalldataNotEmpty()",
    "errorSelectors:0x7bc55950": "NoSelectorsInFace()",
    "funcSelectors:0x6ba355aa": "initializeTreeForMigration(bytes32[] _filledSubtrees,bytes32 _root)",
    "funcSelectors:0x88d761f2": "finishMigration()",
    "funcSelectors:0x916710aa": "migrateState(bytes32[] _commitments,bytes32[] _nullifierHashes)",
    "funcSelectors:0xb06faf62": "isMigrated()",
    "funcSelectors:0x0e752702": "repayBorrow(uint256 repayAmount)",
    "funcSelectors:0x173b9904": "reserveFactorMantissa()",
    "funcSelectors:0x17bfdfbc": "borrowBalanceCurrent(address account)",
    "funcSelectors:0x182df0f5": "exchangeRateStored()",
    "funcSelectors:0x2608f818": "repayBorrowBehalf(address borrower,uint256 repayAmount)",
    "funcSelectors:0x3af9e669": "balanceOfUnderlying(address owner)",
    "funcSelectors:0x3b1d21a2": "getCash()",
    "funcSelectors:0x4576b5db": "_setComptroller(address newComptroller)",
    "funcSelectors:0x47bd3718": "totalBorrows()",
    "funcSelectors:0x5fe3b567": "comptroller()",
    "funcSelectors:0x601a0bf1": "_reduceReserves(uint256 reduceAmount)",
    "funcSelectors:0x675d972c": "initialExchangeRateMantissa()",
    "funcSelectors:0x6c540baf": "accrualBlockNumber()",
    "funcSelectors:0x6f307dc3": "underlying()",
    "funcSelectors:0x73acee98": "totalBorrowsCurrent()",
    "funcSelectors:0x852a12e3": "redeemUnderlying(uint256 redeemAmount)",
    "funcSelectors:0x8f840ddd": "totalReserves()",
    "funcSelectors:0x95dd9193": "borrowBalanceStored(address account)",
    "funcSelectors:0xa6afed95": "accrueInterest()",
    "funcSelectors:0xaa5af0fd": "borrowIndex()",
    "funcSelectors:0xae9d70b0": "supplyRatePerBlock()",
    "funcSelectors:0xb2a02ff1": "seize(address liquidator,address borrower,uint256 seizeTokens)",
    "funcSelectors:0xbd6d894d": "exchangeRateCurrent()",
    "funcSelectors:0xc37f68e2": "getAccountSnapshot(address account)",
    "funcSelectors:0xc5ebeaec": "borrow(uint256 borrowAmount)",
    "funcSelectors:0xf2b3abbd": "_setInterestRateModel(address newInterestRateModel)",
    "funcSelectors:0xf3fdb15a": "interestRateModel()",
    "funcSelectors:0xf5e3c462": "liquidateBorrow(address borrower,uint256 repayAmount,address cTokenCollateral)",
    "funcSelectors:0xf8f9da28": "borrowRatePerBlock()",
    "funcSelectors:0xfca7820b": "_setReserveFactor(uint256 newReserveFactorMantissa)",
    "funcSelectors:0xfe9c44ae": "isCToken()",
    "funcSelectors:0x1413dc7d": "CUBE_COUNTER_KEY()",
    "funcSelectors:0x0f532d18": "MSG_SENDER_KEY()",
    "funcSelectors:0x87c13943": "PERCENTAGE_BASE()",
    "funcSelectors:0xfa2901a5": "POSTPROCESS_SIG()",
    "funcSelectors:0x38c5c08e": "batchExec(address[] tos,bytes32[] configs,bytes[] datas)",
    "funcSelectors:0x99eb59b9": "cache(bytes32 )",
    "funcSelectors:0x71938509": "execs(address[] tos,bytes32[] configs,bytes[] datas)",
    "funcSelectors:0xdc9031c4": "stack(uint256 )",
    "funcSelectors:0x7388614b": "buyCover(address coveredContractAddress,bytes4 coverCurrency,uint256[] coverDetails,uint16 coverPeriod,uint8 _v,bytes32 _r,bytes32 _s)",
    "funcSelectors:0x445def2e": "distributorFeePercentage()",
    "funcSelectors:0xdc4645c3": "getCoverStatus(uint256 tokenId)",
    "funcSelectors:0x4e170591": "getMemberRoles()",
    "funcSelectors:0xb4634a5e": "nxMaster()",
    "funcSelectors:0x91be3713": "nxmTokenApprove(address _spender,uint256 _value)",
    "funcSelectors:0x3500e4a9": "redeemClaim(uint256 tokenId)",
    "funcSelectors:0x74bd0ace": "sellNXMTokens(uint256 amount)",
    "funcSelectors:0x6aa14a96": "submitClaim(uint256 tokenId)",
    "funcSelectors:0x4ed75d47": "switchMembership(address _newMembership)",
    "funcSelectors:0x4f64b2be": "tokens(uint256 i)",
    "funcSelectors:0x522f6815": "withdrawEther(address recipient,uint256 amount)",
    "funcSelectors:0x165ffdcc": "withdrawTokens(address _recipient,uint256 _amount,bytes4 _currency)",
    "funcSelectors:0xe9744712": "withdrawableTokens(bytes4 )",
    "errorSelectors:0xe320176b": "NonZeroValue()",
    "errorSelectors:0x3d2f7ef6": "TokenNonExistent(uint256 tokenId)",
    "errorSelectors:0xbb690064": "TokenNonOwner(uint256 tokenId)",
    "errorSelectors:0x595162dd": "Unapprovable()",
    "errorSelectors:0x072b78c7": "Untransferable()",
    "funcSelectors:0xbb4b5734": "EXPIRATION()",
    "funcSelectors:0x1852e8d9": "calculateReward(address account,uint256 tokenId)",
    "funcSelectors:0x068c526f": "calculateRewards(address account,uint256[] tokenIds)",
    "funcSelectors:0x5eac6239": "claimRewards(uint256[] tokenIds)",
    "funcSelectors:0x598b8e71": "deposit(uint256[] tokenIds)",
    "funcSelectors:0xe3a9db1a": "depositsOf(address account)",
    "funcSelectors:0x276184ae": "erc20Address()",
    "funcSelectors:0x2352a864": "erc721Address()",
    "funcSelectors:0x940414ce": "findRate(uint256 tokenId)",
    "funcSelectors:0x5773d778": "pauseTokenEmissions()",
    "funcSelectors:0x3320d501": "pausedDepositBlocks()",
    "funcSelectors:0xcea01962": "rewardRate(uint256 )",
    "funcSelectors:0x9a03d9a3": "setERC721Address(address _newErc721Address)",
    "funcSelectors:0x4a39fa80": "setErc20Address(address _newErc20Address)",
    "funcSelectors:0xdb3b947f": "setStakedSealsAddress(address _stakingContractV1Address)",
    "funcSelectors:0x7c79d73b": "stakeSealsV1()",
    "funcSelectors:0x5e1bef32": "staked(uint256 )",
    "funcSelectors:0x335e15a2": "stakedInfoOf(uint256[] tokenIds)",
    "funcSelectors:0x19a249a8": "toggleEmissions()",
    "funcSelectors:0xc620994b": "togglePauseDepositBlocks()",
    "funcSelectors:0xb32534cf": "updateRewardRate(uint256 index,uint256 rate)",
    "funcSelectors:0x983d95ce": "withdraw(uint256[] tokenIds)",
    "funcSelectors:0x315a095d": "withdrawTokens(uint256 amount)",
    "errorSelectors:0x98891923": "BadReturnValueFromERC20OnTransfer(address token,address from,address to,uint256 amount)",
    "errorSelectors:0x93daadf2": "ChannelClosed(address channel)",
    "errorSelectors:0x924e341e": "ChannelStatusAlreadySet(address channel,bool isOpen)",
    "errorSelectors:0xafc445e2": "ERC1155BatchTransferGenericFailure(address token,address from,address to,uint256[] identifiers,uint256[] amounts)",
    "errorSelectors:0xeba2084c": "Invalid1155BatchTransferEncoding()",
    "errorSelectors:0x6d5769be": "InvalidController()",
    "errorSelectors:0xefcc00b1": "InvalidERC721TransferAmount()",
    "errorSelectors:0x7932f1fc": "InvalidItemType()",
    "errorSelectors:0x91b3e514": "MissingItemAmount()",
    "errorSelectors:0x5f15d672": "NoContract(address account)",
    "errorSelectors:0xf486bc87": "TokenTransferGenericFailure(address token,address from,address to,uint256 identifier,uint256 amount)",
    "errorSelectors:0x6ab37ce7": "UnusedItemParameters()",
    "funcSelectors:0x9b3532bc": "executeBatch1155(tuple[] batchTransfers)",
    "funcSelectors:0x6cc92b6e": "executeWithBatch1155(tuple[] standardTransfers,tuple[] batchTransfers)",
    "funcSelectors:0xc4e8fcb5": "updateChannel(address channel,bool isOpen)",
    "funcSelectors:0x81766d95": "ownerSetSpreadPremium(uint256 marketId,tuple spreadPremium)",
    "funcSelectors:0x052f72d7": "getIsGlobalOperator(address operator)",
    "funcSelectors:0x062bd3e9": "getMarketTokenAddress(uint256 marketId)",
    "funcSelectors:0x121fb72f": "ownerSetInterestSetter(uint256 marketId,address interestSetter)",
    "funcSelectors:0x540e6f18": "getAccountValues(tuple account)",
    "funcSelectors:0x13368364": "getMarketPriceOracle(uint256 marketId)",
    "funcSelectors:0x197f0f05": "getMarketInterestSetter(uint256 marketId)",
    "funcSelectors:0x1a7777bb": "getMarketSpreadPremium(uint256 marketId)",
    "funcSelectors:0x295c39a5": "getNumMarkets()",
    "funcSelectors:0x2a560845": "ownerWithdrawUnsupportedTokens(address token,address recipient)",
    "funcSelectors:0x40d0b979": "ownerSetMinBorrowedValue(tuple minBorrowedValue)",
    "funcSelectors:0x08aadfe5": "ownerSetLiquidationSpread(tuple spread)",
    "funcSelectors:0xc44f3c13": "ownerSetEarningsRate(tuple earningsRate)",
    "funcSelectors:0x3a031bf0": "getIsLocalOperator(address owner,address operator)",
    "funcSelectors:0xd8830f97": "getAccountPar(tuple account,uint256 marketId)",
    "funcSelectors:0xea179858": "ownerSetMarginPremium(uint256 marketId,tuple marginPremium)",
    "funcSelectors:0x4f3c1542": "getMarginRatio()",
    "funcSelectors:0x56ea84b2": "getMarketCurrentIndex(uint256 marketId)",
    "funcSelectors:0x5ac7d17c": "getMarketIsClosing(uint256 marketId)",
    "funcSelectors:0x69794795": "getRiskParams()",
    "funcSelectors:0x717f6629": "getAccountBalances(tuple account)",
    "funcSelectors:0x7e9eaf41": "getMinBorrowedValue()",
    "funcSelectors:0x2e869633": "setOperators(tuple[] args)",
    "funcSelectors:0x8928378e": "getMarketPrice(uint256 marketId)",
    "funcSelectors:0x8f6bc659": "ownerWithdrawExcessTokens(uint256 marketId,address recipient)",
    "funcSelectors:0x6d3d5117": "ownerAddMarket(address token,address priceOracle,address interestSetter,tuple marginPremium,tuple spreadPremium)",
    "funcSelectors:0xfabba65e": "operate(tuple[] accounts,tuple[] actions)",
    "funcSelectors:0xb548b892": "getMarketWithInfo(uint256 marketId)",
    "funcSelectors:0x23d4ecf9": "ownerSetMarginRatio(tuple ratio)",
    "funcSelectors:0xc1460942": "getLiquidationSpread()",
    "funcSelectors:0x163fa34c": "getAccountWei(tuple account,uint256 marketId)",
    "funcSelectors:0xcb04a34c": "getMarketTotalPar(uint256 marketId)",
    "funcSelectors:0xd24c48bc": "getLiquidationSpreadForPair(uint256 heldMarketId,uint256 owedMarketId)",
    "funcSelectors:0xd5ecf7c5": "getNumExcessTokens(uint256 marketId)",
    "funcSelectors:0xdeec053d": "getMarketCachedIndex(uint256 marketId)",
    "funcSelectors:0xcc789c6a": "getAccountStatus(tuple account)",
    "funcSelectors:0xe5520228": "getEarningsRate()",
    "funcSelectors:0xe8e72f75": "ownerSetPriceOracle(uint256 marketId,address priceOracle)",
    "funcSelectors:0xeb1c6e6b": "getRiskLimits()",
    "funcSelectors:0xeb44fdd3": "getMarket(uint256 marketId)",
    "funcSelectors:0xef6957d0": "ownerSetIsClosing(uint256 marketId,bool isClosing)",
    "funcSelectors:0xf2901ae2": "ownerSetGlobalOperator(address operator,bool approved)",
    "funcSelectors:0x19d42a84": "getAdjustedAccountValues(tuple account)",
    "funcSelectors:0xfd04b606": "getMarketMarginPremium(uint256 marketId)",
    "funcSelectors:0xfd47eda6": "getMarketInterestRate(uint256 marketId)",
    "funcSelectors:0x9de66604": "erc20old()",
    "funcSelectors:0xd9ee369a": "withdrawDifferentToken(address _differentToken,bool _erc20old)",
    "funcSelectors:0x972fdd26": "getFunctionImplementation(bytes4 selector)",
    "funcSelectors:0x06df453e": "approveDelegate(address delegate)",
    "funcSelectors:0x0c511d11": "isOrderCancelled(bytes32 orderHash)",
    "funcSelectors:0x0f8eeeb0": "isAccountLiquidatable(address user,uint16 marketID)",
    "funcSelectors:0x101424d9": "getPoolCashableAmount(address asset)",
    "funcSelectors:0x13a30013": "getMarket(uint16 marketID)",
    "funcSelectors:0x168ba56c": "liquidateAccount(address user,uint16 marketID)",
    "funcSelectors:0x1a8cd123": "getMarketTransferableAmount(uint16 marketID,address asset,address user)",
    "funcSelectors:0x21028767": "updateMarket(uint16 marketID,uint256 newAuctionRatioStart,uint256 newAuctionRatioPerBlock,uint256 newLiquidateRate,uint256 newWithdrawRate)",
    "funcSelectors:0x2a2b1240": "fillAuctionWithAmount(uint32 auctionID,uint256 amount)",
    "funcSelectors:0x2d6a6025": "getAuctionDetails(uint32 auctionID)",
    "funcSelectors:0x30b8b2c6": "getAsset(address assetAddress)",
    "funcSelectors:0x316e5b1e": "getAmountSupplied(address asset,address user)",
    "funcSelectors:0x325b7b03": "getHydroTokenAddress()",
    "funcSelectors:0x3560c5cd": "exitIncentiveSystem()",
    "funcSelectors:0x3b481b0a": "createAsset(address asset,address oracleAddress,address interestModelAddress,string poolTokenName,string poolTokenSymbol,uint8 poolTokenDecimals)",
    "funcSelectors:0x3e5893be": "canMatchOrdersFrom(address relayer)",
    "funcSelectors:0x43239e9b": "getInterestRates(address asset,uint256 extraBorrowAmount)",
    "funcSelectors:0x4376abf1": "getDiscountedRate(address user)",
    "funcSelectors:0x53bab42e": "getAccountDetails(address user,uint16 marketID)",
    "funcSelectors:0x55559a86": "getOrderFilledAmount(bytes32 orderHash)",
    "funcSelectors:0x5be53e74": "getCurrentAuctions()",
    "funcSelectors:0x5dae042d": "getAssetOraclePrice(address assetAddress)",
    "funcSelectors:0x637b93ed": "getInsuranceBalance(address asset)",
    "funcSelectors:0x68da10ae": "getTotalSupply(address asset)",
    "funcSelectors:0x762a4862": "updateAsset(address asset,address oracleAddress,address interestModelAddress)",
    "funcSelectors:0xa732b320": "isValidSignature(bytes32 hash,address signerAddress,tuple signature)",
    "funcSelectors:0xc76d7b94": "batch(tuple[] actions)",
    "funcSelectors:0x8538d14e": "getTotalBorrow(address asset)",
    "funcSelectors:0x7495d9fa": "createMarket(tuple market)",
    "funcSelectors:0x8ea17c7b": "getAmountBorrowed(address asset,address user,uint16 marketID)",
    "funcSelectors:0x929066f5": "isParticipant(address relayer)",
    "funcSelectors:0x9c61a3dd": "getAllMarketsCount()",
    "funcSelectors:0x91522a9a": "matchOrders(tuple params)",
    "funcSelectors:0xa6fc9191": "updateAuctionInitiatorRewardRatio(uint256 newInitiatorRewardRatio)",
    "funcSelectors:0xb31610db": "getIndex(address asset)",
    "funcSelectors:0xb875bdf1": "joinIncentiveSystem()",
    "funcSelectors:0xbb6d5838": "updateInsuranceRatio(uint256 newInsuranceRatio)",
    "funcSelectors:0xc747fcc0": "updateDiscountConfig(bytes32 newConfig)",
    "funcSelectors:0xddf1f0f4": "setMarketBorrowUsability(uint16 marketID,bool usability)",
    "funcSelectors:0xe45c1879": "getAuctionsCount()",
    "funcSelectors:0xee684955": "marketBalanceOf(uint16 marketID,address asset,address user)",
    "funcSelectors:0xf7888aec": "balanceOf(address token,address user)",
    "funcSelectors:0xfa352c00": "revokeDelegate(address delegate)",
    "funcSelectors:0xa9d97a93": "provideDelegateOrder(tuple order,address delegate)",
    "funcSelectors:0x93eca257": "swap(tuple order)",
    "funcSelectors:0x8ea83031": "swapContract()",
    "funcSelectors:0x4780eac1": "wethContract()",
    "funcSelectors:0x0f15f4c0": "activate()",
    "funcSelectors:0xb040785a": "availableToBorrowETH()",
    "funcSelectors:0x929c8849": "availableToBorrowReserve()",
    "funcSelectors:0xa75ac608": "claimInsurance()",
    "funcSelectors:0xf77c4791": "controller()",
    "funcSelectors:0xa06d083c": "credit()",
    "funcSelectors:0x0dca59c1": "debt()",
    "funcSelectors:0x2851e2e0": "debtShare(address _lp)",
    "funcSelectors:0xde5f6268": "depositAll()",
    "funcSelectors:0xd389800f": "earn()",
    "funcSelectors:0x9f287e16": "getAaveOracle()",
    "funcSelectors:0xf0722322": "getReservePrice()",
    "funcSelectors:0x11dddca4": "getReservePriceETH(address reserve)",
    "funcSelectors:0x468f02d2": "getUnderlyingPrice()",
    "funcSelectors:0xdd90a791": "getUnderlyingPriceETH(uint256 _amount)",
    "funcSelectors:0x018ee9b7": "harvest(address reserve,uint256 amount)",
    "funcSelectors:0x22841f01": "healthFactor()",
    "funcSelectors:0xcf309012": "locked()",
    "funcSelectors:0x6fb49d73": "ltv()",
    "funcSelectors:0x6ac5db19": "max()",
    "funcSelectors:0x62f5548d": "maxSafeETH()",
    "funcSelectors:0x27afd028": "maxWithdrawal(address account)",
    "funcSelectors:0x6ad4e251": "over(uint256 _amount)",
    "funcSelectors:0x7eaef50c": "over()",
    "funcSelectors:0x22867d78": "repay(address reserve,uint256 amount)",
    "funcSelectors:0xfa3ae6dc": "repayAll()",
    "funcSelectors:0xcd3293de": "reserve()",
    "funcSelectors:0x7fd42617": "safeWithdraw()",
    "funcSelectors:0x92eefe9b": "setController(address _controller)",
    "funcSelectors:0x31111708": "setHealthFactor(uint256 _hf)",
    "funcSelectors:0x1b93e5b0": "shouldBorrow()",
    "funcSelectors:0xae2c1d5f": "shouldRebalance()",
    "funcSelectors:0x853828b6": "withdrawAll()",
    "funcSelectors:0x010f3237": "exitExcessPie()",
    "funcSelectors:0x207e6467": "pieBalances(address )",
    "funcSelectors:0x20eb1342": "withdrawVatBalance(uint256 _rad)",
    "funcSelectors:0x29731b0e": "totalPie()",
    "funcSelectors:0x4c255c97": "MAX_PERCENTAGE()",
    "funcSelectors:0x5b56d6f5": "setInterestFee(uint256 _interestFee)",
    "funcSelectors:0xa75df498": "interestFee()",
    "funcSelectors:0xcb13cddb": "deposited(address )",
    "funcSelectors:0x0674763c": "assert(bool assertion)",
    "funcSelectors:0x13af4035": "setOwner(address owner_)",
    "funcSelectors:0x2295115b": "adminWithdraw(address token,uint256 amount,address user,uint256 nonce,uint8 v,bytes32 r,bytes32 s,uint256 feeWithdrawal)",
    "funcSelectors:0x254dcfe2": "lastActiveTransaction(address )",
    "funcSelectors:0x3823d66c": "withdrawn(bytes32 )",
    "funcSelectors:0x429b62e5": "admins(address )",
    "funcSelectors:0x4b0bddd2": "setAdmin(address admin,bool isAdmin)",
    "funcSelectors:0x508493bc": "tokens(address ,address )",
    "funcSelectors:0x65e17c9d": "feeAccount()",
    "funcSelectors:0x83dbb27b": "invalidOrder(address )",
    "funcSelectors:0x893d20e8": "getOwner()",
    "funcSelectors:0xa293d1e8": "safeSub(uint256 a,uint256 b)",
    "funcSelectors:0xb12de559": "invalidateOrdersBefore(address user,uint256 nonce)",
    "funcSelectors:0xd05c78da": "safeMul(uint256 a,uint256 b)",
    "funcSelectors:0xd5813323": "traded(bytes32 )",
    "funcSelectors:0xdd93c74a": "setInactivityReleasePeriod(uint256 expiry)",
    "funcSelectors:0xe6cb9013": "safeAdd(uint256 a,uint256 b)",
    "funcSelectors:0xef343588": "trade(uint256[8] tradeValues,address[4] tradeAddresses,uint8[2] v,bytes32[4] rs)",
    "funcSelectors:0xf31174ee": "inactivityReleasePeriod()",
    "funcSelectors:0xf7213db6": "orderFills(bytes32 )",
    "funcSelectors:0xbb7b8b80": "get_virtual_price()",
    "funcSelectors:0x0b4c7e4d": "add_liquidity(uint256[2] amounts,uint256 min_mint_amount)",
    "funcSelectors:0x5e0d443f": "get_dy(int128 i,int128 j,uint256 dx)",
    "funcSelectors:0x07211ef7": "get_dy_underlying(int128 i,int128 j,uint256 dx)",
    "funcSelectors:0x17f1bdf0": "exchange(int128 i,int128 j,uint256 dx,uint256 min_dy,uint256 deadline)",
    "funcSelectors:0x882ff7fc": "exchange_underlying(int128 i,int128 j,uint256 dx,uint256 min_dy,uint256 deadline)",
    "funcSelectors:0x59639fa9": "remove_liquidity(uint256 _amount,uint256 deadline,uint256[2] min_amounts)",
    "funcSelectors:0xe3103273": "remove_liquidity_imbalance(uint256[2] _amounts,uint256 _max_burn_amount)",
    "funcSelectors:0xe1ceefda": "commit_new_parameters(int128 amplification,int128 new_fee,int128 new_admin_fee)",
    "funcSelectors:0x2a7dd7cd": "apply_new_parameters()",
    "funcSelectors:0x226840fb": "revert_new_parameters()",
    "funcSelectors:0x6b441a40": "commit_transfer_ownership(address _owner)",
    "funcSelectors:0x6a1c05ae": "apply_transfer_ownership()",
    "funcSelectors:0x86fbf193": "revert_transfer_ownership()",
    "funcSelectors:0x30c54085": "withdraw_admin_fees()",
    "funcSelectors:0xe3698853": "kill_me()",
    "funcSelectors:0x3046f972": "unkill_me()",
    "funcSelectors:0x23746eb8": "coins(int128 arg0)",
    "funcSelectors:0xb739953e": "underlying_coins(int128 arg0)",
    "funcSelectors:0x065a80d8": "balances(int128 arg0)",
    "funcSelectors:0xf446c1d0": "A()",
    "funcSelectors:0xfee3f7f9": "admin_fee()",
    "funcSelectors:0x405e28f8": "admin_actions_deadline()",
    "funcSelectors:0xe0a0b586": "transfer_ownership_deadline()",
    "funcSelectors:0xb4b577ad": "future_A()",
    "funcSelectors:0x58680d0b": "future_fee()",
    "funcSelectors:0xe3824462": "future_admin_fee()",
    "funcSelectors:0x1ec0cdc1": "future_owner()",
    "funcSelectors:0xcf7a1d77": "initialize(address _logic,address _admin,bytes _data)",
    "funcSelectors:0x48a0d754": "available()",
    "funcSelectors:0xf8897945": "min()",
    "funcSelectors:0x45dc3dd8": "setMin(uint256 _min)",
    "funcSelectors:0x024c7ec7": "restrictRegistryUpdate(bool _adminOnly)",
    "funcSelectors:0x02ef521e": "registerEtherToken(address _token,bool _register)",
    "funcSelectors:0x046dc166": "setSignerAddress(address _signerAddress)",
    "funcSelectors:0x0c8496cc": "getReturnByPath(address[] _path,uint256 _amount)",
    "funcSelectors:0x1134269a": "convertForPrioritized(address[] _path,uint256 _amount,uint256 _minReturn,address _for,uint256 _block,uint256 _nonce,uint8 _v,bytes32 _r,bytes32 _s)",
    "funcSelectors:0x2978c10e": "claimAndConvertFor2(address[] _path,uint256 _amount,uint256 _minReturn,address _for,address _affiliateAccount,uint256 _affiliateFee)",
    "funcSelectors:0x49d10b64": "updateRegistry()",
    "funcSelectors:0x4de006cb": "convertForPrioritized4(address[] _path,uint256 _amount,uint256 _minReturn,address _for,uint256[] _signature,address _affiliateAccount,uint256 _affiliateFee)",
    "funcSelectors:0x569706eb": "convert2(address[] _path,uint256 _amount,uint256 _minReturn,address _affiliateAccount,uint256 _affiliateFee)",
    "funcSelectors:0x5b7633d0": "signerAddress()",
    "funcSelectors:0x5d732ff2": "maxAffiliateFee()",
    "funcSelectors:0x5e35359e": "withdrawTokens(address _token,address _to,uint256 _amount)",
    "funcSelectors:0x61cd756e": "prevRegistry()",
    "funcSelectors:0x6896b999": "xConvertPrioritized(address[] _path,uint256 _amount,uint256 _minReturn,bytes32 _toBlockchain,bytes32 _to,uint256 _conversionId,uint256 _block,uint8 _v,bytes32 _r,bytes32 _s)",
    "funcSelectors:0x6b08f2ef": "convertForPrioritized2(address[] _path,uint256 _amount,uint256 _minReturn,address _for,uint256 _block,uint8 _v,bytes32 _r,bytes32 _s)",
    "funcSelectors:0x79ba5097": "acceptOwnership()",
    "funcSelectors:0x8077ccf7": "etherTokens(address )",
    "funcSelectors:0x89e63a60": "conversionHashes(bytes32 )",
    "funcSelectors:0x8dc56657": "xConvertPrioritized3(address[] _path,uint256 _amount,uint256 _minReturn,bytes32 _toBlockchain,bytes32 _to,uint256 _conversionId,uint256[] _signature,address _affiliateAccount,uint256 _affiliateFee)",
    "funcSelectors:0x92d1abb7": "CONVERTER_CONVERSION_WHITELIST()",
    "funcSelectors:0xab6214ce": "convertFor2(address[] _path,uint256 _amount,uint256 _minReturn,address _for,address _affiliateAccount,uint256 _affiliateFee)",
    "funcSelectors:0xb1e9932b": "claimAndConvertFor(address[] _path,uint256 _amount,uint256 _minReturn,address _for)",
    "funcSelectors:0xb406d386": "convertForPrioritized3(address[] _path,uint256 _amount,uint256 _minReturn,address _for,uint256 _customVal,uint256 _block,uint8 _v,bytes32 _r,bytes32 _s)",
    "funcSelectors:0xb4a176d3": "restoreRegistry()",
    "funcSelectors:0xc52173de": "xConvert(address[] _path,uint256 _amount,uint256 _minReturn,bytes32 _toBlockchain,bytes32 _to,uint256 _conversionId)",
    "funcSelectors:0xc7ba24bc": "claimAndConvert(address[] _path,uint256 _amount,uint256 _minReturn)",
    "funcSelectors:0xc976a359": "adminOnly()",
    "funcSelectors:0xc98fefed": "convertFor(address[] _path,uint256 _amount,uint256 _minReturn,address _for)",
    "funcSelectors:0xcb32564e": "xConvert2(address[] _path,uint256 _amount,uint256 _minReturn,bytes32 _toBlockchain,bytes32 _to,uint256 _conversionId,address _affiliateAccount,uint256 _affiliateFee)",
    "funcSelectors:0xce200963": "xConvertPrioritized2(address[] _path,uint256 _amount,uint256 _minReturn,bytes32 _toBlockchain,bytes32 _to,uint256 _conversionId,uint256[] _signature)",
    "funcSelectors:0xd4ee1d90": "newOwner()",
    "funcSelectors:0xe57738e5": "claimAndConvert2(address[] _path,uint256 _amount,uint256 _minReturn,address _affiliateAccount,uint256 _affiliateFee)",
    "funcSelectors:0xf3898a97": "convert(address[] _path,uint256 _amount,uint256 _minReturn)",
    "funcSelectors:0xf3bc7d2a": "setMaxAffiliateFee(uint256 _maxAffiliateFee)",
    "funcSelectors:0x986d44d8": "batchSwapExactIn(tuple[] swaps,address tokenIn,address tokenOut,uint256 totalAmountIn,uint256 minTotalAmountOut)",
    "funcSelectors:0x09abfb9d": "batchSwapExactOut(tuple[] swaps,address tokenIn,address tokenOut,uint256 maxTotalAmountIn)",
    "funcSelectors:0x434840f1": "multihopBatchSwapExactIn(tuple[][] swapSequences,address tokenIn,address tokenOut,uint256 totalAmountIn,uint256 minTotalAmountOut)",
    "funcSelectors:0xf12b469c": "multihopBatchSwapExactOut(tuple[][] swapSequences,address tokenIn,address tokenOut,uint256 maxTotalAmountIn)",
    "funcSelectors:0xa91ee0dc": "setRegistry(address _registry)",
    "funcSelectors:0x21b0eb85": "smartSwapExactIn(address tokenIn,address tokenOut,uint256 totalAmountIn,uint256 minTotalAmountOut,uint256 nPools)",
    "funcSelectors:0xb40f39ee": "smartSwapExactOut(address tokenIn,address tokenOut,uint256 totalAmountOut,uint256 maxTotalAmountIn,uint256 nPools)",
    "funcSelectors:0x4b0f93fb": "viewSplitExactIn(address tokenIn,address tokenOut,uint256 swapAmount,uint256 nPools)",
    "funcSelectors:0x368bb1fc": "viewSplitExactOut(address tokenIn,address tokenOut,uint256 swapAmount,uint256 nPools)",
    "funcSelectors:0x98c4f76d": "CHALLENGE_AMOUNT_DIVISOR()",
    "funcSelectors:0x4de8c6e6": "TIME_SLOT_SIZE()",
    "funcSelectors:0x5325937f": "addBonder(address bonder)",
    "funcSelectors:0x8d8798bf": "bondTransferRoot(bytes32 rootHash,uint256 destinationChainId,uint256 totalAmount)",
    "funcSelectors:0x23c452cd": "bondWithdrawal(address recipient,uint256 amount,bytes32 transferNonce,uint256 bonderFee)",
    "funcSelectors:0xfc110b67": "chainBalance(uint256 )",
    "funcSelectors:0xf3f480d9": "challengePeriod()",
    "funcSelectors:0x767631d5": "challengeResolutionPeriod()",
    "funcSelectors:0x1bbe15ea": "challengeTransferBond(bytes32 rootHash,uint256 originalAmount,uint256 destinationChainId)",
    "funcSelectors:0xef6ebe5e": "confirmTransferRoot(uint256 originChainId,bytes32 rootHash,uint256 destinationChainId,uint256 totalAmount,uint256 rootCommittedAt)",
    "funcSelectors:0xa35962f3": "crossDomainMessengerWrappers(uint256 )",
    "funcSelectors:0xe19be150": "getBondForTransferAmount(uint256 amount)",
    "funcSelectors:0x302830ab": "getBondedWithdrawalAmount(address bonder,bytes32 transferId)",
    "funcSelectors:0x3408e470": "getChainId()",
    "funcSelectors:0xa239f5ee": "getChallengeAmountForTransferAmount(uint256 amount)",
    "funcSelectors:0x57344e6f": "getCredit(address bonder)",
    "funcSelectors:0xffa9286c": "getDebitAndAdditionalDebit(address bonder)",
    "funcSelectors:0xd5ef7551": "getIsBonder(address maybeBonder)",
    "funcSelectors:0x13948c76": "getRawDebit(address bonder)",
    "funcSelectors:0x2b85dcc9": "getTimeSlot(uint256 time)",
    "funcSelectors:0xaf215f94": "getTransferId(uint256 chainId,address recipient,uint256 amount,bytes32 transferNonce,uint256 bonderFee,uint256 amountOutMin,uint256 deadline)",
    "funcSelectors:0xce803b4f": "getTransferRoot(bytes32 rootHash,uint256 totalAmount)",
    "funcSelectors:0x960a7afa": "getTransferRootId(bytes32 rootHash,uint256 totalAmount)",
    "funcSelectors:0xfa2a69a3": "isChainIdPaused(uint256 )",
    "funcSelectors:0x3a7af631": "isTransferIdSpent(bytes32 transferId)",
    "funcSelectors:0xb7a0bda6": "l1CanonicalToken()",
    "funcSelectors:0x6cff06a7": "minTransferRootBondDelay()",
    "funcSelectors:0x04e6c2c0": "removeBonder(address bonder)",
    "funcSelectors:0xcbd1642e": "rescueTransferRoot(bytes32 rootHash,uint256 originalAmount,address recipient)",
    "funcSelectors:0x81707b80": "resolveChallenge(bytes32 rootHash,uint256 originalAmount,uint256 destinationChainId)",
    "funcSelectors:0xdeace8f5": "sendToL2(uint256 chainId,address recipient,uint256 amount,uint256 amountOutMin,uint256 deadline,address relayer,uint256 relayerFee)",
    "funcSelectors:0x14942024": "setChainIdDepositsPaused(uint256 chainId,bool isPaused)",
    "funcSelectors:0x5d475fdd": "setChallengePeriod(uint256 _challengePeriod)",
    "funcSelectors:0xeecd57e6": "setChallengeResolutionPeriod(uint256 _challengeResolutionPeriod)",
    "funcSelectors:0xd4448163": "setCrossDomainMessengerWrapper(uint256 chainId,address _crossDomainMessengerWrapper)",
    "funcSelectors:0x39ada669": "setMinTransferRootBondDelay(uint256 _minTransferRootBondDelay)",
    "funcSelectors:0xc7525dd3": "settleBondedWithdrawal(address bonder,bytes32 transferId,bytes32 rootHash,uint256 transferRootTotalAmount,uint256 transferIdTreeIndex,bytes32[] siblings,uint256 totalLeaves)",
    "funcSelectors:0xb162717e": "settleBondedWithdrawals(address bonder,bytes32[] transferIds,uint256 totalAmount)",
    "funcSelectors:0xadc9772e": "stake(address bonder,uint256 amount)",
    "funcSelectors:0x7398d282": "timeSlotToAmountBonded(uint256 ,address )",
    "funcSelectors:0x5a7e1083": "transferBonds(bytes32 )",
    "funcSelectors:0x3b8fea28": "transferRootCommittedAt(uint256 ,bytes32 )",
    "funcSelectors:0x2e17de78": "unstake(uint256 amount)",
    "funcSelectors:0x0f7aadb7": "withdraw(address recipient,uint256 amount,bytes32 transferNonce,uint256 bonderFee,uint256 amountOutMin,uint256 deadline,bytes32 rootHash,uint256 transferRootTotalAmount,uint256 transferIdTreeIndex,bytes32[] siblings,uint256 totalLeaves)",
    "funcSelectors:0x025b22bc": "updateImplementation(address _newProxyTo)",
    "funcSelectors:0x42fc47fb": "childChain()",
    "funcSelectors:0x4555d5c9": "proxyType()",
    "funcSelectors:0x987ab9db": "rootChain()",
    "funcSelectors:0xa69df4b5": "unlock()",
    "funcSelectors:0xb02c43d0": "deposits(uint256 )",
    "funcSelectors:0xcb10f94c": "stateSender()",
    "funcSelectors:0xe7af7ba1": "maxErc20Deposit()",
    "funcSelectors:0xf83d08ba": "lock()",
    "funcSelectors:0x025313a2": "proxyOwner()",
    "funcSelectors:0xf1739cae": "transferProxyOwnership(address newOwner)",
    "funcSelectors:0xd88ca2c8": "updateAndCall(address _newProxyTo,bytes data)",
    "funcSelectors:0x53755b8f": "authorizeSender(address authorizedSender)",
    "funcSelectors:0xbfe51c10": "authorizeSigner(address authorizedSigner)",
    "funcSelectors:0x2e340823": "cancel(uint256[] nonces)",
    "funcSelectors:0x3c641910": "cancelUpTo(uint256 minimumNonce)",
    "funcSelectors:0xab204282": "revokeSender(address authorizedSender)",
    "funcSelectors:0xc34b44a0": "revokeSigner(address authorizedSigner)",
    "funcSelectors:0x4f94c536": "senderAuthorizations(address ,address )",
    "funcSelectors:0x41ac49a3": "signerAuthorizations(address ,address )",
    "funcSelectors:0x5e68e11f": "signerMinimumNonce(address )",
    "funcSelectors:0xbfb96279": "signerNonceStatus(address ,uint256 )",
    "funcSelectors:0xcf701ff7": "calc_token_amount(uint256[4] amounts,bool deposit)",
    "funcSelectors:0x029b2f34": "add_liquidity(uint256[4] amounts,uint256 min_mint_amount)",
    "funcSelectors:0x67df02ca": "get_dx(int128 i,int128 j,uint256 dy)",
    "funcSelectors:0x0e71d1b9": "get_dx_underlying(int128 i,int128 j,uint256 dy)",
    "funcSelectors:0x3df02124": "exchange(int128 i,int128 j,uint256 _dx,uint256 _min_dy)",
    "funcSelectors:0xa6417ed6": "exchange_underlying(int128 i,int128 j,uint256 dx,uint256 min_dy)",
    "funcSelectors:0x7d49d875": "remove_liquidity(uint256 _amount,uint256[4] min_amounts)",
    "funcSelectors:0x18a7bd76": "remove_liquidity_imbalance(uint256[4] amounts,uint256 max_burn_amount)",
    "funcSelectors:0xee11f5b6": "commit_new_parameters(uint256 amplification,uint256 new_fee,uint256 new_admin_fee)",
    "funcSelectors:0x1249c58b": "mint()",
    "funcSelectors:0x4e4d9fea": "repayBorrow()",
    "funcSelectors:0xaae40a2a": "liquidateBorrow(address borrower,address cTokenCollateral)",
    "funcSelectors:0xe5974619": "repayBorrowBehalf(address borrower)",
    "funcSelectors:0x3ad06d16": "upgradeTo(uint256 version,address implementation)",
    "funcSelectors:0x6fde8202": "upgradeabilityOwner()",
    "funcSelectors:0xa9c45fcb": "upgradeToAndCall(uint256 version,address implementation,bytes data)",
    "funcSelectors:0x9870d7fe": "addOperator(address newOperator)",
    "funcSelectors:0x9c1c2ee9": "erc1155safeTransferFrom(address token,address from,address to,uint256 id,uint256 value,bytes data)",
    "funcSelectors:0xf709b906": "erc721safeTransferFrom(address token,address from,address to,uint256 tokenId)",
    "funcSelectors:0x6d70f7ae": "isOperator(address account)",
    "funcSelectors:0xac8a584a": "removeOperator(address operator)",
    "funcSelectors:0x7fc82484": "buyAndRedeem(uint256 vaultId,uint256 amount,uint256[] specificIds,address[] path,address to)",
    "funcSelectors:0x4447d888": "buyAndRedeemWETH(uint256 vaultId,uint256 amount,uint256[] specificIds,uint256 maxWethIn,address[] path,address to)",
    "funcSelectors:0x57e836dc": "buyAndSwap1155(uint256 vaultId,uint256[] idsIn,uint256[] amounts,uint256[] specificIds,address[] path,address to)",
    "funcSelectors:0x42c4ccaa": "buyAndSwap1155WETH(uint256 vaultId,uint256[] idsIn,uint256[] amounts,uint256[] specificIds,uint256 maxWethIn,address[] path,address to)",
    "funcSelectors:0x58fbdd0a": "buyAndSwap721(uint256 vaultId,uint256[] idsIn,uint256[] specificIds,address[] path,address to)",
    "funcSelectors:0x5d8117a6": "buyAndSwap721WETH(uint256 vaultId,uint256[] idsIn,uint256[] specificIds,uint256 maxWethIn,address[] path,address to)",
    "funcSelectors:0x9bf1401c": "lpStaking()",
    "funcSelectors:0xab3a4121": "mintAndSell1155(uint256 vaultId,uint256[] ids,uint256[] amounts,uint256 minWethOut,address[] path,address to)",
    "funcSelectors:0xa0271617": "mintAndSell1155WETH(uint256 vaultId,uint256[] ids,uint256[] amounts,uint256 minWethOut,address[] path,address to)",
    "funcSelectors:0x0956642b": "mintAndSell721(uint256 vaultId,uint256[] ids,uint256 minWethOut,address[] path,address to)",
    "funcSelectors:0x929bf3d3": "mintAndSell721WETH(uint256 vaultId,uint256[] ids,uint256 minWethOut,address[] path,address to)",
    "funcSelectors:0x5ee50f88": "nftxFactory()",
    "funcSelectors:0x6d13582c": "sushiRouter()",
    "funcSelectors:0x74a28f79": "batchExec(address[] tos,bytes[] datas)",
    "funcSelectors:0x94da7864": "execs(address[] tos,bytes[] datas)",
    "errorSelectors:0xba52c1b5": "BAKCAlreadyPaired()",
    "errorSelectors:0xde72b61e": "BAKCNotOwnedOrPaired()",
    "errorSelectors:0x5cd83192": "CallerNotOwner()",
    "errorSelectors:0x50e75a80": "DepositMoreThanOneAPE()",
    "errorSelectors:0x8b853e25": "EndNotWholeHour()",
    "errorSelectors:0xf03ac374": "ExceededCapAmount()",
    "errorSelectors:0x9acaefc7": "ExceededStakedAmount()",
    "errorSelectors:0x0afa7ee8": "InvalidPoolId()",
    "errorSelectors:0xa3fdbb52": "MainTokenNotOwnedOrPaired()",
    "errorSelectors:0x4a2f3865": "NeitherTokenInPairOwnedByCaller()",
    "errorSelectors:0x2c8348bb": "NotOwnerOfBAKC()",
    "errorSelectors:0x2b19ae75": "NotOwnerOfMain()",
    "errorSelectors:0xccc819da": "ProvidedTokensNotPaired()",
    "errorSelectors:0xe373a085": "SplitPairCantPartiallyWithdraw()",
    "errorSelectors:0xd67e3109": "StartMustBeGreaterThanEnd()",
    "errorSelectors:0x9424dcd9": "StartMustEqualLastEnd()",
    "errorSelectors:0xf7985df1": "StartNotWholeHour()",
    "errorSelectors:0x4614cb02": "UncommitWrongParameters()",
    "funcSelectors:0xbb628f20": "addTimeRange(uint256 _poolId,uint256 _amount,uint256 _startTimestamp,uint256 _endTimeStamp,uint256 _capPerPosition)",
    "funcSelectors:0x05ece226": "addressPosition(address )",
    "funcSelectors:0xac7ad9ba": "apeCoin()",
    "funcSelectors:0xb4f95752": "bakcToMain(uint256 ,uint256 )",
    "funcSelectors:0x2ee2de66": "claimApeCoin(address _recipient)",
    "funcSelectors:0xaa392907": "claimBAKC(tuple[] _baycPairs,tuple[] _maycPairs,address _recipient)",
    "funcSelectors:0xb682e859": "claimBAYC(uint256[] _nfts,address _recipient)",
    "funcSelectors:0x57a26300": "claimMAYC(uint256[] _nfts,address _recipient)",
    "funcSelectors:0x8279e760": "claimSelfApeCoin()",
    "funcSelectors:0x7764656f": "claimSelfBAKC(tuple[] _baycPairs,tuple[] _maycPairs)",
    "funcSelectors:0x20a325d0": "claimSelfBAYC(uint256[] _nfts)",
    "funcSelectors:0x381b4682": "claimSelfMAYC(uint256[] _nfts)",
    "funcSelectors:0xbd5023a9": "depositApeCoin(uint256 _amount,address _recipient)",
    "funcSelectors:0x21f066af": "depositBAKC(tuple[] _baycPairs,tuple[] _maycPairs)",
    "funcSelectors:0x728d6f45": "depositBAYC(tuple[] _nfts)",
    "funcSelectors:0x2eb298c0": "depositMAYC(tuple[] _nfts)",
    "funcSelectors:0x9dcaafb4": "depositSelfApeCoin(uint256 _amount)",
    "funcSelectors:0x04238994": "getAllStakes(address _address)",
    "funcSelectors:0xd9f11fb2": "getApeCoinStake(address _address)",
    "funcSelectors:0x00191b44": "getBakcStakes(address _address)",
    "funcSelectors:0x9860037e": "getBaycStakes(address _address)",
    "funcSelectors:0xf4c6f602": "getMaycStakes(address _address)",
    "funcSelectors:0x770dade5": "getPoolsUI()",
    "funcSelectors:0x0ed368f1": "getSplitStakes(address _address)",
    "funcSelectors:0x09e833c6": "getTimeRangeBy(uint256 _poolId,uint256 _index)",
    "funcSelectors:0x304f88c0": "mainToBakc(uint256 ,uint256 )",
    "funcSelectors:0x0bb4d82a": "nftContracts(uint256 )",
    "funcSelectors:0x98ada4a2": "nftPosition(uint256 ,uint256 )",
    "funcSelectors:0x2c018f91": "pendingRewards(uint256 _poolId,address _address,uint256 _tokenId)",
    "funcSelectors:0xac4afa38": "pools(uint256 )",
    "funcSelectors:0xd363dc17": "removeLastTimeRange(uint256 _poolId)",
    "funcSelectors:0xd7464ee9": "rewardsBy(uint256 _poolId,uint256 _from,uint256 _to)",
    "funcSelectors:0xf5679189": "stakedTotal(address _address)",
    "funcSelectors:0xe4e81847": "withdrawApeCoin(uint256 _amount,address _recipient)",
    "funcSelectors:0xe3d38ca4": "withdrawBAKC(tuple[] _baycPairs,tuple[] _maycPairs)",
    "funcSelectors:0x53ed0433": "withdrawBAYC(tuple[] _nfts,address _recipient)",
    "funcSelectors:0x2f63d59d": "withdrawMAYC(tuple[] _nfts,address _recipient)",
    "funcSelectors:0x7f60d338": "withdrawSelfApeCoin(uint256 _amount)",
    "funcSelectors:0x99922ef5": "withdrawSelfBAYC(tuple[] _nfts)",
    "funcSelectors:0x2240531d": "withdrawSelfMAYC(tuple[] _nfts)",
    "funcSelectors:0xcbd2ec65": "cancelAllOrdersForSender(uint256 minNonce)",
    "funcSelectors:0x9e53a69a": "cancelMultipleMakerOrders(uint256[] orderNonces)",
    "funcSelectors:0x0f747d74": "currencyManager()",
    "funcSelectors:0x483abb9f": "executionManager()",
    "funcSelectors:0x31e27e27": "isUserOrderNonceExecutedOrCancelled(address user,uint256 orderNonce)",
    "funcSelectors:0xd92f92d0": "matchAskWithTakerBid(tuple takerBid,tuple makerAsk)",
    "funcSelectors:0x927b0b2a": "matchAskWithTakerBidUsingETHAndWETH(tuple takerBid,tuple makerAsk)",
    "funcSelectors:0xe67c88d4": "matchBidWithTakerAsk(tuple takerAsk,tuple makerBid)",
    "funcSelectors:0x87e4401f": "royaltyFeeManager()",
    "funcSelectors:0x5e14f68e": "transferSelectorNFT()",
    "funcSelectors:0x5ce052d7": "updateCurrencyManager(address _currencyManager)",
    "funcSelectors:0xd4ff41dc": "updateExecutionManager(address _executionManager)",
    "funcSelectors:0x1df47f80": "updateProtocolFeeRecipient(address _protocolFeeRecipient)",
    "funcSelectors:0xc5498769": "updateRoyaltyFeeManager(address _royaltyFeeManager)",
    "funcSelectors:0xf75ff53f": "updateTransferSelectorNFT(address _transferSelectorNFT)",
    "funcSelectors:0x4266581e": "userMinOrderNonce(address )",
    "funcSelectors:0x9ca37a0b": "ZapIn(address _FromTokenContractAddress,address _pairAddress,uint256 _amount,uint256 _minPoolTokens,address _swapTarget,bytes swapData,address affiliate,bool transferResidual,bool shouldSellEntireBalance)",
    "funcSelectors:0x1781261f": "affiliateBalance(address ,address )",
    "funcSelectors:0x4f51e294": "affiliates(address )",
    "funcSelectors:0x0dc9de85": "affilliateWithdraw(address[] tokens)",
    "funcSelectors:0x9779d1a6": "approvedTargets(address )",
    "funcSelectors:0xd408f657": "feeWhitelist(address )",
    "funcSelectors:0x5de0398e": "goodwill()",
    "funcSelectors:0x9735a634": "setApprovedTargets(address[] targets,bool[] isApproved)",
    "funcSelectors:0x3ff428c7": "set_affiliate(address _affiliate,bool _status)",
    "funcSelectors:0xfbec27bf": "set_feeWhitelist(address zapAddress,bool status)",
    "funcSelectors:0x01e980d4": "set_new_affiliateSplit(uint256 _new_affiliateSplit)",
    "funcSelectors:0x550bfa56": "set_new_goodwill(uint256 _new_goodwill)",
    "funcSelectors:0x75f12b21": "stopped()",
    "funcSelectors:0x1385d24c": "toggleContractActive()",
    "funcSelectors:0x18b135e3": "totalAffiliateBalance(address )",
    "funcSelectors:0x5ecb16cd": "withdrawTokens(address[] tokens)",
    "funcSelectors:0x56f36dbf": "PROXY_GOVERNANCE_TAG()",
    "funcSelectors:0xf7b456d0": "UPGRADE_ACTIVATION_DELAY()",
    "funcSelectors:0x5e3a97e7": "addImplementation(address newImplementation,bytes data,bool finalize)",
    "funcSelectors:0x439fab91": "initialize(bytes )",
    "funcSelectors:0xe907fa3c": "isNotFinalized()",
    "funcSelectors:0x6684b1d6": "proxyAcceptGovernance()",
    "funcSelectors:0xf9bcdde4": "proxyCancelNomination()",
    "funcSelectors:0xb449ea5d": "proxyIsGovernor(address testGovernor)",
    "funcSelectors:0x8757653f": "proxyNominateNewGovernor(address newGovernor)",
    "funcSelectors:0x12f16e6d": "proxyRemoveGovernor(address governorForRemoval)",
    "funcSelectors:0x22175a32": "removeImplementation(address newImplementation)",
    "funcSelectors:0x7147855d": "upgradeTo(address newImplementation,bytes data,bool finalize)",
    "funcSelectors:0x3e941010": "_addReserves(uint256 addAmount)",
    "funcSelectors:0x555bcc40": "_setImplementation(address implementation_,bool allowResign,bytes becomeImplementationData)",
    "funcSelectors:0x0933c1ed": "delegateToImplementation(bytes data)",
    "funcSelectors:0x4487152f": "delegateToViewImplementation(bytes data)",
    "funcSelectors:0x451ee4a1": "adjustment()",
    "funcSelectors:0xcd1234b3": "bondInfo(address )",
    "funcSelectors:0xd7ccfb0b": "bondPrice()",
    "funcSelectors:0x3f0fb92f": "changeOlympusTreasury(address _olympusTreasury)",
    "funcSelectors:0x759076e5": "currentDebt()",
    "funcSelectors:0x4799afda": "currentOlympusFee()",
    "funcSelectors:0xe392a262": "debtDecay()",
    "funcSelectors:0x8dbdbe6d": "deposit(uint256 _amount,uint256 _maxPrice,address _depositor)",
    "funcSelectors:0xa50603b2": "initializeBond(uint256 _controlVariable,uint256 _vestingTerm,uint256 _minimumPrice,uint256 _maxPayout,uint256 _maxDebt,uint256 _initialDebt)",
    "funcSelectors:0xf5c2ab5b": "lastDecay()",
    "funcSelectors:0xe0176de8": "maxPayout()",
    "funcSelectors:0xa9bc6b71": "paySubsidy()",
    "funcSelectors:0x7927ebf8": "payoutFor(uint256 _value)",
    "funcSelectors:0x01b88ee8": "pendingPayoutFor(address _depositor)",
    "funcSelectors:0x507930ec": "percentVestedFor(address _depositor)",
    "funcSelectors:0x0505c8c9": "policy()",
    "funcSelectors:0x95a2251f": "redeem(address _depositor)",
    "funcSelectors:0x1a3d0068": "setAdjustment(bool _addition,uint256 _increment,uint256 _target,uint256 _buffer)",
    "funcSelectors:0x1e321a0f": "setBondTerms(uint8 _parameter,uint256 _input)",
    "funcSelectors:0xd5025625": "terms()",
    "funcSelectors:0x2bab6bde": "totalPayoutGiven()",
    "funcSelectors:0x7cbe044c": "totalPrincipalBonded()",
    "funcSelectors:0x3bfdd7de": "transferManagment(address _newOwner)",
    "funcSelectors:0x0a748489": "trueBondPrice()",
    "funcSelectors:0x02e371de": "COMPONENT_1()",
    "funcSelectors:0xb7dec1b7": "GENESIS()",
    "funcSelectors:0x51464e29": "PSILOCYBIN()",
    "funcSelectors:0x7b4382cd": "TOKEN_CONTRACTS(uint256 )",
    "funcSelectors:0xbed08e0b": "batchStake(uint256[] _ids,uint8 _tokenType)",
    "funcSelectors:0x6fd6da6f": "batchTimeSinceStaked(uint8 _tokenType,uint256[] _ids)",
    "funcSelectors:0x1b38e212": "batchUnstake(uint256[] _ids,uint8 _tokenType)",
    "funcSelectors:0x4432c4e4": "delegatedBatchUnstake(uint256[] _ids,uint8 _tokenType)",
    "funcSelectors:0xef216af3": "delegatedUnstake(uint256 _id,uint8 _tokenType)",
    "funcSelectors:0xa7433cf5": "getStakedTokens(address _owner,uint8 _tokenType)",
    "funcSelectors:0x3e28391d": "isDelegated(address _a)",
    "funcSelectors:0x86fbad9c": "isStaked(address _owner,uint8 _tokenType,uint256 _id)",
    "funcSelectors:0x4cb2c889": "setDelegated(address _a,bool _bool)",
    "funcSelectors:0x77d03e74": "stakedBalance(address _owner,uint8 _tokenType)",
    "funcSelectors:0x92f69aee": "timeSinceStaked(uint8 _tokenType,uint256 _id)",
    "funcSelectors:0xf376d0de": "tokenInfo(uint8 ,uint256 )",
    "funcSelectors:0xbc9699f1": "unstake(uint256 _id,uint8 _tokenType)",
    "funcSelectors:0x42f1181e": "addAuthorizedAddress(address target)",
    "funcSelectors:0x494503d4": "authorities(uint256 )",
    "funcSelectors:0x70712939": "removeAuthorizedAddress(address target)",
    "funcSelectors:0xb9181611": "authorized(address )",
    "funcSelectors:0xd39de6e9": "getAuthorizedAddresses()",
    "funcSelectors:0x74c1d7d3": "_best(address ,address )",
    "funcSelectors:0x91be90c8": "_dust(address )",
    "funcSelectors:0xa78d4316": "_near(uint256 )",
    "funcSelectors:0xc2d526aa": "_rank(uint256 )",
    "funcSelectors:0x677170e1": "_span(address ,address )",
    "funcSelectors:0xbf7e214f": "authority()",
    "funcSelectors:0x779997c3": "bump(bytes32 id_)",
    "funcSelectors:0xd6febde8": "buy(uint256 id,uint256 amount)",
    "funcSelectors:0x8185402b": "buyAllAmount(address buy_gem,uint256 buy_amt,address pay_gem,uint256 max_fill_amount)",
    "funcSelectors:0xf582d293": "buyEnabled()",
    "funcSelectors:0x40e58ee5": "cancel(uint256 id)",
    "funcSelectors:0x6377ebca": "close_time()",
    "funcSelectors:0x467f0b7b": "del_rank(uint256 id)",
    "funcSelectors:0x56ad8764": "dustId()",
    "funcSelectors:0x0374fc6f": "getBestOffer(address sell_gem,address buy_gem)",
    "funcSelectors:0x911550f4": "getBetterOffer(uint256 id)",
    "funcSelectors:0x144a2752": "getBuyAmount(address buy_gem,address pay_gem,uint256 pay_amt)",
    "funcSelectors:0x8af82a2e": "getFirstUnsortedOffer()",
    "funcSelectors:0x511fa487": "getMinSell(address pay_gem)",
    "funcSelectors:0x61f54a79": "getNextUnsortedOffer(uint256 id)",
    "funcSelectors:0x4579268a": "getOffer(uint256 id)",
    "funcSelectors:0x7ca9429a": "getOfferCount(address sell_gem,address buy_gem)",
    "funcSelectors:0xc41a360a": "getOwner(uint256 id)",
    "funcSelectors:0xff1fd974": "getPayAmount(address pay_gem,address buy_gem,uint256 buy_amt)",
    "funcSelectors:0x557ed1ba": "getTime()",
    "funcSelectors:0x943911bc": "getWorseOffer(uint256 id)",
    "funcSelectors:0x1d834a1b": "insert(uint256 id,uint256 pos)",
    "funcSelectors:0x82afd23b": "isActive(uint256 id)",
    "funcSelectors:0xc2b6b58c": "isClosed()",
    "funcSelectors:0xd2b420ce": "isOfferSorted(uint256 id)",
    "funcSelectors:0xb4f9b6c8": "kill(bytes32 id)",
    "funcSelectors:0x232cae0b": "last_offer_id()",
    "funcSelectors:0x093f5198": "make(address pay_gem,address buy_gem,uint128 pay_amt,uint128 buy_amt)",
    "funcSelectors:0x01492a0b": "matchingEnabled()",
    "funcSelectors:0x1b33d412": "offer(uint256 pay_amt,address pay_gem,uint256 buy_amt,address buy_gem,uint256 pos)",
    "funcSelectors:0xe1a6f014": "offer(uint256 pay_amt,address pay_gem,uint256 buy_amt,address buy_gem,uint256 pos,bool rounding)",
    "funcSelectors:0xf09ea2a6": "offer(uint256 pay_amt,address pay_gem,uint256 buy_amt,address buy_gem)",
    "funcSelectors:0x8a72ea6a": "offers(uint256 )",
    "funcSelectors:0x0621b4f6": "sellAllAmount(address pay_gem,uint256 pay_amt,address buy_gem,uint256 min_fill_amount)",
    "funcSelectors:0x7a9e5e4b": "setAuthority(address authority_)",
    "funcSelectors:0xd6f15469": "setBuyEnabled(bool buyEnabled_)",
    "funcSelectors:0x2aed1905": "setMatchingEnabled(bool matchingEnabled_)",
    "funcSelectors:0xbf7c734e": "setMinSell(address pay_gem,uint256 dust)",
    "funcSelectors:0x49606455": "take(bytes32 id,uint128 maxTakeAmount)",
    "funcSelectors:0x7234d8f2": "KIND_AUCTION()",
    "funcSelectors:0xe1784a02": "KIND_BUY()",
    "funcSelectors:0x25593ac2": "KIND_SELL()",
    "funcSelectors:0x7ae1ace0": "OP_ACCEPT_AUCTION()",
    "funcSelectors:0x11f0794c": "OP_ACCEPT_BUY()",
    "funcSelectors:0x81787a85": "OP_BID()",
    "funcSelectors:0xeb374261": "OP_BUY()",
    "funcSelectors:0x9e57feb5": "OP_CANCEL_BUY()",
    "funcSelectors:0x6acc65db": "OP_COMPLETE_AUCTION()",
    "funcSelectors:0xb50a2a55": "OP_COMPLETE_BUY()",
    "funcSelectors:0x8f18439e": "OP_COMPLETE_SELL()",
    "funcSelectors:0xf0954160": "OP_MAX()",
    "funcSelectors:0x90c2b10e": "OP_MIN()",
    "funcSelectors:0x1bb03ca9": "OP_REJECT_BUY()",
    "funcSelectors:0x0873c6ec": "RATE_BASE()",
    "funcSelectors:0x5a4e5a15": "STATUS_CANCELLED()",
    "funcSelectors:0x740db280": "STATUS_DONE()",
    "funcSelectors:0x24f8515b": "STATUS_OPEN()",
    "funcSelectors:0xf0d250ba": "TOKEN_1155()",
    "funcSelectors:0xc477be20": "TOKEN_721()",
    "funcSelectors:0x853ca41a": "TOKEN_MINT()",
    "funcSelectors:0xc1c30e80": "cancelBuys(uint256[] ids)",
    "funcSelectors:0x3ed9ffb7": "couponSpent(uint256 )",
    "funcSelectors:0xe7d4a999": "emergencyCancelAuction(uint256 id,bool noBundle)",
    "funcSelectors:0xf5116bc9": "hasInv(uint256 id)",
    "funcSelectors:0xac5e2cb1": "hasSignedIntention(uint8 op)",
    "funcSelectors:0x80bc688f": "inCaseMoneyGetsStuck(address to,address currency,uint256 amount)",
    "funcSelectors:0xcd78ba01": "inventories(uint256 )",
    "funcSelectors:0x5fd34298": "inventoryTokenCounts(uint256 )",
    "funcSelectors:0xb4533aad": "inventoryTokens(uint256 ,uint256 )",
    "funcSelectors:0x8704f2a3": "isAuction(uint256 id)",
    "funcSelectors:0x0ad48628": "isAuctionOpen(uint256 id)",
    "funcSelectors:0xf4a33e0d": "isBundleApproved(uint256 invId,address owner)",
    "funcSelectors:0xa80d33fb": "isBuy(uint256 id)",
    "funcSelectors:0xbdf52b45": "isBuyOpen(uint256 id)",
    "funcSelectors:0xd9548e53": "isExpired(uint256 id)",
    "funcSelectors:0x1b01e72c": "isSell(uint256 id)",
    "funcSelectors:0x781dc70a": "isSignatureValid(bytes signature,bytes32 hash,address signer)",
    "funcSelectors:0xee98ce91": "isStatusOpen(uint256 id)",
    "funcSelectors:0x2bcd27df": "marketSigners(address )",
    "funcSelectors:0x54134876": "minAuctionDuration()",
    "funcSelectors:0x708d4d35": "minAuctionIncrement()",
    "funcSelectors:0x5fbf56f6": "run(tuple intent,tuple detail,bytes sigIntent,bytes sigDetail)",
    "funcSelectors:0xb52b8f35": "send(address to,tuple[] tokens)",
    "funcSelectors:0xd52126e2": "swap(tuple req,bytes signature)",
    "funcSelectors:0x015af8ee": "updateSettings(uint256 minAuctionIncrement_,uint256 minAuctionDuration_)",
    "funcSelectors:0xf460590b": "updateSigner(address addr,bool remove)",
    "funcSelectors:0x7c401f28": "donate(tuple[] _donations)",
    "funcSelectors:0xaf933b57": "withdrawEther(address _dest)",
    "funcSelectors:0x3aeac4e1": "withdrawToken(address _tokenAddress,address _dest)",
    "funcSelectors:0x1d572320": "ZapIn(address _toWhomToIssue,address _FromTokenContractAddress,address _ToUnipoolToken0,address _ToUnipoolToken1,uint256 _amount,uint256 _minPoolTokens)",
    "funcSelectors:0xb2bdfa7b": "_owner()",
    "funcSelectors:0x8d7e41a8": "calculateSwapInAmount(uint256 reserveIn,uint256 userIn)",
    "funcSelectors:0x3f975d5f": "canSwapFromV1(address _fromToken,address _toToken,uint256 fromAmount,uint256 toAmount)",
    "funcSelectors:0xf27cf320": "canSwapFromV2(address _fromToken,address _toToken)",
    "funcSelectors:0x551196d5": "inCaseTokengetsStuck(address _TokenAddress)",
    "funcSelectors:0xb10e1dbc": "set_new_goodwill(uint16 _new_goodwill)",
    "funcSelectors:0x01a12fd3": "removeAlerter(address alerter)",
    "funcSelectors:0x238dafe0": "enabled()",
    "funcSelectors:0x27a099d8": "getOperators()",
    "funcSelectors:0x29589f61": "tradeWithHint(address src,uint256 srcAmount,address dest,address destAddress,uint256 maxDestAmount,uint256 minConversionRate,address walletId,bytes hint)",
    "funcSelectors:0x3bba21dc": "swapTokenToEther(address token,uint256 srcAmount,uint256 minConversionRate)",
    "funcSelectors:0x3ccdbb28": "withdrawToken(address token,uint256 amount,address sendTo)",
    "funcSelectors:0x3de39c11": "maxGasPrice()",
    "funcSelectors:0x408ee7fe": "addAlerter(address newAlerter)",
    "funcSelectors:0x4f61ff8b": "kyberNetworkContract()",
    "funcSelectors:0x6432679f": "getUserCapInWei(address user)",
    "funcSelectors:0x7409e2eb": "swapTokenToToken(address src,uint256 srcAmount,address dest,uint256 minConversionRate)",
    "funcSelectors:0x75829def": "transferAdmin(address newAdmin)",
    "funcSelectors:0x77f50f97": "claimAdmin()",
    "funcSelectors:0x7a2a0456": "swapEtherToToken(address token,uint256 minConversionRate)",
    "funcSelectors:0x7acc8678": "transferAdminQuickly(address newAdmin)",
    "funcSelectors:0x7c423f54": "getAlerters()",
    "funcSelectors:0x809a9e55": "getExpectedRate(address src,address dest,uint256 srcQty)",
    "funcSelectors:0x8eaaeecf": "getUserCapInTokenWei(address user,address token)",
    "funcSelectors:0xabd188a8": "setKyberNetworkContract(address _kyberNetworkContract)",
    "funcSelectors:0xb64a097e": "info(bytes32 field)",
    "funcSelectors:0xcb3c28c7": "trade(address src,uint256 srcAmount,address dest,address destAddress,uint256 maxDestAmount,uint256 minConversionRate,address walletId)",
    "funcSelectors:0xce56c454": "withdrawEther(uint256 amount,address sendTo)",
    "funcSelectors:0xa461b3c8": "initialize(string _name,string _symbol,address[4] _coins,uint256[4] _rate_multipliers,uint256 _A,uint256 _fee)",
    "funcSelectors:0x4903b0d1": "balances(uint256 arg0)",
    "funcSelectors:0x14f05979": "get_balances()",
    "funcSelectors:0x76a2f0f0": "A_precise()",
    "funcSelectors:0xed8e84f3": "calc_token_amount(uint256[2] _amounts,bool _is_deposit)",
    "funcSelectors:0x0c3e4b54": "add_liquidity(uint256[2] _amounts,uint256 _min_mint_amount,address _receiver)",
    "funcSelectors:0xddc1f59d": "exchange(int128 i,int128 j,uint256 _dx,uint256 _min_dy,address _receiver)",
    "funcSelectors:0x5b36389c": "remove_liquidity(uint256 _amount,uint256[2] min_amounts)",
    "funcSelectors:0x3eb1719f": "remove_liquidity(uint256 _burn_amount,uint256[2] _min_amounts,address _receiver)",
    "funcSelectors:0x52d2cfdd": "remove_liquidity_imbalance(uint256[2] _amounts,uint256 _max_burn_amount,address _receiver)",
    "funcSelectors:0xcc2b27d7": "calc_withdraw_one_coin(uint256 _burn_amount,int128 i)",
    "funcSelectors:0x1a4d01d2": "remove_liquidity_one_coin(uint256 _burn_amount,int128 i,uint256 _min_received)",
    "funcSelectors:0x081579a5": "remove_liquidity_one_coin(uint256 _burn_amount,int128 i,uint256 _min_received,address _receiver)",
    "funcSelectors:0x3c157e64": "ramp_A(uint256 _future_A,uint256 _future_time)",
    "funcSelectors:0x551a6588": "stop_ramp_A()",
    "funcSelectors:0xc6610657": "coins(uint256 i)",
    "funcSelectors:0xe2e7d264": "admin_balances(uint256 i)",
    "funcSelectors:0x5409491a": "initial_A()",
    "funcSelectors:0x2081066c": "initial_A_time()",
    "funcSelectors:0x14052288": "future_A_time()",
    "funcSelectors:0xb1373929": "gamma()",
    "funcSelectors:0x5b41b908": "exchange(uint256 i,uint256 j,uint256 dx,uint256 min_dy)",
    "funcSelectors:0x394747c5": "exchange(uint256 i,uint256 j,uint256 dx,uint256 min_dy,bool use_eth)",
    "funcSelectors:0x65b2489b": "exchange_underlying(uint256 i,uint256 j,uint256 dx,uint256 min_dy)",
    "funcSelectors:0x556d6e9f": "get_dy(uint256 i,uint256 j,uint256 dx)",
    "funcSelectors:0xee22be23": "add_liquidity(uint256[2] amounts,uint256 min_mint_amount,bool use_eth)",
    "funcSelectors:0x269b5581": "remove_liquidity(uint256 _amount,uint256[2] min_amounts,bool use_eth)",
    "funcSelectors:0x8d8ea727": "calc_token_amount(uint256[2] amounts)",
    "funcSelectors:0x4fb08c5e": "calc_withdraw_one_coin(uint256 token_amount,uint256 i)",
    "funcSelectors:0xf1dc3cc9": "remove_liquidity_one_coin(uint256 token_amount,uint256 i,uint256 min_amount)",
    "funcSelectors:0x8f15b6b5": "remove_liquidity_one_coin(uint256 token_amount,uint256 i,uint256 min_amount,bool use_eth)",
    "funcSelectors:0xc93f49e8": "claim_admin_fees()",
    "funcSelectors:0x5e248072": "ramp_A_gamma(uint256 future_A,uint256 future_gamma,uint256 future_time)",
    "funcSelectors:0x244c7c2e": "stop_ramp_A_gamma()",
    "funcSelectors:0xa43c3351": "commit_new_parameters(uint256 _new_mid_fee,uint256 _new_out_fee,uint256 _new_admin_fee,uint256 _new_fee_gamma,uint256 _new_allowed_extra_profit,uint256 _new_adjustment_step,uint256 _new_ma_half_time)",
    "funcSelectors:0x7242e524": "set_admin_fee_receiver(address _admin_fee_receiver)",
    "funcSelectors:0x54f0f7d5": "lp_price()",
    "funcSelectors:0xb9e8c9fd": "price_scale()",
    "funcSelectors:0x86fc88d3": "price_oracle()",
    "funcSelectors:0xc146bf94": "last_prices()",
    "funcSelectors:0x6112c747": "last_prices_timestamp()",
    "funcSelectors:0x204fe3d5": "initial_A_gamma()",
    "funcSelectors:0xf30cfad5": "future_A_gamma()",
    "funcSelectors:0xe89876ff": "initial_A_gamma_time()",
    "funcSelectors:0xf9ed9597": "future_A_gamma_time()",
    "funcSelectors:0x49fe9e77": "allowed_extra_profit()",
    "funcSelectors:0x727ced57": "future_allowed_extra_profit()",
    "funcSelectors:0x72d4f0e2": "fee_gamma()",
    "funcSelectors:0xd7c3dcbe": "future_fee_gamma()",
    "funcSelectors:0x083812e5": "adjustment_step()",
    "funcSelectors:0x4ea12c7d": "future_adjustment_step()",
    "funcSelectors:0x662b6274": "ma_half_time()",
    "funcSelectors:0x0c5e23d4": "future_ma_half_time()",
    "funcSelectors:0x92526c0c": "mid_fee()",
    "funcSelectors:0xee8de675": "out_fee()",
    "funcSelectors:0x7cf9aedc": "future_mid_fee()",
    "funcSelectors:0x7d1b060c": "future_out_fee()",
    "funcSelectors:0x0f529ba2": "D()",
    "funcSelectors:0x7ba1a74d": "xcp_profit()",
    "funcSelectors:0x0b7b594b": "xcp_profit_a()",
    "funcSelectors:0x0c46b72a": "virtual_price()",
    "funcSelectors:0x9c868ac0": "is_killed()",
    "funcSelectors:0x2a426896": "kill_deadline()",
    "funcSelectors:0x6e42e4d2": "admin_fee_receiver()",
    "funcSelectors:0x01e33667": "withdrawToken(address token,address to,uint256 tokenAmount)",
    "funcSelectors:0x72e98a79": "transferBZxOwnership(address newBZxContractAddress)",
    "funcSelectors:0xe4a72b13": "bZxContractAddress()",
    "funcSelectors:0xe5994905": "transferTokenFrom(address token,address from,address to,uint256 tokenAmount)",
    "funcSelectors:0xfb0f97a8": "depositToken(address token,address from,uint256 tokenAmount)",
    "funcSelectors:0x0a19b14a": "trade(address tokenGet,uint256 amountGet,address tokenGive,uint256 amountGive,uint256 expires,uint256 nonce,address user,uint8 v,bytes32 r,bytes32 s,uint256 amount)",
    "funcSelectors:0x0b927666": "order(address tokenGet,uint256 amountGet,address tokenGive,uint256 amountGive,uint256 expires,uint256 nonce)",
    "funcSelectors:0x19774d43": "orderFills(address ,bytes32 )",
    "funcSelectors:0x278b8c0e": "cancelOrder(address tokenGet,uint256 amountGet,address tokenGive,uint256 amountGive,uint256 expires,uint256 nonce,uint8 v,bytes32 r,bytes32 s)",
    "funcSelectors:0x46be96c3": "amountFilled(address tokenGet,uint256 amountGet,address tokenGive,uint256 amountGive,uint256 expires,uint256 nonce,address user,uint8 v,bytes32 r,bytes32 s)",
    "funcSelectors:0x54d03b5c": "changeFeeMake(uint256 feeMake_)",
    "funcSelectors:0x57786394": "feeMake()",
    "funcSelectors:0x5e1d7ae4": "changeFeeRebate(uint256 feeRebate_)",
    "funcSelectors:0x6c86888b": "testTrade(address tokenGet,uint256 amountGet,address tokenGive,uint256 amountGive,uint256 expires,uint256 nonce,address user,uint8 v,bytes32 r,bytes32 s,uint256 amount,address sender)",
    "funcSelectors:0x71ffcb16": "changeFeeAccount(address feeAccount_)",
    "funcSelectors:0x731c2f81": "feeRebate()",
    "funcSelectors:0x8823a9c0": "changeFeeTake(uint256 feeTake_)",
    "funcSelectors:0x9e281a98": "withdrawToken(address token,uint256 amount)",
    "funcSelectors:0xbb5f4629": "orders(address ,bytes32 )",
    "funcSelectors:0xc281309e": "feeTake()",
    "funcSelectors:0xe8f6bc2e": "changeAccountLevelsAddr(address accountLevelsAddr_)",
    "funcSelectors:0xf3412942": "accountLevelsAddr()",
    "funcSelectors:0xfb6e155f": "availableVolume(address tokenGet,uint256 amountGet,address tokenGive,uint256 amountGive,uint256 expires,uint256 nonce,address user,uint8 v,bytes32 r,bytes32 s)",
    "funcSelectors:0x6d98ebe3": "STARKWARE_CONTRACT()",
    "funcSelectors:0x27cc37b0": "deposit(uint256 depositAmount,uint256 starkKey,uint256 positionId,bytes signature)",
    "funcSelectors:0x9f2c365a": "depositERC20(address tokenFrom,uint256 tokenFromAmount,uint256 starkKey,uint256 positionId,address exchangeProxy,bytes exchangeProxyData,bytes signature)",
    "funcSelectors:0xe1e1a91a": "depositEth(uint256 starkKey,uint256 positionId,address exchangeProxy,bytes exchangeProxyData,bytes signature)",
    "funcSelectors:0x572b6c05": "isTrustedForwarder(address forwarder)",
    "funcSelectors:0x1bf33004": "acceptSwap(uint256 swapId)",
    "funcSelectors:0x54d6a2b7": "cancelSwap(uint256 swapId)",
    "funcSelectors:0xdbd6dd5f": "initiateSwap(uint256 swapId,address[] nftAddresses,uint256[] nftIds)",
    "funcSelectors:0x55a36d56": "proposeSwap(address secondUser,address[] nftAddresses,uint256[] nftIds)",
    "funcSelectors:0x7ea5482a": "setAppFee(uint256 newFee)",
    "funcSelectors:0x1247ae58": "filled_subtrees()",
    "funcSelectors:0x1f79a1e9": "nullifierHashes(uint256 )",
    "funcSelectors:0x2d9ed8d5": "transferValue()",
    "funcSelectors:0x393fe1cd": "roots()",
    "funcSelectors:0x49ce8997": "commitments(uint256 )",
    "funcSelectors:0x4cd212eb": "zeros()",
    "funcSelectors:0x551c4fd2": "withdraw(uint256[2] a,uint256[2][2] b,uint256[2] c,uint256[4] input)",
    "funcSelectors:0x5777bf50": "isDepositsEnabled()",
    "funcSelectors:0x5a129efe": "isSpent(uint256 nullifier)",
    "funcSelectors:0x5bb93995": "hashLeftRight(uint256 left,uint256 right)",
    "funcSelectors:0x65576fab": "next_index()",
    "funcSelectors:0x8b145d6d": "current_root()",
    "funcSelectors:0xa6232a93": "isKnownRoot(uint256 root)",
    "funcSelectors:0xd907813c": "toggleDeposits()",
    "funcSelectors:0x9ad26744": "removeAuthorizedAddressAtIndex(address target,uint256 index)",
    "funcSelectors:0xae25532e": "getProxyId()",
    "funcSelectors:0x6f6941b9": "cDAI()",
    "funcSelectors:0x10d95969": "crvapr()",
    "funcSelectors:0x7165485d": "curve()",
    "funcSelectors:0x4f39059c": "curveToken()",
    "funcSelectors:0x458e3234": "set_new_TOKEN(address _new_TOKEN)",
    "funcSelectors:0x855fed81": "set_new_cDAI(address _new_cDAI)",
    "funcSelectors:0x89a642a9": "set_new_curveToken(address _new_set_new_curveToken)",
    "funcSelectors:0xc532a774": "calc_withdraw_one_coin(uint256 _burn_amount,int128 i,bool _previous)",
    "funcSelectors:0x1ed86f19": "addModule(address module)",
    "funcSelectors:0x5cf1cd2b": "batchNotifyFor(address[] accounts)",
    "funcSelectors:0xec954594": "inchToken()",
    "funcSelectors:0x899f5898": "notify()",
    "funcSelectors:0x132b4fc8": "notifyFor(address account)",
    "funcSelectors:0xa0632461": "removeModule(address module)",
    "funcSelectors:0xa694fc3a": "stake(uint256 amount)",
    "funcSelectors:0x131b9c04": "getEarnings(address tokenAddress)",
    "funcSelectors:0x1e99d569": "nextStreamId()",
    "funcSelectors:0x2b8a119d": "getCompoundingStream(uint256 streamId)",
    "funcSelectors:0x3656eec2": "balanceOf(uint256 streamId,address who)",
    "funcSelectors:0x6db9241b": "cancelStream(uint256 streamId)",
    "funcSelectors:0x7a9b2c6c": "withdrawFromStream(uint256 streamId,uint256 amount)",
    "funcSelectors:0x8129fc1c": "initialize()",
    "funcSelectors:0x8195aeaa": "createCompoundingStream(address recipient,uint256 deposit,address tokenAddress,uint256 startTime,uint256 stopTime,uint256 senderSharePercentage,uint256 recipientSharePercentage)",
    "funcSelectors:0x894e9a0d": "getStream(uint256 streamId)",
    "funcSelectors:0x8c9a3252": "interestOf(uint256 streamId,uint256 amount)",
    "funcSelectors:0x9012c4a8": "updateFee(uint256 feePercentage)",
    "funcSelectors:0xa734d51b": "isCompoundingStream(uint256 streamId)",
    "funcSelectors:0xa82ccd4d": "deltaOf(uint256 streamId)",
    "funcSelectors:0xc1eb9ee0": "takeEarnings(address tokenAddress,uint256 amount)",
    "funcSelectors:0xcc1b4bf6": "createStream(address recipient,uint256 deposit,address tokenAddress,uint256 startTime,uint256 stopTime)",
    "funcSelectors:0xd2cba55c": "cTokenManager()",
    "funcSelectors:0xccd34cd5": "PRECISION_FACTOR()",
    "funcSelectors:0x097aad10": "calculatePendingRewards(address user)",
    "funcSelectors:0x6de26e38": "calculateSharePriceInLOOKS()",
    "funcSelectors:0xab5e32af": "calculateSharesValueInLOOKS(address user)",
    "funcSelectors:0xcb4aec61": "currentRewardPerBlock()",
    "funcSelectors:0x9a408321": "deposit(uint256 amount,bool claimRewardToken)",
    "funcSelectors:0x4641257d": "harvest()",
    "funcSelectors:0x40d2abae": "lastRewardAdjustment()",
    "funcSelectors:0xa9f8d181": "lastRewardBlock()",
    "funcSelectors:0xa218141b": "lastUpdateBlock()",
    "funcSelectors:0x36db9fb2": "looksRareToken()",
    "funcSelectors:0x442da82f": "periodEndBlock()",
    "funcSelectors:0xdf136d65": "rewardPerTokenStored()",
    "funcSelectors:0xf7c618c1": "rewardToken()",
    "funcSelectors:0x18a6bc32": "tokenDistributor()",
    "funcSelectors:0x3a98ef39": "totalShares()",
    "funcSelectors:0x97e50818": "updateRewards(uint256 reward,uint256 rewardDurationInBlocks)",
    "funcSelectors:0x1959a002": "userInfo(address )",
    "funcSelectors:0x38d07436": "withdraw(uint256 shares,bool claimRewardToken)",
    "funcSelectors:0x1c1c6fe5": "withdrawAll(bool claimRewardToken)",
    "funcSelectors:0xc7977be7": "EIP712_DOMAIN_TYPEHASH()",
    "funcSelectors:0x17fafcd7": "SettleAggregateOrder(tuple order,bytes takerSig,tuple[] makerSigs)",
    "funcSelectors:0x3001e0c2": "hashAggregateOrder(tuple order)",
    "funcSelectors:0x94e8b38d": "hashPartialOrder(tuple order)",
    "funcSelectors:0xea7faa61": "registerAllowedOrderSigner(address signer,bool allowed)",
    "funcSelectors:0x1bfdba1e": "validateMakerSignature(address maker_address,bytes32 hash,tuple signature)",
    "funcSelectors:0x93e4eaa9": "RUNE()",
    "funcSelectors:0x1fece7b4": "deposit(address vault,address asset,uint256 amount,string memo)",
    "funcSelectors:0x44bc937b": "depositWithExpiry(address vault,address asset,uint256 amount,string memo,uint256 expiration)",
    "funcSelectors:0xb98b995f": "returnVaultAssets(address router,address asgard,tuple[] coins,string memo)",
    "funcSelectors:0x1b738b32": "transferAllowance(address router,address newVault,address asset,uint256 amount,string memo)",
    "funcSelectors:0x574da717": "transferOut(address to,address asset,uint256 amount,string memo)",
    "funcSelectors:0x4039fd4b": "transferOutAndCall(address aggregator,address finalToken,address to,uint256 amountOutMin,string memo)",
    "funcSelectors:0x03b6a673": "vaultAllowance(address vault,address token)",
    "funcSelectors:0x0a5ea466": "claimTokens(address token,address who,address dest,uint256 amount)",
    "funcSelectors:0xb1746b86": "burnGasToken(uint256 gasSpent)",
    "funcSelectors:0xc91d59fe": "gasToken()",
    "funcSelectors:0xccf1af31": "gasTokenOwner()",
    "errorSelectors:0xcc94a63a": "NoSlice()",
    "errorSelectors:0x47aaf07a": "SliceOverflow()",
    "errorSelectors:0xa78aa27f": "ToAddressOutOfBounds()",
    "errorSelectors:0x77146e62": "ToAddressOverflow()",
    "errorSelectors:0xd9096a3e": "ToUint24OutOfBounds()",
    "errorSelectors:0x855859b4": "ToUint24Overflow()",
    "funcSelectors:0xbca8c7b5": "executeCall(address target,bytes callData)",
    "funcSelectors:0x8e325979": "DELEGATION_CALLER()",
    "funcSelectors:0x2c436e5b": "delegateType()",
    "funcSelectors:0x3672c911": "executeAuctionComplete(address ,address buyer,bytes data)",
    "funcSelectors:0xf477e4fd": "executeAuctionRefund(address seller,address ,bytes data)",
    "funcSelectors:0xc23725f9": "executeBid(address seller,address previousBidder,address ,bytes data)",
    "funcSelectors:0x16721626": "executeBuy(address seller,address buyer,bytes data)",
    "funcSelectors:0xbc553f0f": "executeSell(address seller,address buyer,bytes data)",
    "funcSelectors:0x7ac0c894": "transferBatch(tuple[] pairs,address to)",
    "funcSelectors:0xb238b533": "addNativeLiquidity()",
    "funcSelectors:0xedd9587b": "addSupportedToken(address tokenAddress,uint256 minCapLimit,uint256 maxCapLimit)",
    "funcSelectors:0x14fe72aa": "addTokenLiquidity(address tokenAddress,uint256 amount)",
    "funcSelectors:0xa0be06f9": "adminFee()",
    "funcSelectors:0xfcc4d59a": "adminFeeAccumulatedByToken(address )",
    "funcSelectors:0x583bbc40": "baseGas()",
    "funcSelectors:0xb6632cb3": "changeAdminFee(uint256 newAdminFee)",
    "funcSelectors:0x2cd271e7": "changePauser(address newPauser)",
    "funcSelectors:0x85a25597": "checkHashStatus(address tokenAddress,uint256 amount,address receiver,bytes depositHash)",
    "funcSelectors:0x13fe24e1": "depositErc20(address tokenAddress,address receiver,uint256 amount,uint256 toChainId)",
    "funcSelectors:0x02279b4a": "depositNative(address receiver,uint256 toChainId)",
    "funcSelectors:0xe06179fe": "gasFeeAccumulatedByToken(address )",
    "funcSelectors:0x2a905ccc": "getAdminFee()",
    "funcSelectors:0xab1635b7": "getExecutorManager()",
    "funcSelectors:0xea526de7": "getLiquidity(address liquidityProviderAddress,address tokenAddress)",
    "funcSelectors:0x7008b548": "getPauser()",
    "funcSelectors:0x6a8a3b96": "isPauser()",
    "funcSelectors:0x1f9bf5f5": "permitAndDepositErc20(address tokenAddress,address receiver,uint256 amount,uint256 toChainId,tuple permitOptions)",
    "funcSelectors:0xbf797e2a": "permitEIP2612AndDepositErc20(address tokenAddress,address receiver,uint256 amount,uint256 toChainId,tuple permitOptions)",
    "funcSelectors:0x760d098a": "processedHash(bytes32 )",
    "funcSelectors:0xf72780ef": "removeNativeLiquidity(uint256 amount)",
    "funcSelectors:0x76319190": "removeSupportedToken(address tokenAddress)",
    "funcSelectors:0x84d93612": "removeTokenLiquidity(address tokenAddress,uint256 amount)",
    "funcSelectors:0x8909bb83": "sendFundsToUser(address tokenAddress,uint256 amount,address receiver,bytes depositHash,uint256 tokenGasPrice)",
    "funcSelectors:0xccb844e1": "setBaseGas(uint128 gas)",
    "funcSelectors:0xef0d4572": "setExecutorManager(address _executorManagerAddress)",
    "funcSelectors:0x8b56d0b7": "setTokenTransferOverhead(address tokenAddress,uint256 gasOverhead)",
    "funcSelectors:0xda742228": "setTrustedForwarder(address forwarderAddress)",
    "funcSelectors:0xba8dbea2": "tokensInfo(address )",
    "funcSelectors:0x7da0a877": "trustedForwarder()",
    "funcSelectors:0x56e3866d": "updateTokenCap(address tokenAddress,uint256 minCapLimit,uint256 maxCapLimit)",
    "funcSelectors:0x486ff0cd": "versionRecipient()",
    "funcSelectors:0xc7e42b1b": "withdrawErc20(address tokenAddress)",
    "funcSelectors:0x1ff14860": "withdrawErc20AdminFee(address tokenAddress,address receiver)",
    "funcSelectors:0x1a2b4381": "withdrawErc20GasFee(address tokenAddress,address receiver)",
    "funcSelectors:0x50431ce4": "withdrawNative()",
    "funcSelectors:0xfa181699": "withdrawNativeAdminFee(address receiver)",
    "funcSelectors:0x23868d6c": "withdrawNativeGasFee(address receiver)",
    "funcSelectors:0x3dd7df50": "LOOKS_RARE_EXCHANGE()",
    "funcSelectors:0x33f2fa9f": "transferNonFungibleToken(address collection,address from,address to,uint256 tokenId,uint256 )",
    "funcSelectors:0x1878d1f1": "ETH_TOKEN_ADDRESS()",
    "funcSelectors:0xd337e37b": "pay(address src,uint256 srcAmount,address dest,address destAddress,uint256 maxDestAmount,uint256 minConversionRate,address walletId,bytes paymentData,bytes hint,address kyberNetworkProxy)",
    "funcSelectors:0x48d67e1b": "decayPeriod()",
    "funcSelectors:0xeaadf848": "decayPeriodVote(uint256 vote)",
    "funcSelectors:0x7e82a6f3": "decayPeriodVotes(address user)",
    "funcSelectors:0x3049105d": "deposit(uint256[2] maxAmounts,uint256[2] minAmounts)",
    "funcSelectors:0x9ea5ce0a": "depositFor(uint256[2] maxAmounts,uint256[2] minAmounts,address target)",
    "funcSelectors:0xf76d13b4": "discardDecayPeriodVote()",
    "funcSelectors:0x93028d83": "discardFeeVote()",
    "funcSelectors:0x6669302a": "discardSlippageFeeVote()",
    "funcSelectors:0x11212d66": "feeVote(uint256 vote)",
    "funcSelectors:0x9aad141b": "feeVotes(address user)",
    "funcSelectors:0xd7d3aab5": "getBalanceForAddition(address token)",
    "funcSelectors:0xe7ff42c9": "getBalanceForRemoval(address token)",
    "funcSelectors:0x1e1401f8": "getReturn(address src,address dst,uint256 amount)",
    "funcSelectors:0xd9a0c217": "mooniswapFactoryGovernance()",
    "funcSelectors:0xc40d4d66": "setMooniswapFactoryGovernance(address newMooniswapFactoryGovernance)",
    "funcSelectors:0x3732b394": "slippageFee()",
    "funcSelectors:0x07a80070": "slippageFeeVote(uint256 vote)",
    "funcSelectors:0x95cad3c7": "slippageFeeVotes(address user)",
    "funcSelectors:0xd5bcb9b5": "swap(address src,address dst,uint256 amount,uint256 minReturn,address referral)",
    "funcSelectors:0xe331d039": "swapFor(address src,address dst,uint256 amount,uint256 minReturn,address referral,address receiver)",
    "funcSelectors:0x0dfe1681": "token0()",
    "funcSelectors:0xd21220a7": "token1()",
    "funcSelectors:0x6edc2c09": "virtualBalancesForAddition(address )",
    "funcSelectors:0x5ed9156d": "virtualBalancesForRemoval(address )",
    "funcSelectors:0x0146081f": "virtualDecayPeriod()",
    "funcSelectors:0xf1ea6042": "virtualFee()",
    "funcSelectors:0x23e8cae1": "virtualSlippageFee()",
    "funcSelectors:0xb1ec4c40": "volumes(address )",
    "funcSelectors:0x5915d806": "withdraw(uint256 amount,uint256[] minReturns)",
    "funcSelectors:0x3c6216a6": "withdrawFor(uint256 amount,uint256[] minReturns,address target)",
    "funcSelectors:0xdd1fe62c": "freeReduxTokens(address user,uint256 tokensToFree)",
    "funcSelectors:0x7fb93127": "reduxToken()",
    "funcSelectors:0xa619486e": "masterCopy()",
    "funcSelectors:0x48ccda3c": "AAVE()",
    "funcSelectors:0x0542975c": "ADDRESSES_PROVIDER()",
    "funcSelectors:0xf301e781": "LEND()",
    "funcSelectors:0xb4dcfc77": "LENDING_POOL()",
    "funcSelectors:0xa56152e8": "LENDING_POOL_V1()",
    "funcSelectors:0x3bcb753f": "LENDING_POOL_V1_CORE()",
    "funcSelectors:0x4484c213": "LEND_TO_AAVE_MIGRATOR()",
    "funcSelectors:0x920f5c84": "executeOperation(address[] assets,uint256[] amounts,uint256[] premiums,address initiator,bytes params)",
    "funcSelectors:0x6321c7e8": "migrateATokens(address[] v1ATokens,uint256[] aTokensAmounts)",
    "funcSelectors:0x2e0e9fbd": "relayers(address ,uint256 )",
    "funcSelectors:0x482879aa": "sablier()",
    "funcSelectors:0x52e877d2": "whitelistRelayer(address relayer,uint256 salaryId)",
    "funcSelectors:0x591bc226": "discardRelayer(address relayer,uint256 salaryId)",
    "funcSelectors:0x73f4823e": "createCompoundingSalary(address employee,uint256 salary,address tokenAddress,uint256 startTime,uint256 stopTime,uint256 senderSharePercentage,uint256 recipientSharePercentage)",
    "funcSelectors:0x74e861d6": "getHubAddr()",
    "funcSelectors:0x80274db7": "preRelayedCall(bytes context)",
    "funcSelectors:0x80bfacc2": "getSalary(uint256 salaryId)",
    "funcSelectors:0x83947ea0": "acceptRelayedCall(address relay,address from,bytes encodedFunction,uint256 transactionFee,uint256 gasPrice,uint256 gasLimit,uint256 nonce,bytes approvalData,uint256 )",
    "funcSelectors:0xad61ccd5": "relayHubVersion()",
    "funcSelectors:0xc0c53b8b": "initialize(address ownerAddress,address signerAddress,address sablierAddress)",
    "funcSelectors:0xc5a66ff9": "cancelSalary(uint256 salaryId)",
    "funcSelectors:0xdc7d9369": "createSalary(address employee,uint256 salary,address tokenAddress,uint256 startTime,uint256 stopTime)",
    "funcSelectors:0xde8fd678": "nextSalaryId()",
    "funcSelectors:0xe06e0e22": "postRelayedCall(bytes context,bool success,uint256 actualCharge,bytes32 preRetVal)",
    "funcSelectors:0xfea7c53f": "withdrawFromSalary(uint256 salaryId,uint256 amount)",
    "funcSelectors:0x0510111e": "MAXIMUM_COLLATERALIZATION_LIMIT()",
    "funcSelectors:0x30d4d190": "MINIMUM_COLLATERALIZATION_LIMIT()",
    "funcSelectors:0x45f867b3": "PERCENT_RESOLUTION()",
    "funcSelectors:0x538ba4f9": "ZERO_ADDRESS()",
    "funcSelectors:0xa005fda3": "_linkGasOracle()",
    "funcSelectors:0x4aaf7c65": "collateralizationLimit()",
    "funcSelectors:0x5641ec03": "emergencyExit()",
    "funcSelectors:0x6b9f96ea": "flush()",
    "funcSelectors:0xf0d787a3": "flushActivator()",
    "funcSelectors:0x9a9af221": "getCdpLastDeposit(address _account)",
    "funcSelectors:0xfc00e8a0": "getCdpTotalCredit(address _account)",
    "funcSelectors:0xaa6e0434": "getCdpTotalDebt(address _account)",
    "funcSelectors:0xa1e401a9": "getCdpTotalDeposited(address _account)",
    "funcSelectors:0x2670fdd8": "getVaultAdapter(uint256 _vaultId)",
    "funcSelectors:0xaaf16660": "getVaultTotalDeposited(uint256 _vaultId)",
    "funcSelectors:0xddc63262": "harvest(uint256 _vaultId)",
    "funcSelectors:0xb5962917": "harvestFee()",
    "funcSelectors:0x158ef93e": "initialized()",
    "funcSelectors:0x415f1240": "liquidate(uint256 _amount)",
    "funcSelectors:0xce5494bb": "migrate(address _adapter)",
    "funcSelectors:0x3847f038": "pegMinimum()",
    "funcSelectors:0xf39c38a0": "pendingGovernance()",
    "funcSelectors:0xfefdc5d1": "recall(uint256 _vaultId,uint256 _amount)",
    "funcSelectors:0x4c3a8e02": "recallAll(uint256 _vaultId)",
    "funcSelectors:0xd8aed145": "repay(uint256 _parentAmount,uint256 _childAmount)",
    "funcSelectors:0xf58c251c": "sentinel()",
    "funcSelectors:0x53ffa18b": "setCollateralizationLimit(uint256 _limit)",
    "funcSelectors:0x45ee0755": "setEmergencyExit(bool _emergencyExit)",
    "funcSelectors:0x22c37b75": "setFlushActivator(uint256 _flushActivator)",
    "funcSelectors:0x792b55b6": "setHarvestFee(uint256 _harvestFee)",
    "funcSelectors:0x5a9b5e92": "setOracleAddress(address Oracle,uint256 peg)",
    "funcSelectors:0x0abb6035": "setPendingGovernance(address _pendingGovernance)",
    "funcSelectors:0x09dac061": "setSentinel(address _sentinel)",
    "funcSelectors:0xadb4a9ad": "setTransmuter(address _transmuter)",
    "funcSelectors:0xff50abdc": "totalDeposited()",
    "funcSelectors:0x7239d2b9": "transmuter()",
    "funcSelectors:0xa7c6a100": "vaultCount()",
    "funcSelectors:0x1718a68f": "xtoken()",
    "funcSelectors:0xbb038e15": "cdpManager()",
    "funcSelectors:0xe19b8ee3": "migrate(bytes32 cup)",
    "funcSelectors:0x0b14408f": "saiJoin()",
    "funcSelectors:0xc41780ba": "swapDaiToSai(uint256 wad)",
    "funcSelectors:0xfbabdebd": "swapSaiToDai(uint256 wad)",
    "funcSelectors:0x34e70cc2": "tub()",
    "funcSelectors:0x2dbacef3": "wethJoin()",
    "funcSelectors:0x1652e9fc": "set_minter(address _minter)",
    "funcSelectors:0x40c10f19": "mint(address _to,uint256 _value)",
    "funcSelectors:0x79cc6790": "burnFrom(address _to,uint256 _value)",
    "funcSelectors:0x9a8a0592": "chainId()",
    "funcSelectors:0x5285e058": "crossDomainAdmin()",
    "funcSelectors:0x49228978": "deposit(address recipient,address originToken,uint256 amount,uint256 destinationChainId,uint64 relayerFeePct,uint32 quoteTimestamp)",
    "funcSelectors:0x57f6dcb8": "depositQuoteTimeBuffer()",
    "funcSelectors:0x8a7860ce": "emergencyDeleteRootBundle(uint256 rootBundleId)",
    "funcSelectors:0x5249fef1": "enabledDepositRoutes(address ,uint256 )",
    "funcSelectors:0xe2ea41aa": "executeRelayerRefundLeaf(uint32 rootBundleId,tuple relayerRefundLeaf,bytes32[] proof)",
    "funcSelectors:0xbe3576ee": "executeSlowRelayLeaf(address depositor,address recipient,address destinationToken,uint256 amount,uint256 originChainId,uint64 realizedLpFeePct,uint64 relayerFeePct,uint32 depositId,uint32 rootBundleId,bytes32[] proof)",
    "funcSelectors:0x89a153cc": "fillRelay(address depositor,address recipient,address destinationToken,uint256 amount,uint256 maxTokensToSend,uint256 repaymentChainId,uint256 originChainId,uint64 realizedLpFeePct,uint64 relayerFeePct,uint32 depositId)",
    "funcSelectors:0xffc351a3": "fillRelayWithUpdatedFee(address depositor,address recipient,address destinationToken,uint256 amount,uint256 maxTokensToSend,uint256 repaymentChainId,uint256 originChainId,uint64 realizedLpFeePct,uint64 relayerFeePct,uint64 newRelayerFeePct,uint32 depositId,bytes depositorSignature)",
    "funcSelectors:0x29cb924d": "getCurrentTime()",
    "funcSelectors:0xe1904402": "hubPool()",
    "funcSelectors:0xa1244c67": "numberOfDeposits()",
    "funcSelectors:0xf06850f6": "relayFills(bytes32 )",
    "funcSelectors:0x493a4f84": "relayRootBundle(bytes32 relayerRefundRoot,bytes32 slowRelayRoot)",
    "funcSelectors:0xee2a53f8": "rootBundles(uint256 )",
    "funcSelectors:0xde7eba78": "setCrossDomainAdmin(address newCrossDomainAdmin)",
    "funcSelectors:0x22f8e566": "setCurrentTime(uint256 time)",
    "funcSelectors:0x2752042e": "setDepositQuoteTimeBuffer(uint32 newDepositQuoteTimeBuffer)",
    "funcSelectors:0x272751c7": "setEnableRoute(address originToken,uint256 destinationChainId,bool enabled)",
    "funcSelectors:0x1dfb2d02": "setHubPool(address newHubPool)",
    "funcSelectors:0xe282d5b9": "speedUpDeposit(address depositor,uint64 newRelayerFeePct,uint32 depositId,bytes depositorSignature)",
    "funcSelectors:0x1c39c38d": "timerAddress()",
    "funcSelectors:0x3883e119": "calc_token_amount(uint256[3] amounts,bool deposit)",
    "funcSelectors:0x4515cef3": "add_liquidity(uint256[3] amounts,uint256 min_mint_amount)",
    "funcSelectors:0xecb586a5": "remove_liquidity(uint256 _amount,uint256[3] min_amounts)",
    "funcSelectors:0x9fdaea0c": "remove_liquidity_imbalance(uint256[3] amounts,uint256 max_burn_amount)",
    "funcSelectors:0xb5268389": "adapterRemoved(string )",
    "funcSelectors:0xb84f5d1e": "adapters(string )",
    "funcSelectors:0xc92aecc4": "chi()",
    "funcSelectors:0x558b7dd1": "pauseSwaps()",
    "funcSelectors:0x3ef11fd7": "removeAdapter(string aggregatorId)",
    "funcSelectors:0x459a39fb": "setAdapter(string aggregatorId,address addr,bytes4 selector,bytes data)",
    "funcSelectors:0x5f575529": "swap(string aggregatorId,address tokenFrom,uint256 amount,bytes data)",
    "funcSelectors:0x6b68764c": "swapUsingGasToken(string aggregatorId,address tokenFrom,uint256 amount,bytes data)",
    "funcSelectors:0x9804a380": "unpauseSwaps()",
    "funcSelectors:0x1766486d": "timeLockedUpgrades(bytes32 )",
    "funcSelectors:0x709a385e": "batchTransfer(address[] _tokens,uint256[] _quantities,address _from,address _to)",
    "funcSelectors:0x78446bc1": "timeLockPeriod()",
    "funcSelectors:0x9303b16f": "setTimeLockPeriod(uint256 _timeLockPeriod)",
    "funcSelectors:0xa6c4e467": "transfer(address _token,uint256 _quantity,address _from,address _to)"
}