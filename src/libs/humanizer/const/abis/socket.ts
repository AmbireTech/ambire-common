export const SocketViaAcross = [
  // 'constructor(address _spokePool, address _wethAddress, address _socketGateway, address _socketDeployFactory)',
  'error OnlySocketGatewayOwner()',
  'event NativeBridgeFee(uint256 fee)',
  'event SocketBridge(uint256 amount, address token, uint256 toChainId, bytes32 bridgeName, address sender, address receiver, bytes32 metadata)',
  'function ACROSS_ERC20_EXTERNAL_BRIDGE_FUNCTION_SELECTOR() view returns (bytes4)',
  'function ACROSS_NATIVE_EXTERNAL_BRIDGE_FUNCTION_SELECTOR() view returns (bytes4)',
  'function ACROSS_SWAP_BRIDGE_SELECTOR() view returns (bytes4)',
  'function AcrossIdentifier() view returns (bytes32)',
  'function BRIDGE_AFTER_SWAP_SELECTOR() view returns (bytes4)',
  'function NATIVE_TOKEN_ADDRESS() view returns (address)',
  'function WETH() view returns (address)',
  'function bridgeAfterSwap(uint256 amount, bytes bridgeData) payable',
  'function bridgeERC20To(uint256 amount, (address[] senderReceiverAddresses, address[] inputOutputTokens, uint256[] outputAmountToChainIdArray, uint32[] quoteAndDeadlineTimeStamps, uint256 bridgeFee, bytes32 metadata) acrossBridgeData) payable',
  'function bridgeNativeTo(uint256 amount, (address[] senderReceiverAddresses, address outputToken, uint256[] outputAmountToChainIdArray, uint32[] quoteAndDeadlineTimeStamps, uint256 bridgeFee, bytes32 metadata) acrossBridgeData) payable',
  'function rescueEther(address userAddress, uint256 amount)',
  'function rescueFunds(address token, address userAddress, uint256 amount)',
  'function socketDeployFactory() view returns (address)',
  'function socketGateway() view returns (address)',
  'function socketRoute() view returns (address)',
  'function spokePool() view returns (address)',
  'function spokePoolAddress() view returns (address)',
  'function swapAndBridge(uint32 swapId, bytes swapData, (address[] senderReceiverAddresses, address outputToken, uint256[] outputAmountToChainIdArray, uint32[] quoteAndDeadlineTimeStamps, uint256 bridgeFee, bytes32 metadata) acrossBridgeData) payable'
]
