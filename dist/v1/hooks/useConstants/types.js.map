{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../../v1/hooks/useConstants/types.ts"],"names":[],"mappings":";;AAiFA,IAAK,OAMJ;AAND,WAAK,OAAO;IACV,sCAA2B,CAAA;IAC3B,0BAAe,CAAA;IACf,gCAAqB,CAAA;IACrB,gCAAqB,CAAA;IACrB,8BAAmB,CAAA;AACrB,CAAC,EANI,OAAO,KAAP,OAAO,QAMX;AAeD,IAAK,SA+BJ;AA/BD,WAAK,SAAS;IACZ,gCAAmB,CAAA;IACnB,sCAAyB,CAAA;IACzB,sCAAyB,CAAA;IACzB,oCAAuB,CAAA;IACvB,0BAAa,CAAA;IACb,4BAAe,CAAA;IACf,gCAAmB,CAAA;IACnB,oCAAuB,CAAA;IACvB,8BAAiB,CAAA;IACjB,4BAAe,CAAA;IACf,8BAAiB,CAAA;IACjB,8BAAiB,CAAA;IACjB,4BAAe,CAAA;IACf,sCAAyB,CAAA;IACzB,kCAAqB,CAAA;IACrB,kCAAqB,CAAA;IACrB,sCAAyB,CAAA;IACzB,sCAAyB,CAAA;IACzB,gCAAmB,CAAA;IACnB,8BAAiB,CAAA;IACjB,gCAAmB,CAAA;IACnB,8BAAiB,CAAA;IACjB,gCAAmB,CAAA;IACnB,sCAAyB,CAAA;IACzB,oCAAuB,CAAA;IACvB,8BAAiB,CAAA;IACjB,8BAAiB,CAAA;IACjB,4BAAe,CAAA;IACf,gCAAmB,CAAA;IACnB,gCAAmB,CAAA;AACrB,CAAC,EA/BI,SAAS,KAAT,SAAS,QA+Bb;AAED,IAAK,eAKJ;AALD,WAAK,eAAe;IAClB,4CAAyB,CAAA;IACzB,sCAAmB,CAAA;IACnB,gCAAa,CAAA;IACb,gCAAa,CAAA;AACf,CAAC,EALI,eAAe,KAAf,eAAe,QAKnB","sourcesContent":["export interface UseConstantsProps {\n  fetch: any\n  endpoint: string\n}\n\nexport interface UseConstantsReturnType {\n  constants: ConstantsType | null\n  isLoading: boolean\n  retryFetch: () => void\n  getAdexToStakingTransfersLogs: () => Promise<AdexToStakingTransfersLogsType | null>\n  hasError: boolean\n}\n\nexport interface AdexToStakingTransfersLogsType {\n  jsonrpc: string\n  id: number\n  result: object[]\n}\n\nexport interface ResultEndpointResponse {\n  tokenList: ConstantsType['tokenList']\n  humanizerInfo: ConstantsType['humanizerInfo']\n  customTokens: ConstantsType['customTokens']\n}\n\n// All the below types are generated with the help of QuickType app.\n// However, they are not directly copy-pasted, but manually wired-up,\n// because the raw generated types were a bit misleading and too specific\n// (expecially for the `HumanizerInfoAbisType`).\n// {@link https://app.quicktype.io/}\nexport interface ConstantsType {\n  tokenList: { [key: string]: TokenList[] }\n  humanizerInfo: HumanizerInfoType\n  lastFetched: number\n  customTokens: CustomToken[]\n}\n\ninterface CustomToken {\n  id: string\n  customPrice: boolean\n  symbol: string\n  name: string\n  image: {\n    [key: string]: string\n  }\n  platforms: {\n    [key: string]: string\n  }\n  contract_address: string\n  baseToken: string\n  decimals: number\n  abi: string\n  abiFunction: string\n}\n\ninterface TokenList {\n  address: string\n  symbol: string\n  coingeckoId?: null | string\n  decimals?: number\n  decmals?: number\n}\n\n// @NOTE humanizer library uses different structure\nexport interface HumanizerInfoType {\n  abis: HumanizerInfoAbisType\n  tokens: { [key: string]: Array<number | null | string> }\n  names: { [address: string]: string }\n  yearnVaults: Vault[]\n  tesseractVaults: Vault[]\n}\n\ninterface Vault {\n  name: string\n  network: 'ethereum' | 'polygon'\n  addr: string\n  baseToken: string\n  decimals?: number\n  abiName?: string\n}\n\nenum AbiType {\n  Constructor = 'constructor',\n  Event = 'event',\n  Fallback = 'fallback',\n  Function = 'function',\n  Receive = 'receive'\n}\n\ninterface Input {\n  indexed?: boolean\n  internalType?: string\n  name: string\n  type: InputType\n  components?: Input[]\n}\n\ninterface Output {\n  name: string\n  type: InputType\n}\n\nenum InputType {\n  Address = 'address',\n  Address14 = 'address[14]',\n  Address20 = 'address[20]',\n  Address7 = 'address[7]',\n  Bool = 'bool',\n  Bytes = 'bytes',\n  Bytes32 = 'bytes32',\n  Bytes325 = 'bytes32[5]',\n  Bytes4 = 'bytes4',\n  Int24 = 'int24',\n  Int256 = 'int256',\n  String = 'string',\n  Tuple = 'tuple',\n  TypeAddress = 'address[]',\n  TypeBytes = 'bytes[]',\n  TypeTuple = 'tuple[]',\n  TypeUint128 = 'uint128[]',\n  TypeUint256 = 'uint256[]',\n  Uint128 = 'uint128',\n  Uint16 = 'uint16',\n  Uint160 = 'uint160',\n  Uint24 = 'uint24',\n  Uint256 = 'uint256',\n  Uint25618 = 'uint256[18]',\n  Uint2569 = 'uint256[9]',\n  Uint32 = 'uint32',\n  Uint40 = 'uint40',\n  Uint8 = 'uint8',\n  Uint82 = 'uint8[2]',\n  Uint88 = 'uint8[8]'\n}\n\nenum StateMutability {\n  Nonpayable = 'nonpayable',\n  Payable = 'payable',\n  Pure = 'pure',\n  View = 'view'\n}\n\ninterface HumanizerInfoAbiType {\n  constant?: boolean\n  payable?: boolean\n  anonymous?: boolean\n  outputs?: Output[]\n  inputs?: Input[]\n  stateMutability?: StateMutability\n  type: AbiType\n  gas?: number\n}\n\ntype HumanizerInfoAbisKeysType =\n  | 'AaveWethGatewayV2'\n  | 'PancakeRouter'\n  | 'UniV2Router'\n  | 'UniV3Router'\n  | 'UniV3Router2'\n  | 'WETH'\n  | 'AaveLendingPoolV2'\n  | 'MovrRouter'\n  | 'MovrAnyswap'\n  | 'ERC721'\n  | 'YearnVault'\n  | 'IdentityFactory'\n  | 'Batcher'\n  | 'StakingPool'\n  | 'WyvernExchange'\n  | 'Swappin'\n  | 'ERC20'\n  | 'SwappinOwn'\n\ntype HumanizerInfoAbisType = {\n  [key in HumanizerInfoAbisKeysType]: HumanizerInfoAbiType[]\n}\n"]}