{"version":3,"file":"useConstants.js","sourceRoot":"","sources":["../../../../v1/hooks/useConstants/useConstants.ts"],"names":[],"mappings":";;AAAA,iCAAwD;AAExD,gDAAkD;AASlD,MAAM,YAAY,GAAG,CAAC,EAAE,KAAK,EAAE,QAAQ,EAAqB,EAA0B,EAAE;IACtF,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,GAAG,IAAA,gBAAQ,EAAuB,IAAI,CAAC,CAAA;IAC5D,MAAM,CAAC,sBAAsB,EAAE,yBAAyB,CAAC,GACvD,IAAA,gBAAQ,EAAwC,IAAI,CAAC,CAAA;IACvD,MAAM,CAAC,QAAQ,EAAE,WAAW,CAAC,GAAG,IAAA,gBAAQ,EAAU,KAAK,CAAC,CAAA;IACxD,MAAM,CAAC,SAAS,EAAE,YAAY,CAAC,GAAG,IAAA,gBAAQ,EAAU,IAAI,CAAC,CAAA;IAEzD,MAAM,cAAc,GAAG,IAAA,mBAAW,EAAC,KAAK,IAAI,EAAE;QAC5C,IAAI;YACF,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAW,EAChC,KAAK,EACL,GAAG,QAAQ,cAAc,CAC1B,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;YAEzB,IAAI,CAAC,QAAQ;gBAAE,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAA;YAE9D,MAAM,EAAE,SAAS,EAAE,aAAa,EAAE,YAAY,EAAE,GAAG,QAAQ,CAAA;YAE3D,YAAY,CAAC,GAAG,EAAE;gBAChB,OAAO,CAAC;oBACN,SAAS;oBACT,aAAa;oBACb,YAAY;oBACZ,WAAW,EAAE,IAAI,CAAC,GAAG,EAAE;iBACxB,CAAC,CAAA;gBACF,WAAW,CAAC,KAAK,CAAC,CAAA;gBAClB,OAAO,KAAK,CAAA;YACd,CAAC,CAAC,CAAA;SACH;QAAC,OAAO,CAAC,EAAE;YACV,WAAW,CAAC,IAAI,CAAC,CAAA;YACjB,OAAO,CAAC,IAAI,CAAC,CAAA;YACb,YAAY,CAAC,KAAK,CAAC,CAAA;SACpB;IACH,CAAC,EAAE,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAA;IAErB,IAAA,iBAAS,EAAC,GAAG,EAAE;QACb,cAAc,EAAE,CAAA;IAClB,CAAC,EAAE,CAAC,cAAc,CAAC,CAAC,CAAA;IAEpB,MAAM,6BAA6B,GAAG,KAAK,IAAI,EAAE;QAC/C,IAAI,sBAAsB;YAAE,OAAO,sBAAsB,CAAA;QAEzD,IAAI;YACF,MAAM,0BAA0B,GAAG,MAAM,IAAA,mBAAW,EAClD,KAAK,EACL,GAAG,QAAQ,8BAA8B,CAC1C,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC,CAAA;YAEjC,yBAAyB,CAAC,0BAA0B,CAAC,CAAA;YACrD,OAAO,0BAA0B,CAAA;SAClC;QAAC,OAAO,CAAC,EAAE;YACV,OAAO,IAAI,CAAA;SACZ;IACH,CAAC,CAAA;IAED,OAAO;QACL,SAAS,EAAE,IAAI;QACf,6BAA6B;QAC7B,SAAS;QACT,UAAU,EAAE,cAAc;QAC1B,QAAQ;KACT,CAAA;AACH,CAAC,CAAA;AAED,kBAAe,YAAY,CAAA","sourcesContent":["import { useCallback, useEffect, useState } from 'react'\n\nimport { fetchCaught } from '../../services/fetch'\nimport {\n  AdexToStakingTransfersLogsType,\n  ConstantsType,\n  ResultEndpointResponse,\n  UseConstantsProps,\n  UseConstantsReturnType\n} from './types'\n\nconst useConstants = ({ fetch, endpoint }: UseConstantsProps): UseConstantsReturnType => {\n  const [data, setData] = useState<ConstantsType | null>(null)\n  const [adexToStakingTransfers, setAdexToStakingTransfers] =\n    useState<AdexToStakingTransfersLogsType | null>(null)\n  const [hasError, setHasError] = useState<boolean>(false)\n  const [isLoading, setIsLoading] = useState<boolean>(true)\n\n  const fetchConstants = useCallback(async () => {\n    try {\n      const response = await fetchCaught<ResultEndpointResponse>(\n        fetch,\n        `${endpoint}/result.json`\n      ).then((res) => res.body)\n\n      if (!response) throw new Error('Failed to get the constants.')\n\n      const { tokenList, humanizerInfo, customTokens } = response\n\n      setIsLoading(() => {\n        setData({\n          tokenList,\n          humanizerInfo,\n          customTokens,\n          lastFetched: Date.now()\n        })\n        setHasError(false)\n        return false\n      })\n    } catch (e) {\n      setHasError(true)\n      setData(null)\n      setIsLoading(false)\n    }\n  }, [fetch, endpoint])\n\n  useEffect(() => {\n    fetchConstants()\n  }, [fetchConstants])\n\n  const getAdexToStakingTransfersLogs = async () => {\n    if (adexToStakingTransfers) return adexToStakingTransfers\n\n    try {\n      const adexToStakingTransfersLogs = await fetchCaught<AdexToStakingTransfersLogsType>(\n        fetch,\n        `${endpoint}/adexToStakingTransfers.json`\n      ).then((res) => res.body || null)\n\n      setAdexToStakingTransfers(adexToStakingTransfersLogs)\n      return adexToStakingTransfersLogs\n    } catch (e) {\n      return null\n    }\n  }\n\n  return {\n    constants: data,\n    getAdexToStakingTransfersLogs,\n    isLoading,\n    retryFetch: fetchConstants,\n    hasError\n  }\n}\n\nexport default useConstants\n"]}