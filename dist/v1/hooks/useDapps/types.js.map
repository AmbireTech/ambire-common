{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../../v1/hooks/useDapps/types.ts"],"names":[],"mappings":"","sourcesContent":["import { AmbireDappManifest, ApplicationType } from '../../services/dappCatalog/types'\nimport { UseStorageType } from '../useStorage'\n\nexport type UseDappsProps = {\n  useStorage: UseStorageType\n  fetch: any\n  applicationType: ApplicationType\n}\n\nexport type DappManifestData = AmbireDappManifest & { custom?: boolean }\n\nexport type DappCatalog = Array<DappManifestData>\n\nexport type Category = {\n  name: string\n  filter: (x: any, y?: any) => boolean\n}\n\nexport type UseDappsReturnType = {\n  isDappMode: boolean\n  sideBarOpen: boolean\n  currentDappData: DappManifestData | null\n  toggleDappMode: () => void\n  toggleSideBarOpen: () => void\n  loadCurrentDappData: (data: DappManifestData | null) => void\n  addCustomDapp: (dapp: DappManifestData) => void\n  removeCustomDapp: (dapp: DappManifestData) => void\n  favorites: { [key: string]: boolean }\n  toggleFavorite: (dapp: DappManifestData) => void\n  catalog: Array<DappManifestData>\n  filteredCatalog: Array<DappManifestData>\n  onCategorySelect: (category: Category) => void\n  search?: string\n  onSearchChange: (value: string | null) => void\n  categories: Array<Category>\n  categoryFilter: Category\n  isDappInCatalog: (dappUrl: string) => boolean\n  loadDappFromUrl: (dappUrl: string) => boolean\n}\n"]}