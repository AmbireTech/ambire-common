{"version":3,"file":"fetch.js","sourceRoot":"","sources":["../../../../v1/services/fetch/fetch.ts"],"names":[],"mappings":"AAAA,MAAM,CAAC,KAAK,UAAU,SAAS,CAAC,MAAW,EAAE,GAAW,EAAE,IAAS;IACjE,MAAM,CAAC,GAAG,MAAM,MAAM,CAAC,GAAG,EAAE;QAC1B,OAAO,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE;QAC/C,MAAM,EAAE,MAAM;QACd,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;KAC3B,CAAC,CAAA;IACF,OAAO,CAAC,CAAC,IAAI,EAAE,CAAA;AACjB,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,QAAQ,CAAC,MAAW,EAAE,GAAW;IACrD,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,GAAG,EAAE;QACjC,MAAM,EAAE,KAAK;QACb,OAAO,EAAE;YACP,cAAc,EAAE,kBAAkB;SACnC;KACF,CAAC,CAAA;IACF,IAAI,QAAQ,CAAC,MAAM,KAAK,GAAG;QAAE,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAA;IAC/D,OAAO,QAAQ,CAAC,IAAI,EAAE,CAAA;AACxB,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,WAAW,CAC/B,MAAW,EACX,GAAQ,EACR,MAAY;IAMZ,IAAI,IAAI,CAAA;IACR,IAAI;QACF,IAAI,GAAG,MAAM,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,CAAA;KACjC;IAAC,OAAO,CAAM,EAAE;QACf,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;QAChB,OAAO,EAAE,MAAM,EAAE,qBAAqB,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE,CAAA;KACzD;IACD,IAAI,IAAI,CAAA;IACR,IAAI;QACF,IAAI,GAAG,MAAM,IAAI,CAAC,IAAI,EAAE,CAAA;KACzB;IAAC,OAAO,CAAM,EAAE;QACf,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;QAChB,OAAO,EAAE,MAAM,EAAE,qBAAqB,IAAI,CAAC,MAAM,KAAK,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE,IAAI,EAAE,CAAA;KAC/E;IACD,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE,EAAE,CAAA;AACnC,CAAC","sourcesContent":["export async function fetchPost(_fetch: any, url: string, body: any) {\n  const r = await _fetch(url, {\n    headers: { 'content-type': 'application/json' },\n    method: 'POST',\n    body: JSON.stringify(body)\n  })\n  return r.json()\n}\n\nexport async function fetchGet(_fetch: any, url: string) {\n  const response = await _fetch(url, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  })\n  if (response.status !== 200) throw new Error('Failed to fetch')\n  return response.json()\n}\n\nexport async function fetchCaught<R>(\n  _fetch: any,\n  url: any,\n  params?: any\n): Promise<{\n  body?: R\n  resp?: any\n  errMsg: string\n}> {\n  let resp\n  try {\n    resp = await _fetch(url, params)\n  } catch (e: any) {\n    console.error(e)\n    return { errMsg: `Unexpected error: ${e && e.message}` }\n  }\n  let body\n  try {\n    body = await resp.json()\n  } catch (e: any) {\n    console.error(e)\n    return { errMsg: `Unexpected error: ${resp.status}, ${e && e.message}`, resp }\n  }\n  return { body, resp, errMsg: '' }\n}\n"]}