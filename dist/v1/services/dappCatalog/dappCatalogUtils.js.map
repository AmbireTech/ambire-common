{"version":3,"file":"dappCatalogUtils.js","sourceRoot":"","sources":["../../../../v1/services/dappCatalog/dappCatalogUtils.ts"],"names":[],"mappings":"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","sourcesContent":["import { fetchCaught } from '../fetch'\nimport { AmbireDappManifest, SupportedWeb3Connectivity } from './types'\nimport { networks } from '../../../src/consts/networks'\n\nexport const chainIdToWalletNetworkId = (chainId: number): string | null => {\n  // TODO: v2\n  return networks.find((n) => n.chainId === BigInt(chainId))?.name || null\n}\n\nexport const getDappId = (name: string): string => {\n  return `${name.toLowerCase().replace(/s/g, '_')}_${Date.now()}`\n}\n\nexport const getNormalizedUrl = (inputStr: string): string => {\n  const url = inputStr.toLowerCase().split(/[?#]/)[0].replace('/manifest.json', '')\n  return url\n}\n\nexport const canOpenInIframe = async (fetch: any, url: string): Promise<boolean> => {\n  const res = await fetchCaught(fetch, url, { method: 'HEAD' })\n\n  // NOTE: looks like it enough to open it in iframe\n  // It fails for cors and x-frame-options\n  const canBeLoaded = !!res?.resp?.ok\n\n  return canBeLoaded\n}\n\nexport const getManifestFromDappUrl = async (\n  fetch: any,\n  dAppUrl: string\n): Promise<AmbireDappManifest | null> => {\n  const normalizedUrl = getNormalizedUrl(dAppUrl)\n  const url = normalizedUrl.replace(/\\/$/, '')\n  const manifestUrl = `${url}/manifest.json?${Date.now()}`\n\n  const { body } = await fetchCaught<any>(fetch, manifestUrl)\n\n  const hasManifest = !!body && body.name && (Array.isArray(body.icons) || body.iconPath)\n\n  const isGnosisManifest = hasManifest && body.description && body.iconPath\n  const isWalletPlugin =\n    hasManifest &&\n    body.name &&\n    body.description &&\n    Array.isArray(body.networks) &&\n    (isGnosisManifest ||\n      (Array.isArray(body.web3Connectivity) &&\n        body.web3Connectivity.includes(SupportedWeb3Connectivity.gnosis)))\n\n  const manifest = hasManifest\n    ? ({\n        url,\n        name: body.name,\n        description: body.description || body.name,\n        iconUrl:\n          body.iconUrl ||\n          `${url}/${(body.iconPath || body.icons[0]?.src || '').replace(/^\\//, '')}`,\n        connectionType: isGnosisManifest ? 'gnosis' : 'walletconnect',\n        networks: (body.networks || []).map(chainIdToWalletNetworkId),\n        isWalletPlugin,\n        web3Connectivity: body.web3Connectivity,\n        providedBy: body.providedBy\n      } as AmbireDappManifest)\n    : null\n\n  return manifest\n}\n"]}