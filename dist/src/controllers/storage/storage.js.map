{"version":3,"file":"storage.js","sourceRoot":"","sources":["../../../../src/controllers/storage/storage.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable no-restricted-syntax */\nimport { DEFAULT_ACCOUNT_LABEL } from '../../consts/account'\nimport { BIP44_STANDARD_DERIVATION_TEMPLATE } from '../../consts/derivation'\nimport { StoredKey } from '../../interfaces/keystore'\nimport { CashbackStatus } from '../../interfaces/selectedAccount'\n// eslint-disable-next-line import/no-cycle\nimport { Storage, StorageProps } from '../../interfaces/storage'\nimport { getUniqueAccountsArray } from '../../libs/account/account'\nimport { KeyIterator } from '../../libs/keyIterator/keyIterator'\nimport { LegacyTokenPreference } from '../../libs/portfolio/customToken'\nimport {\n  getShouldMigrateKeystoreSeedsWithoutHdPath,\n  migrateCustomTokens,\n  migrateHiddenTokens,\n  migrateNetworkPreferencesToNetworks\n} from '../../libs/storage/storage'\n// eslint-disable-next-line import/no-cycle\nimport { AccountPickerController } from '../accountPicker/accountPicker'\nimport EventEmitter, { Statuses } from '../eventEmitter/eventEmitter'\n// eslint-disable-next-line import/no-cycle\nimport { KeystoreController } from '../keystore/keystore'\n\nconst STATUS_WRAPPED_METHODS = {\n  associateAccountKeysWithLegacySavedSeedMigration: 'INITIAL'\n} as const\n\nexport class StorageController extends EventEmitter {\n  #storage: Storage\n\n  // Holds the initial load promise, so that one can wait until it completes\n  #storageMigrationsPromise: Promise<void>\n\n  #storageUpdateQueue: Promise<void> = Promise.resolve()\n\n  #associateAccountKeysWithLegacySavedSeedMigrationPassed: boolean = false\n\n  statuses: Statuses<keyof typeof STATUS_WRAPPED_METHODS> = STATUS_WRAPPED_METHODS\n\n  constructor(storage: Storage) {\n    super()\n\n    this.#storage = storage\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.#storageMigrationsPromise = this.#loadMigrations()\n  }\n\n  async #loadMigrations() {\n    try {\n      // IMPORTANT: should be ordered by versions\n      await this.#migrateNetworkPreferencesToNetworks() // As of version 4.24.0\n      await this.#migrateAccountPreferencesToAccounts() // As of version 4.25.0\n      await this.#migrateKeystoreSeedsWithoutHdPathTemplate() // As of version v4.33.0\n      await this.#migrateKeyPreferencesToKeystoreKeys() // As of version v4.33.0\n      await this.#migrateKeyMetaNullToKeyMetaCreatedAt() // As of version v4.33.0\n      await this.#clearHumanizerMetaObjectFromStorage() // As of version v4.34.0\n      await this.#migrateTokenPreferences() // As of version 4.51.0\n      await this.#migrateCashbackStatusToNewFormat() // As of version 4.53.0\n      await this.#migrateNetworkIdToChainId()\n    } catch (error) {\n      console.error('Storage migration error: ', error)\n    }\n  }\n\n  // As of version 4.24.0, a new Network interface has been introduced,\n  // that replaces the old NetworkDescriptor, NetworkPreference, and CustomNetwork.\n  // Previously, only NetworkPreferences were stored, with other network properties\n  // being calculated in a getter each time the networks were needed.\n  // Now, all network properties are pre-calculated and stored in a structured format: { [key: NetworkId]: Network } in the storage.\n  // This function migrates the data from the old NetworkPreferences to the new structure\n  // to ensure compatibility and prevent breaking the extension after updating to v4.24.0\n  async #migrateNetworkPreferencesToNetworks() {\n    const [passedMigrations, networks, networkPreferences] = await Promise.all([\n      this.#storage.get('passedMigrations', []),\n      this.#storage.get('networks', {}),\n      this.#storage.get('networkPreferences')\n    ])\n\n    if (passedMigrations.includes('migrateNetworkPreferencesToNetworks')) return\n\n    const storageUpdates = [\n      this.#storage.set('passedMigrations', [\n        ...new Set([...passedMigrations, 'migrateNetworkPreferencesToNetworks'])\n      ])\n    ]\n\n    if (!Object.keys(networks).length && networkPreferences) {\n      const migratedNetworks = await migrateNetworkPreferencesToNetworks(networkPreferences)\n\n      storageUpdates.push(this.#storage.set('networks', migratedNetworks))\n      storageUpdates.push(this.#storage.remove('networkPreferences'))\n    }\n\n    await Promise.all(storageUpdates)\n  }\n\n  // As of version 4.25.0, a new Account interface has been introduced,\n  // merging the previously separate Account and AccountPreferences interfaces.\n  // This change requires a migration due to the introduction of a new controller, AccountsController,\n  // which now manages both accounts and their preferences.\n  async #migrateAccountPreferencesToAccounts() {\n    const [passedMigrations, accounts, accountPreferences] = await Promise.all([\n      this.#storage.get('passedMigrations', []),\n      this.#storage.get('accounts', []),\n      this.#storage.get('accountPreferences')\n    ])\n\n    if (passedMigrations.includes('migrateAccountPreferencesToAccounts')) return\n\n    const storageUpdates = [\n      this.#storage.set('passedMigrations', [\n        ...new Set([...passedMigrations, 'migrateAccountPreferencesToAccounts'])\n      ])\n    ]\n    if (accountPreferences) {\n      const migratedAccounts = getUniqueAccountsArray(\n        accounts.map((a: any) => {\n          return {\n            ...a,\n            // @ts-ignore\n            preferences: this.#storage.accountPreferences[a.addr] || {\n              label: DEFAULT_ACCOUNT_LABEL,\n              pfp: a.addr\n            }\n          }\n        })\n      )\n      storageUpdates.push(this.#storage.set('accounts', migratedAccounts))\n      storageUpdates.push(this.#storage.remove('accountPreferences'))\n    }\n\n    await Promise.all(storageUpdates)\n  }\n\n  // As of version v4.33.0, user can change the HD path when importing a seed.\n  // Migration is needed because previously the HD path was not stored,\n  // and the default used was `BIP44_STANDARD_DERIVATION_TEMPLATE`.\n  async #migrateKeystoreSeedsWithoutHdPathTemplate() {\n    const [passedMigrations, keystoreSeeds] = await Promise.all([\n      this.#storage.get('passedMigrations', []),\n      this.#storage.get('keystoreSeeds', [])\n    ])\n\n    if (passedMigrations.includes('migrateKeystoreSeedsWithoutHdPathTemplate')) return\n\n    const storageUpdates = [\n      this.#storage.set('passedMigrations', [\n        ...new Set([...passedMigrations, 'migrateKeystoreSeedsWithoutHdPathTemplate'])\n      ])\n    ]\n\n    if (getShouldMigrateKeystoreSeedsWithoutHdPath(keystoreSeeds)) {\n      const migratedKeystoreSeeds = keystoreSeeds.map((seed) => ({\n        seed,\n        hdPathTemplate: BIP44_STANDARD_DERIVATION_TEMPLATE\n      }))\n\n      storageUpdates.push(this.#storage.set('keystoreSeeds', migratedKeystoreSeeds))\n    }\n\n    await Promise.all(storageUpdates)\n  }\n\n  // As of version 4.33.0, we no longer store the key preferences in a separate object called keyPreferences in the storage.\n  // Migration is needed because each preference (like key label)\n  // is now part of the Key interface and managed by the KeystoreController.\n  async #migrateKeyPreferencesToKeystoreKeys() {\n    const [passedMigrations, keyPreferences, keystoreKeys] = await Promise.all([\n      this.#storage.get('passedMigrations', []),\n      this.#storage.get('keyPreferences', []),\n      this.#storage.get('keystoreKeys', [])\n    ])\n\n    if (passedMigrations.includes('migrateKeyPreferencesToKeystoreKeys')) return\n\n    const storageUpdates = [\n      this.#storage.set('passedMigrations', [\n        ...new Set([...passedMigrations, 'migrateKeyPreferencesToKeystoreKeys'])\n      ])\n    ]\n    const shouldMigrateKeyPreferencesToKeystoreKeys = keyPreferences.length > 0\n\n    if (shouldMigrateKeyPreferencesToKeystoreKeys) {\n      const migratedKeystoreKeys = keystoreKeys.map((key) => {\n        if (key.label) return key\n\n        const keyPref = keyPreferences.find((k) => k.addr === key.addr && k.type === key.type)\n\n        if (keyPref) return { ...key, label: keyPref.label }\n\n        return key\n      })\n\n      storageUpdates.push(this.#storage.set('keystoreKeys', migratedKeystoreKeys))\n      storageUpdates.push(this.#storage.remove('keyPreferences'))\n    }\n\n    await Promise.all(storageUpdates)\n  }\n\n  // As of version 4.33.0, we introduced createdAt prop to the Key interface to help with sorting and add more details for the Keys.\n  async #migrateKeyMetaNullToKeyMetaCreatedAt() {\n    const [passedMigrations, keystoreKeys] = await Promise.all([\n      this.#storage.get('passedMigrations', []),\n      this.#storage.get('keystoreKeys', [])\n    ])\n\n    if (passedMigrations.includes('migrateKeyMetaNullToKeyMetaCreatedAt')) return\n\n    const migratedKeystoreKeys = keystoreKeys.map((key) => {\n      if (!key.meta) return { ...key, meta: { createdAt: null } } as StoredKey\n      if (!key.meta.createdAt)\n        return { ...key, meta: { ...key.meta, createdAt: null } } as StoredKey\n\n      return key\n    })\n    await Promise.all([\n      this.#storage.set('passedMigrations', [\n        ...new Set([...passedMigrations, 'migrateKeyMetaNullToKeyMetaCreatedAt'])\n      ]),\n      this.#storage.set('keystoreKeys', migratedKeystoreKeys)\n    ])\n  }\n\n  // As of version v4.34.0 HumanizerMetaV2 in storage is no longer needed. It was\n  // used for persisting learnt data from async operations, triggered by the\n  // humanization process.\n  async #clearHumanizerMetaObjectFromStorage() {\n    await this.#storage.remove('HumanizerMetaV2')\n  }\n\n  // As of version 4.53.0, cashback status information has been introduced.\n  // Previously, cashback statuses were stored as separate objects per account.\n  // Now, they are normalized under a single structure for simplifying.\n  // Migration is needed to transform existing data into the new format.\n  async #migrateCashbackStatusToNewFormat() {\n    const [passedMigrations, cashbackStatusByAccount] = await Promise.all([\n      this.#storage.get('passedMigrations', []),\n      this.#storage.get('cashbackStatusByAccount', {})\n    ])\n\n    if (passedMigrations.includes('migrateCashbackStatusToNewFormat')) return\n\n    const migratedCashbackStatusByAccount = Object.fromEntries(\n      Object.entries(cashbackStatusByAccount).map(([accountId, status]) => {\n        if (typeof status === 'string') {\n          return [accountId, status as CashbackStatus]\n        }\n\n        if (typeof status === 'object' && status !== null) {\n          const { cashbackWasZeroAt, firstCashbackReceivedAt, firstCashbackSeenAt } = status\n\n          if (\n            cashbackWasZeroAt &&\n            firstCashbackReceivedAt === null &&\n            firstCashbackSeenAt === null\n          ) {\n            return [accountId, 'no-cashback']\n          }\n\n          if (\n            cashbackWasZeroAt === null &&\n            firstCashbackReceivedAt &&\n            firstCashbackSeenAt === null\n          ) {\n            return [accountId, 'unseen-cashback']\n          }\n\n          if (cashbackWasZeroAt === null && firstCashbackReceivedAt && firstCashbackSeenAt) {\n            return [accountId, 'seen-cashback']\n          }\n        }\n\n        return [accountId, 'seen-cashback']\n      })\n    )\n    await Promise.all([\n      this.#storage.set('passedMigrations', [\n        ...new Set([...passedMigrations, 'migrateCashbackStatusToNewFormat'])\n      ]),\n      this.#storage.set('cashbackStatusByAccount', migratedCashbackStatusByAccount)\n    ])\n  }\n\n  // As of version 4.51.0, migrate legacy token preferences to token preferences and custom tokens\n  async #migrateTokenPreferences() {\n    const [passedMigrations, tokenPreferences] = await Promise.all([\n      this.#storage.get('passedMigrations', []),\n      this.#storage.get('tokenPreferences', [])\n    ])\n\n    if (passedMigrations.includes('migrateTokenPreferences')) return\n\n    const storageUpdates = [\n      this.#storage.set('passedMigrations', [\n        ...new Set([...passedMigrations, 'migrateTokenPreferences'])\n      ])\n    ]\n\n    if (\n      (tokenPreferences as LegacyTokenPreference[]).some(\n        ({ symbol, decimals }) => !!symbol || !!decimals\n      )\n    ) {\n      storageUpdates.push(\n        this.#storage.set(\n          'tokenPreferences',\n          migrateHiddenTokens(tokenPreferences as LegacyTokenPreference[])\n        )\n      )\n      storageUpdates.push(\n        this.#storage.set(\n          'customTokens',\n          migrateCustomTokens(tokenPreferences as LegacyTokenPreference[])\n        )\n      )\n    }\n    await Promise.all(storageUpdates)\n  }\n\n  async #migrateNetworkIdToChainId() {\n    const [\n      passedMigrations,\n      networks,\n      previousHints,\n      customTokens,\n      tokenPreferences,\n      networksWithAssetsByAccount,\n      networksWithPositionsByAccounts,\n      accountsOps,\n      signedMessages\n    ] = await Promise.all([\n      this.#storage.get('passedMigrations', []),\n      this.#storage.get('networks', {}),\n      this.#storage.get('previousHints', []),\n      this.#storage.get('customTokens', []),\n      this.#storage.get('tokenPreferences', []),\n      this.#storage.get('networksWithAssetsByAccount', {}),\n      this.#storage.get('networksWithPositionsByAccounts', {}),\n      this.#storage.get('accountsOps', {}),\n      this.#storage.get('signedMessages', {})\n    ])\n\n    if (passedMigrations.includes('migrateNetworkIdToChainId')) return\n\n    if (!Object.keys(networks).length) {\n      await this.#storage.set('passedMigrations', [\n        ...new Set([...passedMigrations, 'migrateNetworkIdToChainId'])\n      ])\n\n      return\n    }\n\n    const networkIdToChainId = Object.fromEntries(\n      Object.values(networks).map(({ id, chainId }: any) => [id, chainId as bigint])\n    )\n\n    const migrateKeys = <T>(obj: Record<string, T>) =>\n      Object.fromEntries(\n        Object.entries(obj).map(([networkId, value]) => [networkIdToChainId[networkId], value])\n      )\n\n    const migratedPreviousHints = {\n      learnedTokens: migrateKeys(previousHints.learnedTokens || {}),\n      learnedNfts: migrateKeys(previousHints.learnedNfts || {}),\n      fromExternalAPI: Object.fromEntries(\n        Object.entries(previousHints.fromExternalAPI || {}).map(([networkAndAccountKey, value]) => {\n          const [networkId, accountAddr] = networkAndAccountKey.split(':')\n          const chainId = networkIdToChainId[networkId]\n          return chainId ? [`${chainId}:${accountAddr}`, value] : [networkAndAccountKey, value]\n        })\n      )\n    }\n\n    const migratedCustomTokens = customTokens.map(({ networkId, ...rest }: any) => ({\n      ...rest,\n      chainId: networkIdToChainId[networkId]\n    }))\n\n    const migratedTokenPreferences: { address: string; chainId: string; isHidden?: boolean }[] =\n      tokenPreferences.map(({ networkId, ...rest }: any) => ({\n        ...rest,\n        chainId: networkIdToChainId[networkId]\n      }))\n\n    const migratedNetworksWithAssetsByAccount = Object.fromEntries(\n      Object.entries(networksWithAssetsByAccount).map(([accountId, assetsState]) => [\n        accountId,\n        migrateKeys(assetsState)\n      ])\n    )\n\n    const migratedNetworksWithPositionsByAccounts = Object.fromEntries(\n      Object.entries(networksWithPositionsByAccounts).map(([accountId, networksWithPositions]) => [\n        accountId,\n        migrateKeys(networksWithPositions)\n      ])\n    )\n\n    const migratedAccountsOps = Object.fromEntries(\n      Object.entries(accountsOps).map(([accountId, opsByNetwork]) => [\n        accountId,\n        Object.fromEntries(\n          Object.entries(opsByNetwork).map(([networkId, ops]) => {\n            const chainId = networkIdToChainId[networkId]\n            return [\n              chainId,\n              // eslint-disable-next-line @typescript-eslint/no-shadow\n              ops.map(({ networkId, ...rest }: any) => ({\n                ...rest,\n                chainId // Migrate networkId inside SubmittedAccountOp\n              }))\n            ]\n          })\n        )\n      ])\n    )\n\n    const migratedSignedMessages = Object.fromEntries(\n      Object.entries(signedMessages).map(([accountId, messages]) => [\n        accountId,\n        messages.map(({ networkId, ...rest }: any) => ({\n          ...rest,\n          chainId: networkIdToChainId[networkId] // Migrate networkId inside SignedMessage\n        }))\n      ])\n    )\n\n    const migratedNetworks = Object.fromEntries(\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      Object.entries(networks).map(([_, { id, ...rest }]: any) => [rest.chainId.toString(), rest])\n    )\n\n    await Promise.all([\n      this.#storage.set('passedMigrations', [\n        ...new Set([...passedMigrations, 'migrateNetworkIdToChainId'])\n      ]),\n      this.#storage.set('networks', migratedNetworks),\n      this.#storage.set('previousHints', migratedPreviousHints),\n      this.#storage.set('customTokens', migratedCustomTokens),\n      this.#storage.set('tokenPreferences', migratedTokenPreferences),\n      this.#storage.set('networksWithAssetsByAccount', migratedNetworksWithAssetsByAccount),\n      this.#storage.set('networksWithPositionsByAccounts', migratedNetworksWithPositionsByAccounts),\n      this.#storage.set('accountsOps', migratedAccountsOps),\n      this.#storage.set('signedMessages', migratedSignedMessages)\n    ])\n  }\n\n  async get<K extends keyof StorageProps | string | undefined>(\n    key: K,\n    defaultValue?: any\n  ): Promise<K extends keyof StorageProps ? StorageProps[K] : any> {\n    await this.#storageMigrationsPromise\n    await this.#storageUpdateQueue\n\n    return this.#storage.get(key, defaultValue)\n  }\n\n  async set(key: string, value: any) {\n    await this.#storageMigrationsPromise\n    this.#storageUpdateQueue = this.#storageUpdateQueue.then(async () => {\n      try {\n        await this.#storage.set(key, value)\n      } catch (err) {\n        console.error(`Failed to set storage key \"${key}\":`, err)\n      }\n    })\n    await this.#storageUpdateQueue\n  }\n\n  async remove(key: string) {\n    await this.#storageMigrationsPromise\n    this.#storageUpdateQueue = this.#storageUpdateQueue.then(async () => {\n      try {\n        await this.#storage.remove(key)\n      } catch (err) {\n        console.error(`Failed to remove storage key \"${key}\":`, err)\n      }\n    })\n    await this.#storageUpdateQueue\n  }\n\n  // As of version 5.1.2, migrate account keys to be associated with the legacy saved seed\n  async #associateAccountKeysWithLegacySavedSeedMigration(\n    accountPicker: AccountPickerController,\n    keystore: KeystoreController,\n    onSuccess: () => Promise<void>\n  ) {\n    if (this.#associateAccountKeysWithLegacySavedSeedMigrationPassed) return\n\n    const [passedMigrations, keystoreSeeds, keystoreKeys] = await Promise.all([\n      this.#storage.get('passedMigrations', []),\n      this.#storage.get('keystoreSeeds', []),\n      this.#storage.get('keystoreKeys', [])\n    ])\n\n    if (passedMigrations.includes('associateAccountKeysWithLegacySavedSeedMigration')) return\n\n    const savedSeed = keystoreSeeds.find((s) => !s.id || s.id === 'legacy-saved-seed')\n\n    if (!savedSeed) {\n      this.#associateAccountKeysWithLegacySavedSeedMigrationPassed = true\n      return\n    }\n\n    const keystoreSavedSeed = await keystore.getSavedSeed('legacy-saved-seed')\n\n    const keyIterator = new KeyIterator(keystoreSavedSeed.seed, keystoreSavedSeed.seedPassphrase)\n    await accountPicker.setInitParams({\n      keyIterator,\n      hdPathTemplate: keystoreSavedSeed.hdPathTemplate,\n      pageSize: 10,\n      shouldAddNextAccountAutomatically: false,\n      shouldGetAccountsUsedOnNetworks: false,\n      shouldSearchForLinkedAccounts: true\n    })\n    await accountPicker.init()\n    const makeKeyMapId = (k: { addr: string; type: string }) => `${k.addr}:${k.type}`\n\n    // Keep all keys, keyed by composite key\n    const updatedKeyMap = new Map(keystoreKeys.map((k) => [makeKeyMapId(k), { ...k }]))\n\n    let page = 1\n    while (page <= 10) {\n      // eslint-disable-next-line no-await-in-loop\n      await accountPicker.setPage({ page })\n      // eslint-disable-next-line no-await-in-loop\n      await accountPicker.findAndSetLinkedAccountsPromise\n\n      const matchingAddresses = accountPicker.allKeysOnPage.filter((k) =>\n        updatedKeyMap.has(`${k}:internal`)\n      )\n\n      if (matchingAddresses.length === 0) break\n\n      for (const addr of matchingAddresses) {\n        // Only modify keys with type === 'internal' and matching addr\n        const matchingInternalKeys = keystoreKeys.filter(\n          (k) => k.addr === addr && k.type === 'internal'\n        )\n\n        for (const key of matchingInternalKeys) {\n          const compositeKey = makeKeyMapId(key)\n          const storedKey = updatedKeyMap.get(compositeKey)\n          if (storedKey) {\n            storedKey.meta = { ...storedKey.meta, fromSeedId: keystoreSavedSeed.id }\n            updatedKeyMap.set(compositeKey, storedKey)\n          }\n        }\n      }\n\n      page++\n    }\n\n    await accountPicker.reset()\n\n    const updatedKeystoreKeys = Array.from(updatedKeyMap.values())\n\n    const storageUpdates = [\n      this.#storage.set('passedMigrations', [\n        ...new Set([...passedMigrations, 'associateAccountKeysWithLegacySavedSeedMigration'])\n      ]),\n      this.#storage.set('keystoreKeys', updatedKeystoreKeys)\n    ]\n\n    await Promise.all(storageUpdates)\n    this.#associateAccountKeysWithLegacySavedSeedMigrationPassed = true\n    await onSuccess()\n  }\n\n  async associateAccountKeysWithLegacySavedSeedMigration(\n    accountPicker: AccountPickerController,\n    keystore: KeystoreController,\n    onSuccess: () => Promise<void>\n  ) {\n    await this.withStatus(\n      'associateAccountKeysWithLegacySavedSeedMigration',\n      () =>\n        this.#associateAccountKeysWithLegacySavedSeedMigration(accountPicker, keystore, onSuccess),\n      true\n    )\n  }\n\n  toJSON() {\n    return {\n      ...this,\n      ...super.toJSON()\n    }\n  }\n}\n"]}