{"version":3,"file":"emailVault.js","sourceRoot":"","sources":["../../../../src/controllers/emailVault/emailVault.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable class-methods-use-this */\n/* eslint-disable no-await-in-loop */\nimport crypto from 'crypto'\n\nimport { Banner } from '../../interfaces/banner'\nimport {\n  EmailVaultData,\n  EmailVaultOperation,\n  MagicLinkFlow,\n  OperationRequestType,\n  SecretType\n} from '../../interfaces/emailVault'\nimport { Fetch } from '../../interfaces/fetch'\nimport { Storage } from '../../interfaces/storage'\nimport { getKeySyncBanner } from '../../libs/banners/banners'\nimport { EmailVault } from '../../libs/emailVault/emailVault'\nimport { requestMagicLink } from '../../libs/magicLink/magicLink'\nimport { Polling } from '../../libs/polling/polling'\nimport wait from '../../utils/wait'\nimport EventEmitter, { Statuses } from '../eventEmitter/eventEmitter'\nimport { KeystoreController } from '../keystore/keystore'\n\nexport enum EmailVaultState {\n  Loading = 'loading',\n  WaitingEmailConfirmation = 'WaitingEmailConfirmation',\n  UploadingSecret = 'UploadingSecret',\n  Ready = 'Ready'\n}\n\nexport type MagicLinkKey = {\n  key: string\n  expiry: Date\n  confirmed: boolean\n}\n\nconst RECOVERY_SECRET_ID = 'EmailVaultRecoverySecret'\nconst EMAIL_VAULT_STORAGE_KEY = 'emailVault'\nconst MAGIC_LINK_STORAGE_KEY = 'magicLinkKeys'\nconst SESSION_KEYS_STORAGE_KEY = 'sessionKeys'\n\nexport type MagicLinkKeys = {\n  [email: string]: MagicLinkKey\n}\n\nexport type SessionKeys = {\n  [email: string]: string\n}\n\nfunction base64UrlEncode(str: string) {\n  return str.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=+$/, '')\n}\n\nconst STATUS_WRAPPED_METHODS = {\n  getEmailVaultInfo: 'INITIAL',\n  uploadKeyStoreSecret: 'INITIAL',\n  recoverKeyStore: 'INITIAL',\n  requestKeysSync: 'INITIAL',\n  finalizeSyncKeys: 'INITIAL'\n} as const\n\n/**\n * EmailVaultController\n * @class\n * The purpouse of this controller is to provide easy interface to the EmailVault, keystore and magic link libraries\n * The most important thing it achieves is handling magicLink and session keys with polling.\n * Emits the porper states e.g. loading, ready, awaiting email magicLink confirmation etc.\n * Extended documentation about the EV and its internal mechanisms\n * https://github.com/AmbireTech/ambire-common/wiki/Email-Vault-Documentation\n */\nexport class EmailVaultController extends EventEmitter {\n  private storage: Storage\n\n  private initialLoadPromise: Promise<void>\n\n  #isWaitingEmailConfirmation: boolean = false\n\n  #isUploadingSecret: boolean = false\n\n  #emailVault: EmailVault\n\n  #magicLinkKeys: MagicLinkKeys = {}\n\n  #sessionKeys: SessionKeys = {}\n\n  #shouldStopConfirmationPolling: boolean = false\n\n  #autoConfirmMagicLink: boolean = false\n\n  #fetch: Fetch\n\n  #relayerUrl: string\n\n  #keyStore: KeystoreController\n\n  isReady: boolean = false\n\n  lastUpdate: Date = new Date()\n\n  emailVaultStates: {\n    email: { [email: string]: EmailVaultData }\n    criticalError?: Error\n    errors?: Error[]\n  } = {\n    email: {}\n  }\n\n  statuses: Statuses<keyof typeof STATUS_WRAPPED_METHODS> = STATUS_WRAPPED_METHODS\n\n  constructor(\n    storage: Storage,\n    fetch: Fetch,\n    relayerUrl: string,\n    keyStore: KeystoreController,\n    options?: { autoConfirmMagicLink?: boolean }\n  ) {\n    super()\n    this.#fetch = fetch\n    this.#relayerUrl = relayerUrl\n    this.storage = storage\n    this.#emailVault = new EmailVault(fetch, relayerUrl)\n    this.#keyStore = keyStore\n    this.initialLoadPromise = this.load()\n    this.#autoConfirmMagicLink = options?.autoConfirmMagicLink || false\n  }\n\n  private async load(): Promise<void> {\n    this.isReady = false\n    // #load is called in the constructor which is synchronous\n    // we await (1 ms/next tick) for the constructor to extend the EventEmitter class\n    // and then we call it's methods\n    await wait(1)\n    this.emitUpdate()\n    const [emailVaultState, magicLinkKey] = await Promise.all([\n      this.storage.get(EMAIL_VAULT_STORAGE_KEY, {\n        email: {}\n      }),\n      this.storage.get(MAGIC_LINK_STORAGE_KEY, {})\n    ])\n\n    this.emailVaultStates = emailVaultState\n    this.#magicLinkKeys = this.#parseMagicLinkKeys(magicLinkKey)\n\n    this.lastUpdate = new Date()\n    this.isReady = true\n    this.emitUpdate()\n  }\n\n  get currentState(): EmailVaultState {\n    if (!this.isReady) return EmailVaultState.Loading\n    if (this.#isWaitingEmailConfirmation) return EmailVaultState.WaitingEmailConfirmation\n    if (this.#isUploadingSecret) return EmailVaultState.UploadingSecret\n\n    return EmailVaultState.Ready\n  }\n\n  async #requestSessionKey(email: string) {\n    // if magicLinkKey => get sessionKey\n    const key = (await this.#getMagicLinkKey(email))?.key\n    if (!key) return\n    this.#sessionKeys[email] = await this.#emailVault.getSessionKey(email, key)\n\n    // store magicLinkKey and sessionKey\n    await Promise.all([\n      this.storage.set(MAGIC_LINK_STORAGE_KEY, this.#magicLinkKeys),\n      this.storage.set(SESSION_KEYS_STORAGE_KEY, this.#sessionKeys)\n    ])\n  }\n\n  async handleMagicLinkKey(email: string, fn?: Function, flow?: MagicLinkFlow) {\n    await this.initialLoadPromise\n    const currentKey = (await this.#getMagicLinkKey(email))?.key\n    if (currentKey) {\n      this.#isWaitingEmailConfirmation = false\n      this.emitUpdate()\n      return\n    }\n\n    this.#isWaitingEmailConfirmation = true\n    this.#shouldStopConfirmationPolling = false\n    this.emitUpdate()\n\n    const newKey = await requestMagicLink(email, this.#relayerUrl, this.#fetch, {\n      autoConfirm: this.#autoConfirmMagicLink,\n      flow\n    })\n\n    const polling = new Polling()\n    polling.onUpdate(async () => {\n      if (polling.state.isError && polling.state.error.output.res.status === 401) {\n        this.#isWaitingEmailConfirmation = true\n        this.emitUpdate()\n      } else if (polling.state.isError) {\n        this.emitError({\n          message: `Can't request magic link for email ${email}: ${polling.state.error.message}`,\n          level: 'major',\n          error: new Error(\n            `Can't request magic link for email ${email}: ${polling.state.error.message}`\n          )\n        })\n        this.emailVaultStates.errors = [polling.state.error]\n        this.emitUpdate()\n      }\n    })\n\n    const ev: (EmailVaultData & { error?: any; canceled?: boolean }) | null = await polling.exec(\n      this.#emailVault.getEmailVaultInfo.bind(this.#emailVault),\n      [email, newKey.key],\n      () => {\n        this.#isWaitingEmailConfirmation = false\n      },\n      () => this.#shouldStopConfirmationPolling,\n      3 * 60 * 1000,\n      1000\n    )\n\n    if (this.#shouldStopConfirmationPolling) {\n      this.emitUpdate()\n      return\n    }\n\n    if (ev && !ev.error) {\n      this.#isWaitingEmailConfirmation = false\n      this.#magicLinkKeys[email] = {\n        key: newKey.key,\n        expiry: new Date(newKey.expiry),\n        confirmed: true\n      }\n      fn && (await fn())\n      this.storage.set(MAGIC_LINK_STORAGE_KEY, this.#magicLinkKeys)\n      this.#requestSessionKey(email)\n    } else {\n      this.emitError({\n        message: `Unexpected error getting email vault for ${email}`,\n        level: 'major',\n        error: new Error(`Unexpected error getting email vault for ${email}`)\n      })\n    }\n    this.emitUpdate()\n  }\n\n  async #getSessionKey(email: string): Promise<string | null> {\n    await this.initialLoadPromise\n    return this.#sessionKeys[email]\n  }\n\n  getMagicLinkKeyByEmail(email: string): MagicLinkKey | null {\n    const result = this.#magicLinkKeys[email]\n    if (!result || !result.confirmed) return null\n    if (Date.now() >= result.expiry.getTime()) return null\n    return result\n  }\n\n  async #getMagicLinkKey(email: string): Promise<MagicLinkKey | null> {\n    // if we have valid magicLinkKey => returns it else null\n    await this.initialLoadPromise\n\n    return this.getMagicLinkKeyByEmail(email)\n  }\n\n  #parseMagicLinkKeys(mks: any): MagicLinkKeys {\n    return Object.fromEntries(\n      Object.keys(mks).map((email) => [\n        email,\n        { ...mks[email], expiry: new Date(mks[email].expiry) }\n      ])\n    )\n  }\n\n  async getEmailVaultInfo(email: string, flow?: MagicLinkFlow) {\n    await this.withStatus('getEmailVaultInfo', () => this.#getEmailVaultInfo(email, flow))\n  }\n\n  async #getEmailVaultInfo(email: string, flow?: MagicLinkFlow): Promise<void> {\n    const [existsSessionKey, magicLinkKey] = await Promise.all([\n      this.#getSessionKey(email),\n      this.#getMagicLinkKey(email)\n    ])\n    const key = existsSessionKey || magicLinkKey?.key\n\n    let emailVault: EmailVaultData | null = null\n    if (key) {\n      emailVault = await this.#emailVault.getEmailVaultInfo(email, key).catch((e: any) => {\n        this.emitError({\n          message: `Error getting email vault for ${email} ${e.message}`,\n          level: 'major',\n          error: new Error(`Error getting email vault for ${email} ${e.message}`)\n        })\n        this.emailVaultStates.errors = []\n        this.emailVaultStates.errors = [new Error('error retrieving data for email vault')]\n\n        return null\n      })\n    } else {\n      await this.handleMagicLinkKey(email, () => this.#getEmailVaultInfo(email, flow), flow)\n    }\n\n    if (emailVault) {\n      this.emailVaultStates.email[email] = emailVault\n      await this.storage.set(EMAIL_VAULT_STORAGE_KEY, this.emailVaultStates)\n      if (!existsSessionKey) {\n        await this.#requestSessionKey(email)\n      }\n    }\n\n    this.#isWaitingEmailConfirmation = false\n    this.emitUpdate()\n  }\n\n  async uploadKeyStoreSecret(email: string) {\n    await this.withStatus('uploadKeyStoreSecret', () => this.#uploadKeyStoreSecret(email))\n  }\n\n  async #uploadKeyStoreSecret(email: string) {\n    if (!this.emailVaultStates.email[email]) {\n      await this.#getEmailVaultInfo(email, 'setup')\n    }\n\n    let result: Boolean | null = false\n    let magicKey = await this.#getMagicLinkKey(email)\n\n    if (!magicKey?.key && !this.#shouldStopConfirmationPolling) {\n      await this.handleMagicLinkKey(\n        email,\n        async () => {\n          magicKey = await this.#getMagicLinkKey(email)\n        },\n        'setup'\n      )\n    }\n\n    if (this.#shouldStopConfirmationPolling) {\n      this.#isUploadingSecret = false\n      // Set status to ERROR, but don't emit an error message\n      throw new Error('')\n    }\n\n    if (magicKey?.key) {\n      this.#isUploadingSecret = true\n      const randomBytes = crypto.randomBytes(32)\n      // toString('base64url') doesn't work for some reason in the browser extension\n      const newSecret = base64UrlEncode(randomBytes.toString('base64'))\n      await this.#keyStore.addSecret(RECOVERY_SECRET_ID, newSecret, '', false)\n      const keyStoreUid = await this.#keyStore.getKeyStoreUid()\n      result = await this.#emailVault.addKeyStoreSecret(email, magicKey.key, keyStoreUid, newSecret)\n    } else\n      this.emitError({\n        message: 'Email key not confirmed',\n        level: 'minor',\n        error: new Error('uploadKeyStoreSecret: not confirmed magic link key')\n      })\n\n    if (result) {\n      await this.#getEmailVaultInfo(email, 'setup')\n    } else {\n      this.emitError({\n        level: 'minor',\n        message: 'Error upload keyStore to email vault',\n        error: new Error('error upload keyStore to email vault')\n      })\n    }\n\n    this.#isUploadingSecret = false\n    this.emitUpdate()\n  }\n\n  async recoverKeyStore(email: string, newPassword: string) {\n    await this.withStatus('recoverKeyStore', () => this.#recoverKeyStore(email, newPassword))\n  }\n\n  async #recoverKeyStore(email: string, newPassword: string): Promise<void> {\n    const uid = await this.#keyStore.getKeyStoreUid()\n    const state = this.emailVaultStates\n    if (!state.email[email]) {\n      this.emitError({\n        message: `You are not logged in with ${email} on this device.`,\n        level: 'major',\n        error: new Error(`Keystore recovery: email ${email} not imported`)\n      })\n      return\n    }\n\n    if (!state.email[email].availableSecrets[uid]) {\n      this.emitError({\n        message: `Resetting the password on this device is not enabled for ${email}.`,\n        level: 'major',\n        error: new Error('Keystore recovery: no keystore secret for this device')\n      })\n      return\n    }\n    if (state.email[email].availableSecrets[uid].type !== SecretType.KeyStore) {\n      this.emitError({\n        message: `Resetting the password on this device is not enabled for ${email}.`,\n        level: 'major',\n        error: new Error(`Keystore recovery: no keystore secret for email ${email}`)\n      })\n      return\n    }\n\n    if (email !== this.keystoreRecoveryEmail) {\n      return\n    }\n    const emitExpiredMagicLinkError = () => {\n      this.emitError({\n        message: `The time allotted for changing your password has expired for ${email}. Please verify your email again!`,\n        level: 'major',\n        error: new Error(`Keystore recovery: magic link expired for ${email}`)\n      })\n\n      // Here, we want to emit an update so that the `hasConfirmedRecoveryEmail` getter can be recalculated.\n      // The application relies on this flag to make decisions regarding\n      // which step the user should be in during the Forgotten Password flow.\n      this.emitUpdate()\n    }\n\n    const key = (await this.#getMagicLinkKey(email))?.key\n\n    if (!key) {\n      emitExpiredMagicLinkError()\n      return\n    }\n\n    let result\n    try {\n      result = await this.#emailVault.retrieveKeyStoreSecret(email, key, uid)\n    } catch (e: any) {\n      if (e?.output?.res?.message === 'invalid key') {\n        emitExpiredMagicLinkError()\n        return\n      }\n    }\n\n    if (!result || !result.value) {\n      this.emitError({\n        message:\n          'Something goes wrong while we are resetting your password! Please try again! If the problem persists, please contact support',\n        level: 'major',\n        error: new Error(\n          \"Keystore recovery: retrieveKeyStoreSecret doesn't return result or result.value.\"\n        )\n      })\n\n      return\n    }\n\n    // Once we are here - it means we pass all the above validations,\n    // and we are ready to change the keystore password secret\n    this.emailVaultStates.email[email].availableSecrets[result.key] = result\n\n    await this.#keyStore.unlockWithSecret(RECOVERY_SECRET_ID, result.value)\n    await this.#keyStore.removeSecret('password')\n    await this.#keyStore.addSecret('password', newPassword, '', false)\n\n    await this.storage.set(EMAIL_VAULT_STORAGE_KEY, this.emailVaultStates)\n    this.emitUpdate()\n  }\n\n  async requestKeysSync(email: string, keys: string[]) {\n    await this.withStatus('requestKeysSync', () => this.#requestKeysSync(email, keys))\n  }\n\n  async #requestKeysSync(email: string, keys: string[]) {\n    const [magicLinkKey, keyStoreUid] = await Promise.all([\n      this.#getMagicLinkKey(email),\n      this.#keyStore.getKeyStoreUid()\n    ])\n\n    const operations: EmailVaultOperation[] = keys.map((key) => ({\n      type: OperationRequestType.requestKeySync,\n      requester: keyStoreUid,\n      key\n    }))\n    if (magicLinkKey) {\n      const newOperations = (await this.#emailVault.operations(\n        email,\n        magicLinkKey.key,\n        operations\n      ))!\n      this.emailVaultStates.email[email].operations = newOperations\n      this.emitUpdate()\n    }\n    await this.handleMagicLinkKey(email, () => this.#requestKeysSync(email, keys))\n  }\n\n  async #finalizeSyncKeys(email: string, operations: EmailVaultOperation[]) {\n    const authKey = (await this.#getMagicLinkKey(email))?.key || (await this.#getSessionKey(email))\n    if (authKey) {\n      const cloudOperations = await this.#emailVault\n        .getOperations(email, authKey, operations)\n        .catch((e) => {\n          this.emitError({\n            message: `Can't pull operations: ${e}`,\n            level: 'major',\n            error: new Error(`Can't pull operations: ${e}`)\n          })\n        })\n      if (!cloudOperations) {\n        this.emitError({\n          message: \"Can't pull operations\",\n          level: 'major',\n          error: new Error(\"Can't pull operations\")\n        })\n      }\n\n      // Promise.all makes race conditions\n      for (let i = 0; i < cloudOperations!.length; i++) {\n        const op = cloudOperations![i]\n        if (op.type === 'requestKeySync' && op.value) {\n          const { privateKey } = JSON.parse(op.value || '{}')\n          await this.#keyStore.importKeyWithPublicKeyEncryption(privateKey, true)\n        }\n      }\n      this.emitUpdate()\n    } else {\n      await this.handleMagicLinkKey(email, () => this.#finalizeSyncKeys(email, operations))\n    }\n  }\n\n  async finalizeSyncKeys(email: string, keys: string[], password: string) {\n    const operations: any[] = keys\n      .map((key) => {\n        const res = this.emailVaultStates.email[email].operations.find((op) => op.key === key)\n        if (!res) {\n          this.emitError({\n            message: `No sync request for key ${key}`,\n            level: 'major',\n            error: new Error(`No sync request for key ${key}`)\n          })\n          return null\n        }\n        return { ...res, password }\n      })\n      .filter((x) => x)\n    await this.withStatus('finalizeSyncKeys', () => this.#finalizeSyncKeys(email, operations))\n  }\n\n  // DOCS\n  // this function:\n  // - checks if there are sync requests via the operations route of the relayer\n  // - exports the encrypted private key and sends it back to the relayer (fulfills)\n  // @TODO add password\n  async fulfillSyncRequests(email: string, password: string) {\n    await this.#getEmailVaultInfo(email)\n    const operations = this.emailVaultStates.email[email].operations\n    const key = (await this.#getMagicLinkKey(email))?.key || (await this.#getSessionKey(email))\n    if (key) {\n      // pull keys from keystore for every operation\n      const newOperations: EmailVaultOperation[] = await Promise.all(\n        operations.map(async (op): Promise<EmailVaultOperation> => {\n          if (op.type === 'requestKeySync') {\n            return {\n              ...op,\n              value: JSON.stringify({\n                privateKey: await this.#keyStore.exportKeyWithPublicKeyEncryption(\n                  op.key,\n                  op.requester\n                )\n              }),\n              password\n            }\n          }\n          return op\n        })\n      )\n      await this.#emailVault.operations(email, key, newOperations)\n      this.emitUpdate()\n    } else {\n      await this.handleMagicLinkKey(email, () => this.fulfillSyncRequests(email, password))\n    }\n    this.emitUpdate()\n  }\n\n  async cleanMagicAndSessionKeys() {\n    this.#magicLinkKeys = {}\n    this.#sessionKeys = {}\n\n    await Promise.all([\n      this.storage.set(MAGIC_LINK_STORAGE_KEY, this.#magicLinkKeys),\n      this.storage.set(SESSION_KEYS_STORAGE_KEY, this.#sessionKeys)\n    ])\n\n    this.emitUpdate()\n  }\n\n  cancelEmailConfirmation() {\n    this.#shouldStopConfirmationPolling = true\n    this.#isWaitingEmailConfirmation = false\n    this.emitUpdate()\n  }\n\n  get keystoreRecoveryEmail(): string | undefined {\n    const keyStoreUid = this.#keyStore.keyStoreUid\n    const EVEmails = Object.keys(this.emailVaultStates.email)\n\n    if (!keyStoreUid || !EVEmails.length) return\n\n    return EVEmails.find((email) => {\n      return (\n        this.emailVaultStates.email[email].availableSecrets[keyStoreUid]?.type ===\n        SecretType.KeyStore\n      )\n    })\n  }\n\n  get hasKeystoreRecovery() {\n    return !!this.keystoreRecoveryEmail\n  }\n\n  get hasConfirmedRecoveryEmail(): boolean {\n    if (!this.isReady) return false\n\n    const recoveryEmail = this.keystoreRecoveryEmail\n\n    if (!recoveryEmail) return false\n\n    return !!this.getMagicLinkKeyByEmail(recoveryEmail)\n  }\n\n  get banners(): Banner[] {\n    const banners: Banner[] = []\n\n    // Show the banner if the keystore is already configured and the `password` secret is already set (for HW and ViewOnly accounts the app can run without keystore)\n    // and if the keystore secret backup is not enabled already\n    if (this.#keyStore.hasPasswordSecret && !this.hasKeystoreRecovery) {\n      banners.push({\n        id: 'keystore-secret-backup',\n        type: 'info',\n        title: 'Enable device password reset via email',\n        text: \"Email Vault recovers your device password. It is securely stored in Ambire's infrastructure cloud.\",\n        actions: [\n          {\n            label: 'Enable',\n            actionName: 'backup-keystore-secret'\n          }\n        ]\n      })\n    }\n\n    Object.keys(this.emailVaultStates.email).forEach((email) => {\n      const emailVaultData = this.emailVaultStates?.email?.[email]\n      Object.values(emailVaultData.availableAccounts || {}).forEach((accInfo) => {\n        const keystoreKeys = this.#keyStore.keys.filter((key) =>\n          accInfo.associatedKeys.includes(key.addr)\n        )\n\n        if (keystoreKeys.length) return\n        banners.push(getKeySyncBanner(accInfo.addr, email, accInfo.associatedKeys))\n      })\n    })\n\n    return banners\n  }\n\n  toJSON() {\n    return {\n      ...this,\n      ...super.toJSON(),\n      currentState: this.currentState, // includes the getter in the stringified instance\n      hasKeystoreRecovery: this.hasKeystoreRecovery,\n      hasConfirmedRecoveryEmail: this.hasConfirmedRecoveryEmail,\n      banners: this.banners, // includes the getter in the stringified instance,\n      keystoreRecoveryEmail: this.keystoreRecoveryEmail\n    }\n  }\n}\n"]}