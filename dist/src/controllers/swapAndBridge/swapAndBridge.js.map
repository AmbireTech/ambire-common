{"version":3,"file":"swapAndBridge.js","sourceRoot":"","sources":["../../../../src/controllers/swapAndBridge/swapAndBridge.ts"],"names":[],"mappings":"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","sourcesContent":["import { formatUnits, isAddress, parseUnits } from 'ethers'\n\nimport EmittableError from '../../classes/EmittableError'\nimport SwapAndBridgeError from '../../classes/SwapAndBridgeError'\nimport { ExternalSignerControllers } from '../../interfaces/keystore'\nimport { Network } from '../../interfaces/network'\n/* eslint-disable no-await-in-loop */\nimport { SignAccountOpError } from '../../interfaces/signAccountOp'\nimport {\n  CachedSupportedChains,\n  CachedTokenListKey,\n  CachedToTokenLists,\n  FromToken,\n  SocketApiBridgeStep,\n  SocketAPIBridgeUserTx,\n  SocketRouteStatus,\n  SwapAndBridgeActiveRoute,\n  SwapAndBridgeQuote,\n  SwapAndBridgeRoute,\n  SwapAndBridgeSendTxRequest,\n  SwapAndBridgeToToken,\n  SwapAndBridgeUserTx\n} from '../../interfaces/swapAndBridge'\nimport { UserRequest } from '../../interfaces/userRequest'\nimport { isBasicAccount } from '../../libs/account/account'\nimport { getBaseAccount } from '../../libs/account/getBaseAccount'\nimport { SubmittedAccountOp } from '../../libs/accountOp/submittedAccountOp'\nimport { AccountOpStatus, Call } from '../../libs/accountOp/types'\nimport { getBridgeBanners } from '../../libs/banners/banners'\nimport { getAmbirePaymasterService } from '../../libs/erc7677/erc7677'\nimport { randomId } from '../../libs/humanizer/utils'\nimport { batchCallsFromUserRequests } from '../../libs/main/main'\nimport { TokenResult } from '../../libs/portfolio'\nimport { getTokenAmount } from '../../libs/portfolio/helpers'\nimport {\n  addCustomTokensIfNeeded,\n  convertPortfolioTokenToSwapAndBridgeToToken,\n  getActiveRoutesForAccount,\n  getIsBridgeTxn,\n  getIsTokenEligibleForSwapAndBridge,\n  getSwapAndBridgeCalls,\n  sortPortfolioTokenList,\n  sortTokenListResponse\n} from '../../libs/swapAndBridge/swapAndBridge'\nimport { getHumanReadableSwapAndBridgeError } from '../../libs/swapAndBridge/swapAndBridgeErrorHumanizer'\nimport { getSanitizedAmount } from '../../libs/transfer/amount'\nimport { LiFiAPI } from '../../services/lifi/api'\nimport { normalizeIncomingSocketToken, SocketAPI } from '../../services/socket/api'\nimport { ZERO_ADDRESS } from '../../services/socket/constants'\nimport { validateSendTransferAmount } from '../../services/validations/validate'\nimport formatDecimals from '../../utils/formatDecimals/formatDecimals'\nimport { convertTokenPriceToBigInt } from '../../utils/numbers/formatters'\nimport { generateUuid } from '../../utils/uuid'\nimport wait from '../../utils/wait'\nimport { AccountsController } from '../accounts/accounts'\nimport { AccountOpAction, ActionsController } from '../actions/actions'\nimport { ActivityController } from '../activity/activity'\nimport { EstimationStatus } from '../estimation/types'\nimport EventEmitter, { Statuses } from '../eventEmitter/eventEmitter'\nimport { InviteController } from '../invite/invite'\nimport { KeystoreController } from '../keystore/keystore'\nimport { NetworksController } from '../networks/networks'\nimport { PortfolioController } from '../portfolio/portfolio'\nimport { ProvidersController } from '../providers/providers'\nimport { SelectedAccountController } from '../selectedAccount/selectedAccount'\nimport { noStateUpdateStatuses, SignAccountOpController } from '../signAccountOp/signAccountOp'\nimport { StorageController } from '../storage/storage'\n\ntype SwapAndBridgeErrorType = {\n  id: 'to-token-list-fetch-failed' // ...\n  title: string\n  text?: string\n  level: 'error' | 'warning'\n}\n\nconst HARD_CODED_CURRENCY = 'usd'\n\nconst CONVERSION_PRECISION = 16\nconst CONVERSION_PRECISION_POW = BigInt(10 ** CONVERSION_PRECISION)\n\nconst NETWORK_MISMATCH_MESSAGE =\n  'Swap & Bridge network configuration mismatch. Please try again or contact Ambire support.'\n\nexport enum SwapAndBridgeFormStatus {\n  Empty = 'empty',\n  Invalid = 'invalid',\n  FetchingRoutes = 'fetching-routes',\n  NoRoutesFound = 'no-routes-found',\n  InvalidRouteSelected = 'invalid-route-selected',\n  ReadyToEstimate = 'ready-to-estimate',\n  ReadyToSubmit = 'ready-to-submit',\n  Proceeded = 'proceeded'\n}\n\nconst STATUS_WRAPPED_METHODS = {\n  addToTokenByAddress: 'INITIAL'\n} as const\n\nconst SUPPORTED_CHAINS_CACHE_THRESHOLD = 1000 * 60 * 60 * 24 // 1 day\nconst TO_TOKEN_LIST_CACHE_THRESHOLD = 1000 * 60 * 60 * 4 // 4 hours\n\nconst PROTOCOLS_WITH_CONTRACT_FEE_IN_NATIVE = [\n  'stargate',\n  'stargate-v2',\n  'arbitrum-bridge',\n  'zksync-native'\n]\n\n/**\n * The Swap and Bridge controller is responsible for managing the state and\n * logic related to swapping and bridging tokens across different networks.\n * Key responsibilities:\n *  - Initially setting up the swap and bridge form with the necessary data.\n *  - Managing form state for token swap and bridge operations (including user preferences).\n *  - Fetching and updating token lists (from and to).\n *  - Fetching and updating quotes for token swaps and bridges.\n *  - Manages token active routes\n */\nexport class SwapAndBridgeController extends EventEmitter {\n  #selectedAccount: SelectedAccountController\n\n  #networks: NetworksController\n\n  #actions: ActionsController\n\n  #activity: ActivityController\n\n  #invite: InviteController\n\n  #storage: StorageController\n\n  #serviceProviderAPI: SocketAPI | LiFiAPI\n\n  #activeRoutes: SwapAndBridgeActiveRoute[] = []\n\n  statuses: Statuses<keyof typeof STATUS_WRAPPED_METHODS> = STATUS_WRAPPED_METHODS\n\n  updateQuoteStatus: 'INITIAL' | 'LOADING' = 'INITIAL'\n\n  #updateToTokenListThrottle: {\n    time: number\n    throttled: boolean\n    shouldReset: boolean\n    addressToSelect?: string\n  } = {\n    time: 0,\n    shouldReset: true,\n    throttled: false\n  }\n\n  #updateQuoteId?: string\n\n  updateToTokenListStatus: 'INITIAL' | 'LOADING' = 'INITIAL'\n\n  switchTokensStatus: 'INITIAL' | 'LOADING' = 'INITIAL'\n\n  sessionIds: string[] = []\n\n  fromChainId: number | null = 1\n\n  fromSelectedToken: FromToken | null = null\n\n  fromAmount: string = ''\n\n  fromAmountInFiat: string = ''\n\n  fromAmountFieldMode: 'fiat' | 'token' = 'token'\n\n  toChainId: number | null = 1\n\n  toSelectedToken: SwapAndBridgeToToken | null = null\n\n  quote: SwapAndBridgeQuote | null = null\n\n  quoteRoutesStatuses: { [key: string]: { status: string } } = {}\n\n  portfolioTokenList: FromToken[] = []\n\n  isTokenListLoading: boolean = false\n\n  errors: SwapAndBridgeErrorType[] = []\n\n  /**\n   * Needed to efficiently manage and cache token lists for different chain\n   * combinations (fromChainId and toChainId) without having to fetch them\n   * repeatedly from the API. Moreover, this way tokens added to a list by\n   * address are also cached for sometime.\n   */\n  #cachedToTokenLists: CachedToTokenLists = {}\n\n  #toTokenList: SwapAndBridgeToToken[] = []\n\n  /**\n   * Similar to the `#cachedToTokenLists`, this helps in avoiding repeated API\n   * calls to fetch the supported chains from our service provider.\n   */\n  #cachedSupportedChains: CachedSupportedChains = { lastFetched: 0, data: [] }\n\n  routePriority: 'output' | 'time' = 'output'\n\n  // Holds the initial load promise, so that one can wait until it completes\n  #initialLoadPromise: Promise<void>\n\n  #shouldDebounceFlags: { [key: string]: boolean } = {}\n\n  #accounts: AccountsController\n\n  #keystore: KeystoreController\n\n  #portfolio: PortfolioController\n\n  #externalSignerControllers: ExternalSignerControllers\n\n  #providers: ProvidersController\n\n  signAccountOpController: SignAccountOpController | null = null\n\n  #portfolioUpdate: Function\n\n  #isMainSignAccountOpThrowingAnEstimationError: Function | undefined\n\n  hasProceeded: boolean = false\n\n  /**\n   * Describes whether quote refetch should happen at a given interval.\n   * We forbid it:\n   * - when the user has chosen a custom route by himself\n   */\n  isAutoSelectRouteDisabled: boolean = false\n\n  #isReestimating: boolean = false\n\n  #userRequests: UserRequest[]\n\n  #relayerUrl: string\n\n  constructor({\n    accounts,\n    keystore,\n    portfolio,\n    externalSignerControllers,\n    providers,\n    selectedAccount,\n    networks,\n    activity,\n    serviceProviderAPI,\n    storage,\n    actions,\n    invite,\n    portfolioUpdate,\n    userRequests = [],\n    relayerUrl,\n    isMainSignAccountOpThrowingAnEstimationError\n  }: {\n    accounts: AccountsController\n    keystore: KeystoreController\n    portfolio: PortfolioController\n    externalSignerControllers: ExternalSignerControllers\n    providers: ProvidersController\n    selectedAccount: SelectedAccountController\n    networks: NetworksController\n    activity: ActivityController\n    serviceProviderAPI: SocketAPI | LiFiAPI\n    storage: StorageController\n    actions: ActionsController\n    invite: InviteController\n    userRequests: UserRequest[]\n    relayerUrl: string\n    portfolioUpdate?: Function\n    isMainSignAccountOpThrowingAnEstimationError?: Function\n  }) {\n    super()\n    this.#accounts = accounts\n    this.#keystore = keystore\n    this.#portfolio = portfolio\n    this.#externalSignerControllers = externalSignerControllers\n    this.#providers = providers\n    this.#portfolioUpdate = portfolioUpdate || (() => {})\n    this.#isMainSignAccountOpThrowingAnEstimationError =\n      isMainSignAccountOpThrowingAnEstimationError\n    this.#selectedAccount = selectedAccount\n    this.#networks = networks\n    this.#activity = activity\n    this.#serviceProviderAPI = serviceProviderAPI\n    this.#storage = storage\n    this.#actions = actions\n    this.#invite = invite\n    this.#userRequests = userRequests\n    this.#relayerUrl = relayerUrl\n\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.#initialLoadPromise = this.#load()\n  }\n\n  #emitUpdateIfNeeded(forceUpdate: boolean = false) {\n    const shouldSkipUpdate =\n      // No need to emit emit updates if there are no active sessions\n      !this.sessionIds.length &&\n      // but ALSO there are no active routes (otherwise, banners need the updates)\n      !this.activeRoutes.length &&\n      // Force update is needed when the form is reset\n      // as the sessions are cleared\n      !forceUpdate\n\n    if (shouldSkipUpdate) return\n\n    super.emitUpdate()\n  }\n\n  async #load() {\n    await this.#networks.initialLoadPromise\n    await this.#selectedAccount.initialLoadPromise\n\n    this.activeRoutes = await this.#storage.get('swapAndBridgeActiveRoutes', [])\n    // Service provider may have changed since the last time the user interacted\n    // with the Swap & Bridge. So strip out cached active routes that were NOT\n    // made by the current service provider, because they are NOT compatible.\n    //\n    // also, just in case protection: filter out ready routes as we don't have\n    // retry mechanism or follow up transaction handling anymore. Which means\n    // ready routes in the storage are just leftover routes\n    this.activeRoutes = this.activeRoutes.filter(\n      (r) => r.serviceProviderId === this.#serviceProviderAPI.id && r.routeStatus !== 'ready'\n    )\n\n    this.#selectedAccount.onUpdate(() => {\n      this.#debounceFunctionCallsOnSameTick('updateFormOnSelectedAccountUpdate', async () => {\n        if (this.#selectedAccount.portfolio.isReadyToVisualize) {\n          this.isTokenListLoading = false\n          await this.updatePortfolioTokenList(this.#selectedAccount.portfolio.tokens)\n          // To token list includes selected account portfolio tokens, it should get an update too\n          await this.updateToTokenList(false)\n        }\n      })\n    })\n    this.#emitUpdateIfNeeded()\n  }\n\n  // The token in portfolio is the source of truth for the amount, it updates\n  // on every balance (pending or anything) change.\n  #getFromSelectedTokenInPortfolio = () =>\n    this.portfolioTokenList.find(\n      (t) =>\n        t.address === this.fromSelectedToken?.address &&\n        t.chainId === this.fromSelectedToken?.chainId &&\n        getIsTokenEligibleForSwapAndBridge(t)\n    )\n\n  get maxFromAmount(): string {\n    const tokenRef = this.#getFromSelectedTokenInPortfolio() || this.fromSelectedToken\n    if (!tokenRef || getTokenAmount(tokenRef) === 0n || typeof tokenRef.decimals !== 'number')\n      return '0'\n\n    return formatUnits(getTokenAmount(tokenRef), tokenRef.decimals)\n  }\n\n  get maxFromAmountInFiat(): string {\n    const tokenRef = this.#getFromSelectedTokenInPortfolio() || this.fromSelectedToken\n    if (!tokenRef || getTokenAmount(tokenRef) === 0n) return '0'\n\n    const tokenPrice = tokenRef?.priceIn.find((p) => p.baseCurrency === HARD_CODED_CURRENCY)?.price\n    if (!tokenPrice || !Number(this.maxFromAmount)) return '0'\n\n    const maxAmount = getTokenAmount(tokenRef)\n    const { tokenPriceBigInt, tokenPriceDecimals } = convertTokenPriceToBigInt(tokenPrice)\n\n    // Multiply the max amount by the token price. The calculation is done in big int to avoid precision loss\n    return formatUnits(\n      BigInt(maxAmount) * tokenPriceBigInt,\n      // Shift the decimal point by the number of decimals in the token price\n      tokenRef.decimals + tokenPriceDecimals\n    )\n  }\n\n  get isFormEmpty() {\n    return (\n      !this.fromChainId ||\n      !this.toChainId ||\n      !this.fromAmount ||\n      !this.fromSelectedToken ||\n      !this.toSelectedToken\n    )\n  }\n\n  get formStatus() {\n    if (this.hasProceeded) return SwapAndBridgeFormStatus.Proceeded\n\n    if (this.isFormEmpty) return SwapAndBridgeFormStatus.Empty\n    if (this.validateFromAmount.message) return SwapAndBridgeFormStatus.Invalid\n    if (this.updateQuoteStatus === 'LOADING' && !this.quote)\n      return SwapAndBridgeFormStatus.FetchingRoutes\n    if (!this.quote?.routes.filter((route) => !route.hasFailed).length)\n      return SwapAndBridgeFormStatus.NoRoutesFound\n\n    if (this.quote?.selectedRoute?.errorMessage) return SwapAndBridgeFormStatus.InvalidRouteSelected\n\n    if (\n      !this.signAccountOpController ||\n      this.signAccountOpController.estimation.status !== EstimationStatus.Success\n    )\n      return SwapAndBridgeFormStatus.ReadyToEstimate\n\n    return SwapAndBridgeFormStatus.ReadyToSubmit\n  }\n\n  get validateFromAmount() {\n    const fromSelectedTokenWithUpToDateAmount = this.#getFromSelectedTokenInPortfolio()\n\n    if (!fromSelectedTokenWithUpToDateAmount) return { success: false, message: '' }\n\n    if (\n      !this.isFormEmpty &&\n      !this.quote &&\n      Object.values(this.quoteRoutesStatuses).some((val) => val.status === 'MIN_AMOUNT_NOT_MET')\n    ) {\n      return {\n        success: true,\n        message: '🔔 A route was found for this pair but the minimum token amount was not met.'\n      }\n    }\n\n    return validateSendTransferAmount(\n      this.fromAmount,\n      Number(this.maxFromAmount),\n      Number(this.maxFromAmountInFiat),\n      fromSelectedTokenWithUpToDateAmount\n    )\n  }\n\n  get activeRoutesInProgress() {\n    return this.activeRoutes.filter((r) => r.routeStatus === 'in-progress' && r.userTxHash)\n  }\n\n  get activeRoutes() {\n    return this.#activeRoutes\n  }\n\n  set activeRoutes(value: SwapAndBridgeActiveRoute[]) {\n    this.#activeRoutes = value\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.#storage.set('swapAndBridgeActiveRoutes', value)\n  }\n\n  get shouldEnableRoutesSelection() {\n    return (\n      !!this.quote &&\n      !!this.quote.routes &&\n      this.quote.routes.length > 1 &&\n      this.updateQuoteStatus !== 'LOADING'\n    )\n  }\n\n  async initForm(\n    sessionId: string,\n    params?: {\n      preselectedFromToken?: Pick<TokenResult, 'address' | 'chainId'>\n    }\n  ) {\n    const { preselectedFromToken } = params || {}\n    await this.#initialLoadPromise\n\n    if (this.sessionIds.includes(sessionId)) return\n\n    // reset only if there are no other instances opened/active\n    if (!this.sessionIds.length) {\n      this.reset() // clear prev session form state\n      // for each new session remove the completed activeRoutes from the previous session\n      this.activeRoutes = this.activeRoutes.filter((r) => r.routeStatus !== 'completed')\n      // remove activeRoutes errors from the previous session\n      this.activeRoutes.forEach((r) => {\n        if (r.routeStatus !== 'failed') {\n          // eslint-disable-next-line no-param-reassign\n          delete r.error\n        }\n      })\n      if (this.activeRoutes.length) {\n        // Otherwise there may be an emitUpdate with [] tokens\n        this.isTokenListLoading = true\n\n        // update the activeRoute.route prop for the new session\n        this.activeRoutes.forEach((r) => {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          this.updateActiveRoute(r.activeRouteId, undefined, true)\n        })\n      }\n    }\n\n    this.sessionIds.push(sessionId)\n    // do not await the health status check to prevent UI freeze while fetching\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.#serviceProviderAPI.updateHealth()\n    await this.updatePortfolioTokenList(this.#selectedAccount.portfolio.tokens, {\n      preselectedToken: preselectedFromToken\n    })\n    this.isTokenListLoading = false\n    // Do not await on purpose as it's not critical for the controller state to be ready\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.#fetchSupportedChainsIfNeeded()\n    this.#emitUpdateIfNeeded()\n  }\n\n  get isHealthy() {\n    return this.#serviceProviderAPI.isHealthy\n  }\n\n  #fetchSupportedChainsIfNeeded = async () => {\n    const shouldNotReFetchSupportedChains =\n      this.#cachedSupportedChains.data.length &&\n      Date.now() - this.#cachedSupportedChains.lastFetched < SUPPORTED_CHAINS_CACHE_THRESHOLD\n    if (shouldNotReFetchSupportedChains) return\n\n    try {\n      const supportedChains = await this.#serviceProviderAPI.getSupportedChains()\n\n      this.#cachedSupportedChains = { lastFetched: Date.now(), data: supportedChains }\n      this.#emitUpdateIfNeeded()\n    } catch (error: any) {\n      // Fail silently, as this is not a critical feature, Swap & Bridge is still usable\n      this.emitError({ error, level: 'silent', message: error?.message })\n    }\n  }\n\n  get supportedChainIds(): Network['chainId'][] {\n    return this.#cachedSupportedChains.data.map((c) => BigInt(c.chainId))\n  }\n\n  get #toTokenListKey(): CachedTokenListKey | null {\n    if (this.fromChainId === null || this.toChainId === null) return null\n\n    return `from-${this.fromChainId}-to-${this.toChainId}`\n  }\n\n  unloadScreen(sessionId: string, forceUnload?: boolean) {\n    const isFormDirty = !!this.fromAmount || !!this.toSelectedToken\n    const shouldPersistState = isFormDirty && sessionId === 'popup' && !forceUnload\n\n    if (shouldPersistState) return\n\n    this.sessionIds = this.sessionIds.filter((id) => id !== sessionId)\n    if (!this.sessionIds.length) {\n      this.reset(true)\n      // Reset health to prevent the error state from briefly flashing\n      // before the next health check resolves when the Swap & Bridge\n      // screen is opened after a some time\n      this.#serviceProviderAPI.resetHealth()\n    }\n    this.hasProceeded = false\n  }\n\n  addOrUpdateError(error: SwapAndBridgeErrorType) {\n    const errorIndex = this.errors.findIndex((e) => e.id === error.id)\n    if (errorIndex === -1) {\n      this.errors.push(error)\n    } else {\n      this.errors[errorIndex] = error\n    }\n    this.#emitUpdateIfNeeded()\n  }\n\n  removeError(id: SwapAndBridgeErrorType['id'], shouldEmit?: boolean) {\n    this.errors = this.errors.filter((e) => e.id !== id)\n    if (shouldEmit) this.#emitUpdateIfNeeded()\n  }\n\n  async updateForm(\n    props: {\n      fromAmount?: string\n      fromAmountInFiat?: string\n      fromAmountFieldMode?: 'fiat' | 'token'\n      fromSelectedToken?: TokenResult | null\n      toChainId?: bigint | number\n      toSelectedToken?: SwapAndBridgeToToken | null\n      routePriority?: 'output' | 'time'\n    },\n    updateProps?: {\n      emitUpdate?: boolean\n      updateQuote?: boolean\n    }\n  ) {\n    const {\n      fromAmount,\n      fromAmountInFiat,\n      fromAmountFieldMode,\n      fromSelectedToken,\n      toChainId,\n      toSelectedToken,\n      routePriority\n    } = props\n    const { emitUpdate = true, updateQuote = true } = updateProps || {}\n    let shouldUpdateToTokenList = false\n\n    // fromAmountFieldMode must be set before fromAmount so it\n    // works correctly when both are set at the same time\n    if (fromAmountFieldMode) {\n      this.fromAmountFieldMode = fromAmountFieldMode\n    }\n\n    if (fromAmountFieldMode) {\n      this.fromAmountFieldMode = fromAmountFieldMode\n    }\n\n    if (fromAmount !== undefined) {\n      const fromAmountFormatted = fromAmount.indexOf('.') === 0 ? `0${fromAmount}` : fromAmount\n      this.fromAmount = fromAmount\n      ;(() => {\n        if (fromAmount === '') {\n          this.fromAmountInFiat = ''\n          return\n        }\n        const tokenPrice = this.fromSelectedToken?.priceIn.find(\n          (p) => p.baseCurrency === HARD_CODED_CURRENCY\n        )?.price\n\n        if (!tokenPrice) {\n          this.fromAmountInFiat = ''\n          return\n        }\n\n        if (\n          this.fromAmountFieldMode === 'fiat' &&\n          typeof this.fromSelectedToken?.decimals === 'number'\n        ) {\n          this.fromAmountInFiat = fromAmount\n\n          // Get the number of decimals\n          const amountInFiatDecimals = fromAmount.split('.')[1]?.length || 0\n          const { tokenPriceBigInt, tokenPriceDecimals } = convertTokenPriceToBigInt(tokenPrice)\n\n          // Convert the numbers to big int\n          const amountInFiatBigInt = parseUnits(fromAmountFormatted, amountInFiatDecimals)\n\n          this.fromAmount = formatUnits(\n            (amountInFiatBigInt * CONVERSION_PRECISION_POW) / tokenPriceBigInt,\n            // Shift the decimal point by the number of decimals in the token price\n            amountInFiatDecimals + CONVERSION_PRECISION - tokenPriceDecimals\n          )\n\n          return\n        }\n        if (this.fromAmountFieldMode === 'token') {\n          this.fromAmount = fromAmount\n\n          if (!this.fromSelectedToken) return\n\n          const sanitizedFieldValue = getSanitizedAmount(\n            fromAmountFormatted,\n            this.fromSelectedToken.decimals\n          )\n          // Convert the field value to big int\n          const formattedAmount = parseUnits(sanitizedFieldValue, this.fromSelectedToken.decimals)\n\n          if (!formattedAmount) return\n\n          const { tokenPriceBigInt, tokenPriceDecimals } = convertTokenPriceToBigInt(tokenPrice)\n\n          this.fromAmountInFiat = formatUnits(\n            formattedAmount * tokenPriceBigInt,\n            // Shift the decimal point by the number of decimals in the token price\n            this.fromSelectedToken.decimals + tokenPriceDecimals\n          )\n        }\n      })()\n    }\n\n    if (fromAmountInFiat !== undefined) {\n      this.fromAmountInFiat = fromAmountInFiat\n    }\n\n    if (fromSelectedToken) {\n      const isFromNetworkChanged = this.fromSelectedToken?.chainId !== fromSelectedToken?.chainId\n      if (isFromNetworkChanged) {\n        const network = this.#networks.networks.find((n) => n.chainId === fromSelectedToken.chainId)\n        if (network) {\n          this.fromChainId = Number(network.chainId)\n          // Don't update the selected token programmatically if the user\n          // has selected it manually\n          if (!this.toSelectedToken) {\n            // defaults to swap after network change (should keep fromChainId and toChainId in sync after fromChainId update)\n            this.toChainId = Number(network.chainId)\n            shouldUpdateToTokenList = true\n          }\n        }\n      }\n\n      const shouldResetFromTokenAmount =\n        isFromNetworkChanged || this.fromSelectedToken?.address !== fromSelectedToken.address\n      if (shouldResetFromTokenAmount) {\n        this.fromAmount = ''\n        this.fromAmountInFiat = ''\n        this.fromAmountFieldMode = 'token'\n      }\n\n      // Always update to reflect portfolio amount (or other props) changes\n      this.fromSelectedToken = fromSelectedToken\n    }\n\n    if (toChainId) {\n      if (this.toChainId !== Number(toChainId)) {\n        this.toChainId = Number(toChainId)\n        shouldUpdateToTokenList = true\n      }\n    }\n\n    if (typeof toSelectedToken !== 'undefined') {\n      this.toSelectedToken = toSelectedToken\n    }\n\n    if (routePriority) {\n      this.routePriority = routePriority\n      if (this.quote) {\n        this.quote = null\n        this.quoteRoutesStatuses = {}\n      }\n    }\n\n    if (emitUpdate) this.#emitUpdateIfNeeded()\n\n    await Promise.all([\n      shouldUpdateToTokenList ? this.updateToTokenList(true, toSelectedToken?.address) : undefined,\n      updateQuote ? this.updateQuote({ debounce: true }) : undefined\n    ])\n  }\n\n  resetForm(shouldEmit?: boolean) {\n    // Preserve key form states instead of resetting the whole form to enhance UX and reduce confusion.\n    // After form submission, maintain the state for fromSelectedToken, fromChainId, and toChainId,\n    // while resetting all other state related to the form.\n    this.fromAmount = ''\n    this.fromAmountInFiat = ''\n    this.fromAmountFieldMode = 'token'\n    this.toSelectedToken = null\n    this.quote = null\n    this.updateQuoteStatus = 'INITIAL'\n    this.quoteRoutesStatuses = {}\n    this.destroySignAccountOp()\n    this.hasProceeded = false\n    this.isAutoSelectRouteDisabled = false\n\n    if (shouldEmit) this.#emitUpdateIfNeeded(true)\n  }\n\n  reset(shouldEmit?: boolean) {\n    this.resetForm()\n    this.fromChainId = 1\n    this.fromSelectedToken = null\n    this.toChainId = 1\n    this.portfolioTokenList = []\n    this.#toTokenList = []\n    this.errors = []\n\n    if (shouldEmit) this.#emitUpdateIfNeeded(true)\n  }\n\n  async updatePortfolioTokenList(\n    nextPortfolioTokenList: TokenResult[],\n    params?: {\n      preselectedToken?: Pick<TokenResult, 'address' | 'chainId'>\n    }\n  ) {\n    const { preselectedToken } = params || {}\n    const tokens = nextPortfolioTokenList.filter(getIsTokenEligibleForSwapAndBridge)\n    this.portfolioTokenList = sortPortfolioTokenList(\n      // Filtering out hidden tokens here means: 1) They won't be displayed in\n      // the \"From\" token list (`this.portfolioTokenList`) and 2) They won't be\n      // added to the \"Receive\" token list as additional tokens from portfolio,\n      // BUT 3) They will appear in the \"Receive\" if they are present in service\n      // provider's to token list. This is the desired behavior.\n      tokens.filter((t) => !t.flags.isHidden)\n    )\n\n    const fromSelectedTokenInNextPortfolio = this.portfolioTokenList.find((t) => {\n      if (preselectedToken) {\n        return t.address === preselectedToken.address && t.chainId === preselectedToken.chainId\n      }\n\n      return (\n        t.address === this.fromSelectedToken?.address &&\n        t.chainId === this.fromSelectedToken?.chainId\n      )\n    })\n\n    const shouldUpdateFromSelectedToken =\n      !this.fromSelectedToken || // initial (default) state\n      // May happen if selected account gets changed or the token gets send away in the meantime\n      !fromSelectedTokenInNextPortfolio ||\n      // May happen if user receives or sends the token in the meantime\n      fromSelectedTokenInNextPortfolio.amount !== this.fromSelectedToken?.amount ||\n      preselectedToken\n\n    // If the token is not in the portfolio because it was a \"to\" token\n    // and the user has switched the \"from\" and \"to\" tokens we should not\n    // update the selected token\n    if (!this.fromSelectedToken?.isSwitchedToToken && shouldUpdateFromSelectedToken) {\n      await this.updateForm(\n        {\n          fromSelectedToken: fromSelectedTokenInNextPortfolio || this.portfolioTokenList[0] || null\n        },\n        {\n          emitUpdate: false\n        }\n      )\n      return\n    }\n    this.#addFromTokenToPortfolioListIfNeeded()\n\n    this.#emitUpdateIfNeeded()\n  }\n\n  async updateToTokenList(shouldReset: boolean, addressToSelect?: string) {\n    const now = Date.now()\n    const timeSinceLastCall = now - this.#updateToTokenListThrottle.time\n    if (timeSinceLastCall <= 500) {\n      this.#updateToTokenListThrottle.shouldReset = shouldReset\n      this.#updateToTokenListThrottle.addressToSelect = addressToSelect\n\n      if (!this.#updateToTokenListThrottle.throttled) {\n        this.#updateToTokenListThrottle.throttled = true\n        await wait(500 - timeSinceLastCall)\n        this.#updateToTokenListThrottle.throttled = false\n        await this.updateToTokenList(\n          this.#updateToTokenListThrottle.shouldReset,\n          this.#updateToTokenListThrottle.addressToSelect\n        )\n      }\n      return\n    }\n    this.updateToTokenListStatus = 'LOADING'\n    this.#updateToTokenListThrottle.time = now\n    this.removeError('to-token-list-fetch-failed', false)\n    if (!this.fromChainId || !this.toChainId) {\n      this.updateToTokenListStatus = 'INITIAL'\n      return\n    }\n\n    // Emit an update to set the loading state in the UI\n    this.#emitUpdateIfNeeded()\n\n    if (shouldReset) {\n      this.#toTokenList = []\n      this.toSelectedToken = null\n    }\n\n    const toTokenListInCache =\n      this.#toTokenListKey && this.#cachedToTokenLists[this.#toTokenListKey]\n    let toTokenList: SwapAndBridgeToToken[] = toTokenListInCache?.data || []\n    const shouldFetchTokenList =\n      !toTokenList.length ||\n      now - (toTokenListInCache?.lastFetched || 0) >= TO_TOKEN_LIST_CACHE_THRESHOLD\n    if (shouldFetchTokenList) {\n      try {\n        toTokenList = await this.#serviceProviderAPI.getToTokenList({\n          fromChainId: this.fromChainId,\n          toChainId: this.toChainId\n        })\n        // Cache the latest token list\n        if (this.#toTokenListKey) {\n          this.#cachedToTokenLists[this.#toTokenListKey] = {\n            lastFetched: now,\n            data: toTokenList\n          }\n        }\n      } catch (error: any) {\n        // Display an error only if there is no cached data\n        if (!toTokenList.length) {\n          toTokenList = addCustomTokensIfNeeded({ chainId: this.toChainId, tokens: toTokenList })\n          const { message } = getHumanReadableSwapAndBridgeError(error)\n\n          this.addOrUpdateError({\n            id: 'to-token-list-fetch-failed',\n            title: 'Token list on the receiving network is temporarily unavailable.',\n            text: message,\n            level: 'error'\n          })\n        }\n      }\n    }\n\n    const toTokenNetwork = this.#networks.networks.find((n) => Number(n.chainId) === this.toChainId)\n    // should never happen\n    if (!toTokenNetwork) {\n      this.updateToTokenListStatus = 'INITIAL'\n      this.#emitUpdateIfNeeded()\n      throw new SwapAndBridgeError(NETWORK_MISMATCH_MESSAGE)\n    }\n\n    const additionalTokensFromPortfolio = this.portfolioTokenList\n      .filter((t) => t.chainId === toTokenNetwork.chainId)\n      .filter((token) => !toTokenList.some((t) => t.address === token.address))\n      .map((t) => convertPortfolioTokenToSwapAndBridgeToToken(t, Number(toTokenNetwork.chainId)))\n\n    this.#toTokenList = sortTokenListResponse(\n      [...toTokenList, ...additionalTokensFromPortfolio],\n      this.portfolioTokenList.filter((t) => t.chainId === toTokenNetwork.chainId)\n    )\n\n    if (!this.toSelectedToken) {\n      if (addressToSelect) {\n        const token = this.#toTokenList.find((t) => t.address === addressToSelect)\n        if (token) {\n          await this.updateForm({ toSelectedToken: token }, { emitUpdate: false })\n          this.updateToTokenListStatus = 'INITIAL'\n          this.#emitUpdateIfNeeded()\n          return\n        }\n      }\n    }\n\n    this.updateToTokenListStatus = 'INITIAL'\n    this.#emitUpdateIfNeeded()\n  }\n\n  get toTokenList(): SwapAndBridgeToToken[] {\n    const isSwapping = this.fromChainId === this.toChainId\n    if (isSwapping) {\n      // Swaps between same \"from\" and \"to\" tokens are not feasible, filter them out\n      return this.#toTokenList.filter((t) => t.address !== this.fromSelectedToken?.address)\n    }\n\n    return this.#toTokenList\n  }\n\n  async #addToTokenByAddress(address: string) {\n    if (!this.toChainId) return // should never happen\n    if (!isAddress(address)) return // no need to attempt with invalid addresses\n\n    const isAlreadyInTheList = this.#toTokenList.some((t) => t.address === address)\n    if (isAlreadyInTheList) return\n\n    let token: SwapAndBridgeToToken | null\n    try {\n      token = await this.#serviceProviderAPI.getToken({ address, chainId: this.toChainId })\n\n      if (!token)\n        throw new SwapAndBridgeError(\n          'Token with this address is not supported by our service provider.'\n        )\n    } catch (error: any) {\n      const { message } = getHumanReadableSwapAndBridgeError(error)\n      throw new EmittableError({ error, level: 'minor', message })\n    }\n\n    if (this.#toTokenListKey)\n      // Cache for sometime the tokens added by address\n      this.#cachedToTokenLists[this.#toTokenListKey]?.data.push(token)\n\n    const toTokenNetwork = this.#networks.networks.find((n) => Number(n.chainId) === this.toChainId)\n    // should never happen\n    if (!toTokenNetwork) {\n      const error = new SwapAndBridgeError(NETWORK_MISMATCH_MESSAGE)\n      throw new EmittableError({ error, level: 'minor', message: error?.message })\n    }\n\n    const nextTokenList: SwapAndBridgeToToken[] = [...this.#toTokenList, token]\n\n    this.#toTokenList = sortTokenListResponse(\n      nextTokenList,\n      this.portfolioTokenList.filter((t) => t.chainId === toTokenNetwork.chainId)\n    )\n\n    this.#emitUpdateIfNeeded()\n    return token\n  }\n\n  /**\n   * Add the selected token to the portfolio token list if needed. This is\n   * necessary because the user may switch the \"from\" and \"to\" tokens, and the\n   * to token may be a token that is not in the portfolio token list.\n   */\n  #addFromTokenToPortfolioListIfNeeded() {\n    if (!this.fromSelectedToken) return\n\n    const isAlreadyInTheList = this.portfolioTokenList.some(\n      (t) =>\n        t.address === this.fromSelectedToken!.address &&\n        t.chainId === this.fromSelectedToken!.chainId\n    )\n\n    if (isAlreadyInTheList || !this.fromSelectedToken.isSwitchedToToken) return\n\n    this.portfolioTokenList = [...this.portfolioTokenList, this.fromSelectedToken]\n  }\n\n  addToTokenByAddress = async (address: string) =>\n    this.withStatus('addToTokenByAddress', () => this.#addToTokenByAddress(address), true)\n\n  async switchFromAndToTokens() {\n    this.switchTokensStatus = 'LOADING'\n    this.#emitUpdateIfNeeded()\n\n    const prevFromSelectedToken = this.fromSelectedToken ? { ...this.fromSelectedToken } : null\n    // Update the from token\n    if (!this.toSelectedToken) {\n      await this.updateForm(\n        {\n          fromAmount: '',\n          fromAmountFieldMode: 'token',\n          toSelectedToken: this.fromSelectedToken\n            ? {\n                ...this.fromSelectedToken,\n                chainId: Number(this.fromSelectedToken.chainId)\n              }\n            : null\n        },\n        {\n          emitUpdate: false,\n          updateQuote: false\n        }\n      )\n      this.fromSelectedToken = null\n    } else if (this.toChainId) {\n      const toSelectedTokenNetwork = this.#networks.networks.find(\n        (n) => Number(n.chainId) === this.toChainId\n      )!\n      const tokenInPortfolio = this.portfolioTokenList.find(\n        (token: TokenResult) =>\n          token.address === this.toSelectedToken?.address &&\n          token.chainId === toSelectedTokenNetwork.chainId\n      )\n\n      const price = Number(this.quote?.selectedRoute?.toToken?.priceUSD || 0)\n\n      this.fromSelectedToken = tokenInPortfolio || {\n        ...this.toSelectedToken,\n        chainId: BigInt(this.toChainId),\n        amount: 0n,\n        flags: {\n          onGasTank: false,\n          isFeeToken: false,\n          canTopUpGasTank: false,\n          rewardsType: null\n        },\n        priceIn: price ? [{ baseCurrency: 'usd', price }] : []\n      }\n\n      this.fromSelectedToken.isSwitchedToToken = true\n      this.#addFromTokenToPortfolioListIfNeeded()\n\n      // Update the amount to the one from the quote\n      let fromAmount = ''\n      // Try catch just in case because of formatUnits\n      try {\n        if (this.quote && this.quote.selectedRoute?.fromAmount) {\n          fromAmount = formatUnits(\n            this.quote.selectedRoute.toAmount,\n            this.quote.selectedRoute.toToken.decimals\n          )\n        }\n      } catch (error) {\n        console.error('Error formatting fromAmount', error)\n      }\n      await this.updateForm(\n        {\n          fromAmount,\n          fromAmountFieldMode: 'token'\n        },\n        {\n          emitUpdate: false,\n          updateQuote: false\n        }\n      )\n    }\n\n    // Update the chain ids\n    ;[this.fromChainId, this.toChainId] = [this.toChainId, this.fromChainId]\n\n    // Update the to token list\n    await this.updateToTokenList(true, prevFromSelectedToken?.address)\n\n    this.switchTokensStatus = 'INITIAL'\n    this.#emitUpdateIfNeeded()\n  }\n\n  async updateQuote(options?: {\n    skipQuoteUpdateOnSameValues?: boolean\n    skipPreviousQuoteRemoval?: boolean\n    skipStatusUpdate?: boolean\n    debounce?: boolean\n  }) {\n    const {\n      skipQuoteUpdateOnSameValues = true,\n      skipPreviousQuoteRemoval = false,\n      skipStatusUpdate = false,\n      debounce = false\n    } = options || {}\n    // no updates if the user has commited\n    if (this.formStatus === SwapAndBridgeFormStatus.Proceeded || this.isAutoSelectRouteDisabled)\n      return\n\n    const quoteId = generateUuid()\n    this.#updateQuoteId = quoteId\n\n    const updateQuoteFunction = async () => {\n      if (!this.#selectedAccount.account) return\n      if (!this.#getIsFormValidToFetchQuote()) return\n      if (!this.fromAmount || !this.fromSelectedToken || !this.toSelectedToken) return\n\n      const sanitizedFromAmount = getSanitizedAmount(\n        this.fromAmount,\n        this.fromSelectedToken.decimals\n      )\n\n      const bigintFromAmount = parseUnits(sanitizedFromAmount, this.fromSelectedToken.decimals)\n\n      if (this.quote) {\n        const isFromAmountSame =\n          this.quote.selectedRoute?.fromAmount === bigintFromAmount.toString()\n        const isFromNetworkSame = this.quote.fromChainId === this.fromChainId\n        const isFromAddressSame = this.quote.fromAsset.address === this.fromSelectedToken.address\n        const isToNetworkSame = this.quote.toChainId === this.toChainId\n        const isToAddressSame = this.quote.toAsset.address === this.toSelectedToken.address\n\n        if (\n          skipQuoteUpdateOnSameValues &&\n          isFromAmountSame &&\n          isFromNetworkSame &&\n          isFromAddressSame &&\n          isToNetworkSame &&\n          isToAddressSame\n        ) {\n          return\n        }\n      }\n      if (!skipPreviousQuoteRemoval) {\n        if (this.quote) {\n          this.quote = null\n          this.updateQuoteStatus = 'LOADING'\n        }\n        this.quoteRoutesStatuses = {}\n        this.#emitUpdateIfNeeded()\n      }\n\n      try {\n        const quoteResult = await this.#serviceProviderAPI.quote({\n          fromAsset: this.fromSelectedToken,\n          fromChainId: this.fromChainId!,\n          fromTokenAddress: this.fromSelectedToken.address,\n          toAsset: this.toSelectedToken,\n          toChainId: this.toChainId!,\n          toTokenAddress: this.toSelectedToken.address,\n          fromAmount: bigintFromAmount,\n          userAddress: this.#selectedAccount.account.addr,\n          isSmartAccount: !isBasicAccount(\n            this.#selectedAccount.account,\n            await this.#accounts.getOrFetchAccountOnChainState(\n              this.#selectedAccount.account.addr,\n              BigInt(this.toChainId!)\n            )\n          ),\n          sort: this.routePriority,\n          isOG: this.#invite.isOG\n        })\n\n        if (quoteId !== this.#updateQuoteId) return\n        // no updates if the user has commited\n        if (this.formStatus === SwapAndBridgeFormStatus.Proceeded || this.isAutoSelectRouteDisabled)\n          return\n\n        if (\n          this.#getIsFormValidToFetchQuote() &&\n          quoteResult &&\n          quoteResult?.routes?.[0] &&\n          quoteResult.fromChainId === this.fromChainId &&\n          quoteResult.toChainId === this.toChainId &&\n          quoteResult.toAsset.address === this.toSelectedToken?.address\n        ) {\n          let routeToSelect\n          let routeToSelectSteps\n          let routes = quoteResult.routes || []\n\n          try {\n            if (this.#serviceProviderAPI.id === 'socket') {\n              routes = routes.map((route) => {\n                if (!route.userTxs) return route\n\n                const bridgeTx = route.userTxs.find((tx) => getIsBridgeTxn(tx.userTxType)) as\n                  | SwapAndBridgeUserTx\n                  | undefined\n\n                if (!bridgeTx) return route\n\n                const bridgeStep = (bridgeTx as unknown as SocketAPIBridgeUserTx).steps.find(\n                  (s) => s.type === 'bridge'\n                ) as SocketApiBridgeStep | undefined\n\n                if (!bridgeStep) return route\n                if (bridgeStep.protocolFees.amount === '0') return route\n\n                const normalizedProtocolFeeToken = normalizeIncomingSocketToken(\n                  bridgeStep.protocolFees.asset\n                )\n\n                const doesProtocolRequireExtraContractFeeInNative =\n                  PROTOCOLS_WITH_CONTRACT_FEE_IN_NATIVE.includes(bridgeStep.protocol.name) &&\n                  // When other tokens than the native ones are being bridged,\n                  // Socket API takes the fee directly from the \"From\" amount.\n                  normalizedProtocolFeeToken.address === ZERO_ADDRESS\n\n                if (!doesProtocolRequireExtraContractFeeInNative) return route\n\n                const protocolFeeTokenNetwork = this.#networks.networks.find(\n                  (n) => Number(n.chainId) === normalizedProtocolFeeToken.chainId\n                )!\n\n                const isTokenToPayFeeWithTheSameAsFromToken =\n                  this.fromSelectedToken?.address === normalizedProtocolFeeToken.address &&\n                  this.fromChainId === normalizedProtocolFeeToken.chainId\n\n                const tokenToPayFeeWith = this.portfolioTokenList.find((t) => {\n                  return (\n                    t.address === normalizedProtocolFeeToken.address &&\n                    t.chainId === protocolFeeTokenNetwork.chainId\n                  )\n                })\n\n                const protocolFeeTokenDecimals = bridgeStep.protocolFees.asset.decimals\n                const portfolioTokenToPayFeeWithDecimals = tokenToPayFeeWith\n                  ? tokenToPayFeeWith.decimals\n                  : protocolFeeTokenDecimals\n                const fromAmountNumber = Number(this.fromAmount)\n                const fromAmountScaledToTokenToPayFeeWithDecimals = BigInt(\n                  Math.round(fromAmountNumber * 10 ** portfolioTokenToPayFeeWithDecimals)\n                )\n\n                const tokenToPayFeeWithScaledToPortfolioTokenToPayFeeWithDecimals =\n                  tokenToPayFeeWith\n                    ? // Scale tokenToPayFeeWith to the same decimals as portfolioTokenToPayFeeWithDecimals\n                      tokenToPayFeeWith.amount *\n                      BigInt(10 ** (protocolFeeTokenDecimals - portfolioTokenToPayFeeWithDecimals))\n                    : BigInt(0)\n\n                const availableAfterSubtractionScaledToPortfolioTokenToPayFeeWithDecimals =\n                  isTokenToPayFeeWithTheSameAsFromToken\n                    ? tokenToPayFeeWithScaledToPortfolioTokenToPayFeeWithDecimals -\n                      fromAmountScaledToTokenToPayFeeWithDecimals\n                    : tokenToPayFeeWithScaledToPortfolioTokenToPayFeeWithDecimals\n\n                const protocolFeesAmountScaledToPortfolioTokenToPayFeeWithDecimals = BigInt(\n                  Math.round(\n                    Number(bridgeStep.protocolFees.amount) *\n                      10 ** (portfolioTokenToPayFeeWithDecimals - protocolFeeTokenDecimals)\n                  )\n                )\n                const hasEnoughAmountToPayFee =\n                  availableAfterSubtractionScaledToPortfolioTokenToPayFeeWithDecimals >=\n                  protocolFeesAmountScaledToPortfolioTokenToPayFeeWithDecimals\n\n                if (!hasEnoughAmountToPayFee) {\n                  const protocolName = bridgeStep.protocol.displayName\n                  const insufficientTokenSymbol = bridgeStep.protocolFees.asset.symbol\n                  const insufficientTokenNetwork = protocolFeeTokenNetwork.name\n                  const insufficientAssetAmount = formatUnits(\n                    bridgeStep.protocolFees.amount,\n                    bridgeStep.protocolFees.asset.decimals\n                  )\n                  const insufficientAssetAmountInUsd = formatDecimals(\n                    bridgeStep.protocolFees.feesInUsd,\n                    'value'\n                  )\n\n                  // Trick to show the error message on the UI, as the API doesn't handle this\n                  // eslint-disable-next-line no-param-reassign\n                  route.errorMessage = `Insufficient ${insufficientTokenSymbol} on ${insufficientTokenNetwork}. You need ${insufficientAssetAmount} ${insufficientTokenSymbol} (${insufficientAssetAmountInUsd}) on ${insufficientTokenNetwork} to cover the ${protocolName} protocol fee for this route.`\n                }\n\n                return route\n              })\n            }\n\n            routes = routes.sort((a, b) => Number(!!a.errorMessage) - Number(!!b.errorMessage))\n          } catch (error) {\n            // if the filtration fails for some reason continue with the original routes\n            // array without interrupting the rest of the logic\n            // eslint-disable-next-line no-console\n            console.error(error)\n          }\n\n          if (!routes.length) {\n            this.quote = null\n            return\n          }\n\n          const alreadySelectedRoute = routes.find((nextRoute) => {\n            if (!this.quote) return false\n\n            // Because we only have routes with unique bridges (bridging case)\n            const selectedRouteUsedBridge = this.quote.selectedRoute?.usedBridgeNames?.[0]\n            if (selectedRouteUsedBridge)\n              return nextRoute.usedBridgeNames?.[0] === selectedRouteUsedBridge\n\n            // Assuming to only have routes with unique DEXes (swapping case)\n            const selectedRouteUsedDex = this.quote.selectedRoute?.usedDexName\n            if (selectedRouteUsedDex) return nextRoute.usedDexName === selectedRouteUsedDex\n\n            return false // should never happen, but just in case of bad data\n          })\n\n          if (alreadySelectedRoute) {\n            routeToSelect = alreadySelectedRoute\n            routeToSelectSteps = alreadySelectedRoute.steps\n          } else {\n            let bestRoute = routes[0]\n            if (this.#serviceProviderAPI.id === 'socket') {\n              bestRoute =\n                this.routePriority === 'output'\n                  ? routes[0] // API returns highest output first\n                  : routes[routes.length - 1] // API returns fastest... last\n            }\n            routeToSelect = bestRoute\n            routeToSelectSteps = bestRoute.steps\n          }\n\n          this.quote = {\n            fromAsset: quoteResult.fromAsset,\n            fromChainId: quoteResult.fromChainId,\n            toAsset: quoteResult.toAsset,\n            toChainId: quoteResult.toChainId,\n            selectedRoute: routeToSelect,\n            selectedRouteSteps: routeToSelectSteps,\n            routes\n          }\n        }\n        this.quoteRoutesStatuses = (quoteResult as any).bridgeRouteErrors || {}\n        await this.initSignAccountOpIfNeeded()\n      } catch (error: any) {\n        const { message } = getHumanReadableSwapAndBridgeError(error)\n        this.emitError({ error, level: 'major', message })\n      }\n    }\n\n    if (!this.#getIsFormValidToFetchQuote()) {\n      if (this.quote || this.quoteRoutesStatuses) {\n        this.quote = null\n        this.quoteRoutesStatuses = {}\n        this.#emitUpdateIfNeeded()\n      }\n      return\n    }\n\n    if (!skipStatusUpdate && !this.quote) {\n      this.updateQuoteStatus = 'LOADING'\n      this.#emitUpdateIfNeeded()\n    }\n\n    // Debounce the updateQuote function to avoid multiple calls\n    if (debounce) await wait(500)\n    if (this.#updateQuoteId !== quoteId) return\n\n    await updateQuoteFunction()\n\n    this.updateQuoteStatus = 'INITIAL'\n    this.#emitUpdateIfNeeded()\n  }\n\n  async getRouteStartUserTx(shouldThrowOnError = true): Promise<SwapAndBridgeSendTxRequest | null> {\n    if (\n      this.formStatus !== SwapAndBridgeFormStatus.ReadyToEstimate &&\n      this.formStatus !== SwapAndBridgeFormStatus.ReadyToSubmit\n    )\n      return null\n\n    try {\n      const routeResult = await this.#serviceProviderAPI.startRoute({\n        fromChainId: this.quote!.fromChainId,\n        fromAssetAddress: this.quote!.fromAsset.address,\n        toChainId: this.quote!.toChainId,\n        toAssetAddress: this.quote!.toAsset.address,\n        route: this.quote!.selectedRoute\n      })\n\n      return routeResult\n    } catch (error: any) {\n      if (shouldThrowOnError) {\n        const { message } = getHumanReadableSwapAndBridgeError(error)\n        throw new EmittableError({ error, level: 'minor', message })\n      }\n      return null\n    }\n  }\n\n  async getNextRouteUserTx({\n    activeRouteId,\n    activeRoute: { route }\n  }: {\n    activeRouteId: SwapAndBridgeActiveRoute['activeRouteId']\n    activeRoute: SwapAndBridgeActiveRoute\n  }) {\n    try {\n      const response = await this.#serviceProviderAPI.getNextRouteUserTx({\n        activeRouteId,\n        route: route as SwapAndBridgeRoute // TODO: type cast might not be needed?\n      })\n      return response\n    } catch (error: any) {\n      const { message } = getHumanReadableSwapAndBridgeError(error)\n      throw new EmittableError({ error, level: 'minor', message })\n    }\n  }\n\n  async checkForNextUserTxForActiveRoutes() {\n    await this.#initialLoadPromise\n    const fetchAndUpdateRoute = async (activeRoute: SwapAndBridgeActiveRoute) => {\n      let status: SocketRouteStatus = null\n      const broadcastedButNotConfirmed = this.#activity.broadcastedButNotConfirmed.find((op) =>\n        op.calls.some((c) => c.fromUserRequestId === activeRoute.activeRouteId)\n      )\n\n      // call getRouteStatus only after the transaction has processed\n      if (broadcastedButNotConfirmed) return\n      if (activeRoute.routeStatus === 'completed') return\n\n      try {\n        // should never happen\n        if (!activeRoute.route) throw new Error('Route data is missing.')\n\n        status = await this.#serviceProviderAPI.getRouteStatus({\n          fromChainId: activeRoute.route.fromChainId,\n          toChainId: activeRoute.route.toChainId,\n          bridge: activeRoute.route.usedBridgeNames?.[0],\n          activeRouteId: activeRoute.activeRouteId,\n          userTxIndex: activeRoute.userTxIndex,\n          txHash: activeRoute.userTxHash!\n        })\n      } catch (e: any) {\n        const { message } = getHumanReadableSwapAndBridgeError(e)\n        this.updateActiveRoute(activeRoute.activeRouteId, { error: message })\n        return\n      }\n\n      const route = this.activeRoutes.find((r) => r.activeRouteId === activeRoute.activeRouteId)\n      if (route?.error) {\n        this.updateActiveRoute(activeRoute.activeRouteId, {\n          error: undefined\n        })\n      }\n\n      if (status === 'completed') {\n        this.updateActiveRoute(\n          activeRoute.activeRouteId,\n          {\n            routeStatus: 'completed',\n            error: undefined\n          },\n          true\n        )\n        this.#portfolioUpdate()\n      } else if (status === 'ready') {\n        this.updateActiveRoute(\n          activeRoute.activeRouteId,\n          {\n            routeStatus: 'ready',\n            error: undefined\n          },\n          true\n        )\n      }\n    }\n\n    await Promise.all(\n      this.activeRoutesInProgress.map(async (route) => {\n        await fetchAndUpdateRoute(route)\n      })\n    )\n  }\n\n  async selectRoute(route: SwapAndBridgeRoute, isAutoSelectDisabled?: boolean) {\n    if (!this.quote || !this.quote.routes.length) return\n    if (\n      ![\n        SwapAndBridgeFormStatus.ReadyToSubmit,\n        SwapAndBridgeFormStatus.ReadyToEstimate,\n        SwapAndBridgeFormStatus.InvalidRouteSelected\n      ].includes(this.formStatus)\n    )\n      return\n\n    this.quote.selectedRoute = route\n    this.quote.selectedRouteSteps = route.steps\n    if (isAutoSelectDisabled !== undefined) {\n      this.isAutoSelectRouteDisabled = isAutoSelectDisabled\n    }\n\n    await this.initSignAccountOpIfNeeded()\n    this.emitUpdate()\n  }\n\n  async addActiveRoute({\n    activeRouteId,\n    userTxIndex\n  }: {\n    activeRouteId: SwapAndBridgeActiveRoute['activeRouteId']\n    userTxIndex: SwapAndBridgeSendTxRequest['userTxIndex']\n  }) {\n    await this.#initialLoadPromise\n\n    try {\n      let route = this.quote?.routes.find((r) => r.routeId === activeRouteId.toString())\n      if (this.#serviceProviderAPI.id === 'socket') {\n        route = await this.#serviceProviderAPI.getActiveRoute(activeRouteId.toString())\n      }\n\n      if (route) {\n        this.activeRoutes.push({\n          serviceProviderId: this.#serviceProviderAPI.id,\n          activeRouteId: activeRouteId.toString(),\n          userTxIndex,\n          routeStatus: 'ready',\n          userTxHash: null,\n          // @ts-ignore TODO: types mismatch by a bit, align types better\n          route\n        })\n      }\n      this.emitUpdate()\n    } catch (error: any) {\n      const { message } = getHumanReadableSwapAndBridgeError(error)\n      throw new EmittableError({ error, level: 'major', message })\n    }\n  }\n\n  updateActiveRoute(\n    activeRouteId: SwapAndBridgeActiveRoute['activeRouteId'],\n    activeRoute?: Partial<SwapAndBridgeActiveRoute>,\n    forceUpdateRoute?: boolean\n  ) {\n    const currentActiveRoutes = [...this.activeRoutes]\n    const activeRouteIndex = currentActiveRoutes.findIndex((r) => r.activeRouteId === activeRouteId)\n\n    if (activeRouteIndex !== -1) {\n      if (forceUpdateRoute) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        ;(async () => {\n          let route = currentActiveRoutes[activeRouteIndex].route\n          if (this.#serviceProviderAPI.id === 'socket') {\n            // @ts-ignore TODO: types mismatch by a bit, align types better\n            route = await this.#serviceProviderAPI.getActiveRoute(activeRouteId)\n          }\n          this.updateActiveRoute(activeRouteId, { route })\n        })()\n      }\n\n      if (activeRoute) {\n        currentActiveRoutes[activeRouteIndex] = {\n          ...currentActiveRoutes[activeRouteIndex],\n          ...activeRoute\n        }\n      } else {\n        currentActiveRoutes[activeRouteIndex] = { ...currentActiveRoutes[activeRouteIndex] }\n      }\n\n      if (activeRoute?.routeStatus === 'completed') {\n        // Change the currentUserTxIndex to the length of the userTxs array\n        // a.k.a. all transactions are completed\n        const activeRouteRoute = currentActiveRoutes[activeRouteIndex].route\n\n        if (activeRouteRoute) {\n          activeRouteRoute.currentUserTxIndex = activeRouteRoute.userTxs.length\n        }\n      } else if (activeRoute?.userTxHash) {\n        // Mark all source destination actions as completed\n        // when the transaction is mined\n        const activeRouteRoute = currentActiveRoutes[activeRouteIndex].route\n\n        if (activeRouteRoute) {\n          activeRouteRoute.currentUserTxIndex = activeRouteRoute.userTxs.filter(\n            (tx) => tx.userTxType === 'dex-swap'\n          ).length\n        }\n      }\n\n      this.activeRoutes = currentActiveRoutes\n\n      this.#emitUpdateIfNeeded()\n    }\n  }\n\n  removeActiveRoute(activeRouteId: SwapAndBridgeSendTxRequest['activeRouteId']) {\n    this.activeRoutes = this.activeRoutes.filter((r) => r.activeRouteId !== activeRouteId)\n\n    // Purposely not using `this.#emitUpdateIfNeeded()` here, as this should always emit to update banners\n    this.emitUpdate()\n  }\n\n  /**\n   * Find the next route in line and try to re-estimate with it\n   */\n  async onEstimationFailure() {\n    if (!this.quote || !this.quote.selectedRoute || this.isAutoSelectRouteDisabled) return\n\n    const routeId = this.quote.selectedRoute.routeId\n    let routeIndex = null\n    this.quote.routes.forEach((route, i) => {\n      if (route.routeId === routeId) {\n        this.quote!.routes.splice(i, 1)\n        routeIndex = i\n      }\n    })\n\n    // no routes available\n    if (routeIndex === null || !this.quote.routes[routeIndex]) {\n      this.quote.selectedRoute = undefined\n      this.quote.routes = []\n      this.updateQuoteStatus = 'INITIAL'\n      this.emitUpdate()\n      return\n    }\n\n    await this.selectRoute(this.quote.routes[routeIndex])\n  }\n\n  async markSelectedRouteAsFailed() {\n    if (!this.quote || !this.quote.selectedRoute) return\n\n    const routeId = this.quote.selectedRoute.routeId\n    this.quote.routes.forEach((route, i) => {\n      if (route.routeId === routeId) {\n        this.quote!.routes[i].hasFailed = true\n      }\n    })\n\n    this.emitUpdate()\n  }\n\n  // update active route if needed on SubmittedAccountOp update\n  handleUpdateActiveRouteOnSubmittedAccountOpStatusUpdate(op: SubmittedAccountOp) {\n    op.calls.forEach((call) => {\n      this.#handleActiveRouteBroadcastedTransaction(call.fromUserRequestId, op.status)\n      this.#handleActiveRouteBroadcastedApproval(call.fromUserRequestId, op.status)\n      this.#handleActiveRoutesWithReadyApproval(call.fromUserRequestId, op.status)\n      this.#handleUpdateActiveRoutesUserTxData(call.fromUserRequestId, op)\n      this.#handleActiveRoutesCompleted(call.fromUserRequestId, op.status)\n    })\n  }\n\n  #handleActiveRouteBroadcastedTransaction(\n    fromUserRequestId: Call['fromUserRequestId'],\n    opStatus: SubmittedAccountOp['status']\n  ) {\n    if (opStatus !== AccountOpStatus.BroadcastedButNotConfirmed) return\n\n    const activeRoute = this.activeRoutes.find((r) => r.activeRouteId === fromUserRequestId)\n    if (!activeRoute) return\n\n    this.updateActiveRoute(activeRoute.activeRouteId, { routeStatus: 'in-progress' })\n  }\n\n  #handleActiveRouteBroadcastedApproval(\n    fromUserRequestId: Call['fromUserRequestId'],\n    opStatus: SubmittedAccountOp['status']\n  ) {\n    if (opStatus !== AccountOpStatus.BroadcastedButNotConfirmed) return\n\n    const activeRoute = this.activeRoutes.find(\n      (r) => `${r.activeRouteId}-approval` === fromUserRequestId\n    )\n    if (!activeRoute) return\n\n    this.updateActiveRoute(activeRoute.activeRouteId, {\n      routeStatus: 'waiting-approval-to-resolve'\n    })\n  }\n\n  #handleActiveRoutesWithReadyApproval(\n    fromUserRequestId: Call['fromUserRequestId'],\n    opStatus: SubmittedAccountOp['status']\n  ) {\n    const activeRouteWaitingApproval = this.activeRoutes.find(\n      (r) =>\n        r.routeStatus === 'waiting-approval-to-resolve' &&\n        `${r.activeRouteId}-approval` === fromUserRequestId\n    )\n\n    if (!activeRouteWaitingApproval) return\n\n    if (opStatus === AccountOpStatus.Success) {\n      this.updateActiveRoute(activeRouteWaitingApproval.activeRouteId, {\n        routeStatus: 'ready'\n      })\n    }\n\n    if (opStatus === AccountOpStatus.Failure || opStatus === AccountOpStatus.Rejected) {\n      const errorMessage =\n        opStatus === AccountOpStatus.Rejected\n          ? 'The approval was rejected but you can try to sign it again'\n          : 'The approval failed but you can try to sign it again'\n      this.updateActiveRoute(activeRouteWaitingApproval.activeRouteId, {\n        routeStatus: 'ready',\n        error: errorMessage\n      })\n    }\n  }\n\n  #handleUpdateActiveRoutesUserTxData(\n    fromUserRequestId: Call['fromUserRequestId'],\n    submittedAccountOp: SubmittedAccountOp\n  ) {\n    const activeRoute = this.activeRoutes.find((r) => r.activeRouteId === fromUserRequestId)\n    if (!activeRoute) return\n\n    if (submittedAccountOp && !activeRoute.userTxHash) {\n      this.updateActiveRoute(activeRoute.activeRouteId, {\n        userTxHash: submittedAccountOp?.txnId,\n        identifiedBy: submittedAccountOp.identifiedBy\n      })\n    }\n  }\n\n  #handleActiveRoutesCompleted(\n    fromUserRequestId: Call['fromUserRequestId'],\n    opStatus: SubmittedAccountOp['status']\n  ) {\n    const activeRoute = this.activeRoutes.find((r) => r.activeRouteId === fromUserRequestId)\n    if (!activeRoute || !activeRoute.route) return\n\n    let shouldUpdateActiveRouteStatus = false\n\n    const isSwap = activeRoute.route.fromChainId === activeRoute.route.toChainId\n\n    // force update the active route status if the route is of type 'swap'\n    if (isSwap) shouldUpdateActiveRouteStatus = true\n\n    // force update the active route with an error message if the tx fails (for both swap and bridge)\n    if (opStatus === AccountOpStatus.Failure || opStatus === AccountOpStatus.Rejected)\n      shouldUpdateActiveRouteStatus = true\n\n    if (!shouldUpdateActiveRouteStatus) return\n\n    if (opStatus === AccountOpStatus.Success) {\n      this.updateActiveRoute(activeRoute.activeRouteId, { routeStatus: 'completed' })\n    }\n\n    // If the transaction fails, update the status to \"ready\" to allow the user to sign it again\n    if (opStatus === AccountOpStatus.Failure || opStatus === AccountOpStatus.Rejected) {\n      const errorMessage =\n        opStatus === AccountOpStatus.Rejected\n          ? 'The transaction was rejected'\n          : 'The transaction failed onchain'\n      this.updateActiveRoute(activeRoute.activeRouteId, {\n        routeStatus: 'failed',\n        error: errorMessage\n      })\n    }\n  }\n\n  #getIsFormValidToFetchQuote() {\n    return (\n      this.fromChainId &&\n      this.toChainId &&\n      this.fromAmount &&\n      this.fromSelectedToken &&\n      this.toSelectedToken &&\n      (this.validateFromAmount.success || this.fromSelectedToken?.isSwitchedToToken)\n    )\n  }\n\n  get banners() {\n    if (!this.#selectedAccount.account) return []\n\n    const activeRoutesForSelectedAccount = getActiveRoutesForAccount(\n      this.#selectedAccount.account.addr,\n      this.activeRoutes\n    )\n    const accountOpActions = this.#actions.visibleActionsQueue.filter(\n      ({ type }) => type === 'accountOp'\n    ) as AccountOpAction[]\n\n    // Swap banners aren't generated because swaps are completed instantly,\n    // thus the activity banner on broadcast is sufficient\n    return getBridgeBanners(activeRoutesForSelectedAccount, accountOpActions)\n  }\n\n  #debounceFunctionCallsOnSameTick(funcName: string, func: Function) {\n    if (this.#shouldDebounceFlags[funcName]) return\n    this.#shouldDebounceFlags[funcName] = true\n\n    // Debounce multiple calls in the same tick and only execute one of them\n    setTimeout(() => {\n      this.#shouldDebounceFlags[funcName] = false\n      func()\n    }, 0)\n  }\n\n  destroySignAccountOp() {\n    if (!this.signAccountOpController) return\n    this.signAccountOpController.reset()\n    this.signAccountOpController = null\n    this.hasProceeded = false\n  }\n\n  async initSignAccountOpIfNeeded() {\n    // no updates if the user has commited\n    if (this.formStatus === SwapAndBridgeFormStatus.Proceeded) return\n\n    // shouldn't happen ever\n    if (!this.#selectedAccount.account) return\n\n    // again it shouldn't happen but there might be a case where the from token\n    // disappears because of a strange update event. It's fine to just not\n    // continue from the point forward\n    if (!this.fromSelectedToken || !this.toSelectedToken || !this.toChainId) return\n\n    if (\n      this.formStatus !== SwapAndBridgeFormStatus.ReadyToEstimate &&\n      this.formStatus !== SwapAndBridgeFormStatus.ReadyToSubmit\n    )\n      return\n\n    const fromToken = this.fromSelectedToken as TokenResult\n    const network = this.#networks.networks.find((net) => net.chainId === fromToken.chainId)\n\n    // shouldn't happen ever\n    if (!network) return\n\n    const provider = this.#providers.providers[network.chainId.toString()]\n    const accountState = await this.#accounts.getOrFetchAccountOnChainState(\n      this.#selectedAccount.account.addr,\n      network.chainId\n    )\n\n    const userTxn = await this.getRouteStartUserTx(false)\n\n    // if no txn is provided because of a route failure (large slippage),\n    // auto select the next route and continue on\n    if (!userTxn) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.onEstimationFailure()\n      return\n    }\n\n    // learn the token in the portfolio\n    this.#portfolio.addTokensToBeLearned([this.toSelectedToken.address], BigInt(this.toChainId))\n\n    // check if we have an accountOp in main\n    const userRequestCalls = batchCallsFromUserRequests({\n      accountAddr: this.#selectedAccount.account.addr,\n      chainId: network.chainId,\n      userRequests: this.#userRequests\n    })\n    const swapOrBridgeCalls = await getSwapAndBridgeCalls(\n      userTxn,\n      this.#selectedAccount.account,\n      provider,\n      accountState\n    )\n    const isBridge = this.fromChainId && this.toChainId && this.fromChainId !== this.toChainId\n    const calls = !isBridge ? [...userRequestCalls, ...swapOrBridgeCalls] : [...swapOrBridgeCalls]\n\n    if (this.signAccountOpController) {\n      // if the chain id has changed, we need to destroy the sign account op\n      if (\n        this.signAccountOpController.accountOp.meta &&\n        this.signAccountOpController.accountOp.meta.swapTxn &&\n        this.signAccountOpController.accountOp.meta.swapTxn.chainId !== userTxn.chainId\n      ) {\n        this.destroySignAccountOp()\n      } else {\n        this.signAccountOpController.update({ calls })\n\n        // add the real swapTxn\n        if (!this.signAccountOpController.accountOp.meta)\n          this.signAccountOpController.accountOp.meta = {}\n        this.signAccountOpController.accountOp.meta.swapTxn = userTxn\n        return\n      }\n    }\n\n    const baseAcc = getBaseAccount(\n      this.#selectedAccount.account,\n      accountState,\n      this.#keystore.getAccountKeys(this.#selectedAccount.account),\n      network\n    )\n    const accountOp = {\n      accountAddr: this.#selectedAccount.account.addr,\n      chainId: network.chainId,\n      signingKeyAddr: null,\n      signingKeyType: null,\n      gasLimit: null,\n      gasFeePayment: null,\n      nonce: accountState.nonce,\n      signature: null,\n      accountOpToExecuteBefore: null,\n      calls,\n      flags: {\n        hideActivityBanner: this.fromSelectedToken.chainId !== BigInt(this.toSelectedToken.chainId)\n      },\n      meta: {\n        swapTxn: userTxn,\n        paymasterService: getAmbirePaymasterService(baseAcc, this.#relayerUrl)\n      }\n    }\n\n    this.signAccountOpController = new SignAccountOpController(\n      this.#accounts,\n      this.#networks,\n      this.#keystore,\n      this.#portfolio,\n      this.#externalSignerControllers,\n      this.#selectedAccount.account,\n      network,\n      provider,\n      randomId(), // the account op and the action are fabricated\n      accountOp,\n      () => {\n        return true\n      },\n      false,\n      undefined\n    )\n\n    this.emitUpdate()\n\n    // propagate updates from signAccountOp here\n    this.signAccountOpController.onUpdate(() => {\n      this.emitUpdate()\n    })\n    this.signAccountOpController.onError((error) => {\n      this.#portfolio.overridePendingResults(this.signAccountOpController!.accountOp)\n      this.emitError(error)\n    })\n\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.reestimate(userTxn)\n  }\n\n  /**\n   * Reestimate the signAccountOp request periodically.\n   * Encapsulate it here instead of creating an interval in the background\n   * as intervals are tricky and harder to control\n   */\n  async reestimate(userTxn: SwapAndBridgeSendTxRequest) {\n    if (this.#isReestimating) return\n\n    this.#isReestimating = true\n    await wait(30000)\n    this.#isReestimating = false\n\n    if (!this.signAccountOpController) return\n    if (!this.signAccountOpController.accountOp.meta?.swapTxn) return\n\n    const newestUserTxn = JSON.parse(\n      JSON.stringify(this.signAccountOpController.accountOp.meta.swapTxn)\n    )\n\n    // if we're refetching a quote atm, we don't execute the estimation\n    // a race between the old estimation with the old quote and the new\n    // estimation with the new quote might happen\n    //\n    // also, if the tx data is different, it means the user is playing\n    // with the swap, so we don't want to reestimate\n    //\n    // we only want a re-estimate in a stale state\n    if (\n      this.updateQuoteStatus === 'LOADING' ||\n      userTxn.txData !== this.signAccountOpController.accountOp.meta.swapTxn.txData\n    ) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.reestimate(newestUserTxn)\n      return\n    }\n\n    this.signAccountOpController.estimate().catch((e) => {\n      // eslint-disable-next-line no-console\n      console.log('error on swap&bridge re-estimate')\n      // eslint-disable-next-line no-console\n      console.log(e)\n    })\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.reestimate(newestUserTxn)\n  }\n\n  setUserProceeded(hasProceeded: boolean) {\n    this.hasProceeded = hasProceeded\n    this.emitUpdate()\n  }\n\n  setIsAutoSelectRouteDisabled(isDisabled: boolean) {\n    this.isAutoSelectRouteDisabled = isDisabled\n    this.emitUpdate()\n  }\n\n  get swapSignErrors(): SignAccountOpError[] {\n    const errors: SignAccountOpError[] = []\n    const isBridge = this.fromChainId && this.toChainId && this.fromChainId !== this.toChainId\n    const fromSelectedTokenWithUpToDateAmount = this.#getFromSelectedTokenInPortfolio()\n\n    if (\n      isBridge &&\n      fromSelectedTokenWithUpToDateAmount &&\n      fromSelectedTokenWithUpToDateAmount.amountPostSimulation &&\n      fromSelectedTokenWithUpToDateAmount.amount !==\n        fromSelectedTokenWithUpToDateAmount.amountPostSimulation\n    ) {\n      errors.push({\n        title: `${fromSelectedTokenWithUpToDateAmount.symbol} detected in batch. Please complete the batch before bridging`\n      })\n    }\n\n    // Check if there are any errors from the main SignAccountOp controller\n    // This prevents proceeding with a swap/bridge if there are estimation errors\n    // in the pending batch of transactions\n    if (\n      this.#isMainSignAccountOpThrowingAnEstimationError &&\n      this.#isMainSignAccountOpThrowingAnEstimationError(this.fromChainId, this.toChainId)\n    ) {\n      errors.push({\n        title: 'Error detected in the pending batch. Please review it before proceeding'\n      })\n    }\n\n    return errors\n  }\n\n  toJSON() {\n    return {\n      ...this,\n      ...super.toJSON(),\n      toTokenList: this.toTokenList,\n      maxFromAmount: this.maxFromAmount,\n      validateFromAmount: this.validateFromAmount,\n      isFormEmpty: this.isFormEmpty,\n      formStatus: this.formStatus,\n      activeRoutesInProgress: this.activeRoutesInProgress,\n      activeRoutes: this.activeRoutes,\n      banners: this.banners,\n      isHealthy: this.isHealthy,\n      shouldEnableRoutesSelection: this.shouldEnableRoutesSelection,\n      supportedChainIds: this.supportedChainIds,\n      swapSignErrors: this.swapSignErrors\n    }\n  }\n}\n"]}