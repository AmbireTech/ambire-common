{"version":3,"file":"swapAndBridge.js","sourceRoot":"","sources":["../../../../src/controllers/swapAndBridge/swapAndBridge.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable no-await-in-loop */\nimport { formatUnits, isAddress, parseUnits } from 'ethers'\nimport { v4 as uuidv4 } from 'uuid'\n\nimport EmittableError from '../../classes/EmittableError'\nimport SwapAndBridgeError from '../../classes/SwapAndBridgeError'\nimport { Network } from '../../interfaces/network'\nimport { Storage } from '../../interfaces/storage'\nimport {\n  ActiveRoute,\n  CachedSupportedChains,\n  CachedTokenListKey,\n  CachedToTokenLists,\n  SocketApiBridgeStep,\n  SocketAPIBridgeUserTx,\n  SocketAPIQuote,\n  SocketAPIRoute,\n  SocketAPISendTransactionRequest,\n  SocketAPIToken,\n  SocketRouteStatus,\n  SwapAndBridgeToToken\n} from '../../interfaces/swapAndBridge'\nimport { isSmartAccount } from '../../libs/account/account'\nimport { AccountOpStatus } from '../../libs/accountOp/accountOp'\nimport { SubmittedAccountOp } from '../../libs/accountOp/submittedAccountOp'\nimport { Call } from '../../libs/accountOp/types'\nimport { getBridgeBanners } from '../../libs/banners/banners'\nimport { TokenResult } from '../../libs/portfolio'\nimport { getTokenAmount } from '../../libs/portfolio/helpers'\nimport {\n  convertPortfolioTokenToSocketAPIToken,\n  getActiveRoutesForAccount,\n  getIsBridgeTxn,\n  getIsTokenEligibleForSwapAndBridge,\n  getQuoteRouteSteps,\n  sortPortfolioTokenList,\n  sortTokenListResponse\n} from '../../libs/swapAndBridge/swapAndBridge'\nimport { getHumanReadableSwapAndBridgeError } from '../../libs/swapAndBridge/swapAndBridgeErrorHumanizer'\nimport { getSanitizedAmount } from '../../libs/transfer/amount'\nimport { normalizeIncomingSocketToken, SocketAPI } from '../../services/socket/api'\nimport { ZERO_ADDRESS } from '../../services/socket/constants'\nimport { validateSendTransferAmount } from '../../services/validations/validate'\nimport formatDecimals from '../../utils/formatDecimals/formatDecimals'\nimport { convertTokenPriceToBigInt } from '../../utils/numbers/formatters'\nimport wait from '../../utils/wait'\nimport { AccountOpAction, ActionsController } from '../actions/actions'\nimport { ActivityController } from '../activity/activity'\nimport EventEmitter, { Statuses } from '../eventEmitter/eventEmitter'\nimport { InviteController } from '../invite/invite'\nimport { NetworksController } from '../networks/networks'\nimport { SelectedAccountController } from '../selectedAccount/selectedAccount'\n\nconst HARD_CODED_CURRENCY = 'usd'\n\nconst CONVERSION_PRECISION = 16\nconst CONVERSION_PRECISION_POW = BigInt(10 ** CONVERSION_PRECISION)\n\nconst NETWORK_MISMATCH_MESSAGE =\n  'Swap & Bridge network configuration mismatch. Please try again or contact Ambire support.'\n\nexport enum SwapAndBridgeFormStatus {\n  Empty = 'empty',\n  Invalid = 'invalid',\n  FetchingRoutes = 'fetching-routes',\n  NoRoutesFound = 'no-routes-found',\n  InvalidRouteSelected = 'invalid-route-selected',\n  ReadyToSubmit = 'ready-to-submit'\n}\n\nconst STATUS_WRAPPED_METHODS = {\n  addToTokenByAddress: 'INITIAL'\n} as const\n\nconst SUPPORTED_CHAINS_CACHE_THRESHOLD = 1000 * 60 * 60 * 24 // 1 day\nconst TO_TOKEN_LIST_CACHE_THRESHOLD = 1000 * 60 * 60 * 4 // 4 hours\n\nconst PROTOCOLS_WITH_CONTRACT_FEE_IN_NATIVE = [\n  'stargate',\n  'stargate-v2',\n  'arbitrum-bridge',\n  'zksync-native'\n]\n\n/**\n * The Swap and Bridge controller is responsible for managing the state and\n * logic related to swapping and bridging tokens across different networks.\n * Key responsibilities:\n *  - Initially setting up the swap and bridge form with the necessary data.\n *  - Managing form state for token swap and bridge operations (including user preferences).\n *  - Fetching and updating token lists (from and to).\n *  - Fetching and updating quotes for token swaps and bridges.\n *  - Manages token active routes\n */\nexport class SwapAndBridgeController extends EventEmitter {\n  #selectedAccount: SelectedAccountController\n\n  #networks: NetworksController\n\n  #actions: ActionsController\n\n  #activity: ActivityController\n\n  #invite: InviteController\n\n  #storage: Storage\n\n  #socketAPI: SocketAPI\n\n  #activeRoutes: ActiveRoute[] = []\n\n  statuses: Statuses<keyof typeof STATUS_WRAPPED_METHODS> = STATUS_WRAPPED_METHODS\n\n  updateQuoteStatus: 'INITIAL' | 'LOADING' = 'INITIAL'\n\n  #updateToTokenListThrottle: {\n    time: number\n    throttled: boolean\n    shouldReset: boolean\n    addressToSelect?: string\n  } = {\n    time: 0,\n    shouldReset: true,\n    throttled: false\n  }\n\n  #updateQuoteId?: string\n\n  #updateQuoteTimeout?: ReturnType<typeof setTimeout>\n\n  updateToTokenListStatus: 'INITIAL' | 'LOADING' = 'INITIAL'\n\n  sessionIds: string[] = []\n\n  fromChainId: number | null = 1\n\n  fromSelectedToken: TokenResult | null = null\n\n  fromAmount: string = ''\n\n  fromAmountInFiat: string = ''\n\n  fromAmountFieldMode: 'fiat' | 'token' = 'token'\n\n  toChainId: number | null = 1\n\n  toSelectedToken: SwapAndBridgeToToken | null = null\n\n  quote: SocketAPIQuote | null = null\n\n  quoteRoutesStatuses: { [key: string]: { status: string } } = {}\n\n  portfolioTokenList: TokenResult[] = []\n\n  isTokenListLoading: boolean = false\n\n  /**\n   * Needed to efficiently manage and cache token lists for different chain\n   * combinations (fromChainId and toChainId) without having to fetch them\n   * repeatedly from the API. Moreover, this way tokens added to a list by\n   * address are also cached for sometime.\n   */\n  #cachedToTokenLists: CachedToTokenLists = {}\n\n  #toTokenList: SwapAndBridgeToToken[] = []\n\n  /**\n   * Similar to the `#cachedToTokenLists`, this helps in avoiding repeated API\n   * calls to fetch the supported chains from our service provider.\n   */\n  #cachedSupportedChains: CachedSupportedChains = { lastFetched: 0, data: [] }\n\n  routePriority: 'output' | 'time' = 'output'\n\n  // Holds the initial load promise, so that one can wait until it completes\n  #initialLoadPromise: Promise<void>\n\n  #shouldDebounceFlags: { [key: string]: boolean } = {}\n\n  constructor({\n    selectedAccount,\n    networks,\n    activity,\n    socketAPI,\n    storage,\n    actions,\n    invite\n  }: {\n    selectedAccount: SelectedAccountController\n    networks: NetworksController\n    activity: ActivityController\n    socketAPI: SocketAPI\n    storage: Storage\n    actions: ActionsController\n    invite: InviteController\n  }) {\n    super()\n    this.#selectedAccount = selectedAccount\n    this.#networks = networks\n    this.#activity = activity\n    this.#socketAPI = socketAPI\n    this.#storage = storage\n    this.#actions = actions\n    this.#invite = invite\n\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.#initialLoadPromise = this.#load()\n  }\n\n  #emitUpdateIfNeeded() {\n    const shouldSkipUpdate =\n      // No need to emit emit updates if there are no active sessions\n      !this.sessionIds.length &&\n      // but ALSO there are no active routes (otherwise, banners need the updates)\n      !this.activeRoutes.length\n    if (shouldSkipUpdate) return\n\n    super.emitUpdate()\n  }\n\n  async #load() {\n    await this.#networks.initialLoadPromise\n    await this.#selectedAccount.initialLoadPromise\n\n    this.activeRoutes = await this.#storage.get('swapAndBridgeActiveRoutes', [])\n\n    this.#selectedAccount.onUpdate(() => {\n      this.#debounceFunctionCallsOnSameTick('updateFormOnSelectedAccountUpdate', () => {\n        if (this.#selectedAccount.portfolio.isAllReady) {\n          this.isTokenListLoading = false\n          this.updatePortfolioTokenList(this.#selectedAccount.portfolio.tokens)\n          // To token list includes selected account portfolio tokens, it should get an update too\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          this.updateToTokenList(false)\n        }\n      })\n    })\n    this.#emitUpdateIfNeeded()\n  }\n\n  // The token in portfolio is the source of truth for the amount, it updates\n  // on every balance (pending or anything) change.\n  #getFromSelectedTokenInPortfolio = () =>\n    this.portfolioTokenList.find(\n      (t) =>\n        t.address === this.fromSelectedToken?.address &&\n        t.networkId === this.fromSelectedToken?.networkId &&\n        getIsTokenEligibleForSwapAndBridge(t)\n    )\n\n  get maxFromAmount(): string {\n    const tokenRef = this.#getFromSelectedTokenInPortfolio() || this.fromSelectedToken\n    if (!tokenRef || getTokenAmount(tokenRef) === 0n || typeof tokenRef.decimals !== 'number')\n      return '0'\n\n    return formatUnits(getTokenAmount(tokenRef), tokenRef.decimals)\n  }\n\n  get maxFromAmountInFiat(): string {\n    const tokenRef = this.#getFromSelectedTokenInPortfolio() || this.fromSelectedToken\n    if (!tokenRef || getTokenAmount(tokenRef) === 0n) return '0'\n\n    const tokenPrice = tokenRef?.priceIn.find((p) => p.baseCurrency === HARD_CODED_CURRENCY)?.price\n    if (!tokenPrice || !Number(this.maxFromAmount)) return '0'\n\n    const maxAmount = getTokenAmount(tokenRef)\n    const { tokenPriceBigInt, tokenPriceDecimals } = convertTokenPriceToBigInt(tokenPrice)\n\n    // Multiply the max amount by the token price. The calculation is done in big int to avoid precision loss\n    return formatUnits(\n      BigInt(maxAmount) * tokenPriceBigInt,\n      // Shift the decimal point by the number of decimals in the token price\n      tokenRef.decimals + tokenPriceDecimals\n    )\n  }\n\n  get isFormEmpty() {\n    return (\n      !this.fromChainId ||\n      !this.toChainId ||\n      !this.fromAmount ||\n      !this.fromSelectedToken ||\n      !this.toSelectedToken\n    )\n  }\n\n  get formStatus() {\n    if (this.isFormEmpty) return SwapAndBridgeFormStatus.Empty\n    if (this.validateFromAmount.message) return SwapAndBridgeFormStatus.Invalid\n    if (this.updateQuoteStatus !== 'INITIAL' && !this.quote)\n      return SwapAndBridgeFormStatus.FetchingRoutes\n    if (!this.quote?.selectedRoute) return SwapAndBridgeFormStatus.NoRoutesFound\n\n    if (this.quote?.selectedRoute?.errorMessage) return SwapAndBridgeFormStatus.InvalidRouteSelected\n\n    return SwapAndBridgeFormStatus.ReadyToSubmit\n  }\n\n  get validateFromAmount() {\n    if (!this.fromSelectedToken) return { success: false, message: '' }\n\n    if (\n      !this.isFormEmpty &&\n      !this.quote &&\n      Object.values(this.quoteRoutesStatuses).some((val) => val.status === 'MIN_AMOUNT_NOT_MET')\n    ) {\n      return {\n        success: true,\n        message: '🔔 A route was found for this pair but the minimum token amount was not met.'\n      }\n    }\n\n    return validateSendTransferAmount(\n      this.fromAmount,\n      Number(this.maxFromAmount),\n      Number(this.maxFromAmountInFiat),\n      this.fromSelectedToken\n    )\n  }\n\n  get activeRoutesInProgress() {\n    return this.activeRoutes.filter((r) => r.routeStatus === 'in-progress' && r.userTxHash)\n  }\n\n  get activeRoutes() {\n    return this.#activeRoutes\n  }\n\n  set activeRoutes(value: ActiveRoute[]) {\n    this.#activeRoutes = value\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.#storage.set('swapAndBridgeActiveRoutes', value)\n  }\n\n  get isSwitchFromAndToTokensEnabled() {\n    if (!this.toSelectedToken) return false\n    if (!this.portfolioTokenList.length) return false\n\n    const toSelectedTokenNetwork = this.#networks.networks.find(\n      (n) => Number(n.chainId) === this.toChainId\n    )!\n\n    return !!this.portfolioTokenList.find(\n      (token: TokenResult) =>\n        token.address === this.toSelectedToken!.address &&\n        token.networkId === toSelectedTokenNetwork.id\n    )\n  }\n\n  get shouldEnableRoutesSelection() {\n    return (\n      !!this.quote &&\n      !!this.quote.routes &&\n      this.quote.routes.length > 1 &&\n      this.updateQuoteStatus !== 'LOADING'\n    )\n  }\n\n  async initForm(sessionId: string) {\n    await this.#initialLoadPromise\n\n    if (this.sessionIds.includes(sessionId)) return\n\n    // reset only if there are no other instances opened/active\n    if (!this.sessionIds.length) {\n      this.resetForm() // clear prev session form state\n      // for each new session remove the completed activeRoutes from the previous session\n      this.activeRoutes = this.activeRoutes.filter((r) => r.routeStatus !== 'completed')\n      // remove activeRoutes errors from the previous session\n      this.activeRoutes.forEach((r) => {\n        if (r.routeStatus !== 'failed') {\n          // eslint-disable-next-line no-param-reassign\n          delete r.error\n        }\n      })\n      if (this.activeRoutes.length) {\n        // Otherwise there may be an emitUpdate with [] tokens\n        this.isTokenListLoading = true\n\n        // update the activeRoute.route prop for the new session\n        this.activeRoutes.forEach((r) => {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          this.updateActiveRoute(r.activeRouteId, undefined, true)\n        })\n      }\n    }\n\n    this.sessionIds.push(sessionId)\n    // do not await the health status check to prevent UI freeze while fetching\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.#socketAPI.updateHealth()\n    this.updatePortfolioTokenList(this.#selectedAccount.portfolio.tokens)\n    this.isTokenListLoading = false\n    // Do not await on purpose as it's not critical for the controller state to be ready\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.#fetchSupportedChainsIfNeeded()\n    this.#emitUpdateIfNeeded()\n  }\n\n  get isHealthy() {\n    return this.#socketAPI.isHealthy\n  }\n\n  #fetchSupportedChainsIfNeeded = async () => {\n    const shouldNotReFetchSupportedChains =\n      this.#cachedSupportedChains.data.length &&\n      Date.now() - this.#cachedSupportedChains.lastFetched < SUPPORTED_CHAINS_CACHE_THRESHOLD\n    if (shouldNotReFetchSupportedChains) return\n\n    try {\n      const supportedChainsResponse = await this.#socketAPI.getSupportedChains()\n\n      this.#cachedSupportedChains = {\n        lastFetched: Date.now(),\n        data: supportedChainsResponse.filter((c) => c.sendingEnabled && c.receivingEnabled)\n      }\n      this.#emitUpdateIfNeeded()\n    } catch (error: any) {\n      // Fail silently, as this is not a critical feature, Swap & Bridge is still usable\n      this.emitError({ error, level: 'silent', message: error?.message })\n    }\n  }\n\n  get supportedChainIds(): Network['chainId'][] {\n    return this.#cachedSupportedChains.data.map((c) => BigInt(c.chainId))\n  }\n\n  get #toTokenListKey(): CachedTokenListKey | null {\n    if (this.fromChainId === null || this.toChainId === null) return null\n\n    return `from-${this.fromChainId}-to-${this.toChainId}`\n  }\n\n  unloadScreen(sessionId: string) {\n    this.sessionIds = this.sessionIds.filter((id) => id !== sessionId)\n    if (!this.sessionIds.length) {\n      this.resetForm(true)\n      // Reset health to prevent the error state from briefly flashing\n      // before the next health check resolves when the Swap & Bridge\n      // screen is opened after a some time\n      this.#socketAPI.resetHealth()\n    }\n  }\n\n  updateForm(props: {\n    fromAmount?: string\n    fromAmountInFiat?: string\n    fromAmountFieldMode?: 'fiat' | 'token'\n    fromSelectedToken?: TokenResult | null\n    toChainId?: bigint | number\n    toSelectedToken?: SocketAPIToken | null\n    routePriority?: 'output' | 'time'\n  }) {\n    const {\n      fromAmount,\n      fromAmountInFiat,\n      fromAmountFieldMode,\n      fromSelectedToken,\n      toChainId,\n      toSelectedToken,\n      routePriority\n    } = props\n\n    if (fromAmount !== undefined) {\n      this.fromAmount = fromAmount\n      ;(() => {\n        if (fromAmount === '') {\n          this.fromAmountInFiat = ''\n          return\n        }\n        const tokenPrice = this.fromSelectedToken?.priceIn.find(\n          (p) => p.baseCurrency === HARD_CODED_CURRENCY\n        )?.price\n\n        if (!tokenPrice) {\n          this.fromAmountInFiat = ''\n          return\n        }\n\n        if (\n          this.fromAmountFieldMode === 'fiat' &&\n          typeof this.fromSelectedToken?.decimals === 'number'\n        ) {\n          this.fromAmountInFiat = fromAmount\n\n          // Get the number of decimals\n          const amountInFiatDecimals = fromAmount.split('.')[1]?.length || 0\n          const { tokenPriceBigInt, tokenPriceDecimals } = convertTokenPriceToBigInt(tokenPrice)\n\n          // Convert the numbers to big int\n          const amountInFiatBigInt = parseUnits(fromAmount, amountInFiatDecimals)\n\n          this.fromAmount = formatUnits(\n            (amountInFiatBigInt * CONVERSION_PRECISION_POW) / tokenPriceBigInt,\n            // Shift the decimal point by the number of decimals in the token price\n            amountInFiatDecimals + CONVERSION_PRECISION - tokenPriceDecimals\n          )\n\n          return\n        }\n        if (this.fromAmountFieldMode === 'token') {\n          this.fromAmount = fromAmount\n\n          if (!this.fromSelectedToken) return\n\n          const sanitizedFieldValue = getSanitizedAmount(\n            fromAmount,\n            this.fromSelectedToken.decimals\n          )\n          // Convert the field value to big int\n          const formattedAmount = parseUnits(sanitizedFieldValue, this.fromSelectedToken.decimals)\n\n          if (!formattedAmount) return\n\n          const { tokenPriceBigInt, tokenPriceDecimals } = convertTokenPriceToBigInt(tokenPrice)\n\n          this.fromAmountInFiat = formatUnits(\n            formattedAmount * tokenPriceBigInt,\n            // Shift the decimal point by the number of decimals in the token price\n            this.fromSelectedToken.decimals + tokenPriceDecimals\n          )\n        }\n      })()\n    }\n\n    if (fromAmountInFiat !== undefined) {\n      this.fromAmountInFiat = fromAmountInFiat\n    }\n\n    if (fromAmountFieldMode) {\n      this.fromAmountFieldMode = fromAmountFieldMode\n    }\n\n    if (fromSelectedToken) {\n      const isFromNetworkChanged =\n        this.fromSelectedToken?.networkId !== fromSelectedToken?.networkId\n      if (isFromNetworkChanged) {\n        const network = this.#networks.networks.find((n) => n.id === fromSelectedToken.networkId)\n        if (network) {\n          this.fromChainId = Number(network.chainId)\n          // defaults to swap after network change (should keep fromChainId and toChainId in sync after fromChainId update)\n          this.toChainId = Number(network.chainId)\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          this.updateToTokenList(true)\n        }\n      }\n\n      const shouldResetFromTokenAmount =\n        isFromNetworkChanged || this.fromSelectedToken?.address !== fromSelectedToken.address\n      if (shouldResetFromTokenAmount) {\n        this.fromAmount = ''\n        this.fromAmountInFiat = ''\n        this.fromAmountFieldMode = 'token'\n      }\n\n      // Always update to reflect portfolio amount (or other props) changes\n      this.fromSelectedToken = fromSelectedToken\n    }\n\n    if (toChainId) {\n      if (this.toChainId !== Number(toChainId)) {\n        this.toChainId = Number(toChainId)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.updateToTokenList(true)\n      }\n    }\n\n    if (toSelectedToken) {\n      this.toSelectedToken = toSelectedToken\n    }\n\n    if (routePriority) {\n      this.routePriority = routePriority\n      if (this.quote) {\n        this.quote = null\n        this.quoteRoutesStatuses = {}\n      }\n    }\n    this.updateQuote()\n\n    this.#emitUpdateIfNeeded()\n  }\n\n  resetForm(shouldEmit?: boolean) {\n    this.fromChainId = 1\n    this.fromSelectedToken = null\n    this.fromAmount = ''\n    this.fromAmountInFiat = ''\n    this.fromAmountFieldMode = 'token'\n    this.toChainId = 1\n    this.toSelectedToken = null\n    this.quote = null\n    this.quoteRoutesStatuses = {}\n    this.portfolioTokenList = []\n    this.#toTokenList = []\n\n    if (shouldEmit) this.#emitUpdateIfNeeded()\n  }\n\n  updatePortfolioTokenList(nextPortfolioTokenList: TokenResult[]) {\n    const tokens = nextPortfolioTokenList.filter(getIsTokenEligibleForSwapAndBridge)\n    this.portfolioTokenList = sortPortfolioTokenList(\n      // Filtering out hidden tokens here means: 1) They won't be displayed in\n      // the \"From\" token list (`this.portfolioTokenList`) and 2) They won't be\n      // added to the \"Receive\" token list as additional tokens from portfolio,\n      // BUT 3) They will appear in the \"Receive\" if they are present in service\n      // provider's to token list. This is the desired behavior.\n      tokens.filter((t) => !t.flags.isHidden)\n    )\n\n    const fromSelectedTokenInNextPortfolio = this.portfolioTokenList.find(\n      (t) =>\n        t.address === this.fromSelectedToken?.address &&\n        t.networkId === this.fromSelectedToken?.networkId\n    )\n\n    const shouldUpdateFromSelectedToken =\n      !this.fromSelectedToken || // initial (default) state\n      // May happen if selected account gets changed or the token gets send away in the meantime\n      !fromSelectedTokenInNextPortfolio ||\n      // May happen if user receives or sends the token in the meantime\n      fromSelectedTokenInNextPortfolio.amount !== this.fromSelectedToken?.amount\n\n    if (shouldUpdateFromSelectedToken) {\n      this.updateForm({\n        fromSelectedToken: fromSelectedTokenInNextPortfolio || this.portfolioTokenList[0] || null\n      })\n    } else {\n      this.#emitUpdateIfNeeded()\n    }\n  }\n\n  async updateToTokenList(shouldReset: boolean, addressToSelect?: string) {\n    const now = Date.now()\n    const timeSinceLastCall = now - this.#updateToTokenListThrottle.time\n    if (timeSinceLastCall <= 500) {\n      this.#updateToTokenListThrottle.shouldReset = shouldReset\n      this.#updateToTokenListThrottle.addressToSelect = addressToSelect\n\n      if (!this.#updateToTokenListThrottle.throttled) {\n        this.#updateToTokenListThrottle.throttled = true\n        await wait(500 - timeSinceLastCall)\n        this.#updateToTokenListThrottle.throttled = false\n        await this.updateToTokenList(\n          this.#updateToTokenListThrottle.shouldReset,\n          this.#updateToTokenListThrottle.addressToSelect\n        )\n      }\n      return\n    }\n    this.updateToTokenListStatus = 'LOADING'\n    this.#updateToTokenListThrottle.time = now\n    if (!this.fromChainId || !this.toChainId) return\n\n    if (shouldReset) {\n      this.#toTokenList = []\n      this.toSelectedToken = null\n      this.#emitUpdateIfNeeded()\n    }\n\n    try {\n      const toTokenListInCache =\n        this.#toTokenListKey && this.#cachedToTokenLists[this.#toTokenListKey]\n      let upToDateToTokenList: SocketAPIToken[] = toTokenListInCache?.data || []\n      const shouldFetchTokenList =\n        !upToDateToTokenList.length ||\n        now - (toTokenListInCache?.lastFetched || 0) >= TO_TOKEN_LIST_CACHE_THRESHOLD\n      if (shouldFetchTokenList) {\n        upToDateToTokenList = await this.#socketAPI.getToTokenList({\n          fromChainId: this.fromChainId,\n          toChainId: this.toChainId\n        })\n        if (this.#toTokenListKey)\n          this.#cachedToTokenLists[this.#toTokenListKey] = {\n            lastFetched: now,\n            data: upToDateToTokenList\n          }\n      }\n\n      const toTokenNetwork = this.#networks.networks.find(\n        (n) => Number(n.chainId) === this.toChainId\n      )\n      // should never happen\n      if (!toTokenNetwork) throw new SwapAndBridgeError(NETWORK_MISMATCH_MESSAGE)\n\n      const additionalTokensFromPortfolio = this.portfolioTokenList\n        .filter((t) => t.networkId === toTokenNetwork.id)\n        .filter((token) => !upToDateToTokenList.some((t) => t.address === token.address))\n        .map((t) => convertPortfolioTokenToSocketAPIToken(t, Number(toTokenNetwork.chainId)))\n\n      this.#toTokenList = sortTokenListResponse(\n        [...upToDateToTokenList, ...additionalTokensFromPortfolio],\n        this.portfolioTokenList.filter((t) => t.networkId === toTokenNetwork.id)\n      )\n\n      if (!this.toSelectedToken) {\n        if (addressToSelect) {\n          const token = this.#toTokenList.find((t) => t.address === addressToSelect)\n          if (token) {\n            this.updateForm({ toSelectedToken: token })\n            this.updateToTokenListStatus = 'INITIAL'\n            this.#emitUpdateIfNeeded()\n            return\n          }\n        }\n      }\n    } catch (error: any) {\n      const { message } = getHumanReadableSwapAndBridgeError(error)\n      this.emitError({ error, level: 'major', message })\n    }\n    this.updateToTokenListStatus = 'INITIAL'\n    this.#emitUpdateIfNeeded()\n  }\n\n  get toTokenList(): SwapAndBridgeToToken[] {\n    const isSwapping = this.fromChainId === this.toChainId\n    if (isSwapping) {\n      // Swaps between same \"from\" and \"to\" tokens are not feasible, filter them out\n      return this.#toTokenList.filter((t) => t.address !== this.fromSelectedToken?.address)\n    }\n\n    return this.#toTokenList\n  }\n\n  async #addToTokenByAddress(address: string) {\n    if (!this.toChainId) return // should never happen\n    if (!isAddress(address)) return // no need to attempt with invalid addresses\n\n    const isAlreadyInTheList = this.#toTokenList.some((t) => t.address === address)\n    if (isAlreadyInTheList) return\n\n    let token: SocketAPIToken | null\n    try {\n      token = await this.#socketAPI.getToken({ address, chainId: this.toChainId })\n\n      if (!token)\n        throw new SwapAndBridgeError(\n          'Token with this address is not supported by our service provider.'\n        )\n    } catch (error: any) {\n      const { message } = getHumanReadableSwapAndBridgeError(error)\n      throw new EmittableError({ error, level: 'minor', message })\n    }\n\n    if (this.#toTokenListKey)\n      // Cache for sometime the tokens added by address\n      this.#cachedToTokenLists[this.#toTokenListKey]?.data.push(token)\n\n    const toTokenNetwork = this.#networks.networks.find((n) => Number(n.chainId) === this.toChainId)\n    // should never happen\n    if (!toTokenNetwork) {\n      const error = new SwapAndBridgeError(NETWORK_MISMATCH_MESSAGE)\n      throw new EmittableError({ error, level: 'minor', message: error?.message })\n    }\n\n    const nextTokenList: SwapAndBridgeToToken[] = [...this.#toTokenList, token]\n\n    this.#toTokenList = sortTokenListResponse(\n      nextTokenList,\n      this.portfolioTokenList.filter((t) => t.networkId === toTokenNetwork.id)\n    )\n\n    this.#emitUpdateIfNeeded()\n    return token\n  }\n\n  addToTokenByAddress = async (address: string) =>\n    this.withStatus('addToTokenByAddress', () => this.#addToTokenByAddress(address), true)\n\n  async switchFromAndToTokens() {\n    if (!this.isSwitchFromAndToTokensEnabled) return\n    const currentFromSelectedToken = { ...this.fromSelectedToken }\n\n    const toSelectedTokenNetwork = this.#networks.networks.find(\n      (n) => Number(n.chainId) === this.toChainId\n    )!\n    this.fromSelectedToken = this.portfolioTokenList.find(\n      (token: TokenResult) =>\n        token.address === this.toSelectedToken!.address &&\n        token.networkId === toSelectedTokenNetwork.id\n    )!\n    this.fromAmount = '' // Reset fromAmount as it may no longer be valid for the new fromSelectedToken\n    // Reverses the from and to chain ids, since their format is the same\n    ;[this.fromChainId, this.toChainId] = [this.toChainId, this.fromChainId]\n    await this.updateToTokenList(true, currentFromSelectedToken.address)\n  }\n\n  async updateQuote(\n    options: {\n      skipQuoteUpdateOnSameValues?: boolean\n      skipPreviousQuoteRemoval?: boolean\n      skipStatusUpdate?: boolean\n    } = {\n      skipQuoteUpdateOnSameValues: true,\n      skipPreviousQuoteRemoval: false,\n      skipStatusUpdate: false\n    }\n  ) {\n    const quoteId = uuidv4()\n    this.#updateQuoteId = quoteId\n\n    const updateQuoteFunction = async () => {\n      if (!this.#selectedAccount.account) return\n      if (!this.fromAmount) return\n\n      const sanitizedFromAmount = getSanitizedAmount(\n        this.fromAmount,\n        this.fromSelectedToken!.decimals\n      )\n\n      const bigintFromAmount = parseUnits(sanitizedFromAmount, this.fromSelectedToken!.decimals)\n\n      if (this.quote) {\n        const isFromAmountSame = this.quote.selectedRoute.fromAmount === bigintFromAmount.toString()\n        const isFromNetworkSame = this.quote.fromChainId === this.fromChainId\n        const isFromAddressSame = this.quote.fromAsset.address === this.fromSelectedToken!.address\n        const isToNetworkSame = this.quote.toChainId === this.toChainId\n        const isToAddressSame = this.quote.toAsset.address === this.toSelectedToken!.address\n\n        if (\n          options.skipQuoteUpdateOnSameValues &&\n          isFromAmountSame &&\n          isFromNetworkSame &&\n          isFromAddressSame &&\n          isToNetworkSame &&\n          isToAddressSame\n        ) {\n          return\n        }\n      }\n      if (!options.skipPreviousQuoteRemoval) {\n        if (this.quote) this.quote = null\n        this.quoteRoutesStatuses = {}\n        this.#emitUpdateIfNeeded()\n      }\n\n      try {\n        const quoteResult = await this.#socketAPI.quote({\n          fromChainId: this.fromChainId!,\n          fromTokenAddress: this.fromSelectedToken!.address,\n          toChainId: this.toChainId!,\n          toTokenAddress: this.toSelectedToken!.address,\n          fromAmount: bigintFromAmount,\n          userAddress: this.#selectedAccount.account.addr,\n          isSmartAccount: isSmartAccount(this.#selectedAccount.account),\n          sort: this.routePriority,\n          isOG: this.#invite.isOG\n        })\n\n        if (quoteId !== this.#updateQuoteId) return\n\n        if (\n          this.#getIsFormValidToFetchQuote() &&\n          quoteResult &&\n          quoteResult?.routes?.[0] &&\n          quoteResult.fromChainId === this.fromChainId &&\n          quoteResult.toChainId === this.toChainId &&\n          quoteResult.toAsset.address === this.toSelectedToken?.address\n        ) {\n          let routeToSelect\n          let routeToSelectSteps\n          let routes = quoteResult.routes || []\n\n          try {\n            routes = routes.map((route) => {\n              if (!route.userTxs) return route\n\n              const bridgeTx = route.userTxs.find((tx) => getIsBridgeTxn(tx.userTxType)) as\n                | SocketAPIBridgeUserTx\n                | undefined\n\n              if (!bridgeTx) return route\n\n              const bridgeStep = bridgeTx.steps.find((s) => s.type === 'bridge') as\n                | SocketApiBridgeStep\n                | undefined\n\n              if (!bridgeStep) return route\n              if (bridgeStep.protocolFees.amount === '0') return route\n\n              const normalizedProtocolFeeToken = normalizeIncomingSocketToken(\n                bridgeStep.protocolFees.asset\n              )\n              const doesProtocolRequireExtraContractFeeInNative =\n                PROTOCOLS_WITH_CONTRACT_FEE_IN_NATIVE.includes(bridgeStep.protocol.name) &&\n                // When other tokens than the native ones are being bridged,\n                // Socket API takes the fee directly from the \"From\" amount.\n                normalizedProtocolFeeToken.address === ZERO_ADDRESS\n              if (!doesProtocolRequireExtraContractFeeInNative) return route\n\n              const protocolFeeTokenNetwork = this.#networks.networks.find(\n                (n) => Number(n.chainId) === normalizedProtocolFeeToken.chainId\n              )!\n              const isTokenToPayFeeWithTheSameAsFromToken =\n                this.fromSelectedToken?.address === normalizedProtocolFeeToken.address &&\n                this.fromChainId === normalizedProtocolFeeToken.chainId\n\n              const tokenToPayFeeWith = this.portfolioTokenList.find((t) => {\n                return (\n                  t.address === normalizedProtocolFeeToken.address &&\n                  t.networkId === protocolFeeTokenNetwork.id\n                )\n              })\n\n              const protocolFeeTokenDecimals = bridgeStep.protocolFees.asset.decimals\n              const portfolioTokenToPayFeeWithDecimals = tokenToPayFeeWith\n                ? tokenToPayFeeWith.decimals\n                : protocolFeeTokenDecimals\n              const fromAmountNumber = Number(this.fromAmount)\n              const fromAmountScaledToTokenToPayFeeWithDecimals = BigInt(\n                Math.round(fromAmountNumber * 10 ** portfolioTokenToPayFeeWithDecimals)\n              )\n\n              const tokenToPayFeeWithScaledToPortfolioTokenToPayFeeWithDecimals = tokenToPayFeeWith\n                ? // Scale tokenToPayFeeWith to the same decimals as portfolioTokenToPayFeeWithDecimals\n                  tokenToPayFeeWith.amount *\n                  BigInt(10 ** (protocolFeeTokenDecimals - portfolioTokenToPayFeeWithDecimals))\n                : BigInt(0)\n\n              const availableAfterSubtractionScaledToPortfolioTokenToPayFeeWithDecimals =\n                isTokenToPayFeeWithTheSameAsFromToken\n                  ? tokenToPayFeeWithScaledToPortfolioTokenToPayFeeWithDecimals -\n                    fromAmountScaledToTokenToPayFeeWithDecimals\n                  : tokenToPayFeeWithScaledToPortfolioTokenToPayFeeWithDecimals\n\n              const protocolFeesAmountScaledToPortfolioTokenToPayFeeWithDecimals = BigInt(\n                Math.round(\n                  Number(bridgeStep.protocolFees.amount) *\n                    10 ** (portfolioTokenToPayFeeWithDecimals - protocolFeeTokenDecimals)\n                )\n              )\n              const hasEnoughAmountToPayFee =\n                availableAfterSubtractionScaledToPortfolioTokenToPayFeeWithDecimals >=\n                protocolFeesAmountScaledToPortfolioTokenToPayFeeWithDecimals\n\n              if (!hasEnoughAmountToPayFee) {\n                const protocolName = bridgeStep.protocol.displayName\n                const insufficientTokenSymbol = bridgeStep.protocolFees.asset.symbol\n                const insufficientTokenNetwork = protocolFeeTokenNetwork.name\n                const insufficientAssetAmount = formatUnits(\n                  bridgeStep.protocolFees.amount,\n                  bridgeStep.protocolFees.asset.decimals\n                )\n                const insufficientAssetAmountInUsd = formatDecimals(\n                  bridgeStep.protocolFees.feesInUsd,\n                  'value'\n                )\n\n                // Trick to show the error message on the UI, as the API doesn't handle this\n                // eslint-disable-next-line no-param-reassign\n                route.errorMessage = `Insufficient ${insufficientTokenSymbol} on ${insufficientTokenNetwork}. You need ${insufficientAssetAmount} ${insufficientTokenSymbol} (${insufficientAssetAmountInUsd}) on ${insufficientTokenNetwork} to cover the ${protocolName} protocol fee for this route.`\n              }\n\n              return route\n            })\n\n            routes = routes.sort((a, b) => Number(!!a.errorMessage) - Number(!!b.errorMessage))\n          } catch (error) {\n            // if the filtration fails for some reason continue with the original routes\n            // array without interrupting the rest of the logic\n            console.error(error)\n          }\n\n          if (!routes.length) {\n            this.quote = null\n            return\n          }\n\n          const alreadySelectedRoute = routes.find((nextRoute) => {\n            if (!this.quote) return false\n\n            // Because we only have routes with unique bridges (bridging case)\n            const selectedRouteUsedBridge = this.quote.selectedRoute.usedBridgeNames?.[0]\n            if (selectedRouteUsedBridge)\n              return nextRoute.usedBridgeNames?.[0] === selectedRouteUsedBridge\n\n            // Assuming to only have routes with unique DEXes (swapping case)\n            const selectedRouteUsedDex = this.quote.selectedRoute.usedDexName\n            if (selectedRouteUsedDex) return nextRoute.usedDexName === selectedRouteUsedDex\n\n            return false // should never happen, but just in case of bad data\n          })\n\n          if (alreadySelectedRoute) {\n            routeToSelect = alreadySelectedRoute\n            routeToSelectSteps = getQuoteRouteSteps(alreadySelectedRoute.userTxs)\n          } else {\n            const bestRoute =\n              this.routePriority === 'output'\n                ? routes[0] // API returns highest output first\n                : routes[routes.length - 1] // API returns fastest... last\n            routeToSelect = bestRoute\n            routeToSelectSteps = getQuoteRouteSteps(bestRoute.userTxs)\n          }\n\n          this.quote = {\n            fromAsset: quoteResult.fromAsset,\n            fromChainId: quoteResult.fromChainId,\n            toAsset: quoteResult.toAsset,\n            toChainId: quoteResult.toChainId,\n            selectedRoute: routeToSelect,\n            selectedRouteSteps: routeToSelectSteps,\n            routes\n          }\n        }\n        this.quoteRoutesStatuses = (quoteResult as any).bridgeRouteErrors || {}\n      } catch (error: any) {\n        const { message } = getHumanReadableSwapAndBridgeError(error)\n        this.emitError({ error, level: 'major', message })\n      }\n    }\n\n    if (!this.#getIsFormValidToFetchQuote()) {\n      if (this.quote || this.quoteRoutesStatuses) {\n        this.quote = null\n        this.quoteRoutesStatuses = {}\n        this.#emitUpdateIfNeeded()\n      }\n      return\n    }\n\n    let nextTimeout = 400 // timeout when there is no pending quote update\n    if (this.#updateQuoteTimeout) {\n      nextTimeout = 1000 // timeout when there is a pending quote update\n      clearTimeout(this.#updateQuoteTimeout)\n      this.#updateQuoteTimeout = undefined\n    }\n\n    if (!options.skipStatusUpdate && !this.quote) {\n      this.updateQuoteStatus = 'LOADING'\n      this.#emitUpdateIfNeeded()\n    }\n\n    this.#updateQuoteTimeout = setTimeout(async () => {\n      if (!options.skipStatusUpdate && !!this.quote) {\n        this.updateQuoteStatus = 'LOADING'\n        this.#emitUpdateIfNeeded()\n      }\n\n      await updateQuoteFunction()\n\n      if (quoteId !== this.#updateQuoteId) return\n\n      this.updateQuoteStatus = 'INITIAL'\n      this.#emitUpdateIfNeeded()\n      clearTimeout(this.#updateQuoteTimeout)\n      this.#updateQuoteTimeout = undefined\n    }, nextTimeout)\n  }\n\n  async getRouteStartUserTx() {\n    if (this.formStatus !== SwapAndBridgeFormStatus.ReadyToSubmit) return\n\n    try {\n      const routeResult = await this.#socketAPI.startRoute({\n        fromChainId: this.quote!.fromChainId,\n        fromAssetAddress: this.quote!.fromAsset.address,\n        toChainId: this.quote!.toChainId,\n        toAssetAddress: this.quote!.toAsset.address,\n        route: this.quote!.selectedRoute\n      })\n\n      return routeResult\n    } catch (error: any) {\n      const { message } = getHumanReadableSwapAndBridgeError(error)\n      throw new EmittableError({ error, level: 'minor', message })\n    }\n  }\n\n  async getNextRouteUserTx(activeRouteId: number) {\n    try {\n      const route = await this.#socketAPI.getNextRouteUserTx(activeRouteId)\n      return route\n    } catch (error: any) {\n      const { message } = getHumanReadableSwapAndBridgeError(error)\n      throw new EmittableError({ error, level: 'minor', message })\n    }\n  }\n\n  async checkForNextUserTxForActiveRoutes() {\n    await this.#initialLoadPromise\n    const fetchAndUpdateRoute = async (activeRoute: ActiveRoute) => {\n      let status: SocketRouteStatus = null\n      const broadcastedButNotConfirmed = this.#activity.broadcastedButNotConfirmed.find((op) =>\n        op.calls.some((c) => c.fromUserRequestId === activeRoute.activeRouteId)\n      )\n\n      // call getRouteStatus only after the transaction has processed\n      if (broadcastedButNotConfirmed) return\n      if (activeRoute.routeStatus === 'completed') return\n\n      try {\n        status = await this.#socketAPI.getRouteStatus({\n          activeRouteId: activeRoute.activeRouteId,\n          userTxIndex: activeRoute.userTxIndex,\n          txHash: activeRoute.userTxHash!\n        })\n      } catch (e: any) {\n        const { message } = getHumanReadableSwapAndBridgeError(e)\n        this.updateActiveRoute(activeRoute.activeRouteId, { error: message })\n        return\n      }\n\n      const route = this.activeRoutes.find((r) => r.activeRouteId === activeRoute.activeRouteId)\n      if (route?.error) {\n        this.updateActiveRoute(activeRoute.activeRouteId, {\n          error: undefined\n        })\n      }\n\n      if (status === 'completed') {\n        this.updateActiveRoute(\n          activeRoute.activeRouteId,\n          {\n            routeStatus: 'completed',\n            error: undefined\n          },\n          true\n        )\n      } else if (status === 'ready') {\n        this.updateActiveRoute(\n          activeRoute.activeRouteId,\n          {\n            routeStatus: 'ready',\n            error: undefined\n          },\n          true\n        )\n      }\n    }\n\n    await Promise.all(\n      this.activeRoutesInProgress.map(async (route) => {\n        await fetchAndUpdateRoute(route)\n      })\n    )\n  }\n\n  selectRoute(route: SocketAPIRoute) {\n    if (!this.quote || !this.quote.routes.length || !this.shouldEnableRoutesSelection) return\n    if (\n      ![\n        SwapAndBridgeFormStatus.ReadyToSubmit,\n        SwapAndBridgeFormStatus.InvalidRouteSelected\n      ].includes(this.formStatus)\n    )\n      return\n\n    this.quote.selectedRoute = route\n    this.quote.selectedRouteSteps = getQuoteRouteSteps(route.userTxs)\n\n    this.#emitUpdateIfNeeded()\n  }\n\n  async addActiveRoute(activeRoute: {\n    activeRouteId: SocketAPISendTransactionRequest['activeRouteId']\n    userTxIndex: SocketAPISendTransactionRequest['userTxIndex']\n  }) {\n    await this.#initialLoadPromise\n\n    try {\n      const route = await this.#socketAPI.updateActiveRoute(activeRoute.activeRouteId)\n      this.activeRoutes.push({\n        ...activeRoute,\n        routeStatus: 'ready',\n        userTxHash: null,\n        route\n      })\n\n      // Preserve key form states instead of resetting the whole form to enhance UX and reduce confusion.\n      // After form submission, maintain the state for fromSelectedToken, fromChainId, and toChainId,\n      // while resetting all other state related to the form.\n      this.fromAmount = ''\n      this.fromAmountInFiat = ''\n      this.fromAmountFieldMode = 'token'\n      this.toSelectedToken = null\n      this.quote = null\n      this.quoteRoutesStatuses = {}\n\n      this.emitUpdate()\n    } catch (error: any) {\n      const { message } = getHumanReadableSwapAndBridgeError(error)\n      throw new EmittableError({ error, level: 'major', message })\n    }\n  }\n\n  updateActiveRoute(\n    activeRouteId: SocketAPISendTransactionRequest['activeRouteId'],\n    activeRoute?: Partial<ActiveRoute>,\n    forceUpdateRoute?: boolean\n  ) {\n    const currentActiveRoutes = [...this.activeRoutes]\n    const activeRouteIndex = currentActiveRoutes.findIndex((r) => r.activeRouteId === activeRouteId)\n\n    if (activeRouteIndex !== -1) {\n      if (forceUpdateRoute) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        ;(async () => {\n          let route = currentActiveRoutes[activeRouteIndex].route\n          route = await this.#socketAPI.updateActiveRoute(activeRouteId)\n          this.updateActiveRoute(activeRouteId, { route })\n        })()\n      }\n\n      if (activeRoute) {\n        currentActiveRoutes[activeRouteIndex] = {\n          ...currentActiveRoutes[activeRouteIndex],\n          ...activeRoute\n        }\n      } else {\n        currentActiveRoutes[activeRouteIndex] = { ...currentActiveRoutes[activeRouteIndex] }\n      }\n      this.activeRoutes = currentActiveRoutes\n\n      this.#emitUpdateIfNeeded()\n    }\n  }\n\n  removeActiveRoute(activeRouteId: SocketAPISendTransactionRequest['activeRouteId']) {\n    this.activeRoutes = this.activeRoutes.filter((r) => r.activeRouteId !== activeRouteId)\n\n    // Purposely not using `this.#emitUpdateIfNeeded()` here, as this should always emit to update banners\n    this.emitUpdate()\n  }\n\n  // update active route if needed on SubmittedAccountOp update\n  handleUpdateActiveRouteOnSubmittedAccountOpStatusUpdate(op: SubmittedAccountOp) {\n    op.calls.forEach((call) => {\n      this.#handleActiveRouteBroadcastedTransaction(call.fromUserRequestId, op.status)\n      this.#handleActiveRouteBroadcastedApproval(call.fromUserRequestId, op.status)\n      this.#handleActiveRoutesWithReadyApproval(call.fromUserRequestId, op.status)\n      this.#handleUpdateActiveRoutesUserTxId(call.fromUserRequestId, op.txnId)\n      this.#handleActiveRoutesCompleted(call.fromUserRequestId, op.status)\n    })\n  }\n\n  #handleActiveRouteBroadcastedTransaction(\n    fromUserRequestId: Call['fromUserRequestId'],\n    opStatus: SubmittedAccountOp['status']\n  ) {\n    if (opStatus !== AccountOpStatus.BroadcastedButNotConfirmed) return\n\n    const activeRoute = this.activeRoutes.find((r) => r.activeRouteId === fromUserRequestId)\n    if (!activeRoute) return\n\n    this.updateActiveRoute(activeRoute.activeRouteId, { routeStatus: 'in-progress' })\n  }\n\n  #handleActiveRouteBroadcastedApproval(\n    fromUserRequestId: Call['fromUserRequestId'],\n    opStatus: SubmittedAccountOp['status']\n  ) {\n    if (opStatus !== AccountOpStatus.BroadcastedButNotConfirmed) return\n\n    const activeRoute = this.activeRoutes.find(\n      (r) => `${r.activeRouteId}-approval` === fromUserRequestId\n    )\n    if (!activeRoute) return\n\n    this.updateActiveRoute(activeRoute.activeRouteId, {\n      routeStatus: 'waiting-approval-to-resolve'\n    })\n  }\n\n  #handleActiveRoutesWithReadyApproval(\n    fromUserRequestId: Call['fromUserRequestId'],\n    opStatus: SubmittedAccountOp['status']\n  ) {\n    const activeRouteWaitingApproval = this.activeRoutes.find(\n      (r) =>\n        r.routeStatus === 'waiting-approval-to-resolve' &&\n        `${r.activeRouteId}-approval` === fromUserRequestId\n    )\n\n    if (!activeRouteWaitingApproval) return\n\n    if (opStatus === AccountOpStatus.Success) {\n      this.updateActiveRoute(activeRouteWaitingApproval.activeRouteId, {\n        routeStatus: 'ready'\n      })\n    }\n\n    if (opStatus === AccountOpStatus.Failure || opStatus === AccountOpStatus.Rejected) {\n      const errorMessage =\n        opStatus === AccountOpStatus.Rejected\n          ? 'The approval was rejected but you can try to sign it again'\n          : 'The approval failed but you can try to sign it again'\n      this.updateActiveRoute(activeRouteWaitingApproval.activeRouteId, {\n        routeStatus: 'ready',\n        error: errorMessage\n      })\n    }\n  }\n\n  #handleUpdateActiveRoutesUserTxId(\n    fromUserRequestId: Call['fromUserRequestId'],\n    opTxnId: SubmittedAccountOp['txnId']\n  ) {\n    const activeRoute = this.activeRoutes.find((r) => r.activeRouteId === fromUserRequestId)\n    if (!activeRoute) return\n\n    if (opTxnId && !activeRoute.userTxHash) {\n      this.updateActiveRoute(activeRoute.activeRouteId, { userTxHash: opTxnId })\n    }\n  }\n\n  #handleActiveRoutesCompleted(\n    fromUserRequestId: Call['fromUserRequestId'],\n    opStatus: SubmittedAccountOp['status']\n  ) {\n    const activeRoute = this.activeRoutes.find((r) => r.activeRouteId === fromUserRequestId)\n    if (!activeRoute) return\n\n    let shouldUpdateActiveRouteStatus = false\n    if (activeRoute.route.fromChainId === activeRoute.route.toChainId)\n      shouldUpdateActiveRouteStatus = true\n\n    if (activeRoute.route.currentUserTxIndex + 1 === activeRoute.route.totalUserTx) {\n      const tx = activeRoute.route.userTxs[activeRoute.route.currentUserTxIndex]\n      if (!tx) return\n\n      if (tx.userTxType === 'dex-swap') shouldUpdateActiveRouteStatus = true\n    }\n\n    if (!shouldUpdateActiveRouteStatus) return\n\n    if (opStatus === AccountOpStatus.Success) {\n      this.updateActiveRoute(activeRoute.activeRouteId, { routeStatus: 'completed' })\n    }\n\n    // If the transaction fails, update the status to \"ready\" to allow the user to sign it again\n    if (opStatus === AccountOpStatus.Failure || opStatus === AccountOpStatus.Rejected) {\n      const errorMessage =\n        opStatus === AccountOpStatus.Rejected\n          ? 'The transaction was rejected but you can try to sign it again'\n          : 'The transaction failed but you can try to sign it again'\n      this.updateActiveRoute(activeRoute.activeRouteId, {\n        routeStatus: 'ready',\n        error: errorMessage\n      })\n    }\n  }\n\n  onAccountChange() {\n    this.portfolioTokenList = []\n    this.isTokenListLoading = true\n\n    this.#emitUpdateIfNeeded()\n  }\n\n  #getIsFormValidToFetchQuote() {\n    return (\n      this.fromChainId &&\n      this.toChainId &&\n      this.fromAmount &&\n      this.fromSelectedToken &&\n      this.toSelectedToken &&\n      this.validateFromAmount.success\n    )\n  }\n\n  get banners() {\n    if (!this.#selectedAccount.account) return []\n\n    const activeRoutesForSelectedAccount = getActiveRoutesForAccount(\n      this.#selectedAccount.account.addr,\n      this.activeRoutes\n    )\n    const accountOpActions = this.#actions.visibleActionsQueue.filter(\n      ({ type }) => type === 'accountOp'\n    ) as AccountOpAction[]\n\n    // Swap banners aren't generated because swaps are completed instantly,\n    // thus the activity banner on broadcast is sufficient\n    return getBridgeBanners(\n      activeRoutesForSelectedAccount,\n      accountOpActions,\n      this.#networks.networks\n    )\n  }\n\n  #debounceFunctionCallsOnSameTick(funcName: string, func: Function) {\n    if (this.#shouldDebounceFlags[funcName]) return\n    this.#shouldDebounceFlags[funcName] = true\n\n    // Debounce multiple calls in the same tick and only execute one of them\n    setTimeout(() => {\n      this.#shouldDebounceFlags[funcName] = false\n      func()\n    }, 0)\n  }\n\n  toJSON() {\n    return {\n      ...this,\n      ...super.toJSON(),\n      toTokenList: this.toTokenList,\n      maxFromAmount: this.maxFromAmount,\n      maxFromAmountInFiat: this.maxFromAmountInFiat,\n      validateFromAmount: this.validateFromAmount,\n      isFormEmpty: this.isFormEmpty,\n      formStatus: this.formStatus,\n      activeRoutesInProgress: this.activeRoutesInProgress,\n      activeRoutes: this.activeRoutes,\n      isSwitchFromAndToTokensEnabled: this.isSwitchFromAndToTokensEnabled,\n      banners: this.banners,\n      isHealthy: this.isHealthy,\n      shouldEnableRoutesSelection: this.shouldEnableRoutesSelection,\n      supportedChainIds: this.supportedChainIds\n    }\n  }\n}\n"]}