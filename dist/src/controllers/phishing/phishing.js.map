{"version":3,"file":"phishing.js","sourceRoot":"","sources":["../../../../src/controllers/phishing/phishing.ts"],"names":[],"mappings":";;;;AAAA,8DAA4B;AAI5B,wFAAuD;AAIvD,MAAM,sBAAsB,GAC1B,6FAA6F,CAAA;AAE/F,MAAM,qBAAqB,GACzB,mFAAmF,CAAA;AAQ9E,MAAM,aAAa,GAAG,CAAC,MAAc,EAAE,EAAE;IAC9C,IAAI,CAAC;QACH,OAAO,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,CAAA;IACpC,CAAC;IAAC,OAAO,CAAC,EAAE,CAAC;QACX,MAAM,IAAI,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAA;IACzC,CAAC;AACH,CAAC,CAAA;AANY,QAAA,aAAa,iBAMzB;AAEM,MAAM,qBAAqB,GAAG,CAAC,MAAgB,EAAE,IAAc,EAAE,EAAE;IACxE,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC,MAAc,EAAE,EAAE;QAClC,MAAM,MAAM,GAAG,IAAA,qBAAa,EAAC,MAAM,CAAC,CAAA;QACpC,iDAAiD;QACjD,IAAI,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM;YAAE,OAAO,KAAK,CAAA;QAC/C,iDAAiD;QACjD,OAAO,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,IAAI,CAAC,CAAA;IAC9D,CAAC,CAAC,CAAA;AACJ,CAAC,CAAA;AARY,QAAA,qBAAqB,yBAQjC;AAED,MAAa,kBAAmB,SAAQ,sBAAY;IAClD,MAAM,CAAO;IAEb,QAAQ,CAAmB;IAE3B,cAAc,CAAe;IAE7B,UAAU,GAAa,EAAE,CAAA,CAAC,2BAA2B;IAErD,kBAAkB,GAAkB,IAAI,CAAA;IAExC,YAAY,GAA0B,SAAS,CAAA;IAE/C,0EAA0E;IAC1E,kBAAkB,CAAe;IAEjC,IAAI,iBAAiB;QACnB,OAAO,IAAI,CAAC,kBAAkB,CAAA;IAChC,CAAC;IAED,IAAI,eAAe;QACjB,OAAO,IAAI,CAAC,UAAU,CAAC,MAAM,CAAA;IAC/B,CAAC;IAED,YAAY,EACV,KAAK,EACL,OAAO,EACP,aAAa,EAKd;QACC,KAAK,EAAE,CAAA;QAEP,IAAI,CAAC,MAAM,GAAG,KAAK,CAAA;QACnB,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAA;QACvB,IAAI,CAAC,cAAc,GAAG,aAAa,CAAA;QAEnC,mEAAmE;QACnE,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,KAAK,EAAE,CAAA;IACxC,CAAC;IAED,KAAK,CAAC,KAAK;QACT,MAAM,uBAAuB,GAA4B,MAAM,IAAI,CAAC,QAAQ,CAAC,GAAG,CAC9E,mBAAmB,EACnB,IAAI,CACL,CAAA;QAED,IAAI,uBAAuB,EAAE,CAAC;YAC5B,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,IAAI,CAC1B,IAAI,GAAG,CAAC;gBACN,GAAG,uBAAuB,CAAC,iBAAiB;gBAC5C,GAAG,uBAAuB,CAAC,gBAAgB;aAC5C,CAAC,CACH,CAAA;QACH,CAAC;QACD,MAAM,IAAI,CAAC,OAAO,CAAC,uBAAuB,CAAC,CAAA;IAC7C,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,uBAAgD;QAC5D,IAAI,CAAC,YAAY,GAAG,SAAS,CAAA;QAC7B,IAAI,CAAC,UAAU,EAAE,CAAA;QAEjB,MAAM,OAAO,GAAG;YACd,MAAM,EAAE,iCAAiC;SACnC,CAAA;QACR,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,UAAU,CAAC;YACvC,IAAI,CAAC,MAAM,CAAC,sBAAsB,EAAE,OAAO,CAAC;iBACzC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;iBACzB,IAAI,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;iBAChD,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;iBAC/B,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC;iBAC9B,KAAK,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;YAClB,IAAI,CAAC,MAAM,CAAC,qBAAqB,EAAE,OAAO,CAAC;iBACxC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;iBACzB,IAAI,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;iBAChD,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;iBACzB,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,iBAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBACjC,IAAI,CAAC,CAAC,IAAS,EAAE,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAkB,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;iBACzF,KAAK,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;SACnB,CAAC,CAAA;QAEF,IAAI,CAAC,iBAAiB,EAAE,gBAAgB,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CACjE,MAAM,CAAC,MAAM,KAAK,WAAW,CAAC,CAAC,CAAE,MAAM,CAAC,KAAkB,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE,CACtE,CAAA;QAED,IAAI,iBAAiB,CAAC,MAAM,IAAI,gBAAgB,CAAC,MAAM,EAAE,CAAC;YACxD,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAA;YAC5B,MAAM,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,mBAAmB,EAAE;gBAC3C,SAAS;gBACT,iBAAiB,EAAE,iBAAiB,IAAI,EAAE;gBAC1C,gBAAgB,EAAE,gBAAgB,IAAI,EAAE;aACzC,CAAC,CAAA;YACF,IAAI,CAAC,kBAAkB,GAAG,SAAS,CAAA;QACrC,CAAC;aAAM,IAAI,uBAAuB,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE,CAAC;YAC/D,IAAI,CAAC,kBAAkB,GAAG,uBAAuB,CAAC,SAAS,CAAA;QAC7D,CAAC;QAED,IAAI,uBAAuB,EAAE,CAAC;YAC5B,iBAAiB,GAAG,iBAAiB,CAAC,MAAM;gBAC1C,CAAC,CAAC,iBAAiB;gBACnB,CAAC,CAAC,uBAAuB,CAAC,iBAAiB,CAAA;YAC7C,gBAAgB,GAAG,gBAAgB,CAAC,MAAM;gBACxC,CAAC,CAAC,gBAAgB;gBAClB,CAAC,CAAC,uBAAuB,CAAC,gBAAgB,CAAA;QAC9C,CAAC;QAED,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,iBAAiB,EAAE,GAAG,gBAAgB,CAAC,CAAC,CAAC,CAAA;QAClF,IAAI,CAAC,YAAY,GAAG,SAAS,CAAA;QAC7B,IAAI,CAAC,UAAU,EAAE,CAAA;IACnB,CAAC;IAED,KAAK,CAAC,cAAc;QAClB,IAAI,IAAI,CAAC,YAAY,KAAK,SAAS;YAAE,OAAM;QAC3C,MAAM,YAAY,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAA;QAEvC,IAAI,IAAI,CAAC,kBAAkB,IAAI,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,kBAAkB,GAAG,YAAY;YAAE,OAAM;QAC1F,MAAM,uBAAuB,GAA4B,MAAM,IAAI,CAAC,QAAQ,CAAC,GAAG,CAC9E,mBAAmB,EACnB,IAAI,CACL,CAAA;QAED,IAAI,CAAC,uBAAuB;YAAE,OAAM;QAEpC,IAAI,IAAI,CAAC,GAAG,EAAE,GAAG,uBAAuB,CAAC,SAAS,IAAI,YAAY,EAAE,CAAC;YACnE,MAAM,IAAI,CAAC,OAAO,CAAC,uBAAuB,CAAC,CAAA;QAC7C,CAAC;IACH,CAAC;IAED,KAAK,CAAC,gBAAgB,CAAC,GAAW;QAChC,MAAM,IAAI,CAAC,kBAAkB,CAAA;QAE7B,IAAI,CAAC;YACH,MAAM,QAAQ,GAAG,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAA;YACtC,MAAM,MAAM,GAAG,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAA;YAExE,4FAA4F;YAC5F,IAAI,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC;gBAC9D,OAAO,IAAI,CAAA;YACb,CAAC;YAED,MAAM,MAAM,GAAG,IAAA,qBAAa,EAAC,MAAM,CAAC,CAAA;YACpC,OAAO,CAAC,CAAC,IAAA,6BAAqB,EAAC,MAAM,EAAE,IAAI,CAAC,UAAU,CAAC,CAAA;QACzD,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,KAAK,CAAA;QACd,CAAC;IACH,CAAC;IAED,KAAK,CAAC,qBAAqB,CAAC,GAAW;QACrC,MAAM,IAAI,CAAC,kBAAkB,CAAA;QAE7B,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAA;QACtD,IAAI,CAAC,cAAc,CAAC,mBAAmB,CAAC;YACtC,QAAQ,EAAE,aAAa,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,iBAAiB;SAC5D,CAAC,CAAA;IACJ,CAAC;IAED,MAAM;QACJ,OAAO;YACL,GAAG,IAAI;YACP,GAAG,KAAK,CAAC,MAAM,EAAE;YACjB,iBAAiB,EAAE,IAAI,CAAC,iBAAiB;YACzC,eAAe,EAAE,IAAI,CAAC,eAAe;SACtC,CAAA;IACH,CAAC;CACF;AAtKD,gDAsKC","sourcesContent":["import jsYaml from 'js-yaml'\n\nimport { Fetch } from '../../interfaces/fetch'\nimport { WindowManager } from '../../interfaces/window'\nimport EventEmitter from '../eventEmitter/eventEmitter'\n// eslint-disable-next-line import/no-cycle\nimport { StorageController } from '../storage/storage'\n\nconst METAMASK_BLACKLIST_URL =\n  'https://api.github.com/repos/MetaMask/eth-phishing-detect/contents/src/config.json?ref=main'\n\nconst PHANTOM_BLACKLIST_URL =\n  'https://api.github.com/repos/phantom/blocklist/contents/blocklist.yaml?ref=master'\n\nexport type StoredPhishingDetection = {\n  timestamp: number\n  metamaskBlacklist: string[]\n  phantomBlacklist: string[]\n} | null\n\nexport const domainToParts = (domain: string) => {\n  try {\n    return domain.split('.').reverse()\n  } catch (e) {\n    throw new Error(JSON.stringify(domain))\n  }\n}\n\nexport const matchPartsAgainstList = (source: string[], list: string[]) => {\n  return list.find((domain: string) => {\n    const target = domainToParts(domain)\n    // target domain has more parts than source, fail\n    if (target.length > source.length) return false\n    // source matches target or (is deeper subdomain)\n    return target.every((part, index) => source[index] === part)\n  })\n}\n\nexport class PhishingController extends EventEmitter {\n  #fetch: Fetch\n\n  #storage: StorageController\n\n  #windowManager: WindowManager\n\n  #blacklist: string[] = [] // list of blacklisted URLs\n\n  #lastStorageUpdate: number | null = null\n\n  updateStatus: 'LOADING' | 'INITIAL' = 'INITIAL'\n\n  // Holds the initial load promise, so that one can wait until it completes\n  initialLoadPromise: Promise<void>\n\n  get lastStorageUpdate() {\n    return this.#lastStorageUpdate\n  }\n\n  get blacklistLength() {\n    return this.#blacklist.length\n  }\n\n  constructor({\n    fetch,\n    storage,\n    windowManager\n  }: {\n    fetch: Fetch\n    storage: StorageController\n    windowManager: WindowManager\n  }) {\n    super()\n\n    this.#fetch = fetch\n    this.#storage = storage\n    this.#windowManager = windowManager\n\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.initialLoadPromise = this.#load()\n  }\n\n  async #load() {\n    const storedPhishingDetection: StoredPhishingDetection = await this.#storage.get(\n      'phishingDetection',\n      null\n    )\n\n    if (storedPhishingDetection) {\n      this.#blacklist = Array.from(\n        new Set([\n          ...storedPhishingDetection.metamaskBlacklist,\n          ...storedPhishingDetection.phantomBlacklist\n        ])\n      )\n    }\n    await this.#update(storedPhishingDetection)\n  }\n\n  async #update(storedPhishingDetection: StoredPhishingDetection) {\n    this.updateStatus = 'LOADING'\n    this.emitUpdate()\n\n    const headers = {\n      Accept: 'application/vnd.github.v3.+json'\n    } as any\n    const results = await Promise.allSettled([\n      this.#fetch(METAMASK_BLACKLIST_URL, headers)\n        .then((res) => res.json())\n        .then((metadata) => fetch(metadata.download_url))\n        .then((rawRes) => rawRes.json())\n        .then((data) => data.blacklist)\n        .catch(() => []),\n      this.#fetch(PHANTOM_BLACKLIST_URL, headers)\n        .then((res) => res.json())\n        .then((metadata) => fetch(metadata.download_url))\n        .then((res) => res.text())\n        .then((text) => jsYaml.load(text))\n        .then((data: any) => (data && data.length ? data.map((i: { url: string }) => i.url) : []))\n        .catch(() => [])\n    ])\n\n    let [metamaskBlacklist, phantomBlacklist] = results.map((result) =>\n      result.status === 'fulfilled' ? (result.value as string[]) || [] : []\n    )\n\n    if (metamaskBlacklist.length && phantomBlacklist.length) {\n      const timestamp = Date.now()\n      await this.#storage.set('phishingDetection', {\n        timestamp,\n        metamaskBlacklist: metamaskBlacklist || [],\n        phantomBlacklist: phantomBlacklist || []\n      })\n      this.#lastStorageUpdate = timestamp\n    } else if (storedPhishingDetection && !this.#lastStorageUpdate) {\n      this.#lastStorageUpdate = storedPhishingDetection.timestamp\n    }\n\n    if (storedPhishingDetection) {\n      metamaskBlacklist = metamaskBlacklist.length\n        ? metamaskBlacklist\n        : storedPhishingDetection.metamaskBlacklist\n      phantomBlacklist = phantomBlacklist.length\n        ? phantomBlacklist\n        : storedPhishingDetection.phantomBlacklist\n    }\n\n    this.#blacklist = Array.from(new Set([...metamaskBlacklist, ...phantomBlacklist]))\n    this.updateStatus = 'INITIAL'\n    this.emitUpdate()\n  }\n\n  async updateIfNeeded() {\n    if (this.updateStatus === 'LOADING') return\n    const sixHoursInMs = 6 * 60 * 60 * 1000\n\n    if (this.#lastStorageUpdate && Date.now() - this.#lastStorageUpdate < sixHoursInMs) return\n    const storedPhishingDetection: StoredPhishingDetection = await this.#storage.get(\n      'phishingDetection',\n      null\n    )\n\n    if (!storedPhishingDetection) return\n\n    if (Date.now() - storedPhishingDetection.timestamp >= sixHoursInMs) {\n      await this.#update(storedPhishingDetection)\n    }\n  }\n\n  async getIsBlacklisted(url: string) {\n    await this.initialLoadPromise\n\n    try {\n      const hostname = new URL(url).hostname\n      const domain = hostname.endsWith('.') ? hostname.slice(0, -1) : hostname\n\n      // blacklisted if it has `ambire` in the hostname but it is not a pre-approved ambire domain\n      if (/ambire/i.test(domain) && !/\\.?ambire\\.com$/.test(domain)) {\n        return true\n      }\n\n      const source = domainToParts(domain)\n      return !!matchPartsAgainstList(source, this.#blacklist)\n    } catch (error) {\n      return false\n    }\n  }\n\n  async sendIsBlacklistedToUi(url: string) {\n    await this.initialLoadPromise\n\n    const isBlacklisted = await this.getIsBlacklisted(url)\n    this.#windowManager.sendWindowUiMessage({\n      hostname: isBlacklisted ? 'BLACKLISTED' : 'NOT_BLACKLISTED'\n    })\n  }\n\n  toJSON() {\n    return {\n      ...this,\n      ...super.toJSON(),\n      lastStorageUpdate: this.lastStorageUpdate,\n      blacklistLength: this.blacklistLength\n    }\n  }\n}\n"]}