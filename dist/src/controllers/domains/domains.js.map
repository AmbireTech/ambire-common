{"version":3,"file":"domains.js","sourceRoot":"","sources":["../../../../src/controllers/domains/domains.ts"],"names":[],"mappings":"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","sourcesContent":["import { getAddress, isAddress } from 'ethers'\n\nimport { RPCProviders } from '../../interfaces/provider'\nimport { reverseLookupEns } from '../../services/ensDomains'\n// import { reverseLookupUD } from '../../services/unstoppableDomains'\nimport EventEmitter from '../eventEmitter/eventEmitter'\n\ninterface Domains {\n  [address: string]: {\n    ens: string | null\n    ud: string | null\n    savedAt: number\n  }\n}\n\n// 15 minutes\nconst PERSIST_DOMAIN_FOR_IN_MS = 15 * 60 * 1000\n\n// const EXPECTED_UD_ERROR_MESSAGES = [\n//   'Only absolute URLs are supported',\n//   'unexpected character at line 1 column 1 of the JSON data',\n//   'Unexpected token'\n// ]\n\n/**\n * Domains controller- responsible for handling the reverse lookup of addresses to ENS and UD names.\n * Resolved names are saved in `domains` for a short period of time(15 minutes) to avoid unnecessary lookups.\n */\nexport class DomainsController extends EventEmitter {\n  #providers: RPCProviders = {}\n\n  domains: Domains = {}\n\n  loadingAddresses: string[] = []\n\n  constructor(providers: RPCProviders) {\n    super()\n    this.#providers = providers\n  }\n\n  async batchReverseLookup(addresses: string[]) {\n    const filteredAddresses = addresses.filter((address) => isAddress(address))\n    await Promise.all(filteredAddresses.map((address) => this.reverseLookup(address, false)))\n\n    this.emitUpdate()\n  }\n\n  /**\n   *Saves an already resolved ENS or UD name for an address.\n   */\n  saveResolvedReverseLookup({\n    address,\n    name,\n    type\n  }: {\n    address: string\n    name: string\n    type: 'ens' | 'ud'\n  }) {\n    const checksummedAddress = getAddress(address)\n    const { ens: oldEns, ud: oldUd } = this.domains[checksummedAddress] || { ens: null, ud: null }\n\n    this.domains[checksummedAddress] = {\n      ens: type === 'ens' ? name : oldEns,\n      ud: type === 'ud' ? name : oldUd,\n      savedAt: Date.now()\n    }\n    this.emitUpdate()\n  }\n\n  /**\n   * Resolves the ENS and UD names for an address if such exist.\n   */\n  async reverseLookup(address: string, emitUpdate = true) {\n    if (!('ethereum' in this.#providers)) {\n      this.emitError({\n        error: new Error('domains.reverseLookup: Ethereum provider is not available'),\n        message: 'The RPC provider for Ethereum is not available.',\n        level: 'major'\n      })\n      return\n    }\n    const checksummedAddress = getAddress(address)\n    const isAlreadyResolved = !!this.domains[checksummedAddress]\n    const isExpired =\n      isAlreadyResolved &&\n      Date.now() - this.domains[checksummedAddress].savedAt > PERSIST_DOMAIN_FOR_IN_MS\n\n    if ((isAlreadyResolved && !isExpired) || this.loadingAddresses.includes(checksummedAddress))\n      return\n\n    this.loadingAddresses.push(checksummedAddress)\n    this.emitUpdate()\n\n    let ensName = null\n\n    try {\n      ensName = (await reverseLookupEns(checksummedAddress, this.#providers.ethereum)) || null\n    } catch (e) {\n      console.error('ENS reverse lookup unexpected error', e)\n    }\n\n    // Don't reverse lookup UD names for now\n    // https://github.com/AmbireTech/ambire-app/issues/2681#issuecomment-2299460748\n    // If UD is ever needed, rewrite using Promise.all\n    // try {\n    //   udName = (await reverseLookupUD(checksummedAddress)) || null\n    // } catch (e: any) {\n    //   if (\n    //     !EXPECTED_UD_ERROR_MESSAGES.some((expectedMessage) => e.message.includes(expectedMessage))\n    //   ) {\n    //     console.error('UD reverse lookup unexpected error', e)\n    //   }\n    // }\n\n    this.domains[checksummedAddress] = {\n      ens: ensName,\n      ud: null,\n      savedAt: Date.now()\n    }\n\n    this.loadingAddresses = this.loadingAddresses.filter(\n      (loadingAddress) => loadingAddress !== checksummedAddress\n    )\n\n    if (emitUpdate) this.emitUpdate()\n  }\n}\n"]}