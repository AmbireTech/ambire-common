{"version":3,"file":"keystore.js","sourceRoot":"","sources":["../../../../src/controllers/keystore/keystore.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable class-methods-use-this */\n/* eslint-disable new-cap */\n/* eslint-disable @typescript-eslint/no-shadow */\nimport aes from 'aes-js'\n// import { entropyToMnemonic } from 'bip39'\nimport {\n  decryptWithPrivateKey,\n  Encrypted,\n  encryptWithPublicKey,\n  publicKeyByPrivateKey\n} from 'eth-crypto'\nimport {\n  concat,\n  getBytes,\n  hexlify,\n  keccak256,\n  Mnemonic,\n  randomBytes,\n  toUtf8Bytes,\n  Wallet\n} from 'ethers'\nimport scrypt from 'scrypt-js'\n\nimport EmittableError from '../../classes/EmittableError'\nimport { DERIVATION_OPTIONS, HD_PATH_TEMPLATE_TYPE } from '../../consts/derivation'\nimport { Banner } from '../../interfaces/banner'\nimport {\n  ExternalKey,\n  InternalKey,\n  Key,\n  KeyPreferences,\n  KeystoreSeed,\n  KeystoreSignerType,\n  MainKey,\n  MainKeyEncryptedWithSecret,\n  ReadyToAddKeys,\n  StoredKey\n} from '../../interfaces/keystore'\nimport { Storage } from '../../interfaces/storage'\nimport { WindowManager } from '../../interfaces/window'\nimport {\n  getDefaultKeyLabel,\n  getShouldMigrateKeyMetaNullToKeyMetaCreatedAt,\n  getShouldMigrateKeystoreSeedsWithoutHdPath,\n  migrateKeyMetaNullToKeyMetaCreatedAt,\n  migrateKeyPreferencesToKeystoreKeys,\n  migrateKeystoreSeedsWithoutHdPathTemplate\n} from '../../libs/keys/keys'\nimport EventEmitter, { Statuses } from '../eventEmitter/eventEmitter'\n\nconst scryptDefaults = { N: 131072, r: 8, p: 1, dkLen: 64 }\nconst CIPHER = 'aes-128-ctr'\nconst KEYSTORE_UNEXPECTED_ERROR_MESSAGE =\n  'Keystore unexpected error. If the problem persists, please contact support.'\n\nconst STATUS_WRAPPED_METHODS = {\n  unlockWithSecret: 'INITIAL',\n  addSecret: 'INITIAL',\n  addSeed: 'INITIAL',\n  moveTempSeedToKeystoreSeeds: 'INITIAL',\n  deleteSavedSeed: 'INITIAL',\n  removeSecret: 'INITIAL',\n  addKeys: 'INITIAL',\n  addKeysExternallyStored: 'INITIAL',\n  changeKeystorePassword: 'INITIAL',\n  updateKeyPreferences: 'INITIAL'\n} as const\n\nfunction getBytesForSecret(secret: string): ArrayLike<number> {\n  // see https://github.com/ethers-io/ethers.js/blob/v5/packages/json-wallets/src.ts/utils.ts#L19-L24\n  return toUtf8Bytes(secret, 'NFKC')\n}\n\n/**\n * The KeystoreController is a class that manages a collection of encrypted keys.\n * It provides methods for adding, removing, and retrieving keys. The keys are\n * encrypted using a main key, which is itself encrypted using one or more secrets.\n *\n * Docs:\n *   - Secrets are strings that are used to encrypt the mainKey; the mainKey\n *     could be encrypted with many secrets\n *   - All individual keys are encrypted with the mainKey\n *   - The mainKey is kept in memory, but only for the unlockedTime\n * Design decisions:\n *   - decided to store all keys in the Keystore, even if the private key itself\n *     is not stored there; simply because it's called a Keystore and the name\n *     implies the functionality\n *   - handle HW wallets in it, so that we handle everything uniformly with a\n *     single API; also, it allows future flexibility to have the concept of\n *     optional unlocking built-in; if we have interactivity, we can add\n *     `keystore.signExtraInputRequired(key)` which returns what we need from the user\n *   - `signWithkey` is presumed to be non-interactive at least from `Keystore`\n *     point of view (requiring no extra user inputs). This could be wrong, if\n *     hardware wallets require extra input - they normally always do, but with\n *     the web SDKs we \"outsource\" this to the HW wallet software itself;\n *     this may not be true on mobile\n */\nexport class KeystoreController extends EventEmitter {\n  #mainKey: MainKey | null\n\n  // Secrets are strings that are used to encrypt the mainKey.\n  // The mainKey could be encrypted with many secrets.\n  #keystoreSecrets: MainKeyEncryptedWithSecret[] = []\n\n  #storage: Storage\n\n  #keystoreSeeds: KeystoreSeed[] = []\n\n  // when importing a seed, save it temporary here before deciding\n  // whether to place it in #keystoreSeeds or delete it\n  //\n  // this should be done only if there isn't a saved seed already\n  #tempSeed: KeystoreSeed | null = null\n\n  #keystoreSigners: Partial<{ [key in Key['type']]: KeystoreSignerType }>\n\n  #keystoreKeys: StoredKey[] = []\n\n  keyStoreUid: string | null\n\n  isReadyToStoreKeys: boolean = false\n\n  errorMessage: string = ''\n\n  statuses: Statuses<keyof typeof STATUS_WRAPPED_METHODS> = STATUS_WRAPPED_METHODS\n\n  // Holds the initial load promise, so that one can wait until it completes\n  #initialLoadPromise: Promise<void>\n\n  #windowManager: WindowManager\n\n  constructor(\n    _storage: Storage,\n    _keystoreSigners: Partial<{ [key in Key['type']]: KeystoreSignerType }>,\n    windowManager: WindowManager\n  ) {\n    super()\n    this.#storage = _storage\n    this.#keystoreSigners = _keystoreSigners\n    this.#mainKey = null\n    this.keyStoreUid = null\n    this.#windowManager = windowManager\n\n    this.#initialLoadPromise = this.#load()\n  }\n\n  async #load() {\n    try {\n      const [keystoreSeeds, keyStoreUid, keystoreKeys, keyPreferences] = await Promise.all([\n        this.#storage.get('keystoreSeeds', []),\n        this.#storage.get('keyStoreUid', null),\n        this.#storage.get('keystoreKeys', []),\n        this.#storage.get('keyPreferences', [])\n      ])\n      this.keyStoreUid = keyStoreUid\n\n      if (getShouldMigrateKeystoreSeedsWithoutHdPath(keystoreSeeds)) {\n        // Cast to the old type (string[]) to avoid TS errors\n        const preMigrationKeystoreSeeds = keystoreSeeds as unknown as string[]\n        this.#keystoreSeeds = migrateKeystoreSeedsWithoutHdPathTemplate(preMigrationKeystoreSeeds)\n        await this.#storage.set('keystoreSeeds', this.#keystoreSeeds)\n      } else {\n        this.#keystoreSeeds = keystoreSeeds\n      }\n\n      const shouldMigrateKeyPreferencesToKeystoreKeys = keyPreferences.length > 0\n      if (shouldMigrateKeyPreferencesToKeystoreKeys) {\n        this.#keystoreKeys = migrateKeyPreferencesToKeystoreKeys(keyPreferences, keystoreKeys)\n        await this.#storage.set('keystoreKeys', this.#keystoreKeys)\n        await this.#storage.remove('keyPreferences')\n      } else {\n        this.#keystoreKeys = keystoreKeys\n      }\n\n      if (getShouldMigrateKeyMetaNullToKeyMetaCreatedAt(this.#keystoreKeys)) {\n        this.#keystoreKeys = migrateKeyMetaNullToKeyMetaCreatedAt(this.#keystoreKeys)\n        await this.#storage.set('keystoreKeys', this.#keystoreKeys)\n      }\n    } catch (e) {\n      this.emitError({\n        message:\n          'Something went wrong when loading the Keystore. Please try again or contact support if the problem persists.',\n        level: 'major',\n        error: new Error('keystore: failed to pull keys from storage')\n      })\n    }\n\n    try {\n      this.#keystoreSecrets = await this.#storage.get('keystoreSecrets', [])\n      this.isReadyToStoreKeys = this.#keystoreSecrets.length > 0\n    } catch (e) {\n      this.emitError({\n        message:\n          'Something went wrong when initiating the Keystore. Please try again or contact support if the problem persists.',\n        level: 'major',\n        error: new Error('keystore: failed to getMainKeyEncryptedWithSecrets() from storage')\n      })\n    }\n\n    this.emitUpdate()\n  }\n\n  lock() {\n    this.#mainKey = null\n    if (this.#tempSeed) this.deleteTempSeed(false)\n    this.emitUpdate()\n  }\n\n  get isUnlocked() {\n    return !!this.#mainKey\n  }\n\n  async getKeyStoreUid() {\n    const uid = this.keyStoreUid\n    if (!uid) throw new Error('keystore: adding secret before get uid')\n\n    return uid\n  }\n\n  // @TODO time before unlocking\n  async #unlockWithSecret(secretId: string, secret: string) {\n    await this.#initialLoadPromise\n\n    // @TODO should we check if already locked? probably not cause this function can  be used in order to verify if a secret is correct\n    if (!this.#keystoreSecrets.length) {\n      throw new EmittableError({\n        message:\n          'Trying to unlock Ambire, but the lock mechanism was not fully configured yet. Please try again or contact support if the problem persists.',\n        level: 'major',\n        error: new Error('keystore: no secrets yet')\n      })\n    }\n\n    const secretEntry = this.#keystoreSecrets.find((x) => x.id === secretId)\n    if (!secretEntry) {\n      throw new EmittableError({\n        message:\n          'Something went wrong when trying to unlock Ambire. Please try again or contact support if the problem persists.',\n        level: 'major',\n        error: new Error('keystore: secret not found')\n      })\n    }\n\n    const { scryptParams, aesEncrypted } = secretEntry\n    if (aesEncrypted.cipherType !== CIPHER) {\n      throw new EmittableError({\n        message:\n          'Something went wrong when trying to unlock Ambire. Please try again or contact support if the problem persists.',\n        level: 'major',\n        error: new Error(`keystore: unsupported cipherType ${aesEncrypted.cipherType}`)\n      })\n    }\n    // @TODO: progressCallback?\n\n    const key = await scrypt.scrypt(\n      getBytesForSecret(secret),\n      getBytes(scryptParams.salt),\n      scryptParams.N,\n      scryptParams.r,\n      scryptParams.p,\n      scryptParams.dkLen,\n      () => {}\n    )\n    const iv = getBytes(aesEncrypted.iv)\n    const derivedKey = key.slice(0, 16)\n    const macPrefix = key.slice(16, 32)\n    const counter = new aes.Counter(iv)\n    const aesCtr = new aes.ModeOfOperation.ctr(derivedKey, counter)\n    const mac = keccak256(concat([macPrefix, aesEncrypted.ciphertext]))\n    if (mac !== aesEncrypted.mac) {\n      this.errorMessage = 'Incorrect password. Please try again.'\n      this.emitUpdate()\n\n      const error = new Error(this.errorMessage)\n      throw new EmittableError({ level: 'silent', message: this.errorMessage, error })\n    }\n    this.errorMessage = ''\n\n    const decrypted = aesCtr.decrypt(getBytes(aesEncrypted.ciphertext))\n    this.#mainKey = { key: decrypted.slice(0, 16), iv: decrypted.slice(16, 32) }\n  }\n\n  async unlockWithSecret(secretId: string, secret: string) {\n    await this.withStatus('unlockWithSecret', () => this.#unlockWithSecret(secretId, secret))\n  }\n\n  async #addSecret(\n    secretId: string,\n    secret: string,\n    extraEntropy: string = '',\n    leaveUnlocked: boolean = false\n  ) {\n    await this.#initialLoadPromise\n\n    // @TODO test\n    if (this.#keystoreSecrets.find((x) => x.id === secretId))\n      throw new EmittableError({\n        message: KEYSTORE_UNEXPECTED_ERROR_MESSAGE,\n        level: 'major',\n        error: new Error(`keystore: trying to add duplicate secret ${secretId}`)\n      })\n\n    let mainKey: MainKey | null = this.#mainKey\n    // We are not unlocked\n    if (!mainKey) {\n      if (!this.#keystoreSecrets.length) {\n        const key = getBytes(keccak256(concat([randomBytes(32), toUtf8Bytes(extraEntropy)]))).slice(\n          0,\n          16\n        )\n        mainKey = {\n          key,\n          iv: randomBytes(16)\n        }\n      } else\n        throw new EmittableError({\n          message: KEYSTORE_UNEXPECTED_ERROR_MESSAGE,\n          level: 'major',\n          error: new Error('keystore: must unlock keystore before adding secret')\n        })\n\n      if (leaveUnlocked) {\n        this.#mainKey = mainKey\n      }\n    }\n\n    const salt = randomBytes(32)\n    const key = await scrypt.scrypt(\n      getBytesForSecret(secret),\n      salt,\n      scryptDefaults.N,\n      scryptDefaults.r,\n      scryptDefaults.p,\n      scryptDefaults.dkLen,\n      () => {}\n    )\n    const iv = randomBytes(16)\n    const derivedKey = key.slice(0, 16)\n    const macPrefix = key.slice(16, 32)\n    const counter = new aes.Counter(iv)\n    const aesCtr = new aes.ModeOfOperation.ctr(derivedKey, counter)\n    const ciphertext = aesCtr.encrypt(getBytes(concat([mainKey.key, mainKey.iv])))\n    const mac = keccak256(concat([macPrefix, ciphertext]))\n\n    this.#keystoreSecrets.push({\n      id: secretId,\n      scryptParams: { salt: hexlify(salt), ...scryptDefaults },\n      aesEncrypted: {\n        cipherType: CIPHER,\n        ciphertext: hexlify(ciphertext),\n        iv: hexlify(iv),\n        mac: hexlify(mac)\n      }\n    })\n    // Persist the new secrets\n    await this.#storage.set('keystoreSecrets', this.#keystoreSecrets)\n\n    // produce uid if one doesn't exist (should be created when the first secret is added)\n    if (!this.keyStoreUid) {\n      const uid = publicKeyByPrivateKey(hexlify(getBytes(concat([mainKey.key, mainKey.iv]))))\n      this.keyStoreUid = uid\n      await this.#storage.set('keyStoreUid', uid)\n    }\n\n    this.isReadyToStoreKeys = true\n  }\n\n  async addSecret(secretId: string, secret: string, extraEntropy: string, leaveUnlocked: boolean) {\n    await this.withStatus('addSecret', () =>\n      this.#addSecret(secretId, secret, extraEntropy, leaveUnlocked)\n    )\n  }\n\n  async #removeSecret(secretId: string) {\n    await this.#initialLoadPromise\n\n    if (!this.#keystoreSecrets.find((x) => x.id === secretId))\n      throw new EmittableError({\n        message: KEYSTORE_UNEXPECTED_ERROR_MESSAGE,\n        level: 'major',\n        error: new Error(`keystore: secret$ ${secretId} not found`)\n      })\n\n    this.#keystoreSecrets = this.#keystoreSecrets.filter((x) => x.id !== secretId)\n    await this.#storage.set('keystoreSecrets', this.#keystoreSecrets)\n  }\n\n  async removeSecret(secretId: string) {\n    await this.withStatus('removeSecret', () => this.#removeSecret(secretId))\n  }\n\n  get keys(): Key[] {\n    return this.#keystoreKeys.map(({ addr, type, label, dedicatedToOneSA, meta }) => {\n      // Written with this 'internal' type guard (if) on purpose, because this\n      // way TypeScript will be able to narrow down the types properly and infer\n      // the return type of the map function correctly.\n      if (type === 'internal') {\n        return {\n          addr,\n          type,\n          label,\n          dedicatedToOneSA,\n          meta,\n          isExternallyStored: false\n        }\n      }\n\n      return {\n        addr,\n        type,\n        label,\n        dedicatedToOneSA,\n        meta: meta as ExternalKey['meta'],\n        isExternallyStored: true\n      }\n    })\n  }\n\n  async #getEncryptedSeed(seed: KeystoreSeed['seed']): Promise<string> {\n    await this.#initialLoadPromise\n\n    if (this.#mainKey === null)\n      throw new EmittableError({\n        message: KEYSTORE_UNEXPECTED_ERROR_MESSAGE,\n        level: 'major',\n        error: new Error('keystore: needs to be unlocked')\n      })\n\n    if (!Mnemonic.isValidMnemonic(seed)) {\n      throw new EmittableError({\n        message: 'You are trying to store an invalid seed phrase.',\n        level: 'major',\n        error: new Error('keystore: trying to add an invalid seed phrase')\n      })\n    }\n\n    // Currently we support only one seed phrase to be added to the keystore\n    // this fist seed phrase will become the saved seed phrase of the wallet\n    if (this.#keystoreSeeds.length) {\n      throw new EmittableError({\n        message: 'You can have only one saved seed in the extension',\n        level: 'major',\n        error: new Error(\n          'keystore: seed phase already added. Storing multiple seed phrases not supported yet'\n        )\n      })\n    }\n\n    // Set up the cipher\n    const counter = new aes.Counter(this.#mainKey!.iv) // TS compiler fails to detect we check for null above\n    const aesCtr = new aes.ModeOfOperation.ctr(this.#mainKey!.key, counter) // TS compiler fails to detect we check for null above\\\n    return hexlify(aesCtr.encrypt(new TextEncoder().encode(seed)))\n  }\n\n  async addSeedToTemp({ seed, hdPathTemplate }: KeystoreSeed) {\n    const validHdPath = DERIVATION_OPTIONS.some((o) => o.value === hdPathTemplate)\n    if (!validHdPath)\n      throw new EmittableError({\n        message:\n          'Incorrect derivation path when trying to update the temp seed. Please contact support',\n        level: 'major',\n        error: new Error('keystore: hd path to temp seed incorrect')\n      })\n\n    this.#tempSeed = {\n      seed: await this.#getEncryptedSeed(seed),\n      hdPathTemplate\n    }\n\n    this.emitUpdate()\n  }\n\n  deleteTempSeed(shouldUpdate = true) {\n    this.#tempSeed = null\n    if (shouldUpdate) this.emitUpdate()\n  }\n\n  async #moveTempSeedToKeystoreSeeds() {\n    if (this.#mainKey === null)\n      throw new EmittableError({\n        message: KEYSTORE_UNEXPECTED_ERROR_MESSAGE,\n        level: 'major',\n        error: new Error('keystore: needs to be unlocked')\n      })\n\n    // Currently we support only one seed phrase to be added to the keystore\n    // this fist seed phrase will become the saved seed phrase of the wallet\n    if (this.#keystoreSeeds.length) {\n      throw new EmittableError({\n        message: 'You can have only one saved seed in the extension',\n        level: 'major',\n        error: new Error(\n          'keystore: seed phase already added. Storing multiple seed phrases not supported yet'\n        )\n      })\n    }\n\n    if (!this.#tempSeed) {\n      throw new EmittableError({\n        message:\n          'Imported seed no longer exists in the extension. If you want to save it, please re-import it',\n        level: 'major',\n        error: new Error('keystore: imported seed deleted although a request to save it was made')\n      })\n    }\n\n    this.#keystoreSeeds.push(this.#tempSeed)\n    await this.#storage.set('keystoreSeeds', this.#keystoreSeeds)\n    this.#tempSeed = null\n    this.emitUpdate()\n  }\n\n  async moveTempSeedToKeystoreSeeds() {\n    await this.#initialLoadPromise\n    await this.withStatus('moveTempSeedToKeystoreSeeds', () => this.#moveTempSeedToKeystoreSeeds())\n  }\n\n  async #addSeed({ seed, hdPathTemplate }: KeystoreSeed) {\n    this.#keystoreSeeds.push({\n      seed: await this.#getEncryptedSeed(seed),\n      hdPathTemplate\n    })\n    await this.#storage.set('keystoreSeeds', this.#keystoreSeeds)\n\n    this.emitUpdate()\n  }\n\n  async addSeed(keystoreSeed: KeystoreSeed) {\n    await this.withStatus('addSeed', () => this.#addSeed(keystoreSeed))\n  }\n\n  async changeTempSeedHdPathTemplateIfNeeded(nextHdPathTemplate?: HD_PATH_TEMPLATE_TYPE) {\n    if (!nextHdPathTemplate) return // should never happen\n\n    await this.#initialLoadPromise\n\n    if (!this.isUnlocked) throw new Error('keystore: not unlocked')\n    if (!this.#tempSeed) throw new Error('keystore: no temp seed at the moment')\n\n    const isTheSameHdPathTemplate = this.#tempSeed.hdPathTemplate === nextHdPathTemplate\n    if (isTheSameHdPathTemplate) return\n\n    this.#tempSeed.hdPathTemplate = nextHdPathTemplate\n\n    this.emitUpdate()\n  }\n\n  async changeSavedSeedHdPathTemplateIfNeeded(nextHdPathTemplate?: HD_PATH_TEMPLATE_TYPE) {\n    if (!nextHdPathTemplate) return // should never happen\n\n    await this.#initialLoadPromise\n\n    if (!this.isUnlocked) throw new Error('keystore: not unlocked')\n    if (!this.#keystoreSeeds.length) throw new Error('keystore: no seed phrase added yet')\n\n    const isTheSameHdPathTemplate = this.#keystoreSeeds[0].hdPathTemplate === nextHdPathTemplate\n    if (isTheSameHdPathTemplate) return\n\n    // As of v4.33.0 we support only one seed phrase (saved seed) to be added to the keystore\n    this.#keystoreSeeds[0].hdPathTemplate = nextHdPathTemplate\n    await this.#storage.set('keystoreSeeds', this.#keystoreSeeds)\n\n    this.emitUpdate()\n  }\n\n  async #addKeysExternallyStored(keysToAdd: ExternalKey[]) {\n    await this.#initialLoadPromise\n\n    if (!keysToAdd.length) return\n\n    // Strip out keys with duplicated private keys. One unique key is enough.\n    const uniqueKeys: { addr: Key['addr']; type: Key['type'] }[] = []\n    const uniqueKeysToAdd = keysToAdd.filter(({ addr, type }) => {\n      if (uniqueKeys.some((x) => x.addr === addr && x.type === type)) {\n        return false\n      }\n\n      uniqueKeys.push({ addr, type })\n      return true\n    })\n\n    if (!uniqueKeysToAdd.length) return\n\n    const keys = this.#keystoreKeys\n\n    const newKeys = uniqueKeysToAdd\n      .map(({ addr, type, label, dedicatedToOneSA, meta }) => ({\n        addr,\n        type,\n        label,\n        dedicatedToOneSA,\n        meta,\n        privKey: null\n      }))\n      // No need to re-add keys that are already added (with the same type / device)\n      .filter(({ addr, type }) => !keys.some((x) => x.addr === addr && x.type === type))\n\n    if (!newKeys.length) return\n\n    const nextKeys = [...keys, ...newKeys]\n\n    this.#keystoreKeys = nextKeys\n    await this.#storage.set('keystoreKeys', nextKeys)\n  }\n\n  async addKeysExternallyStored(keysToAdd: ExternalKey[]) {\n    await this.withStatus('addKeysExternallyStored', () => this.#addKeysExternallyStored(keysToAdd))\n  }\n\n  async #addKeys(keysToAdd: ReadyToAddKeys['internal']) {\n    await this.#initialLoadPromise\n    if (!keysToAdd.length) return\n    if (this.#mainKey === null)\n      throw new EmittableError({\n        message: KEYSTORE_UNEXPECTED_ERROR_MESSAGE,\n        level: 'major',\n        error: new Error('keystore: needs to be unlocked')\n      })\n\n    // Strip out keys with duplicated private keys. One unique key is enough.\n    const uniquePrivateKeysToAddSet = new Set()\n    const uniqueKeysToAdd = keysToAdd.filter(({ privateKey }) => {\n      if (!uniquePrivateKeysToAddSet.has(privateKey)) {\n        uniquePrivateKeysToAddSet.add(privateKey)\n        return true\n      }\n      return false\n    })\n\n    if (!uniqueKeysToAdd.length) return\n\n    const keys = this.#keystoreKeys\n\n    const newKeys: StoredKey[] = uniqueKeysToAdd\n      .map(({ addr, type, label, privateKey, dedicatedToOneSA, meta }) => {\n        // eslint-disable-next-line no-param-reassign\n        privateKey = privateKey.substring(0, 2) === '0x' ? privateKey.substring(2) : privateKey\n\n        // Set up the cipher\n        const counter = new aes.Counter(this.#mainKey!.iv) // TS compiler fails to detect we check for null above\n        const aesCtr = new aes.ModeOfOperation.ctr(this.#mainKey!.key, counter) // TS compiler fails to detect we check for null above\n\n        return {\n          addr,\n          type,\n          label,\n          dedicatedToOneSA,\n          privKey: hexlify(aesCtr.encrypt(aes.utils.hex.toBytes(privateKey))), // TODO: consider a MAC?\n          meta\n        }\n      })\n      // No need to re-add keys that are already added, private key never changes\n      .filter(({ addr, type }) => !keys.some((x) => x.addr === addr && x.type === type))\n\n    if (!newKeys.length) return\n\n    const nextKeys = [...keys, ...newKeys]\n\n    this.#keystoreKeys = nextKeys\n    await this.#storage.set('keystoreKeys', nextKeys)\n  }\n\n  async addKeys(keysToAdd: ReadyToAddKeys['internal']) {\n    await this.withStatus('addKeys', () => this.#addKeys(keysToAdd))\n  }\n\n  async removeKey(addr: Key['addr'], type: Key['type']) {\n    await this.#initialLoadPromise\n    if (!this.isUnlocked)\n      throw new EmittableError({\n        message:\n          'Extension not unlocked. Please try again or contact support if the problem persists.',\n        level: 'major',\n        error: new Error('keystore: not unlocked')\n      })\n    const keys = this.#keystoreKeys\n    if (!keys.find((x) => x.addr === addr && x.type === type))\n      throw new EmittableError({\n        message: KEYSTORE_UNEXPECTED_ERROR_MESSAGE,\n        level: 'major',\n        error: new Error(\n          `keystore: trying to remove key that does not exist: address: ${addr}, type: ${type}`\n        )\n      })\n\n    this.#keystoreKeys = keys.filter((key) => {\n      const isMatching = key.addr === addr && key.type === type\n\n      return !isMatching\n    })\n    await this.#storage.set('keystoreKeys', this.#keystoreKeys)\n  }\n\n  async exportKeyWithPasscode(keyAddress: Key['addr'], keyType: Key['type'], passphrase: string) {\n    await this.#initialLoadPromise\n    if (this.#mainKey === null) throw new Error('keystore: needs to be unlocked')\n    const keys = this.#keystoreKeys\n    const storedKey = keys.find((x: StoredKey) => x.addr === keyAddress && x.type === keyType)\n\n    if (!storedKey) throw new Error('keystore: key not found')\n    if (storedKey.type !== 'internal') throw new Error('keystore: key does not have privateKey')\n\n    const encryptedBytes = getBytes(storedKey.privKey as string)\n    const counter = new aes.Counter(this.#mainKey.iv)\n    const aesCtr = new aes.ModeOfOperation.ctr(this.#mainKey.key, counter)\n    const decryptedBytes = aesCtr.decrypt(encryptedBytes)\n    const decryptedPrivateKey = aes.utils.hex.fromBytes(decryptedBytes)\n    const wallet = new Wallet(decryptedPrivateKey)\n    const keyBackup = await wallet.encrypt(passphrase)\n    return JSON.stringify(keyBackup)\n  }\n\n  async sendPrivateKeyToUi(keyAddress: string) {\n    const decryptedPrivateKey = await this.#getPrivateKey(keyAddress)\n    this.#windowManager.sendWindowUiMessage({ privateKey: `0x${decryptedPrivateKey}` })\n  }\n\n  async sendSeedToUi() {\n    const decrypted = await this.getSavedSeed()\n    this.#windowManager.sendWindowUiMessage({ seed: decrypted.seed })\n  }\n\n  async #getPrivateKey(keyAddress: string): Promise<string> {\n    await this.#initialLoadPromise\n    if (this.#mainKey === null) throw new Error('keystore: needs to be unlocked')\n    const keys = this.#keystoreKeys\n\n    const storedKey = keys.find((x: StoredKey) => x.addr === keyAddress)\n    if (!storedKey) throw new Error('keystore: key not found')\n    if (storedKey.type !== 'internal') throw new Error('keystore: key does not have privateKey')\n\n    // decrypt the pk of keyAddress with the keystore's key\n    const encryptedBytes = getBytes(storedKey.privKey as string)\n    const counter = new aes.Counter(this.#mainKey.iv)\n    const aesCtr = new aes.ModeOfOperation.ctr(this.#mainKey.key, counter)\n    // encrypt the pk of keyAddress with publicKey\n    const decryptedBytes = aesCtr.decrypt(encryptedBytes)\n    return aes.utils.hex.fromBytes(decryptedBytes)\n  }\n\n  /**\n   * Export with public key encrypt\n   *\n   * @param keyAddress string - the address of the key you want to export\n   * @param publicKey string - the public key, with which to asymmetrically encrypt it (used for key sync with other device's keystoreId)\n   * @returns Encrypted\n   */\n  async exportKeyWithPublicKeyEncryption(\n    keyAddress: string,\n    publicKey: string\n  ): Promise<Encrypted> {\n    const decryptedPrivateKey = await this.#getPrivateKey(keyAddress)\n    const result = await encryptWithPublicKey(publicKey, decryptedPrivateKey)\n\n    return result\n  }\n\n  async importKeyWithPublicKeyEncryption(encryptedSk: Encrypted, dedicatedToOneSA: boolean) {\n    if (this.#mainKey === null) throw new Error('keystore: needs to be unlocked')\n    const privateKey: string = await decryptWithPrivateKey(\n      hexlify(getBytes(concat([this.#mainKey.key, this.#mainKey.iv]))),\n      encryptedSk\n    )\n    if (!privateKey) throw new Error('keystore: wrong encryptedSk or private key')\n\n    const keyToAdd: {\n      addr: Key['addr']\n      label: string\n      type: 'internal'\n      privateKey: string\n      dedicatedToOneSA: Key['dedicatedToOneSA']\n      meta: InternalKey['meta']\n    } = {\n      addr: new Wallet(privateKey).address,\n      privateKey,\n      label: getDefaultKeyLabel(this.keys, 0),\n      type: 'internal',\n      dedicatedToOneSA,\n      meta: {\n        createdAt: new Date().getTime()\n      }\n    }\n\n    await this.addKeys([keyToAdd])\n  }\n\n  async getSigner(keyAddress: Key['addr'], keyType: Key['type']) {\n    await this.#initialLoadPromise\n    const keys = this.#keystoreKeys\n    const storedKey = keys.find((x: StoredKey) => x.addr === keyAddress && x.type === keyType)\n\n    if (!storedKey) throw new Error('keystore: key not found')\n    const { addr, type, label, dedicatedToOneSA, meta } = storedKey\n\n    const key = {\n      addr,\n      type,\n      label,\n      dedicatedToOneSA,\n      meta,\n      isExternallyStored: type !== 'internal'\n    }\n\n    const SignerInitializer = this.#keystoreSigners[key.type]\n    if (!SignerInitializer) throw new Error('keystore: unsupported signer type')\n\n    if (key.type === 'internal') {\n      if (!this.isUnlocked) throw new Error('keystore: not unlocked')\n\n      const encryptedBytes = getBytes(storedKey.privKey as string)\n      // @ts-ignore\n      const counter = new aes.Counter(this.#mainKey.iv)\n      // @ts-ignore\n      const aesCtr = new aes.ModeOfOperation.ctr(this.#mainKey.key, counter)\n      const decryptedBytes = aesCtr.decrypt(encryptedBytes)\n      const decryptedPrivateKey = aes.utils.hex.fromBytes(decryptedBytes)\n\n      // @ts-ignore TODO: Figure out the correct type definition\n      return new SignerInitializer(key, decryptedPrivateKey)\n    }\n\n    // @ts-ignore TODO: Figure out the correct type definition\n    return new SignerInitializer(key)\n  }\n\n  async getSavedSeed() {\n    await this.#initialLoadPromise\n\n    if (!this.isUnlocked) throw new Error('keystore: not unlocked')\n    if (!this.#keystoreSeeds.length) throw new Error('keystore: no seed phrase added yet')\n\n    const hdPathTemplate = this.#keystoreSeeds[0].hdPathTemplate\n    const encryptedSeedBytes = getBytes(this.#keystoreSeeds[0].seed)\n    // @ts-ignore\n    const counter = new aes.Counter(this.#mainKey.iv)\n    // @ts-ignore\n    const aesCtr = new aes.ModeOfOperation.ctr(this.#mainKey.key, counter)\n    const decryptedSeedBytes = aesCtr.decrypt(encryptedSeedBytes)\n    const decryptedSeed = new TextDecoder().decode(decryptedSeedBytes)\n    return { seed: decryptedSeed, hdPathTemplate }\n  }\n\n  async #changeKeystorePassword(newSecret: string, oldSecret?: string) {\n    await this.#initialLoadPromise\n\n    // In the case the user wants to change their device password,\n    // they should also provide the previous password (oldSecret).\n    //\n    // However, in the case of KeyStore recovery, the user may have already forgotten the password,\n    // but the Keystore is already unlocked with the recovery secret.\n    // Therefore, in the last case, we can't provide the oldSecret, and we should not validate it.\n    //\n    // However, there is one problem if we leave it that way:\n    //\n    //     1. If the user recovers and unlocks the Keystore.\n    //     2. But doesn't enter a new 'password' in the recovery flow (just closes the tab).\n    //     3. And later decides to change the old password from Settings.\n    //     4. Then they would not be able to do it because they don't know the old password.\n    //\n    // We are going to discuss it in the next meeting, but for now, we are leaving it as it is.\n    // The long-term solution would be to refactor EmailVault recovery logic\n    // and not unlock the Keystore with the recovery secret unless the user provides a new passphrase.\n    if (oldSecret) await this.#unlockWithSecret('password', oldSecret)\n\n    if (!this.isUnlocked)\n      throw new EmittableError({\n        message: 'App not unlocked. Please try again or contact support if the problem persists.',\n        level: 'major',\n        error: new Error('keystore: not unlocked')\n      })\n\n    await this.#removeSecret('password')\n    await this.#addSecret('password', newSecret, '', true)\n  }\n\n  async changeKeystorePassword(newSecret: string, oldSecret?: string) {\n    await this.withStatus('changeKeystorePassword', () =>\n      this.#changeKeystorePassword(newSecret, oldSecret)\n    )\n  }\n\n  async updateKeyPreferences(\n    keys: { addr: Key['addr']; type: Key['type']; preferences: KeyPreferences }[]\n  ) {\n    await this.withStatus('updateKeyPreferences', async () => this.#updateKeyPreferences(keys))\n  }\n\n  async #updateKeyPreferences(\n    keys: { addr: Key['addr']; type: Key['type']; preferences: KeyPreferences }[]\n  ) {\n    this.#keystoreKeys = this.#keystoreKeys.map((keystoreKey) => {\n      const key = keys.find((k) => k.addr === keystoreKey.addr && k.type === keystoreKey.type)\n\n      if (!key) return keystoreKey\n\n      return { ...keystoreKey, ...key.preferences }\n    })\n    await this.#storage.set('keystoreKeys', this.#keystoreKeys)\n    this.emitUpdate()\n  }\n\n  async deleteSavedSeed() {\n    await this.withStatus('deleteSavedSeed', () => this.#deleteSavedSeed())\n  }\n\n  async #deleteSavedSeed() {\n    await this.#initialLoadPromise\n\n    this.#keystoreSeeds = []\n    await this.#storage.set('keystoreSeeds', this.#keystoreSeeds)\n\n    this.emitUpdate()\n  }\n\n  resetErrorState() {\n    this.errorMessage = ''\n    this.emitUpdate()\n  }\n\n  get hasPasswordSecret() {\n    return this.#keystoreSecrets.some((x) => x.id === 'password')\n  }\n\n  get hasKeystoreSavedSeed() {\n    return !!this.#keystoreSeeds.length\n  }\n\n  get hasKeystoreTempSeed() {\n    return !!this.#tempSeed\n  }\n\n  get banners(): Banner[] {\n    if (!this.#tempSeed) return []\n\n    return [\n      {\n        id: 'tempSeed',\n        type: 'warning',\n        category: 'temp-seed-not-confirmed',\n        title: 'You have an unsaved imported seed',\n        text: '',\n        actions: [\n          {\n            label: 'Check',\n            actionName: 'confirm-temp-seed'\n          }\n        ]\n      }\n    ]\n  }\n\n  toJSON() {\n    return {\n      ...this,\n      ...super.toJSON(),\n      isUnlocked: this.isUnlocked, // includes the getter in the stringified instance\n      keys: this.keys,\n      hasPasswordSecret: this.hasPasswordSecret,\n      hasKeystoreSavedSeed: this.hasKeystoreSavedSeed,\n      hasKeystoreTempSeed: this.hasKeystoreTempSeed,\n      banners: this.banners\n    }\n  }\n}\n"]}