{"version":3,"file":"keystore.js","sourceRoot":"","sources":["../../../../src/controllers/keystore/keystore.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable class-methods-use-this */\n/* eslint-disable new-cap */\n/* eslint-disable @typescript-eslint/no-shadow */\nimport aes from 'aes-js'\nimport {\n  decryptWithPrivateKey,\n  Encrypted,\n  encryptWithPublicKey,\n  publicKeyByPrivateKey\n} from 'eth-crypto'\nimport { concat, getBytes, hexlify, keccak256, Mnemonic, toUtf8Bytes, Wallet } from 'ethers'\n\n// import { entropyToMnemonic } from 'bip39'\nimport EmittableError from '../../classes/EmittableError'\nimport { DERIVATION_OPTIONS, HD_PATH_TEMPLATE_TYPE } from '../../consts/derivation'\nimport { Account } from '../../interfaces/account'\nimport { KeyIterator } from '../../interfaces/keyIterator'\nimport {\n  ExternalKey,\n  InternalKey,\n  Key,\n  KeyPreferences,\n  KeystoreSeed,\n  KeystoreSignerInterface,\n  KeystoreSignerType,\n  MainKey,\n  MainKeyEncryptedWithSecret,\n  ReadyToAddKeys,\n  StoredKey\n} from '../../interfaces/keystore'\nimport { Platform } from '../../interfaces/platform'\nimport { WindowManager } from '../../interfaces/window'\nimport { AccountOp } from '../../libs/accountOp/accountOp'\nimport { EntropyGenerator } from '../../libs/entropyGenerator/entropyGenerator'\nimport { getDefaultKeyLabel } from '../../libs/keys/keys'\nimport { ScryptAdapter } from '../../libs/scrypt/scryptAdapter'\nimport shortenAddress from '../../utils/shortenAddress'\nimport { generateUuid } from '../../utils/uuid'\nimport wait from '../../utils/wait'\nimport EventEmitter, { Statuses } from '../eventEmitter/eventEmitter'\n// eslint-disable-next-line import/no-cycle\nimport { StorageController } from '../storage/storage'\n\nconst scryptDefaults = { N: 131072, r: 8, p: 1, dkLen: 64 }\nconst CIPHER = 'aes-128-ctr'\nconst KEYSTORE_UNEXPECTED_ERROR_MESSAGE =\n  'Keystore unexpected error. If the problem persists, please contact support.'\n\nconst STATUS_WRAPPED_METHODS = {\n  unlockWithSecret: 'INITIAL',\n  addSecret: 'INITIAL',\n  addSeed: 'INITIAL',\n  updateSeed: 'INITIAL',\n  deleteSeed: 'INITIAL',\n  removeSecret: 'INITIAL',\n  addKeys: 'INITIAL',\n  addKeysExternallyStored: 'INITIAL',\n  changeKeystorePassword: 'INITIAL',\n  updateKeyPreferences: 'INITIAL'\n} as const\n\nfunction getBytesForSecret(secret: string): ArrayLike<number> {\n  // see https://github.com/ethers-io/ethers.js/blob/v5/packages/json-wallets/src.ts/utils.ts#L19-L24\n  return toUtf8Bytes(secret, 'NFKC')\n}\n\n/**\n * The KeystoreController is a class that manages a collection of encrypted keys.\n * It provides methods for adding, removing, and retrieving keys. The keys are\n * encrypted using a main key, which is itself encrypted using one or more secrets.\n *\n * Docs:\n *   - Secrets are strings that are used to encrypt the mainKey; the mainKey\n *     could be encrypted with many secrets\n *   - All individual keys are encrypted with the mainKey\n *   - The mainKey is kept in memory, but only for the unlockedTime\n * Design decisions:\n *   - decided to store all keys in the Keystore, even if the private key itself\n *     is not stored there; simply because it's called a Keystore and the name\n *     implies the functionality\n *   - handle HW wallets in it, so that we handle everything uniformly with a\n *     single API; also, it allows future flexibility to have the concept of\n *     optional unlocking built-in; if we have interactivity, we can add\n *     `keystore.signExtraInputRequired(key)` which returns what we need from the user\n *   - `signWithkey` is presumed to be non-interactive at least from `Keystore`\n *     point of view (requiring no extra user inputs). This could be wrong, if\n *     hardware wallets require extra input - they normally always do, but with\n *     the web SDKs we \"outsource\" this to the HW wallet software itself;\n *     this may not be true on mobile\n */\nexport class KeystoreController extends EventEmitter {\n  #mainKey: MainKey | null\n\n  // Secrets are strings that are used to encrypt the mainKey.\n  // The mainKey could be encrypted with many secrets.\n  #keystoreSecrets: MainKeyEncryptedWithSecret[] = []\n\n  #storage: StorageController\n\n  #keystoreSeeds: KeystoreSeed[] = []\n\n  #tempSeed: Omit<KeystoreSeed, 'id' | 'label'> | null = null\n\n  #keystoreSigners: Partial<{ [key in Key['type']]: KeystoreSignerType }>\n\n  #keystoreKeys: StoredKey[] = []\n\n  #internalKeysToAddOnKeystoreReady: ReadyToAddKeys['internal'] = []\n\n  #externalKeysToAddOnKeystoreReady: ReadyToAddKeys['external'] = []\n\n  keyStoreUid: string | null\n\n  #isReadyToStoreKeys: boolean = false\n\n  errorMessage: string = ''\n\n  statuses: Statuses<keyof typeof STATUS_WRAPPED_METHODS> = STATUS_WRAPPED_METHODS\n\n  // Holds the initial load promise, so that one can wait until it completes\n  #initialLoadPromise: Promise<void>\n\n  #windowManager: WindowManager\n\n  #scryptAdapter: ScryptAdapter\n\n  constructor(\n    platform: Platform,\n    _storage: StorageController,\n    _keystoreSigners: Partial<{ [key in Key['type']]: KeystoreSignerType }>,\n    windowManager: WindowManager\n  ) {\n    super()\n    this.#storage = _storage\n    this.#keystoreSigners = _keystoreSigners\n    this.#mainKey = null\n    this.keyStoreUid = null\n    this.#windowManager = windowManager\n    this.#scryptAdapter = new ScryptAdapter(platform)\n    this.#initialLoadPromise = this.#load()\n  }\n\n  async #load() {\n    try {\n      const [keystoreSeeds, keyStoreUid, keystoreKeys] = await Promise.all([\n        this.#storage.get('keystoreSeeds', []),\n        this.#storage.get('keyStoreUid', null),\n        this.#storage.get('keystoreKeys', [])\n      ])\n      this.keyStoreUid = keyStoreUid\n      this.#keystoreSeeds = keystoreSeeds.map((s) => {\n        if (s.id) return s\n\n        // Migrate the old seed structure to the new one for cases where the prev versions\n        // of the extension supported only one saved seed which lacked id and label props.\n        return { ...s, id: 'legacy-saved-seed', label: 'Recovery Phrase 1' }\n      })\n      this.#keystoreKeys = keystoreKeys\n    } catch (e) {\n      this.emitError({\n        message:\n          'Something went wrong when loading the Keystore. Please try again or contact support if the problem persists.',\n        level: 'major',\n        error: new Error('keystore: failed to pull keys from storage')\n      })\n    }\n\n    try {\n      this.#keystoreSecrets = await this.#storage.get('keystoreSecrets', [])\n      this.isReadyToStoreKeys = this.#keystoreSecrets.length > 0\n    } catch (e) {\n      this.emitError({\n        message:\n          'Something went wrong when initiating the Keystore. Please try again or contact support if the problem persists.',\n        level: 'major',\n        error: new Error('keystore: failed to getMainKeyEncryptedWithSecrets() from storage')\n      })\n    }\n\n    this.emitUpdate()\n  }\n\n  lock() {\n    this.#mainKey = null\n    if (this.#tempSeed) this.deleteTempSeed(false)\n    this.emitUpdate()\n  }\n\n  get isUnlocked() {\n    return !!this.#mainKey\n  }\n\n  get hasTempSeed() {\n    return !!this.#tempSeed\n  }\n\n  get isReadyToStoreKeys() {\n    return this.#isReadyToStoreKeys\n  }\n\n  set isReadyToStoreKeys(val) {\n    this.#isReadyToStoreKeys = val\n\n    if (val && this.#internalKeysToAddOnKeystoreReady.length) {\n      this.#addKeys(this.#internalKeysToAddOnKeystoreReady)\n    }\n    if (val && this.#externalKeysToAddOnKeystoreReady.length) {\n      this.#addKeysExternallyStored(this.#externalKeysToAddOnKeystoreReady)\n    }\n  }\n\n  async getKeyStoreUid() {\n    const uid = this.keyStoreUid\n    if (!uid) throw new Error('keystore: adding secret before get uid')\n\n    return uid\n  }\n\n  // @TODO time before unlocking\n  async #unlockWithSecret(secretId: string, secret: string) {\n    await this.#initialLoadPromise\n\n    // @TODO should we check if already locked? probably not cause this function can  be used in order to verify if a secret is correct\n    if (!this.#keystoreSecrets.length) {\n      throw new EmittableError({\n        message:\n          'Trying to unlock Ambire, but the lock mechanism was not fully configured yet. Please try again or contact support if the problem persists.',\n        level: 'major',\n        error: new Error('keystore: no secrets yet')\n      })\n    }\n\n    const secretEntry = this.#keystoreSecrets.find((x) => x.id === secretId)\n    if (!secretEntry) {\n      throw new EmittableError({\n        message:\n          'Something went wrong when trying to unlock Ambire. Please try again or contact support if the problem persists.',\n        level: 'major',\n        error: new Error('keystore: secret not found')\n      })\n    }\n\n    const { scryptParams, aesEncrypted } = secretEntry\n    if (aesEncrypted.cipherType !== CIPHER) {\n      throw new EmittableError({\n        message:\n          'Something went wrong when trying to unlock Ambire. Please try again or contact support if the problem persists.',\n        level: 'major',\n        error: new Error(`keystore: unsupported cipherType ${aesEncrypted.cipherType}`)\n      })\n    }\n    await wait(0) // a trick to prevent UI freeze while the CPU is busy\n    const key = await this.#scryptAdapter.scrypt(\n      getBytesForSecret(secret),\n      getBytes(scryptParams.salt),\n      {\n        N: scryptParams.N,\n        r: scryptParams.r,\n        p: scryptParams.p,\n        dkLen: scryptParams.dkLen\n      }\n    )\n    await wait(0)\n    const iv = getBytes(aesEncrypted.iv)\n    const derivedKey = key.slice(0, 16)\n    const macPrefix = key.slice(16, 32)\n    const counter = new aes.Counter(iv)\n    const aesCtr = new aes.ModeOfOperation.ctr(derivedKey, counter)\n    const mac = keccak256(concat([macPrefix, aesEncrypted.ciphertext]))\n    if (mac !== aesEncrypted.mac) {\n      this.errorMessage = 'Incorrect password. Please try again.'\n      this.emitUpdate()\n\n      const error = new Error(this.errorMessage)\n      throw new EmittableError({ level: 'silent', message: this.errorMessage, error })\n    }\n    this.errorMessage = ''\n\n    const decrypted = aesCtr.decrypt(getBytes(aesEncrypted.ciphertext))\n    this.#mainKey = { key: decrypted.slice(0, 16), iv: decrypted.slice(16, 32) }\n  }\n\n  async unlockWithSecret(secretId: string, secret: string) {\n    await this.withStatus('unlockWithSecret', () => this.#unlockWithSecret(secretId, secret), true)\n  }\n\n  async #addSecret(\n    secretId: string,\n    secret: string,\n    extraEntropy: string = '',\n    leaveUnlocked: boolean = false\n  ) {\n    await this.#initialLoadPromise\n\n    // @TODO test\n    if (this.#keystoreSecrets.find((x) => x.id === secretId))\n      throw new EmittableError({\n        message: KEYSTORE_UNEXPECTED_ERROR_MESSAGE,\n        level: 'major',\n        error: new Error(`keystore: trying to add duplicate secret ${secretId}`)\n      })\n\n    let mainKey: MainKey | null = this.#mainKey\n    const entropyGenerator = new EntropyGenerator()\n\n    // We are not unlocked\n    if (!mainKey) {\n      if (!this.#keystoreSecrets.length) {\n        mainKey = {\n          key: entropyGenerator.generateRandomBytes(16, extraEntropy),\n          iv: entropyGenerator.generateRandomBytes(16, extraEntropy)\n        }\n      } else\n        throw new EmittableError({\n          message: KEYSTORE_UNEXPECTED_ERROR_MESSAGE,\n          level: 'major',\n          error: new Error('keystore: must unlock keystore before adding secret')\n        })\n\n      if (leaveUnlocked) {\n        this.#mainKey = mainKey\n      }\n    }\n\n    const salt = entropyGenerator.generateRandomBytes(32, extraEntropy)\n    await wait(0) // a trick to prevent UI freeze while the CPU is busy\n    const key = await this.#scryptAdapter.scrypt(getBytesForSecret(secret), salt, {\n      N: scryptDefaults.N,\n      r: scryptDefaults.r,\n      p: scryptDefaults.p,\n      dkLen: scryptDefaults.dkLen\n    })\n    await wait(0)\n    const iv = entropyGenerator.generateRandomBytes(16, extraEntropy)\n    const derivedKey = key.slice(0, 16)\n    const macPrefix = key.slice(16, 32)\n    const counter = new aes.Counter(iv)\n    const aesCtr = new aes.ModeOfOperation.ctr(derivedKey, counter)\n    const ciphertext = aesCtr.encrypt(getBytes(concat([mainKey.key, mainKey.iv])))\n    const mac = keccak256(concat([macPrefix, ciphertext]))\n\n    this.#keystoreSecrets.push({\n      id: secretId,\n      scryptParams: { salt: hexlify(salt), ...scryptDefaults },\n      aesEncrypted: {\n        cipherType: CIPHER,\n        ciphertext: hexlify(ciphertext),\n        iv: hexlify(iv),\n        mac: hexlify(mac)\n      }\n    })\n    // Persist the new secrets\n    await this.#storage.set('keystoreSecrets', this.#keystoreSecrets)\n\n    // produce uid if one doesn't exist (should be created when the first secret is added)\n    if (!this.keyStoreUid) {\n      const uid = publicKeyByPrivateKey(hexlify(getBytes(concat([mainKey.key, mainKey.iv]))))\n      this.keyStoreUid = uid\n      await this.#storage.set('keyStoreUid', uid)\n    }\n\n    this.isReadyToStoreKeys = true\n  }\n\n  async addSecret(secretId: string, secret: string, extraEntropy: string, leaveUnlocked: boolean) {\n    await this.withStatus(\n      'addSecret',\n      () => this.#addSecret(secretId, secret, extraEntropy, leaveUnlocked),\n      true\n    )\n  }\n\n  async #removeSecret(secretId: string) {\n    await this.#initialLoadPromise\n\n    if (!this.#keystoreSecrets.find((x) => x.id === secretId))\n      throw new EmittableError({\n        message: KEYSTORE_UNEXPECTED_ERROR_MESSAGE,\n        level: 'major',\n        error: new Error(`keystore: secret$ ${secretId} not found`)\n      })\n\n    this.#keystoreSecrets = this.#keystoreSecrets.filter((x) => x.id !== secretId)\n    await this.#storage.set('keystoreSecrets', this.#keystoreSecrets)\n  }\n\n  async removeSecret(secretId: string) {\n    await this.withStatus('removeSecret', () => this.#removeSecret(secretId))\n  }\n\n  get keys(): Key[] {\n    return this.#keystoreKeys.map(({ addr, type, label, dedicatedToOneSA, meta }) => {\n      // Written with this 'internal' type guard (if) on purpose, because this\n      // way TypeScript will be able to narrow down the types properly and infer\n      // the return type of the map function correctly.\n      if (type === 'internal') {\n        return {\n          addr,\n          type,\n          label,\n          dedicatedToOneSA,\n          meta,\n          isExternallyStored: false\n        }\n      }\n\n      return {\n        addr,\n        type,\n        label,\n        dedicatedToOneSA,\n        meta: meta as ExternalKey['meta'],\n        isExternallyStored: true\n      }\n    })\n  }\n\n  get seeds() {\n    return this.#keystoreSeeds.map(({ id, label, hdPathTemplate, seedPassphrase }) => ({\n      id,\n      label: label || 'Unnamed Recovery Seed',\n      hdPathTemplate,\n      withPassphrase: !!seedPassphrase\n    }))\n  }\n\n  async #getEncryptedSeedPhrase(\n    seed: KeystoreSeed['seed'],\n    seedPassphrase?: KeystoreSeed['seedPassphrase']\n  ): Promise<{\n    seed: string\n    passphrase: string | null\n  }> {\n    await this.#initialLoadPromise\n\n    if (this.#mainKey === null)\n      throw new EmittableError({\n        message: KEYSTORE_UNEXPECTED_ERROR_MESSAGE,\n        level: 'major',\n        error: new Error('keystore: needs to be unlocked')\n      })\n\n    if (!Mnemonic.isValidMnemonic(seed)) {\n      throw new EmittableError({\n        message: 'You are trying to store an invalid seed phrase.',\n        level: 'major',\n        error: new Error('keystore: trying to add an invalid seed phrase')\n      })\n    }\n\n    // Set up the cipher\n    const counter = new aes.Counter(this.#mainKey!.iv) // TS compiler fails to detect we check for null above\n    const aesCtr = new aes.ModeOfOperation.ctr(this.#mainKey!.key, counter) // TS compiler fails to detect we check for null above\\\n    return {\n      seed: hexlify(aesCtr.encrypt(new TextEncoder().encode(seed))),\n      passphrase: seedPassphrase\n        ? hexlify(aesCtr.encrypt(new TextEncoder().encode(seedPassphrase)))\n        : null\n    }\n  }\n\n  async addTempSeed({ seed, seedPassphrase, hdPathTemplate }: Omit<KeystoreSeed, 'id' | 'label'>) {\n    const validHdPath = DERIVATION_OPTIONS.some((o) => o.value === hdPathTemplate)\n    if (!validHdPath)\n      throw new EmittableError({\n        message:\n          'Incorrect derivation path when trying to update the temp seed. Please contact support',\n        level: 'major',\n        error: new Error('keystore: hd path to temp seed incorrect')\n      })\n\n    this.#tempSeed = { seed, seedPassphrase, hdPathTemplate }\n\n    this.emitUpdate()\n  }\n\n  deleteTempSeed(shouldUpdate = true) {\n    this.#tempSeed = null\n    if (shouldUpdate) this.emitUpdate()\n  }\n\n  async persistTempSeed() {\n    if (!this.#tempSeed) return\n\n    await this.#addSeed(this.#tempSeed)\n    this.#tempSeed = null\n    this.emitUpdate()\n  }\n\n  async #addSeed({ seed, seedPassphrase, hdPathTemplate }: Omit<KeystoreSeed, 'id' | 'label'>) {\n    const { seed: seedPhrase, passphrase } = await this.#getEncryptedSeedPhrase(\n      seed,\n      seedPassphrase\n    )\n\n    const existingEntry = this.#keystoreSeeds.find(\n      (entry) => entry.seed === seedPhrase && entry.seedPassphrase === seedPassphrase\n    )\n    if (existingEntry) return\n\n    const label = `Recovery Phrase ${this.#keystoreSeeds.length + 1}`\n\n    const newEntry = {\n      id: generateUuid(),\n      label,\n      seed: seedPhrase,\n      seedPassphrase: passphrase,\n      hdPathTemplate\n    }\n\n    this.#keystoreSeeds.push(newEntry)\n\n    await this.#storage.set('keystoreSeeds', this.#keystoreSeeds)\n\n    this.emitUpdate()\n  }\n\n  async addSeed(keystoreSeed: Omit<KeystoreSeed, 'id' | 'label'>) {\n    await this.withStatus('addSeed', () => this.#addSeed(keystoreSeed), true)\n  }\n\n  async #updateSeed({\n    id,\n    label,\n    hdPathTemplate\n  }: {\n    id: KeystoreSeed['id']\n    label?: KeystoreSeed['label']\n    hdPathTemplate?: KeystoreSeed['hdPathTemplate']\n  }) {\n    if (!label && !hdPathTemplate) return\n\n    const keystoreSeed = this.#keystoreSeeds.find((s) => s.id === id)\n    if (!keystoreSeed) return\n\n    if (label) keystoreSeed.label = label\n\n    if (hdPathTemplate) keystoreSeed.hdPathTemplate = hdPathTemplate\n\n    const updatedKeystoreSeeds = this.#keystoreSeeds.map((s) =>\n      s.id === keystoreSeed.id ? keystoreSeed : s\n    )\n\n    this.#keystoreSeeds = updatedKeystoreSeeds\n    await this.#storage.set('keystoreSeeds', this.#keystoreSeeds)\n\n    this.emitUpdate()\n  }\n\n  async updateSeed({\n    id,\n    label,\n    hdPathTemplate\n  }: {\n    id: KeystoreSeed['id']\n    label?: KeystoreSeed['label']\n    hdPathTemplate?: KeystoreSeed['hdPathTemplate']\n  }) {\n    await this.withStatus('updateSeed', () => this.#updateSeed({ id, label, hdPathTemplate }), true)\n  }\n\n  async deleteSeed(id: KeystoreSeed['id']) {\n    await this.withStatus('deleteSeed', () => this.#deleteSeed(id))\n  }\n\n  async #deleteSeed(id: KeystoreSeed['id']) {\n    await this.#initialLoadPromise\n\n    this.#keystoreSeeds = this.#keystoreSeeds.filter((s) => s.id !== id)\n    await this.#storage.set('keystoreSeeds', this.#keystoreSeeds)\n\n    this.emitUpdate()\n  }\n\n  async changeTempSeedHdPathTemplateIfNeeded(nextHdPathTemplate?: HD_PATH_TEMPLATE_TYPE) {\n    if (!nextHdPathTemplate) return // should never happen\n\n    await this.#initialLoadPromise\n\n    if (!this.isUnlocked) throw new Error('keystore: not unlocked')\n    if (!this.#tempSeed) throw new Error('keystore: no temp seed at the moment')\n\n    const isTheSameHdPathTemplate = this.#tempSeed.hdPathTemplate === nextHdPathTemplate\n    if (isTheSameHdPathTemplate) return\n\n    this.#tempSeed.hdPathTemplate = nextHdPathTemplate\n\n    this.emitUpdate()\n  }\n\n  async #addKeysExternallyStored(keysToAdd: ExternalKey[]) {\n    await this.#initialLoadPromise\n\n    if (!keysToAdd.length) return\n\n    if (!this.isReadyToStoreKeys) {\n      this.#externalKeysToAddOnKeystoreReady = [\n        ...this.#externalKeysToAddOnKeystoreReady,\n        ...keysToAdd\n      ]\n\n      return\n    }\n\n    // Strip out keys with duplicated private keys. One unique key is enough.\n    const uniqueKeys: { addr: Key['addr']; type: Key['type'] }[] = []\n    const uniqueKeysToAdd = keysToAdd.filter(({ addr, type }) => {\n      if (uniqueKeys.some((x) => x.addr === addr && x.type === type)) {\n        return false\n      }\n\n      uniqueKeys.push({ addr, type })\n      return true\n    })\n\n    if (!uniqueKeysToAdd.length) return\n\n    const keys = this.#keystoreKeys\n\n    const newKeys = uniqueKeysToAdd\n      .map(({ addr, type, label, dedicatedToOneSA, meta }) => ({\n        addr,\n        type,\n        label,\n        dedicatedToOneSA,\n        meta,\n        privKey: null\n      }))\n      // No need to re-add keys that are already added (with the same type / device)\n      .filter(({ addr, type }) => !keys.some((x) => x.addr === addr && x.type === type))\n\n    if (!newKeys.length) return\n\n    const nextKeys = [...keys, ...newKeys]\n\n    this.#keystoreKeys = nextKeys\n    await this.#storage.set('keystoreKeys', nextKeys)\n  }\n\n  async addKeysExternallyStored(keysToAdd: ExternalKey[]) {\n    await this.withStatus(\n      'addKeysExternallyStored',\n      () => this.#addKeysExternallyStored(keysToAdd),\n      true\n    )\n  }\n\n  async #addKeys(keysToAdd: ReadyToAddKeys['internal']) {\n    await this.#initialLoadPromise\n    if (!keysToAdd.length) return\n    if (!this.isReadyToStoreKeys) {\n      this.#internalKeysToAddOnKeystoreReady = [\n        ...this.#internalKeysToAddOnKeystoreReady,\n        ...keysToAdd\n      ]\n      return\n    }\n\n    if (this.#mainKey === null)\n      throw new EmittableError({\n        message: KEYSTORE_UNEXPECTED_ERROR_MESSAGE,\n        level: 'major',\n        error: new Error('keystore: needs to be unlocked')\n      })\n\n    // Strip out keys with duplicated private keys. One unique key is enough.\n    const uniquePrivateKeysToAddSet = new Set()\n    const uniqueKeysToAdd = keysToAdd.filter(({ privateKey }) => {\n      if (!uniquePrivateKeysToAddSet.has(privateKey)) {\n        uniquePrivateKeysToAddSet.add(privateKey)\n        return true\n      }\n      return false\n    })\n\n    if (!uniqueKeysToAdd.length) return\n\n    const keys = this.#keystoreKeys\n\n    const newKeys: StoredKey[] = uniqueKeysToAdd\n      .map(({ addr, type, label, privateKey, dedicatedToOneSA, meta }) => {\n        // eslint-disable-next-line no-param-reassign\n        privateKey = privateKey.substring(0, 2) === '0x' ? privateKey.substring(2) : privateKey\n\n        // Set up the cipher\n        const counter = new aes.Counter(this.#mainKey!.iv) // TS compiler fails to detect we check for null above\n        const aesCtr = new aes.ModeOfOperation.ctr(this.#mainKey!.key, counter) // TS compiler fails to detect we check for null above\n\n        return {\n          addr,\n          type,\n          label,\n          dedicatedToOneSA,\n          privKey: hexlify(aesCtr.encrypt(aes.utils.hex.toBytes(privateKey))), // TODO: consider a MAC?\n          meta\n        }\n      })\n      // No need to re-add keys that are already added, private key never changes\n      .filter(({ addr, type }) => !keys.some((x) => x.addr === addr && x.type === type))\n\n    if (!newKeys.length) return\n\n    const nextKeys = [...keys, ...newKeys]\n\n    this.#keystoreKeys = nextKeys\n    await this.#storage.set('keystoreKeys', nextKeys)\n  }\n\n  async addKeys(keysToAdd: ReadyToAddKeys['internal']) {\n    await this.withStatus('addKeys', () => this.#addKeys(keysToAdd), true)\n  }\n\n  async removeKey(addr: Key['addr'], type: Key['type']) {\n    await this.#initialLoadPromise\n    if (!this.isUnlocked)\n      throw new EmittableError({\n        message:\n          'Extension not unlocked. Please try again or contact support if the problem persists.',\n        level: 'major',\n        error: new Error('keystore: not unlocked')\n      })\n    const keys = this.#keystoreKeys\n    if (!keys.find((x) => x.addr === addr && x.type === type))\n      throw new EmittableError({\n        message: KEYSTORE_UNEXPECTED_ERROR_MESSAGE,\n        level: 'major',\n        error: new Error(\n          `keystore: trying to remove key that does not exist: address: ${addr}, type: ${type}`\n        )\n      })\n\n    this.#keystoreKeys = keys.filter((key) => {\n      const isMatching = key.addr === addr && key.type === type\n\n      return !isMatching\n    })\n    await this.#storage.set('keystoreKeys', this.#keystoreKeys)\n  }\n\n  async exportKeyWithPasscode(keyAddress: Key['addr'], keyType: Key['type'], passphrase: string) {\n    await this.#initialLoadPromise\n    if (this.#mainKey === null) throw new Error('keystore: needs to be unlocked')\n    const keys = this.#keystoreKeys\n    const storedKey = keys.find((x: StoredKey) => x.addr === keyAddress && x.type === keyType)\n\n    if (!storedKey) throw new Error('keystore: key not found')\n    if (storedKey.type !== 'internal') throw new Error('keystore: key does not have privateKey')\n\n    const encryptedBytes = getBytes(storedKey.privKey as string)\n    const counter = new aes.Counter(this.#mainKey.iv)\n    const aesCtr = new aes.ModeOfOperation.ctr(this.#mainKey.key, counter)\n    const decryptedBytes = aesCtr.decrypt(encryptedBytes)\n    const decryptedPrivateKey = aes.utils.hex.fromBytes(decryptedBytes)\n    const wallet = new Wallet(decryptedPrivateKey)\n    const keyBackup = await wallet.encrypt(passphrase)\n    return JSON.stringify(keyBackup)\n  }\n\n  async sendPrivateKeyToUi(keyAddress: string) {\n    const decryptedPrivateKey = await this.#getPrivateKey(keyAddress)\n    this.#windowManager.sendWindowUiMessage({ privateKey: `0x${decryptedPrivateKey}` })\n  }\n\n  async sendSeedToUi(id: string) {\n    const decrypted = await this.getSavedSeed(id)\n    this.#windowManager.sendWindowUiMessage({\n      seed: decrypted.seed,\n      seedPassphrase: decrypted.seedPassphrase\n    })\n  }\n\n  async sendTempSeedToUi() {\n    if (!this.#tempSeed) return\n\n    this.#windowManager.sendWindowUiMessage({ tempSeed: this.#tempSeed })\n  }\n\n  async #getPrivateKey(keyAddress: string): Promise<string> {\n    await this.#initialLoadPromise\n    if (this.#mainKey === null) throw new Error('keystore: needs to be unlocked')\n    const keys = this.#keystoreKeys\n\n    const storedKey = keys.find((x: StoredKey) => x.addr === keyAddress)\n    if (!storedKey) throw new Error('keystore: key not found')\n    if (storedKey.type !== 'internal') throw new Error('keystore: key does not have privateKey')\n\n    // decrypt the pk of keyAddress with the keystore's key\n    const encryptedBytes = getBytes(storedKey.privKey as string)\n    const counter = new aes.Counter(this.#mainKey.iv)\n    const aesCtr = new aes.ModeOfOperation.ctr(this.#mainKey.key, counter)\n    // encrypt the pk of keyAddress with publicKey\n    const decryptedBytes = aesCtr.decrypt(encryptedBytes)\n    return aes.utils.hex.fromBytes(decryptedBytes)\n  }\n\n  /**\n   * Export with public key encrypt\n   *\n   * @param keyAddress string - the address of the key you want to export\n   * @param publicKey string - the public key, with which to asymmetrically encrypt it (used for key sync with other device's keystoreId)\n   * @returns Encrypted\n   */\n  async exportKeyWithPublicKeyEncryption(\n    keyAddress: string,\n    publicKey: string\n  ): Promise<Encrypted> {\n    const decryptedPrivateKey = await this.#getPrivateKey(keyAddress)\n    const result = await encryptWithPublicKey(publicKey, decryptedPrivateKey)\n\n    return result\n  }\n\n  async importKeyWithPublicKeyEncryption(encryptedSk: Encrypted, dedicatedToOneSA: boolean) {\n    if (this.#mainKey === null) throw new Error('keystore: needs to be unlocked')\n    const privateKey: string = await decryptWithPrivateKey(\n      hexlify(getBytes(concat([this.#mainKey.key, this.#mainKey.iv]))),\n      encryptedSk\n    )\n    if (!privateKey) throw new Error('keystore: wrong encryptedSk or private key')\n\n    const keyToAdd: {\n      addr: Key['addr']\n      label: string\n      type: 'internal'\n      privateKey: string\n      dedicatedToOneSA: Key['dedicatedToOneSA']\n      meta: InternalKey['meta']\n    } = {\n      addr: new Wallet(privateKey).address,\n      privateKey,\n      label: getDefaultKeyLabel(this.keys, 0),\n      type: 'internal',\n      dedicatedToOneSA,\n      meta: {\n        createdAt: new Date().getTime()\n      }\n    }\n\n    await this.addKeys([keyToAdd])\n  }\n\n  async getSigner(keyAddress: Key['addr'], keyType: Key['type']): Promise<KeystoreSignerInterface> {\n    await this.#initialLoadPromise\n    const keys = this.#keystoreKeys\n    const storedKey = keys.find((x: StoredKey) => x.addr === keyAddress && x.type === keyType)\n\n    if (!storedKey) throw new Error('keystore: key not found')\n    const { addr, type, label, dedicatedToOneSA, meta } = storedKey\n\n    const key = {\n      addr,\n      type,\n      label,\n      dedicatedToOneSA,\n      meta,\n      isExternallyStored: type !== 'internal'\n    }\n\n    const SignerInitializer = this.#keystoreSigners[key.type]\n    if (!SignerInitializer) throw new Error('keystore: unsupported signer type')\n\n    if (key.type === 'internal') {\n      if (!this.isUnlocked) throw new Error('keystore: not unlocked')\n\n      const encryptedBytes = getBytes(storedKey.privKey as string)\n      // @ts-ignore\n      const counter = new aes.Counter(this.#mainKey.iv)\n      // @ts-ignore\n      const aesCtr = new aes.ModeOfOperation.ctr(this.#mainKey.key, counter)\n      const decryptedBytes = aesCtr.decrypt(encryptedBytes)\n      const decryptedPrivateKey = aes.utils.hex.fromBytes(decryptedBytes)\n\n      // @ts-ignore TODO: Figure out the correct type definition\n      return new SignerInitializer(key, decryptedPrivateKey)\n    }\n\n    // @ts-ignore TODO: Figure out the correct type definition\n    return new SignerInitializer(key)\n  }\n\n  async getSavedSeed(id: string) {\n    await this.#initialLoadPromise\n\n    if (!this.isUnlocked) throw new Error('keystore: not unlocked')\n    if (!this.#keystoreSeeds.length) throw new Error('keystore: no seed phrase added yet')\n\n    const keystoreSeed = this.#keystoreSeeds.find((s) => s.id === id)\n\n    if (!keystoreSeed) throw new Error(`keystore seed with id:${id} not found`)\n\n    const encryptedSeedBytes = getBytes(keystoreSeed.seed)\n    // @ts-ignore\n    const counter = new aes.Counter(this.#mainKey.iv)\n    // @ts-ignore\n    const aesCtr = new aes.ModeOfOperation.ctr(this.#mainKey.key, counter)\n    const decryptedSeedBytes = aesCtr.decrypt(encryptedSeedBytes)\n    const decryptedSeed = new TextDecoder().decode(decryptedSeedBytes)\n\n    if (keystoreSeed.seedPassphrase) {\n      const encryptedSeedPassphraseBytes = getBytes(keystoreSeed.seedPassphrase)\n      const decryptedSeedPassphraseBytes = aesCtr.decrypt(encryptedSeedPassphraseBytes)\n      const decryptedSeedPassphrase = new TextDecoder().decode(decryptedSeedPassphraseBytes)\n\n      return {\n        ...keystoreSeed,\n        seed: decryptedSeed,\n        seedPassphrase: decryptedSeedPassphrase\n      } as KeystoreSeed\n    }\n\n    return {\n      ...keystoreSeed,\n      seed: decryptedSeed,\n      seedPassphrase: ''\n    }\n  }\n\n  async #changeKeystorePassword(newSecret: string, oldSecret?: string, extraEntropy?: string) {\n    await this.#initialLoadPromise\n\n    // In the case the user wants to change their device password,\n    // they should also provide the previous password (oldSecret).\n    //\n    // However, in the case of KeyStore recovery, the user may have already forgotten the password,\n    // but the Keystore is already unlocked with the recovery secret.\n    // Therefore, in the last case, we can't provide the oldSecret, and we should not validate it.\n    //\n    // However, there is one problem if we leave it that way:\n    //\n    //     1. If the user recovers and unlocks the Keystore.\n    //     2. But doesn't enter a new 'password' in the recovery flow (just closes the tab).\n    //     3. And later decides to change the old password from Settings.\n    //     4. Then they would not be able to do it because they don't know the old password.\n    //\n    // We are going to discuss it in the next meeting, but for now, we are leaving it as it is.\n    // The long-term solution would be to refactor EmailVault recovery logic\n    // and not unlock the Keystore with the recovery secret unless the user provides a new passphrase.\n    if (oldSecret) await this.#unlockWithSecret('password', oldSecret)\n\n    if (!this.isUnlocked)\n      throw new EmittableError({\n        message: 'App not unlocked. Please try again or contact support if the problem persists.',\n        level: 'major',\n        error: new Error('keystore: not unlocked')\n      })\n\n    await this.#removeSecret('password')\n    await this.#addSecret('password', newSecret, extraEntropy, true)\n  }\n\n  async changeKeystorePassword(newSecret: string, oldSecret?: string, extraEntropy?: string) {\n    await this.withStatus('changeKeystorePassword', () =>\n      this.#changeKeystorePassword(newSecret, oldSecret, extraEntropy)\n    )\n  }\n\n  async updateKeyPreferences(\n    keys: { addr: Key['addr']; type: Key['type']; preferences: KeyPreferences }[]\n  ) {\n    await this.withStatus('updateKeyPreferences', async () => this.#updateKeyPreferences(keys))\n  }\n\n  async #updateKeyPreferences(\n    keys: { addr: Key['addr']; type: Key['type']; preferences: KeyPreferences }[]\n  ) {\n    this.#keystoreKeys = this.#keystoreKeys.map((keystoreKey) => {\n      const key = keys.find((k) => k.addr === keystoreKey.addr && k.type === keystoreKey.type)\n\n      if (!key) return keystoreKey\n\n      return { ...keystoreKey, ...key.preferences }\n    })\n    await this.#storage.set('keystoreKeys', this.#keystoreKeys)\n    this.emitUpdate()\n  }\n\n  resetErrorState() {\n    this.errorMessage = ''\n    this.emitUpdate()\n  }\n\n  get hasPasswordSecret() {\n    return this.#keystoreSecrets.some((x) => x.id === 'password')\n  }\n\n  get hasKeystoreTempSeed() {\n    return !!this.#tempSeed\n  }\n\n  getAccountKeys(acc: Account): Key[] {\n    return this.keys.filter((key) => acc.associatedKeys.includes(key.addr))\n  }\n\n  getFeePayerKey(op: AccountOp): Key | Error {\n    const feePayerKeys = this.keys.filter((key) => key.addr === op.gasFeePayment!.paidBy)\n    const feePayerKey =\n      // Temporarily prioritize the key with the same type as the signing key.\n      // TODO: Implement a way to choose the key type to broadcast with.\n      feePayerKeys.find((key) => key.type === op.signingKeyType) || feePayerKeys[0]\n\n    if (!feePayerKey) {\n      const missingKeyAddr = shortenAddress(op.gasFeePayment!.paidBy, 13)\n      const accAddr = shortenAddress(op.accountAddr, 13)\n      return new Error(\n        `Key with address ${missingKeyAddr} for account with address ${accAddr} not found. 'Please try again or contact support if the problem persists.'`\n      )\n    }\n\n    return feePayerKey\n  }\n\n  isKeyIteratorInitializedWithTempSeed(keyIterator?: KeyIterator | null) {\n    if (!this.#tempSeed || !keyIterator || keyIterator.subType !== 'seed') return false\n\n    return !!keyIterator.isSeedMatching && keyIterator.isSeedMatching(this.#tempSeed.seed)\n  }\n\n  async getKeystoreSeed(keyIterator?: KeyIterator | null) {\n    if (!keyIterator || keyIterator.subType !== 'seed') return null\n\n    if (keyIterator.getEncryptedSeed) {\n      const encryptedKeyIteratorSeed = await keyIterator.getEncryptedSeed(\n        this.#getEncryptedSeedPhrase.bind(this)\n      )\n\n      return (\n        this.#keystoreSeeds.find(\n          (s) =>\n            s.seed === encryptedKeyIteratorSeed?.seed &&\n            (s.seedPassphrase || '') === (encryptedKeyIteratorSeed?.passphrase || '')\n        ) || null\n      )\n    }\n\n    return null\n  }\n\n  async updateKeystoreKeys() {\n    const keystoreKeys = await this.#storage.get('keystoreKeys', [])\n    this.#keystoreKeys = keystoreKeys\n\n    this.emitUpdate()\n  }\n\n  toJSON() {\n    return {\n      ...this,\n      ...super.toJSON(),\n      // includes the getters in the stringified instance\n      isUnlocked: this.isUnlocked,\n      keys: this.keys,\n      seeds: this.seeds,\n      hasPasswordSecret: this.hasPasswordSecret,\n      hasKeystoreTempSeed: this.hasKeystoreTempSeed,\n      hasTempSeed: this.hasTempSeed,\n      isReadyToStoreKeys: this.isReadyToStoreKeys\n    }\n  }\n}\n"]}