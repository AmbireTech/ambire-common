{"version":3,"file":"addressBook.js","sourceRoot":"","sources":["../../../../src/controllers/addressBook/addressBook.ts"],"names":[],"mappings":"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","sourcesContent":["import { getAddress } from 'ethers'\n\nimport { Account } from '../../interfaces/account'\nimport { Storage } from '../../interfaces/storage'\nimport { AccountsController } from '../accounts/accounts'\nimport EventEmitter from '../eventEmitter/eventEmitter'\nimport { SelectedAccountController } from '../selectedAccount/selectedAccount'\n\nexport type Contact = {\n  name: string\n  address: Account['addr']\n  isWalletAccount?: boolean\n  createdAt?: number\n  updatedAt?: number\n}\n\nexport type Contacts = Array<Contact>\n\n/**\n * AddressBook controller- responsible for managing contacts in the Address Book. There are two internal types of contacts in the Address Book:\n * 1. Manually added contacts (stored in storage)- can be added, renamed and removed using this controller.\n * 2. Contacts, generated on the fly from the accounts in the wallet (not stored in storage)- can be managed via other controllers and are read-only in this one.\n * Both types of contacts are combined and returned as a single array of contacts.\n */\n\nexport class AddressBookController extends EventEmitter {\n  // Manually added contact (stored in storage)\n  #manuallyAddedContacts: Contacts = []\n\n  #storage: Storage\n\n  #initialLoadPromise: Promise<void>\n\n  #accounts: AccountsController\n\n  #selectedAccount: SelectedAccountController\n\n  constructor(\n    storage: Storage,\n    accounts: AccountsController,\n    selectedAccount: SelectedAccountController\n  ) {\n    super()\n\n    this.#storage = storage\n    this.#accounts = accounts\n    this.#selectedAccount = selectedAccount\n\n    this.#initialLoadPromise = this.#load()\n  }\n\n  // Contacts, generated on the fly from the accounts in the wallet (not stored in storage)\n  get #walletAccountsSourcedContacts() {\n    return this.#accounts.accounts.map((account) => ({\n      name: account.preferences.label,\n      address: account.addr,\n      isWalletAccount: true\n    }))\n  }\n\n  get contacts() {\n    if (!this.#selectedAccount.account) return []\n\n    return [...this.#manuallyAddedContacts, ...this.#walletAccountsSourcedContacts].filter(\n      ({ address }) => address !== this.#selectedAccount.account!.addr\n    )\n  }\n\n  async #load() {\n    await this.#accounts.initialLoadPromise\n    try {\n      this.#manuallyAddedContacts = await this.#storage.get('contacts', [])\n      this.emitUpdate()\n    } catch (e) {\n      this.emitError({\n        message:\n          'Something went wrong when loading the Address Book. Please try again or contact support if the problem persists.',\n        level: 'major',\n        error: new Error('Address Book: failed to load contacts from the Address Book')\n      })\n    }\n  }\n\n  #handleManuallyAddedContactsChange() {\n    this.emitUpdate()\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.#storage.set('contacts', this.#manuallyAddedContacts)\n  }\n\n  #findManuallyAddedContactWithAddress(address: string) {\n    return this.#manuallyAddedContacts.find(\n      (contact) => contact.address.toLowerCase() === address.toLowerCase()\n    )\n  }\n\n  #findContactWithAddress(address: string) {\n    return !this.contacts.some((contact) => contact.address.toLowerCase() === address.toLowerCase())\n  }\n\n  #getChecksummedAddress(address: string) {\n    try {\n      return getAddress(address)\n    } catch {\n      this.emitError({\n        message: 'Invalid address',\n        level: 'minor',\n        error: new Error('Address Book: invalid address')\n      })\n      return ''\n    }\n  }\n\n  async addContact(name: string, address: string) {\n    await this.#initialLoadPromise\n    const checksummedAddress = this.#getChecksummedAddress(address)\n    const trimmedName = name.trim()\n\n    if (!this.#findContactWithAddress(checksummedAddress)) {\n      this.emitError({\n        message: 'Contact with this address already exists in the Address Book',\n        level: 'minor',\n        error: new Error(\n          'Address Book: contact with this address already exists in the Address Book'\n        )\n      })\n      return\n    }\n\n    this.#manuallyAddedContacts.push({\n      name: trimmedName,\n      address: checksummedAddress,\n      createdAt: Date.now(),\n      updatedAt: Date.now()\n    })\n\n    this.#handleManuallyAddedContactsChange()\n  }\n\n  async renameManuallyAddedContact(address: string, newName: string) {\n    await this.#initialLoadPromise\n    const checksummedAddress = this.#getChecksummedAddress(address)\n    const trimmedNewName = newName.trim()\n\n    if (!this.#findManuallyAddedContactWithAddress(checksummedAddress)) {\n      this.emitError({\n        message: \"Can't rename contact that doesn't exist in the Address Book\",\n        level: 'minor',\n        error: new Error(\n          \"Address Book: can't rename contact that doesn't exist in the Address Book\"\n        )\n      })\n      return\n    }\n\n    this.#manuallyAddedContacts = this.#manuallyAddedContacts.map((contact) => {\n      if (contact.address.toLowerCase() === address.toLowerCase()) {\n        return { ...contact, name: trimmedNewName, updatedAt: Date.now() }\n      }\n\n      return contact\n    })\n\n    this.#handleManuallyAddedContactsChange()\n  }\n\n  async removeManuallyAddedContact(address: string) {\n    await this.#initialLoadPromise\n    const checksummedAddress = this.#getChecksummedAddress(address)\n\n    if (!this.#findManuallyAddedContactWithAddress(checksummedAddress)) {\n      this.emitError({\n        message: \"Can't remove contact that doesn't exist in the Address Book\",\n        level: 'minor',\n        error: new Error(\n          \"Address Book: can't remove contact that doesn't exist in the Address Book\"\n        )\n      })\n      return\n    }\n\n    this.#manuallyAddedContacts = this.#manuallyAddedContacts.filter(\n      (contact) => contact.address.toLowerCase() !== address.toLowerCase()\n    )\n\n    this.#handleManuallyAddedContactsChange()\n  }\n\n  toJSON() {\n    return {\n      ...this,\n      contacts: this.contacts\n    }\n  }\n}\n"]}