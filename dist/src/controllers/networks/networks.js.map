{"version":3,"file":"networks.js","sourceRoot":"","sources":["../../../../src/controllers/networks/networks.ts"],"names":[],"mappings":"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","sourcesContent":["import EmittableError from '../../classes/EmittableError'\nimport { networks as predefinedNetworks } from '../../consts/networks'\nimport { Fetch } from '../../interfaces/fetch'\nimport {\n  AddNetworkRequestParams,\n  ChainId,\n  Network,\n  NetworkInfo,\n  NetworkInfoLoading,\n  RelayerNetworkConfigResponse\n} from '../../interfaces/network'\nimport { getFeaturesByNetworkProperties, getNetworkInfo } from '../../libs/networks/networks'\nimport { relayerCall } from '../../libs/relayerCall/relayerCall'\nimport { mapRelayerNetworkConfigToAmbireNetwork } from '../../utils/networks'\nimport EventEmitter, { Statuses } from '../eventEmitter/eventEmitter'\nimport { StorageController } from '../storage/storage'\n\nconst STATUS_WRAPPED_METHODS = {\n  addNetwork: 'INITIAL',\n  updateNetwork: 'INITIAL'\n} as const\n\n/**\n * The NetworksController is responsible for managing networks. It handles both predefined networks and those\n * that users can add either through a dApp request or manually via the UI. This controller provides functions\n * for adding, updating, and removing networks.\n */\nexport class NetworksController extends EventEmitter {\n  #storage: StorageController\n\n  #fetch: Fetch\n\n  #callRelayer: Function\n\n  #networks: { [key: string]: Network } = {}\n\n  statuses: Statuses<keyof typeof STATUS_WRAPPED_METHODS> = STATUS_WRAPPED_METHODS\n\n  networkToAddOrUpdate: {\n    chainId: Network['chainId']\n    rpcUrl: string\n    info?: NetworkInfoLoading<NetworkInfo>\n  } | null = null\n\n  #onRemoveNetwork: (chainId: bigint) => void\n\n  /** Callback that gets called when adding or updating network */\n  #onAddOrUpdateNetwork: (network: Network) => void\n\n  // Holds the initial load promise, so that one can wait until it completes\n  initialLoadPromise: Promise<void>\n\n  constructor(\n    storage: StorageController,\n    fetch: Fetch,\n    relayerUrl: string,\n    onAddOrUpdateNetwork: (network: Network) => void,\n    onRemoveNetwork: (chainId: bigint) => void\n  ) {\n    super()\n    this.#storage = storage\n    this.#fetch = fetch\n    this.#callRelayer = relayerCall.bind({ url: relayerUrl, fetch })\n    this.#onAddOrUpdateNetwork = onAddOrUpdateNetwork\n    this.#onRemoveNetwork = onRemoveNetwork\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.initialLoadPromise = this.#load()\n  }\n\n  get isInitialized(): boolean {\n    return !!Object.keys(this.#networks).length\n  }\n\n  get allNetworks(): Network[] {\n    if (!Object.keys(this.#networks).length) return predefinedNetworks\n\n    const uniqueNetworksByChainId = Object.values(this.#networks)\n      .sort((a, b) => +b.predefined - +a.predefined) // first predefined\n      .filter((item, index, self) => self.findIndex((i) => i.chainId === item.chainId) === index) // unique by chainId (predefined with priority)\n    return uniqueNetworksByChainId.map((network) => {\n      // eslint-disable-next-line no-param-reassign\n      network.features = getFeaturesByNetworkProperties(\n        {\n          isSAEnabled: network.isSAEnabled,\n          isOptimistic: network.isOptimistic ?? false,\n          rpcNoStateOverride: network.rpcNoStateOverride,\n          erc4337: network.erc4337,\n          areContractsDeployed: network.areContractsDeployed,\n          feeOptions: network.feeOptions,\n          platformId: network.platformId,\n          nativeAssetId: network.nativeAssetId,\n          flagged: network.flagged ?? false,\n          chainId: network.chainId,\n          hasSingleton: network.hasSingleton\n        },\n        network\n      )\n      return network\n    })\n  }\n\n  get networks(): Network[] {\n    return this.allNetworks.filter((network) => !network.disabled)\n  }\n\n  get disabledNetworks(): Network[] {\n    return this.allNetworks.filter((network) => network.disabled)\n  }\n\n  /**\n   * Loads and synchronizes network configurations from storage and the relayer.\n   *\n   * This method performs the following steps:\n   * 1. Retrieves the latest network configurations from storage.\n   * 2. If no networks are found in storage, sets predefined networks and emits an update.\n   * 3. Merges the networks from the Relayer with the stored networks.\n   * 4. Ensures predefined networks are marked correctly and handles special cases (e.g., Odyssey network).\n   * 5. Sorts networks with predefined ones first, followed by custom networks, ordered by chainId.\n   * 6. Updates the networks in storage.\n   * 7. Asynchronously updates network features if needed.\n   *\n   * This method ensures that the application has the most up-to-date network configurations,\n   * handles migration of legacy data, and maintains consistency between stored and relayer-provided networks.\n   */\n  async #load() {\n    // Step 1. Get latest storage (networksInStorage)\n    const networksInStorage: { [key: string]: Network } = await this.#storage.get('networks', {})\n\n    let finalNetworks: { [key: string]: Network } = {}\n\n    // If networksInStorage is empty, set predefinedNetworks and emit update\n    if (!Object.keys(networksInStorage).length) {\n      finalNetworks = predefinedNetworks.reduce((acc, network) => {\n        acc[network.chainId.toString()] = network\n        return acc\n      }, {} as { [key: string]: Network })\n      this.#networks = finalNetworks\n      this.emitUpdate()\n    }\n\n    finalNetworks = Object.fromEntries(\n      Object.values(networksInStorage).map((network) => [network.chainId.toString(), network])\n    )\n\n    // Step 4: Merge the networks from the Relayer\n    finalNetworks = await this.mergeRelayerNetworks(finalNetworks, networksInStorage)\n\n    this.#networks = finalNetworks\n    this.emitUpdate()\n\n    await this.#storage.set('networks', this.#networks)\n\n    // Step 8: Update networks features asynchronously\n    this.#updateNetworkFeatures(finalNetworks)\n  }\n\n  /**\n   * Processes network updates, finalizes changes, and updates network features asynchronously.\n   * Used for periodically network synchronization.\n   */\n  async synchronizeNetworks() {\n    const networksInStorage: { [key: string]: Network } = await this.#storage.get('networks', {})\n    const finalNetworks = { ...this.#networks }\n\n    // Process updates (merge Relayer data and apply rules)\n    const updatedNetworks = await this.mergeRelayerNetworks(finalNetworks, networksInStorage)\n\n    // Finalize updates\n    this.#networks = updatedNetworks\n    this.emitUpdate()\n    await this.#storage.set('networks', this.#networks)\n\n    // Asynchronously update network features\n    this.#updateNetworkFeatures(updatedNetworks)\n  }\n\n  /**\n   * Merges locally stored networks with those fetched from the Relayer.\n   *\n   * This function ensures that networks retrieved from the Relayer are properly merged\n   * with existing stored networks, keeping track of configuration versions and handling\n   * predefined networks appropriately. It also ensures that the latest RPC URLs are\n   * maintained and applies special-case handling where needed.\n   *\n   * ### Functionality:\n   * 1. Fetches the latest network configurations from the Relayer.\n   * 2. Maps and merges the fetched networks with those stored locally.\n   * 3. If a network does not exist in storage, it is added from the Relayer.\n   * 4. If a network is predefined but has an outdated configuration, it is updated.\n   * 5. Ensures RPC URLs are combined uniquely across sources.\n   * 6. Removes predefined flags if a predefined network is removed by the Relayer.\n   * 7. Applies special handling for networks like Odyssey.\n   *\n   */\n  async mergeRelayerNetworks(\n    finalNetworks: { [key: string]: Network },\n    networksInStorage: { [key: string]: Network }\n  ): Promise<{ [key: string]: Network }> {\n    let relayerNetworks: RelayerNetworkConfigResponse = {}\n    const updatedNetworks = { ...finalNetworks }\n    try {\n      const res = await this.#callRelayer('/v2/config/networks')\n      relayerNetworks = res.data.extensionConfigNetworks\n\n      Object.entries(relayerNetworks).forEach(([_chainId, network]) => {\n        const chainId = BigInt(_chainId)\n        const relayerNetwork = mapRelayerNetworkConfigToAmbireNetwork(chainId, network)\n        const storedNetwork = Object.values(networksInStorage).find((n) => n.chainId === chainId)\n        const disabledByDefault = relayerNetwork.disabledByDefault\n        // Remove values that should not be stored\n        delete relayerNetwork.disabledByDefault\n\n        if (!storedNetwork) {\n          updatedNetworks[chainId.toString()] = {\n            ...(predefinedNetworks.find((n) => n.chainId === relayerNetwork.chainId) || {}),\n            ...relayerNetwork,\n            disabled: !!disabledByDefault\n          }\n          return\n        }\n\n        // If the network is custom we assume predefinedConfigVersion = 0\n        if (storedNetwork.predefinedConfigVersion === undefined) {\n          storedNetwork.predefinedConfigVersion = 0\n        }\n\n        // Mechanism to force an update network preferences if needed\n        const shouldOverrideStoredNetwork =\n          relayerNetwork.predefinedConfigVersion > 0 &&\n          relayerNetwork.predefinedConfigVersion > storedNetwork.predefinedConfigVersion\n\n        if (shouldOverrideStoredNetwork) {\n          updatedNetworks[chainId.toString()] = {\n            ...(predefinedNetworks.find((n) => n.chainId === relayerNetwork.chainId) || {}),\n            ...relayerNetwork,\n            rpcUrls: [...new Set([...relayerNetwork.rpcUrls, ...storedNetwork.rpcUrls])]\n          }\n        } else {\n          updatedNetworks[chainId.toString()] = {\n            ...storedNetwork,\n            rpcUrls: [...new Set([...relayerNetwork.rpcUrls, ...storedNetwork.rpcUrls])],\n            iconUrls: relayerNetwork.iconUrls,\n            predefined: relayerNetwork.predefined\n          }\n        }\n      })\n\n      // Step 3: Ensure predefined networks are marked correctly and handle special cases\n      let predefinedChainIds = Object.keys(relayerNetworks)\n\n      if (!predefinedChainIds.length) {\n        predefinedChainIds = predefinedNetworks.map((network) => network.chainId.toString())\n      }\n\n      Object.keys(updatedNetworks).forEach((chainId: string) => {\n        const network = updatedNetworks[chainId]\n\n        // If a predefined network is removed by the relayer, mark it as custom\n        // and remove the predefined flag\n        // Update the hasRelayer flag to false just in case\n        if (!predefinedChainIds.includes(network.chainId.toString()) && network.predefined) {\n          updatedNetworks[chainId] = { ...network, predefined: false, hasRelayer: false }\n        }\n      })\n    } catch (e: any) {\n      console.error('Failed to fetch networks from the Relayer', e)\n    }\n\n    return updatedNetworks\n  }\n\n  /**\n   * Updates network features asynchronously if needed.\n   */\n  async #updateNetworkFeatures(finalNetworks: { [key: string]: Network }) {\n    const updatePromises = Object.values(finalNetworks).map(async (network) => {\n      if (network.isSAEnabled) return\n\n      if (\n        network.lastUpdatedNetworkInfo &&\n        Date.now() - network.lastUpdatedNetworkInfo <= 24 * 60 * 60 * 1000\n      )\n        return\n\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      getNetworkInfo(\n        this.#fetch,\n        network.selectedRpcUrl,\n        network.chainId,\n        async (info) => {\n          if (Object.values(info).some((prop) => prop === 'LOADING')) {\n            return\n          }\n\n          // If RPC is flagged there might be an issue with the RPC\n          // this information will fail to return\n          // and we dont want to update lastUpdatedNetworkInfo\n          if (info.flagged) return\n          const chainId = network.chainId.toString()\n          this.#networks[chainId] = {\n            ...this.#networks[chainId],\n            ...(info as NetworkInfo),\n            lastUpdatedNetworkInfo: Date.now()\n          }\n\n          await this.#storage.set('networks', this.#networks)\n\n          this.emitUpdate()\n        },\n        network\n      )\n    })\n\n    await Promise.all(updatePromises)\n  }\n\n  async setNetworkToAddOrUpdate(\n    networkToAddOrUpdate: {\n      chainId: Network['chainId']\n      rpcUrl: string\n    } | null = null\n  ) {\n    await this.initialLoadPromise\n\n    if (networkToAddOrUpdate) {\n      this.networkToAddOrUpdate = networkToAddOrUpdate\n      this.emitUpdate()\n\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      getNetworkInfo(\n        this.#fetch,\n        networkToAddOrUpdate.rpcUrl,\n        networkToAddOrUpdate.chainId,\n        (info) => {\n          if (this.networkToAddOrUpdate) {\n            this.networkToAddOrUpdate = { ...this.networkToAddOrUpdate, info }\n            this.emitUpdate()\n          }\n        },\n        this.#networks[networkToAddOrUpdate.chainId.toString()]\n      )\n    } else {\n      this.networkToAddOrUpdate = null\n      this.emitUpdate()\n    }\n  }\n\n  async #addNetwork(network: AddNetworkRequestParams) {\n    await this.initialLoadPromise\n    if (\n      !this.networkToAddOrUpdate?.info ||\n      Object.values(this.networkToAddOrUpdate.info).some((prop) => prop === 'LOADING')\n    ) {\n      return\n    }\n\n    const chainIds = this.allNetworks.map((net) => net.chainId)\n    // make sure the id and chainId of the network are unique\n    if (chainIds.indexOf(BigInt(network.chainId)) !== -1) {\n      throw new EmittableError({\n        message: 'The network you are trying to add has already been added.',\n        level: 'major',\n        error: new Error('settings: addNetwork chain already added (duplicate id/chainId)')\n      })\n    }\n\n    const info = { ...(this.networkToAddOrUpdate.info as NetworkInfo) }\n    const { feeOptions } = info\n\n    // @ts-ignore\n    delete info.feeOptions\n    this.#networks[network.chainId.toString()] = {\n      ...network,\n      ...info,\n      feeOptions,\n      features: getFeaturesByNetworkProperties(info, undefined),\n      hasRelayer: false,\n      predefined: false,\n      has7702: false\n    }\n\n    this.#onAddOrUpdateNetwork(this.#networks[network.chainId.toString()])\n\n    await this.#storage.set('networks', this.#networks)\n    this.networkToAddOrUpdate = null\n    this.emitUpdate()\n  }\n\n  async addNetwork(network: AddNetworkRequestParams) {\n    await this.withStatus('addNetwork', () => this.#addNetwork(network))\n  }\n\n  async #updateNetwork(network: Partial<Network>, chainId: ChainId) {\n    await this.initialLoadPromise\n\n    if (!Object.keys(network).length) return\n\n    const networkData = this.allNetworks.find((n) => n.chainId === chainId)\n    const changedNetwork: Network = Object.keys(network).reduce((acc, key) => {\n      if (!networkData) return acc\n\n      // No need to save unchanged networks. Here we filter the networks that are the same as the ones in the storage.\n      if (network[key as keyof Network] === networkData[key as keyof Network]) return acc\n\n      return { ...acc, [key]: network[key as keyof Network] }\n    }, {} as Network)\n\n    // Update the networks with the incoming new values\n    this.#networks[chainId.toString()] = {\n      ...networkData,\n      ...changedNetwork\n    }\n\n    this.#onAddOrUpdateNetwork(this.#networks[chainId.toString()])\n    await this.#storage.set('networks', this.#networks)\n\n    const checkRPC = async (\n      networkToAddOrUpdate: {\n        chainId: bigint\n        rpcUrl: string\n        info?: NetworkInfoLoading<NetworkInfo> | undefined\n      } | null\n    ) => {\n      if (changedNetwork.selectedRpcUrl) {\n        if (\n          networkToAddOrUpdate?.info &&\n          Object.values(networkToAddOrUpdate.info).every((prop) => prop !== 'LOADING')\n        ) {\n          const info = { ...(networkToAddOrUpdate.info as NetworkInfo) }\n          const { feeOptions } = info\n\n          // eslint-disable-next-line no-param-reassign\n          delete (info as any).feeOptions\n          this.#networks[chainId.toString()] = {\n            ...this.#networks[chainId.toString()],\n            ...info,\n            ...feeOptions\n          }\n\n          await this.#storage.set('networks', this.#networks)\n\n          this.emitUpdate()\n          return\n        }\n\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        getNetworkInfo(\n          this.#fetch,\n          changedNetwork.selectedRpcUrl,\n          this.#networks[chainId.toString()].chainId!,\n          async (info) => {\n            if (Object.values(info).some((prop) => prop === 'LOADING')) {\n              return\n            }\n\n            const { feeOptions } = info as NetworkInfo\n\n            // eslint-disable-next-line no-param-reassign\n            delete (info as any).feeOptions\n            this.#networks[chainId.toString()] = {\n              ...this.#networks[chainId.toString()],\n              ...(info as NetworkInfo),\n              ...feeOptions\n            }\n\n            await this.#storage.set('networks', this.#networks)\n\n            this.emitUpdate()\n          },\n          this.#networks[chainId.toString()]\n        )\n      }\n    }\n\n    // Do not wait the rpc validation in order to complete the execution of updateNetwork\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    checkRPC(this.networkToAddOrUpdate)\n    this.networkToAddOrUpdate = null\n\n    this.emitUpdate()\n  }\n\n  async updateNetwork(network: Partial<Network>, chainId: ChainId) {\n    await this.withStatus('updateNetwork', () => this.#updateNetwork(network, chainId))\n  }\n\n  /**\n   * @deprecated - users can no longer remove networks from the UI\n   */\n  async removeNetwork(chainId: ChainId) {\n    await this.initialLoadPromise\n\n    if (!this.#networks[chainId.toString()]) return\n    delete this.#networks[chainId.toString()]\n    this.#onRemoveNetwork(chainId)\n    await this.#storage.set('networks', this.#networks)\n    this.emitUpdate()\n  }\n\n  toJSON() {\n    return {\n      ...this,\n      ...super.toJSON(),\n      isInitialized: this.isInitialized,\n      networks: this.networks,\n      disabledNetworks: this.disabledNetworks,\n      allNetworks: this.allNetworks\n    }\n  }\n}\n"]}