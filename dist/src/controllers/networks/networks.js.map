{"version":3,"file":"networks.js","sourceRoot":"","sources":["../../../../src/controllers/networks/networks.ts"],"names":[],"mappings":"AAAA,OAAO,cAAc,MAAM,8BAA8B,CAAA;AACzD,OAAO,EAAE,QAAQ,IAAI,kBAAkB,EAAE,MAAM,uBAAuB,CAAA;AAUtE,OAAO,EACL,8BAA8B,EAC9B,cAAc,EACd,aAAa,EACb,mCAAmC,EACpC,MAAM,8BAA8B,CAAA;AACrC,OAAO,YAA0B,MAAM,8BAA8B,CAAA;AAErE,MAAM,sBAAsB,GAAG;IAC7B,UAAU,EAAE,SAAS;IACrB,aAAa,EAAE,SAAS;CAChB,CAAA;AAEV;;;;GAIG;AACH,MAAM,OAAO,kBAAmB,SAAQ,YAAY;IAClD,QAAQ,CAAS;IAEjB,MAAM,CAAO;IAEb,SAAS,GAAkC,EAAE,CAAA;IAE7C,QAAQ,GAAkD,sBAAsB,CAAA;IAEhF,oBAAoB,GAIT,IAAI,CAAA;IAEf,gBAAgB,CAAyB;IAEzC,qBAAqB,CAA4B;IAEjD,0EAA0E;IAC1E,kBAAkB,CAAe;IAEjC,YACE,OAAgB,EAChB,KAAY,EACZ,oBAAgD,EAChD,eAAwC;QAExC,KAAK,EAAE,CAAA;QACP,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAA;QACvB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAA;QACnB,IAAI,CAAC,qBAAqB,GAAG,oBAAoB,CAAA;QACjD,IAAI,CAAC,gBAAgB,GAAG,eAAe,CAAA;QACvC,mEAAmE;QACnE,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,KAAK,EAAE,CAAA;IACxC,CAAC;IAED,IAAI,aAAa;QACf,OAAO,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,MAAM,CAAA;IAC7C,CAAC;IAED,IAAI,QAAQ;QACV,IAAI,CAAC,IAAI,CAAC,SAAS;YAAE,OAAO,kBAAkB,CAAA;QAE9C,MAAM,uBAAuB,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;aAC1D,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,mBAAmB;aACjE,MAAM,CAAC,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,KAAK,IAAI,CAAC,OAAO,CAAC,KAAK,KAAK,CAAC,CAAA,CAAC,+CAA+C;QAC7I,OAAO,uBAAuB,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE;YAC7C,6CAA6C;YAC7C,OAAO,CAAC,QAAQ,GAAG,8BAA8B,CAAC;gBAChD,WAAW,EAAE,OAAO,CAAC,WAAW;gBAChC,YAAY,EAAE,OAAO,CAAC,YAAY,IAAI,KAAK;gBAC3C,kBAAkB,EAAE,OAAO,CAAC,kBAAkB;gBAC9C,OAAO,EAAE,OAAO,CAAC,OAAO;gBACxB,oBAAoB,EAAE,OAAO,CAAC,oBAAoB;gBAClD,UAAU,EAAE,OAAO,CAAC,UAAU;gBAC9B,UAAU,EAAE,OAAO,CAAC,UAAU;gBAC9B,aAAa,EAAE,OAAO,CAAC,aAAa;gBACpC,OAAO,EAAE,OAAO,CAAC,OAAO,IAAI,KAAK;gBACjC,OAAO,EAAE,OAAO,CAAC,OAAO;gBACxB,YAAY,EAAE,OAAO,CAAC,YAAY;gBAClC,SAAS,EAAE,OAAO,CAAC,SAAS;aAC7B,CAAC,CAAA;YACF,OAAO,OAAO,CAAA;QAChB,CAAC,CAAC,CAAA;IACJ,CAAC;IAED,KAAK,CAAC,KAAK;QACT,MAAM,wBAAwB,GAC5B,MAAM,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,oBAAoB,EAAE,SAAS,CAAC,CAAA;QAC1D,IAAI,cAA6C,CAAA;QACjD,cAAc,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,EAAE,EAAE,CAAC,CAAA;QACxD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,MAAM,IAAI,wBAAwB,EAAE;YACnE,cAAc,GAAG,MAAM,mCAAmC,CAAC,wBAAwB,CAAC,CAAA;YACpF,MAAM,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,EAAE,cAAc,CAAC,CAAA;YACnD,MAAM,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,oBAAoB,CAAC,CAAA;SACjD;QACD,IAAI,CAAC,SAAS,GAAG,cAAc,CAAA;QAE/B,kBAAkB,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE;YAC/B,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG;gBACrB,GAAG,CAAC;gBACJ,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC;gBAC/B,kDAAkD;gBAClD,UAAU,EAAE,CAAC,CAAC,UAAU;gBACxB,UAAU,EAAE,CAAC,CAAC,UAAU;gBACxB,OAAO,EAAE;oBACP,OAAO,EAAE,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,iBAAiB,EAAE,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,SAAS,CAAC;oBACzF,YAAY,EAAE,CAAC,CAAC,OAAO,CAAC,YAAY;oBACpC,cAAc,EAAE,CAAC,CAAC,OAAO,CAAC,cAAc;oBACxC,QAAQ,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ;iBAC7B;gBACD,aAAa,EAAE,CAAC,CAAC,aAAa;gBAC9B,iBAAiB,EAAE,CAAC,CAAC,iBAAiB;aACvC,CAAA;QACH,CAAC,CAAC,CAAA;QAEF,iEAAiE;QACjE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,EAAE;YAClD,MAAM,iBAAiB,GAAG,kBAAkB,CAAC,IAAI,CAC/C,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,OAAO,KAAK,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,OAAO,CAC7D,CAAA;YACD,IAAI,CAAC,iBAAiB,EAAE;gBACtB,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,UAAU,GAAG,KAAK,CAAA;aAC/C;QACH,CAAC,CAAC,CAAA;QAEF,oDAAoD;QACpD,yFAAyF;QACzF,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,CAAA;QAE7C,IAAI,CAAC,UAAU,EAAE,CAAA;IACnB,CAAC;IAED,KAAK,CAAC,uBAAuB,CAC3B,uBAIW,IAAI;QAEf,MAAM,IAAI,CAAC,kBAAkB,CAAA;QAC7B,IAAI,oBAAoB,EAAE;YACxB,IAAI,CAAC,oBAAoB,GAAG,oBAAoB,CAAA;YAChD,IAAI,CAAC,UAAU,EAAE,CAAA;YAEjB,mEAAmE;YACnE,cAAc,CACZ,IAAI,CAAC,MAAM,EACX,oBAAoB,CAAC,MAAM,EAC3B,oBAAoB,CAAC,OAAO,EAC5B,CAAC,IAAI,EAAE,EAAE;gBACP,IAAI,IAAI,CAAC,oBAAoB,EAAE;oBAC7B,IAAI,CAAC,oBAAoB,GAAG,EAAE,GAAG,IAAI,CAAC,oBAAoB,EAAE,IAAI,EAAE,CAAA;oBAClE,IAAI,CAAC,UAAU,EAAE,CAAA;iBAClB;YACH,CAAC,EACD,oBAAoB,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,SAAS,EAAE,oBAAoB,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,SAAS,CAC3F,CAAA;SACF;aAAM;YACL,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAA;YAChC,IAAI,CAAC,UAAU,EAAE,CAAA;SAClB;IACH,CAAC;IAED,KAAK,CAAC,WAAW,CAAC,OAAgC;QAChD,MAAM,IAAI,CAAC,kBAAkB,CAAA;QAC7B,IACE,CAAC,IAAI,CAAC,oBAAoB,EAAE,IAAI;YAChC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,KAAK,SAAS,CAAC,EAChF;YACA,OAAM;SACP;QACD,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,CAAA;QACxD,MAAM,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAA;QAC1C,MAAM,SAAS,GAAG,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,CAAA;QAE5C,yDAAyD;QACzD,IAAI,GAAG,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,IAAI,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE;YACrF,MAAM,IAAI,cAAc,CAAC;gBACvB,OAAO,EAAE,2DAA2D;gBACpE,KAAK,EAAE,OAAO;gBACd,KAAK,EAAE,IAAI,KAAK,CAAC,iEAAiE,CAAC;aACpF,CAAC,CAAA;SACH;QAED,MAAM,IAAI,GAAG,EAAE,GAAI,IAAI,CAAC,oBAAoB,CAAC,IAAoB,EAAE,CAAA;QACnE,MAAM,EAAE,UAAU,EAAE,GAAG,IAAI,CAAA;QAE3B,aAAa;QACb,OAAO,IAAI,CAAC,UAAU,CAAA;QACtB,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,GAAG;YAC1B,EAAE,EAAE,SAAS;YACb,GAAG,OAAO;YACV,GAAG,IAAI;YACP,UAAU;YACV,QAAQ,EAAE,8BAA8B,CAAC,IAAI,CAAC;YAC9C,UAAU,EAAE,KAAK;YACjB,UAAU,EAAE,KAAK;SAClB,CAAA;QACD,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAA;QACrD,MAAM,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,CAAA;QACnD,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAA;QAChC,IAAI,CAAC,UAAU,EAAE,CAAA;IACnB,CAAC;IAED,KAAK,CAAC,UAAU,CAAC,OAAgC;QAC/C,MAAM,IAAI,CAAC,UAAU,CAAC,YAAY,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,CAAA;IACtE,CAAC;IAED,KAAK,CAAC,cAAc,CAAC,OAAyB,EAAE,SAAoB;QAClE,MAAM,IAAI,CAAC,kBAAkB,CAAA;QAC7B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM;YAAE,OAAM;QAExC,MAAM,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,SAAS,CAAC,CAAA;QACjE,MAAM,cAAc,GAAY,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;YACvE,IAAI,CAAC,WAAW;gBAAE,OAAO,GAAG,CAAA;YAE5B,gHAAgH;YAChH,IAAI,OAAO,CAAC,GAAoB,CAAC,KAAK,WAAW,CAAC,GAAoB,CAAC;gBAAE,OAAO,GAAG,CAAA;YAEnF,OAAO,EAAE,GAAG,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,OAAO,CAAC,GAAoB,CAAC,EAAE,CAAA;QACzD,CAAC,EAAE,EAAa,CAAC,CAAA;QAEjB,mDAAmD;QACnD,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,EAAE,GAAG,cAAc,EAAE,CAAA;QAE/E,sEAAsE;QACtE,IAAI,WAAW,IAAI,cAAc,EAAE;YACjC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,OAAO,GAAG,aAAa,CACvD,IAAI,EACJ,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,EACzB,cAAc,CAAC,SAAS,CACzB,CAAA;SACF;QAED,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAA;QACrD,MAAM,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,CAAA;QAEnD,MAAM,QAAQ,GAAG,KAAK,EACpB,oBAIQ,EACR,EAAE;YACF,IAAI,cAAc,CAAC,cAAc,EAAE;gBACjC,IACE,oBAAoB,EAAE,IAAI;oBAC1B,MAAM,CAAC,MAAM,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,KAAK,SAAS,CAAC,EAC5E;oBACA,MAAM,IAAI,GAAG,EAAE,GAAI,oBAAoB,CAAC,IAAoB,EAAE,CAAA;oBAC9D,MAAM,EAAE,UAAU,EAAE,GAAG,IAAI,CAAA;oBAE3B,6CAA6C;oBAC7C,OAAQ,IAAY,CAAC,UAAU,CAAA;oBAC/B,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,GAAG;wBAC1B,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC;wBAC5B,GAAG,IAAI;wBACP,GAAG,UAAU;qBACd,CAAA;oBAED,MAAM,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,CAAA;oBAEnD,IAAI,CAAC,UAAU,EAAE,CAAA;oBACjB,OAAM;iBACP;gBAED,mEAAmE;gBACnE,cAAc,CACZ,IAAI,CAAC,MAAM,EACX,cAAc,CAAC,cAAc,EAC7B,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,OAAQ,EAClC,KAAK,EAAE,IAAI,EAAE,EAAE;oBACb,IAAI,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,KAAK,SAAS,CAAC,EAAE;wBAC1D,OAAM;qBACP;oBAED,MAAM,EAAE,UAAU,EAAE,GAAG,IAAmB,CAAA;oBAE1C,6CAA6C;oBAC7C,OAAQ,IAAY,CAAC,UAAU,CAAA;oBAC/B,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,GAAG;wBAC1B,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC;wBAC5B,GAAI,IAAoB;wBACxB,GAAG,UAAU;qBACd,CAAA;oBAED,MAAM,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,CAAA;oBAEnD,IAAI,CAAC,UAAU,EAAE,CAAA;gBACnB,CAAC,CACF,CAAA;aACF;QACH,CAAC,CAAA;QAED,qFAAqF;QACrF,mEAAmE;QACnE,QAAQ,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAA;QACnC,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAA;QAEhC,IAAI,CAAC,UAAU,EAAE,CAAA;IACnB,CAAC;IAED,KAAK,CAAC,aAAa,CAAC,OAAyB,EAAE,SAAoB;QACjE,MAAM,IAAI,CAAC,UAAU,CAAC,eAAe,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC,CAAA;IACvF,CAAC;IAED,KAAK,CAAC,aAAa,CAAC,EAAa;QAC/B,MAAM,IAAI,CAAC,kBAAkB,CAAA;QAC7B,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC;YAAE,OAAM;QAE/B,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,CAAA;QACzB,IAAI,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAA;QACzB,MAAM,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,CAAA;QACnD,IAAI,CAAC,UAAU,EAAE,CAAA;IACnB,CAAC;IAED,MAAM;QACJ,OAAO;YACL,GAAG,IAAI;YACP,GAAG,KAAK,CAAC,MAAM,EAAE;YACjB,aAAa,EAAE,IAAI,CAAC,aAAa;YACjC,QAAQ,EAAE,IAAI,CAAC,QAAQ;SACxB,CAAA;IACH,CAAC;CACF","sourcesContent":["import EmittableError from '../../classes/EmittableError'\nimport { networks as predefinedNetworks } from '../../consts/networks'\nimport { Fetch } from '../../interfaces/fetch'\nimport {\n  AddNetworkRequestParams,\n  Network,\n  NetworkId,\n  NetworkInfo,\n  NetworkInfoLoading\n} from '../../interfaces/network'\nimport { Storage } from '../../interfaces/storage'\nimport {\n  getFeaturesByNetworkProperties,\n  getNetworkInfo,\n  is4337Enabled,\n  migrateNetworkPreferencesToNetworks\n} from '../../libs/networks/networks'\nimport EventEmitter, { Statuses } from '../eventEmitter/eventEmitter'\n\nconst STATUS_WRAPPED_METHODS = {\n  addNetwork: 'INITIAL',\n  updateNetwork: 'INITIAL'\n} as const\n\n/**\n * The NetworksController is responsible for managing networks. It handles both predefined networks and those\n * that users can add either through a dApp request or manually via the UI. This controller provides functions\n * for adding, updating, and removing networks.\n */\nexport class NetworksController extends EventEmitter {\n  #storage: Storage\n\n  #fetch: Fetch\n\n  #networks: { [key: NetworkId]: Network } = {}\n\n  statuses: Statuses<keyof typeof STATUS_WRAPPED_METHODS> = STATUS_WRAPPED_METHODS\n\n  networkToAddOrUpdate: {\n    chainId: Network['chainId']\n    rpcUrl: string\n    info?: NetworkInfoLoading<NetworkInfo>\n  } | null = null\n\n  #onRemoveNetwork: (id: NetworkId) => void\n\n  #onAddOrUpdateNetwork: (network: Network) => void\n\n  // Holds the initial load promise, so that one can wait until it completes\n  initialLoadPromise: Promise<void>\n\n  constructor(\n    storage: Storage,\n    fetch: Fetch,\n    onAddOrUpdateNetwork: (network: Network) => void,\n    onRemoveNetwork: (id: NetworkId) => void\n  ) {\n    super()\n    this.#storage = storage\n    this.#fetch = fetch\n    this.#onAddOrUpdateNetwork = onAddOrUpdateNetwork\n    this.#onRemoveNetwork = onRemoveNetwork\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.initialLoadPromise = this.#load()\n  }\n\n  get isInitialized(): boolean {\n    return !!Object.keys(this.#networks).length\n  }\n\n  get networks(): Network[] {\n    if (!this.#networks) return predefinedNetworks\n\n    const uniqueNetworksByChainId = Object.values(this.#networks)\n      .sort((a, b) => +b.predefined - +a.predefined) // first predefined\n      .filter((item, index, self) => self.findIndex((i) => i.chainId === item.chainId) === index) // unique by chainId (predefined with priority)\n    return uniqueNetworksByChainId.map((network) => {\n      // eslint-disable-next-line no-param-reassign\n      network.features = getFeaturesByNetworkProperties({\n        isSAEnabled: network.isSAEnabled,\n        isOptimistic: network.isOptimistic ?? false,\n        rpcNoStateOverride: network.rpcNoStateOverride,\n        erc4337: network.erc4337,\n        areContractsDeployed: network.areContractsDeployed,\n        feeOptions: network.feeOptions,\n        platformId: network.platformId,\n        nativeAssetId: network.nativeAssetId,\n        flagged: network.flagged ?? false,\n        chainId: network.chainId,\n        hasSingleton: network.hasSingleton,\n        force4337: network.force4337\n      })\n      return network\n    })\n  }\n\n  async #load() {\n    const storedNetworkPreferences: { [key: NetworkId]: Partial<Network> } | undefined =\n      await this.#storage.get('networkPreferences', undefined)\n    let storedNetworks: { [key: NetworkId]: Network }\n    storedNetworks = await this.#storage.get('networks', {})\n    if (!Object.keys(storedNetworks).length && storedNetworkPreferences) {\n      storedNetworks = await migrateNetworkPreferencesToNetworks(storedNetworkPreferences)\n      await this.#storage.set('networks', storedNetworks)\n      await this.#storage.remove('networkPreferences')\n    }\n    this.#networks = storedNetworks\n\n    predefinedNetworks.forEach((n) => {\n      this.#networks[n.id] = {\n        ...n, // add the latest structure of the predefined network to include the new props that are not in storage yet\n        ...(this.#networks[n.id] || {}), // override with stored props\n        // attributes that should take predefined priority\n        feeOptions: n.feeOptions,\n        hasRelayer: n.hasRelayer,\n        erc4337: {\n          enabled: is4337Enabled(!!n.erc4337.hasBundlerSupport, n, this.#networks[n.id]?.force4337),\n          hasPaymaster: n.erc4337.hasPaymaster,\n          defaultBundler: n.erc4337.defaultBundler,\n          bundlers: n.erc4337.bundlers\n        },\n        nativeAssetId: n.nativeAssetId,\n        nativeAssetSymbol: n.nativeAssetSymbol\n      }\n    })\n\n    // add predefined: false for each deleted network from predefined\n    Object.keys(this.#networks).forEach((networkName) => {\n      const predefinedNetwork = predefinedNetworks.find(\n        (net) => net.chainId === this.#networks[networkName].chainId\n      )\n      if (!predefinedNetwork) {\n        this.#networks[networkName].predefined = false\n      }\n    })\n\n    // without await to avoid performance impact on load\n    // needed to keep the networks storage up to date with the latest from predefinedNetworks\n    this.#storage.set('networks', this.#networks)\n\n    this.emitUpdate()\n  }\n\n  async setNetworkToAddOrUpdate(\n    networkToAddOrUpdate: {\n      chainId: Network['chainId']\n      rpcUrl: string\n      force4337?: boolean\n    } | null = null\n  ) {\n    await this.initialLoadPromise\n    if (networkToAddOrUpdate) {\n      this.networkToAddOrUpdate = networkToAddOrUpdate\n      this.emitUpdate()\n\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      getNetworkInfo(\n        this.#fetch,\n        networkToAddOrUpdate.rpcUrl,\n        networkToAddOrUpdate.chainId,\n        (info) => {\n          if (this.networkToAddOrUpdate) {\n            this.networkToAddOrUpdate = { ...this.networkToAddOrUpdate, info }\n            this.emitUpdate()\n          }\n        },\n        networkToAddOrUpdate.force4337 ? { force4337: networkToAddOrUpdate.force4337 } : undefined\n      )\n    } else {\n      this.networkToAddOrUpdate = null\n      this.emitUpdate()\n    }\n  }\n\n  async #addNetwork(network: AddNetworkRequestParams) {\n    await this.initialLoadPromise\n    if (\n      !this.networkToAddOrUpdate?.info ||\n      Object.values(this.networkToAddOrUpdate.info).some((prop) => prop === 'LOADING')\n    ) {\n      return\n    }\n    const chainIds = this.networks.map((net) => net.chainId)\n    const ids = this.networks.map((n) => n.id)\n    const networkId = network.name.toLowerCase()\n\n    // make sure the id and chainId of the network are unique\n    if (ids.indexOf(networkId) !== -1 || chainIds.indexOf(BigInt(network.chainId)) !== -1) {\n      throw new EmittableError({\n        message: 'The network you are trying to add has already been added.',\n        level: 'major',\n        error: new Error('settings: addNetwork chain already added (duplicate id/chainId)')\n      })\n    }\n\n    const info = { ...(this.networkToAddOrUpdate.info as NetworkInfo) }\n    const { feeOptions } = info\n\n    // @ts-ignore\n    delete info.feeOptions\n    this.#networks[networkId] = {\n      id: networkId,\n      ...network,\n      ...info,\n      feeOptions,\n      features: getFeaturesByNetworkProperties(info),\n      hasRelayer: false,\n      predefined: false\n    }\n    this.#onAddOrUpdateNetwork(this.#networks[networkId])\n    await this.#storage.set('networks', this.#networks)\n    this.networkToAddOrUpdate = null\n    this.emitUpdate()\n  }\n\n  async addNetwork(network: AddNetworkRequestParams) {\n    await this.withStatus('addNetwork', () => this.#addNetwork(network))\n  }\n\n  async #updateNetwork(network: Partial<Network>, networkId: NetworkId) {\n    await this.initialLoadPromise\n    if (!Object.keys(network).length) return\n\n    const networkData = this.networks.find((n) => n.id === networkId)\n    const changedNetwork: Network = Object.keys(network).reduce((acc, key) => {\n      if (!networkData) return acc\n\n      // No need to save unchanged networks. Here we filter the networks that are the same as the ones in the storage.\n      if (network[key as keyof Network] === networkData[key as keyof Network]) return acc\n\n      return { ...acc, [key]: network[key as keyof Network] }\n    }, {} as Network)\n\n    // Update the networks with the incoming new values\n    this.#networks[networkId] = { ...this.#networks[networkId], ...changedNetwork }\n\n    // if force4337 is updated, we have to update the enabled flag as well\n    if ('force4337' in changedNetwork) {\n      this.#networks[networkId].erc4337.enabled = is4337Enabled(\n        true,\n        this.#networks[networkId],\n        changedNetwork.force4337\n      )\n    }\n\n    this.#onAddOrUpdateNetwork(this.#networks[networkId])\n    await this.#storage.set('networks', this.#networks)\n\n    const checkRPC = async (\n      networkToAddOrUpdate: {\n        chainId: bigint\n        rpcUrl: string\n        info?: NetworkInfoLoading<NetworkInfo> | undefined\n      } | null\n    ) => {\n      if (changedNetwork.selectedRpcUrl) {\n        if (\n          networkToAddOrUpdate?.info &&\n          Object.values(networkToAddOrUpdate.info).every((prop) => prop !== 'LOADING')\n        ) {\n          const info = { ...(networkToAddOrUpdate.info as NetworkInfo) }\n          const { feeOptions } = info\n\n          // eslint-disable-next-line no-param-reassign\n          delete (info as any).feeOptions\n          this.#networks[networkId] = {\n            ...this.#networks[networkId],\n            ...info,\n            ...feeOptions\n          }\n\n          await this.#storage.set('networks', this.#networks)\n\n          this.emitUpdate()\n          return\n        }\n\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        getNetworkInfo(\n          this.#fetch,\n          changedNetwork.selectedRpcUrl,\n          this.#networks[networkId].chainId!,\n          async (info) => {\n            if (Object.values(info).some((prop) => prop === 'LOADING')) {\n              return\n            }\n\n            const { feeOptions } = info as NetworkInfo\n\n            // eslint-disable-next-line no-param-reassign\n            delete (info as any).feeOptions\n            this.#networks[networkId] = {\n              ...this.#networks[networkId],\n              ...(info as NetworkInfo),\n              ...feeOptions\n            }\n\n            await this.#storage.set('networks', this.#networks)\n\n            this.emitUpdate()\n          }\n        )\n      }\n    }\n\n    // Do not wait the rpc validation in order to complete the execution of updateNetwork\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    checkRPC(this.networkToAddOrUpdate)\n    this.networkToAddOrUpdate = null\n\n    this.emitUpdate()\n  }\n\n  async updateNetwork(network: Partial<Network>, networkId: NetworkId) {\n    await this.withStatus('updateNetwork', () => this.#updateNetwork(network, networkId))\n  }\n\n  async removeNetwork(id: NetworkId) {\n    await this.initialLoadPromise\n    if (!this.#networks[id]) return\n\n    delete this.#networks[id]\n    this.#onRemoveNetwork(id)\n    await this.#storage.set('networks', this.#networks)\n    this.emitUpdate()\n  }\n\n  toJSON() {\n    return {\n      ...this,\n      ...super.toJSON(),\n      isInitialized: this.isInitialized,\n      networks: this.networks\n    }\n  }\n}\n"]}