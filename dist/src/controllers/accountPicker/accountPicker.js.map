{"version":3,"file":"accountPicker.js","sourceRoot":"","sources":["../../../../src/controllers/accountPicker/accountPicker.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-floating-promises */\nimport { getCreate2Address, keccak256 } from 'ethers'\n\nimport EmittableError from '../../classes/EmittableError'\nimport ExternalSignerError from '../../classes/ExternalSignerError'\nimport { DEFAULT_ACCOUNT_LABEL } from '../../consts/account'\nimport { PROXY_AMBIRE_ACCOUNT } from '../../consts/deploy'\nimport {\n  HD_PATH_TEMPLATE_TYPE,\n  SMART_ACCOUNT_SIGNER_KEY_DERIVATION_OFFSET\n} from '../../consts/derivation'\nimport { HARDWARE_WALLET_DEVICE_NAMES } from '../../consts/hardwareWallets'\nimport {\n  Account,\n  AccountOnchainState,\n  AccountOnPage,\n  AccountWithNetworkMeta,\n  DerivedAccount,\n  DerivedAccountWithoutNetworkMeta,\n  ImportStatus,\n  SelectedAccountForImport\n} from '../../interfaces/account'\nimport { Fetch } from '../../interfaces/fetch'\nimport { KeyIterator } from '../../interfaces/keyIterator'\nimport {\n  dedicatedToOneSAPriv,\n  ExternalKey,\n  ExternalSignerControllers,\n  Key,\n  ReadyToAddKeys\n} from '../../interfaces/keystore'\nimport { Network } from '../../interfaces/network'\nimport {\n  getAccountImportStatus,\n  getBasicAccount,\n  getDefaultAccountPreferences,\n  getEmailAccount,\n  getSmartAccount,\n  isAmbireV1LinkedAccount,\n  isDerivedForSmartAccountKeyOnly,\n  isSmartAccount\n} from '../../libs/account/account'\nimport { getAccountState } from '../../libs/accountState/accountState'\nimport { getDefaultKeyLabel, getExistingKeyLabel } from '../../libs/keys/keys'\nimport { relayerCall } from '../../libs/relayerCall/relayerCall'\n// eslint-disable-next-line import/no-cycle\nimport { AccountsController } from '../accounts/accounts'\nimport EventEmitter from '../eventEmitter/eventEmitter'\n// eslint-disable-next-line import/no-cycle\nimport { KeystoreController } from '../keystore/keystore'\n// eslint-disable-next-line import/no-cycle\nimport { NetworksController } from '../networks/networks'\n// eslint-disable-next-line import/no-cycle\nimport { ProvidersController } from '../providers/providers'\n\nexport const DEFAULT_PAGE = 1\nexport const DEFAULT_PAGE_SIZE = 1\nconst DEFAULT_SHOULD_SEARCH_FOR_LINKED_ACCOUNTS = true\nconst DEFAULT_SHOULD_GET_ACCOUNTS_USED_ON_NETWORKS = true\nconst DEFAULT_SHOULD_ADD_NEXT_ACCOUNT_AUTOMATICALLY = true\n\n/**\n * Account Picker Controller\n * is responsible for listing accounts that can be selected for adding, and for\n * adding (creating) identity for the smart accounts (if needed) on the Relayer.\n * It uses a KeyIterator interface allow iterating all the keys in a specific\n * underlying store such as a hardware device or an object holding a seed.\n */\nexport class AccountPickerController extends EventEmitter {\n  #callRelayer: Function\n\n  #accounts: AccountsController\n\n  #keystore: KeystoreController\n\n  #networks: NetworksController\n\n  #providers: ProvidersController\n\n  #externalSignerControllers: ExternalSignerControllers\n\n  initParams: {\n    keyIterator: KeyIterator | null\n    hdPathTemplate: HD_PATH_TEMPLATE_TYPE\n    page?: number\n    pageSize?: number\n    shouldSearchForLinkedAccounts?: boolean\n    shouldGetAccountsUsedOnNetworks?: boolean\n    shouldAddNextAccountAutomatically?: boolean\n  } | null = null\n\n  keyIterator?: KeyIterator | null\n\n  hdPathTemplate?: HD_PATH_TEMPLATE_TYPE\n\n  isInitialized: boolean = false\n\n  shouldSearchForLinkedAccounts = DEFAULT_SHOULD_SEARCH_FOR_LINKED_ACCOUNTS\n\n  shouldGetAccountsUsedOnNetworks = DEFAULT_SHOULD_GET_ACCOUNTS_USED_ON_NETWORKS\n\n  shouldAddNextAccountAutomatically = DEFAULT_SHOULD_ADD_NEXT_ACCOUNT_AUTOMATICALLY\n\n  /* This is only the index of the current page */\n  page: number = DEFAULT_PAGE\n\n  /* The number of accounts to be displayed on a single page */\n  pageSize: number = DEFAULT_PAGE_SIZE\n\n  /* State to indicate the page requested fails to load (and the reason why) */\n  pageError: null | string = null\n\n  selectedAccountsFromCurrentSession: SelectedAccountForImport[] = []\n\n  // Accounts which identity is created on the Relayer (if needed), and are ready\n  // to be added to the user's account list by the Main Controller\n  readyToAddAccounts: Account[] = []\n\n  // Accounts that were selected in a previous session but are now deselected in the current one\n  readyToRemoveAccounts: Account[] = []\n\n  // The keys for the `readyToAddAccounts`, that are ready to be added to the\n  // user's keystore by the Main Controller\n  readyToAddKeys: ReadyToAddKeys = { internal: [], external: [] }\n\n  // Identity for the smart accounts must be created on the Relayer, this\n  // represents the status of the operation, needed managing UI state\n  addAccountsStatus: 'LOADING' | 'SUCCESS' | 'INITIAL' = 'INITIAL'\n\n  selectNextAccountStatus: 'LOADING' | 'SUCCESS' | 'INITIAL' = 'INITIAL'\n\n  #addedAccountsFromCurrentSession: Account[] = []\n\n  accountsLoading: boolean = false\n\n  linkedAccountsLoading: boolean = false\n\n  networksWithAccountStateError: bigint[] = []\n\n  #derivedAccounts: DerivedAccount[] = []\n\n  #linkedAccounts: { account: AccountWithNetworkMeta; isLinked: boolean }[] = []\n\n  #alreadyImportedAccounts: Account[] = []\n\n  addAccountsPromise?: Promise<void>\n\n  #onAddAccountsSuccessCallback: () => Promise<void>\n\n  #onAddAccountsSuccessCallbackPromise?: Promise<void>\n\n  findAndSetLinkedAccountsPromise?: Promise<void>\n\n  #shouldDebounceFlags: { [key: string]: boolean } = {}\n\n  #addAccountsOnKeystoreReady: {\n    accounts?: SelectedAccountForImport[]\n  } | null = null\n\n  constructor({\n    accounts,\n    keystore,\n    networks,\n    providers,\n    externalSignerControllers,\n    relayerUrl,\n    fetch,\n    onAddAccountsSuccessCallback\n  }: {\n    accounts: AccountsController\n    keystore: KeystoreController\n    networks: NetworksController\n    providers: ProvidersController\n    externalSignerControllers: ExternalSignerControllers\n    relayerUrl: string\n    fetch: Fetch\n    onAddAccountsSuccessCallback: () => Promise<void>\n  }) {\n    super()\n    this.#accounts = accounts\n    this.#keystore = keystore\n    this.#networks = networks\n    this.#providers = providers\n    this.#externalSignerControllers = externalSignerControllers\n    this.#callRelayer = relayerCall.bind({ url: relayerUrl, fetch })\n    this.#onAddAccountsSuccessCallback = onAddAccountsSuccessCallback\n\n    this.#accounts.onUpdate(() => {\n      this.#debounceFunctionCalls(\n        'update-accounts',\n        () => {\n          if (!this.isInitialized) return\n          if (this.addAccountsStatus !== 'INITIAL') return\n\n          this.#updateStateWithTheLatestFromAccounts()\n        },\n        20\n      )\n    })\n\n    this.#keystore.onUpdate(() => {\n      if (this.#addAccountsOnKeystoreReady && this.#keystore.isReadyToStoreKeys) {\n        this.addAccounts(this.#addAccountsOnKeystoreReady.accounts)\n        this.#addAccountsOnKeystoreReady = null\n      }\n    })\n  }\n\n  get accountsOnPage(): AccountOnPage[] {\n    const processedAccounts = this.#derivedAccounts\n      // Remove smart accounts derived programmatically, because since v4.60.0\n      // unused smart accounts are no longer displayed on page.\n      .filter((a) => !isSmartAccount(a.account))\n      // The displayed (visible) accounts on page should not include the derived\n      // EOA (basic) accounts only used as smart account keys, they should not\n      // be visible nor importable (or selectable).\n      .filter((x) => !isDerivedForSmartAccountKeyOnly(x.index))\n      .flatMap((derivedAccount) => {\n        const associatedLinkedAccounts = this.#linkedAccounts.filter(\n          (linkedAcc) =>\n            !isSmartAccount(derivedAccount.account) &&\n            linkedAcc.account.associatedKeys.includes(derivedAccount.account.addr)\n        )\n\n        const correspondingSmartAccount = this.#derivedAccounts.find(\n          (acc) => isSmartAccount(acc.account) && acc.slot === derivedAccount.slot\n        )\n\n        let accountsToReturn: Omit<AccountOnPage, 'importStatus'>[] = []\n\n        if (!isSmartAccount(derivedAccount.account)) {\n          accountsToReturn.push(derivedAccount)\n\n          const duplicate = associatedLinkedAccounts.find(\n            (linkedAcc) => linkedAcc.account.addr === correspondingSmartAccount?.account?.addr\n          )\n\n          // The derived smart account that matches the relayer's linked account\n          // should not be displayed as linked account. Use this cycle to mark it.\n          if (duplicate) duplicate.isLinked = false\n\n          if (!duplicate && correspondingSmartAccount) {\n            accountsToReturn.push(correspondingSmartAccount)\n          }\n        }\n\n        accountsToReturn = accountsToReturn.concat(\n          associatedLinkedAccounts.map((linkedAcc) => ({\n            ...linkedAcc,\n            slot: derivedAccount.slot,\n            index: derivedAccount.index\n          }))\n        )\n\n        return accountsToReturn\n      })\n\n    const unprocessedLinkedAccounts = this.#linkedAccounts\n      .filter(\n        (linkedAcc) =>\n          !processedAccounts.find(\n            (processedAcc) => processedAcc?.account.addr === linkedAcc.account.addr\n          )\n      )\n      // Use `flatMap` instead of `map` in order to auto remove missing values.\n      // The `flatMap` has a built-in mechanism to flatten the array and remove\n      // null or undefined values (by returning empty array).\n      .flatMap((linkedAcc) => {\n        const correspondingDerivedAccount = this.#derivedAccounts.find((derivedAccount) =>\n          linkedAcc.account.associatedKeys.includes(derivedAccount.account.addr)\n        )\n\n        // The `correspondingDerivedAccount` should always be found, except when\n        // something is wrong with the data we have stored on the Relayer.\n        // The this.#verifyLinkedAndDerivedAccounts() method should have\n        // already emitted an error in that case. Do not emit here, since\n        // this is a getter method (and emitting here is a no-go).\n        if (!correspondingDerivedAccount) return []\n\n        return [\n          {\n            ...linkedAcc,\n            slot: correspondingDerivedAccount.slot,\n            index: correspondingDerivedAccount.index\n          }\n        ]\n      })\n\n    const mergedAccounts = [...processedAccounts, ...unprocessedLinkedAccounts].filter(\n      (a) =>\n        !isSmartAccount(a.account) ||\n        (isSmartAccount(a.account) &&\n          this.#linkedAccounts.find((linkedAcc) => linkedAcc.account.addr === a.account.addr))\n    )\n\n    mergedAccounts.sort((a, b) => {\n      const prioritizeAccountType = (item: any) => {\n        if (!isSmartAccount(item.account)) return -1\n        if (item.isLinked) return 1\n\n        return 0\n      }\n\n      return prioritizeAccountType(a) - prioritizeAccountType(b) || a.slot - b.slot\n    })\n\n    const accountsWithStatus = mergedAccounts.map((acc) => ({\n      ...acc,\n      importStatus: getAccountImportStatus({\n        account: acc.account,\n        alreadyImportedAccounts: this.#alreadyImportedAccounts,\n        keys: this.#keystore.keys,\n        accountsOnPage: mergedAccounts,\n        keyIteratorType: this.keyIterator?.type\n      })\n    }))\n\n    // Since v4.60.0 there should always be 1 unused Smart Account on the page,\n    // except when all smart accounts are found via linked accounts (therefore, used).\n    const nextUnusedSmartAcc = this.#derivedAccounts\n      .filter((acc) => isSmartAccount(acc.account))\n      .filter((acc) => !accountsWithStatus.map((as) => as.account.addr).includes(acc.account.addr))\n      .sort((a, b) => a.index - b.index)[0]\n    if (nextUnusedSmartAcc) {\n      accountsWithStatus.push({\n        ...nextUnusedSmartAcc,\n        importStatus: getAccountImportStatus({\n          account: nextUnusedSmartAcc.account,\n          alreadyImportedAccounts: this.#alreadyImportedAccounts,\n          keys: this.#keystore.keys,\n          accountsOnPage: mergedAccounts,\n          keyIteratorType: this.keyIterator?.type\n        })\n      })\n    }\n\n    return accountsWithStatus\n  }\n\n  get allKeysOnPage() {\n    const derivedKeys = this.#derivedAccounts.flatMap((a) => a.account.associatedKeys)\n    const linkedKeys = this.#linkedAccounts.flatMap((a) => a.account.associatedKeys)\n\n    return [...new Set([...derivedKeys, ...linkedKeys])]\n  }\n\n  get selectedAccounts(): SelectedAccountForImport[] {\n    const accountsOnPageWithKeys = this.#alreadyImportedAccounts.filter((a) =>\n      this.#keystore.keys.some((k) => a.associatedKeys.includes(k.addr))\n    )\n\n    const accountsAddrOnPage = accountsOnPageWithKeys.map((a) => a.addr)\n    const selectedAccountsFromPrevSession = this.accountsOnPage\n      .filter(\n        (a) =>\n          accountsAddrOnPage.includes(a.account.addr) &&\n          a.importStatus === ImportStatus.ImportedWithTheSameKeys\n      )\n      .map((a) => {\n        const accountsOnPageWithThisAcc = this.accountsOnPage.filter(\n          (accOnPage) => accOnPage.account.addr === a.account.addr\n        )\n        const accountKeys = this.#getAccountKeys(a.account, accountsOnPageWithThisAcc)\n\n        return {\n          account: a.account,\n          isLinked: a.isLinked,\n          accountKeys: accountKeys.map((accKey) => ({\n            addr: accKey.account.addr,\n            slot: accKey.slot,\n            index: accKey.index\n          }))\n        } as SelectedAccountForImport\n      })\n\n    const nextSelectedAccount = [\n      ...selectedAccountsFromPrevSession,\n      ...this.selectedAccountsFromCurrentSession\n    ]\n\n    const readyToRemoveAccountsAddr = this.readyToRemoveAccounts.map((a) => a.addr)\n\n    return nextSelectedAccount.filter((a) => !readyToRemoveAccountsAddr.includes(a.account.addr))\n  }\n\n  get addedAccountsFromCurrentSession() {\n    return this.#addedAccountsFromCurrentSession\n  }\n\n  set addedAccountsFromCurrentSession(val: Account[]) {\n    this.#addedAccountsFromCurrentSession = Array.from(\n      new Map(val.map((account) => [account.addr, account])).values()\n    )\n  }\n\n  setInitParams(params: {\n    keyIterator: KeyIterator | null\n    hdPathTemplate: HD_PATH_TEMPLATE_TYPE\n    page?: number\n    pageSize?: number\n    shouldSearchForLinkedAccounts?: boolean\n    shouldGetAccountsUsedOnNetworks?: boolean\n    shouldAddNextAccountAutomatically?: boolean\n  }) {\n    this.initParams = params\n    this.emitUpdate()\n  }\n\n  async init() {\n    if (!this.initParams) return\n\n    const {\n      keyIterator,\n      hdPathTemplate,\n      page,\n      pageSize,\n      shouldSearchForLinkedAccounts = DEFAULT_SHOULD_SEARCH_FOR_LINKED_ACCOUNTS,\n      shouldGetAccountsUsedOnNetworks = DEFAULT_SHOULD_GET_ACCOUNTS_USED_ON_NETWORKS,\n      shouldAddNextAccountAutomatically = DEFAULT_SHOULD_ADD_NEXT_ACCOUNT_AUTOMATICALLY\n    } = this.initParams\n\n    await this.reset(false)\n\n    this.keyIterator = keyIterator\n    if (!this.keyIterator) return this.#throwMissingKeyIterator()\n    this.page = page || DEFAULT_PAGE\n    if (pageSize) this.pageSize = pageSize\n    this.hdPathTemplate = hdPathTemplate\n    this.isInitialized = true\n    this.#alreadyImportedAccounts = [...this.#accounts.accounts]\n    this.shouldSearchForLinkedAccounts = shouldSearchForLinkedAccounts\n    this.shouldGetAccountsUsedOnNetworks = shouldGetAccountsUsedOnNetworks\n    if (shouldAddNextAccountAutomatically) {\n      await this.selectNextAccount()\n      await this.addAccounts()\n    } else {\n      await this.forceEmitUpdate()\n    }\n  }\n\n  get type() {\n    return this.keyIterator?.type || this.initParams?.keyIterator?.type\n  }\n\n  get subType() {\n    return this.keyIterator?.subType || this.initParams?.keyIterator?.subType\n  }\n\n  async reset(resetInitParams: boolean = true) {\n    await this.addAccountsPromise\n    if (resetInitParams) this.initParams = null\n    this.keyIterator = null\n    this.selectedAccountsFromCurrentSession = []\n    this.page = DEFAULT_PAGE\n    this.pageSize = DEFAULT_PAGE_SIZE\n    this.hdPathTemplate = undefined\n    this.shouldSearchForLinkedAccounts = DEFAULT_SHOULD_SEARCH_FOR_LINKED_ACCOUNTS\n    this.shouldGetAccountsUsedOnNetworks = DEFAULT_SHOULD_GET_ACCOUNTS_USED_ON_NETWORKS\n    this.pageError = null\n\n    this.linkedAccountsLoading = false\n    this.addAccountsStatus = 'INITIAL'\n    this.#derivedAccounts = []\n    this.#linkedAccounts = []\n    this.readyToAddAccounts = []\n    this.networksWithAccountStateError = []\n    this.readyToAddKeys = { internal: [], external: [] }\n    this.isInitialized = false\n    this.addedAccountsFromCurrentSession = []\n    this.#addAccountsOnKeystoreReady = null\n\n    await this.forceEmitUpdate()\n  }\n\n  resetAccountsSelection() {\n    this.selectedAccountsFromCurrentSession = []\n    this.readyToRemoveAccounts = []\n\n    this.emitUpdate()\n  }\n\n  async setHDPathTemplate({ hdPathTemplate }: { hdPathTemplate: HD_PATH_TEMPLATE_TYPE }) {\n    if (this.hdPathTemplate === hdPathTemplate) return\n\n    this.hdPathTemplate = hdPathTemplate\n    // Reset the currently selected accounts, because for the keys of these\n    // accounts, as of v4.32.0, we don't store their hd path. When import\n    // completes, only the latest hd path of the controller is stored.\n    this.selectedAccountsFromCurrentSession = []\n    this.#derivedAccounts = []\n\n    this.emitUpdate()\n\n    await this.setPage({\n      page: DEFAULT_PAGE,\n      shouldGetAccountsUsedOnNetworks: DEFAULT_SHOULD_GET_ACCOUNTS_USED_ON_NETWORKS,\n      shouldSearchForLinkedAccounts: DEFAULT_SHOULD_SEARCH_FOR_LINKED_ACCOUNTS\n    }) // takes the user back on the first page\n  }\n\n  #getAccountKeys(account: Account, accountsOnPageWithThisAcc: AccountOnPage[]) {\n    // should never happen\n    if (accountsOnPageWithThisAcc.length === 0) {\n      console.error(`accountPicker: account ${account.addr} was not found in the accountsOnPage.`)\n      return []\n    }\n\n    // Case 1: The account is a EOA\n    const isBasicAcc = !isSmartAccount(account)\n    // The key of the EOA is the EOA itself\n    if (isBasicAcc) return accountsOnPageWithThisAcc\n\n    // Case 2: The account is a Smart account, but not a linked one\n    const isSmartAccountAndNotLinked =\n      isSmartAccount(account) &&\n      accountsOnPageWithThisAcc.length === 1 &&\n      accountsOnPageWithThisAcc[0].isLinked === false\n\n    if (isSmartAccountAndNotLinked) {\n      // The key of the smart account is the EOA on the same slot\n      // that is explicitly derived for a smart account key only.\n      const basicAccOnThisSlotDerivedForSmartAccKey = this.#derivedAccounts.find(\n        (a) =>\n          a.slot === accountsOnPageWithThisAcc[0].slot &&\n          !isSmartAccount(a.account) &&\n          isDerivedForSmartAccountKeyOnly(a.index)\n      )\n\n      return basicAccOnThisSlotDerivedForSmartAccKey\n        ? [basicAccOnThisSlotDerivedForSmartAccKey]\n        : []\n    }\n\n    // Case 3: The account is a Smart account and a linked one. For this case,\n    // there could exist multiple keys (EOAs) found on different slots.\n    const basicAccOnEverySlotWhereThisAddrIsFound = accountsOnPageWithThisAcc\n      .map((a) => a.slot)\n      .flatMap((slot) => {\n        const basicAccOnThisSlot = this.#derivedAccounts.find(\n          (a) =>\n            a.slot === slot &&\n            !isSmartAccount(a.account) &&\n            // The key of the linked account is always the EOA (basic) account\n            // on the same slot that is not explicitly used for smart account keys only.\n            !isDerivedForSmartAccountKeyOnly(a.index)\n        )\n\n        return basicAccOnThisSlot ? [basicAccOnThisSlot] : []\n      })\n\n    return basicAccOnEverySlotWhereThisAddrIsFound\n  }\n\n  selectAccount(_account: Account) {\n    if (!this.isInitialized) return this.#throwNotInitialized()\n    if (!this.keyIterator) return this.#throwMissingKeyIterator()\n\n    // Needed, because linked accounts could have multiple keys (EOAs),\n    // and therefore - same linked account could be found on different slots.\n    const accountsOnPageWithThisAcc = this.accountsOnPage.filter(\n      (accOnPage) => accOnPage.account.addr === _account.addr\n    )\n    const accountKeys = this.#getAccountKeys(_account, accountsOnPageWithThisAcc)\n    if (!accountKeys.length)\n      return this.emitError({\n        level: 'major',\n        message: `Selecting ${_account.addr} account failed because the details for this account are missing. Please try again or contact support if the problem persists.`,\n        error: new Error(\n          `Trying to select ${_account.addr} account, but this account was not found in the accountsOnPage or it's keys were not found.`\n        )\n      })\n\n    const nextSelectedAccount = {\n      account: _account,\n      // If the account has more than 1 key, it is for sure linked account,\n      // since EOAs have only 1 key and smart accounts with more than\n      // one key present should always be found as linked accounts anyways.\n      isLinked: accountKeys.length > 1,\n      accountKeys: accountKeys.map((a) => ({\n        addr: a.account.addr,\n        slot: a.slot,\n        index: a.index\n      }))\n    }\n\n    const accountExists = this.selectedAccountsFromCurrentSession.some(\n      (x) => x.account.addr === nextSelectedAccount.account.addr\n    )\n    if (!accountExists) this.selectedAccountsFromCurrentSession.push(nextSelectedAccount)\n    this.readyToRemoveAccounts = this.readyToRemoveAccounts.filter(\n      (a) => a.addr !== nextSelectedAccount.account.addr\n    )\n\n    this.emitUpdate()\n  }\n\n  deselectAccount(account: Account) {\n    if (!this.isInitialized) return this.#throwNotInitialized()\n    if (!this.keyIterator) return this.#throwMissingKeyIterator()\n\n    if (!this.selectedAccounts.find((x) => x.account.addr === account.addr)) return\n\n    this.selectedAccountsFromCurrentSession = this.selectedAccountsFromCurrentSession.filter(\n      (a) => a.account.addr !== account.addr\n    )\n    const accountInAlreadyAddedAccounts = this.#alreadyImportedAccounts.find(\n      (a) => a.addr === account.addr\n    )\n\n    if (accountInAlreadyAddedAccounts) {\n      const accountInReadyToRemoveAccounts = this.readyToRemoveAccounts.find(\n        (a) => a.addr === account.addr\n      )\n      if (!accountInReadyToRemoveAccounts) this.readyToRemoveAccounts.push(account)\n    }\n    this.emitUpdate()\n  }\n\n  /**\n   * For internal keys only! Returns the ready to be added internal (private)\n   * keys of the currently selected accounts.\n   */\n  retrieveInternalKeysOfSelectedAccounts() {\n    if (!this.hdPathTemplate) {\n      this.#throwMissingHdPath()\n      return []\n    }\n\n    if (!this.keyIterator?.retrieveInternalKeys) {\n      this.#throwMissingKeyIteratorRetrieveInternalKeysMethod()\n      return []\n    }\n\n    return this.keyIterator?.retrieveInternalKeys(\n      this.selectedAccountsFromCurrentSession,\n      this.hdPathTemplate,\n      this.#keystore.keys\n    )\n  }\n\n  /**\n   * Prevents requesting the next page before the current one is fully loaded.\n   * This avoids race conditions where the user requests the next page before\n   * linked accounts are fully loaded, causing misleadingly failing `#verifyLinkedAccounts` checks.\n   */\n  get isPageLocked() {\n    return this.accountsLoading || this.linkedAccountsLoading\n  }\n\n  async setPage({\n    page = this.page,\n    pageSize,\n    shouldSearchForLinkedAccounts,\n    shouldGetAccountsUsedOnNetworks\n  }: {\n    page: number\n    pageSize?: number\n    shouldSearchForLinkedAccounts?: boolean\n    shouldGetAccountsUsedOnNetworks?: boolean\n  }): Promise<void> {\n    if (!this.isInitialized) return this.#throwNotInitialized()\n    if (!this.keyIterator) return this.#throwMissingKeyIterator()\n\n    if (shouldSearchForLinkedAccounts !== undefined) {\n      this.shouldSearchForLinkedAccounts = shouldSearchForLinkedAccounts\n    }\n\n    if (shouldGetAccountsUsedOnNetworks !== undefined) {\n      this.shouldGetAccountsUsedOnNetworks = shouldGetAccountsUsedOnNetworks\n    }\n\n    if (pageSize && pageSize !== this.pageSize) {\n      this.pageSize = pageSize\n      this.page = page\n    } else if (page === this.page && this.#derivedAccounts.length) return\n\n    this.page = page\n    this.pageError = null\n    this.#derivedAccounts = []\n    this.#linkedAccounts = []\n    this.accountsLoading = true\n    this.networksWithAccountStateError = []\n    this.linkedAccountsLoading = false\n    this.emitUpdate()\n\n    if (page <= 0) {\n      this.pageError = `Unexpected page was requested (page ${page}). Please try again or contact support for help.`\n      this.page = DEFAULT_PAGE // fallback to the default (initial) page\n      this.emitUpdate()\n      return\n    }\n\n    try {\n      this.#derivedAccounts = await this.#deriveAccounts()\n\n      if (this.keyIterator?.type === 'internal' && this.keyIterator?.subType === 'private-key') {\n        const accountsOnPageWithoutTheLinked = this.accountsOnPage.filter((acc) => !acc.isLinked)\n        const usedAccounts = accountsOnPageWithoutTheLinked.filter(\n          (acc) => acc.account.usedOnNetworks.length\n        )\n\n        // If at least one account is used - preselect all accounts on the page\n        // (except the linked ones). Usually there are are two accounts\n        // (since the private key flow gas `pageSize` of 1)\n        if (usedAccounts.length) {\n          accountsOnPageWithoutTheLinked.forEach((acc) => this.selectAccount(acc.account))\n        }\n      }\n    } catch (e: any) {\n      const fallbackMessage = `Failed to retrieve accounts on page ${this.page}. Please try again or contact support for assistance. Error details: ${e?.message}.`\n      this.pageError = e instanceof ExternalSignerError ? e.message : fallbackMessage\n    }\n    this.accountsLoading = false\n    this.emitUpdate()\n\n    this.findAndSetLinkedAccountsPromise = this.#findAndSetLinkedAccounts({\n      accounts: this.#derivedAccounts\n        .filter(\n          (acc) =>\n            // Since v4.60.0, linked accounts are searched for 1) EOAs\n            // and 2) EOAs derived for Smart Account keys ONLY\n            // (workaround so that the Relayer returns information if the Smart\n            // Account with this key is used (with identity) or not).\n            !isSmartAccount(acc.account) || isDerivedForSmartAccountKeyOnly(acc.index)\n        )\n        .map((acc) => acc.account)\n    }).finally(() => {\n      this.findAndSetLinkedAccountsPromise = undefined\n    })\n    await this.findAndSetLinkedAccountsPromise\n  }\n\n  #updateStateWithTheLatestFromAccounts() {\n    this.#alreadyImportedAccounts = [...this.#accounts.accounts]\n\n    this.addedAccountsFromCurrentSession = Array.from(\n      new Set([\n        ...(this.addedAccountsFromCurrentSession\n          .map((a) => this.#accounts.accounts.find((acc) => acc.addr === a.addr))\n          .filter(Boolean) as Account[])\n      ])\n    )\n    this.#derivedAccounts = this.#derivedAccounts.map((derivedAcc) => {\n      const updatedAccount = this.#accounts.accounts.find(\n        (acc) => acc.addr === derivedAcc.account.addr\n      )\n\n      if (updatedAccount) {\n        return {\n          ...derivedAcc,\n          account: { ...derivedAcc.account, ...updatedAccount }\n        }\n      }\n\n      return derivedAcc\n    })\n\n    const accountsAddr = this.#accounts.accounts.map((a) => a.addr)\n    this.readyToRemoveAccounts = this.readyToRemoveAccounts.filter((a) =>\n      accountsAddr.includes(a.addr)\n    )\n    this.readyToAddAccounts = this.readyToAddAccounts.filter((a) => !accountsAddr.includes(a.addr))\n\n    this.emitUpdate()\n  }\n\n  /**\n   * Triggers the process of adding accounts via the AccountPicker flow by\n   * creating identity for the smart accounts (if needed) on the Relayer.\n   * Then the `onAccountPickerSuccess` listener in the Main Controller gets\n   * triggered, which uses the `readyToAdd...` properties to further set\n   * the newly added accounts data (like preferences, keys and others)\n   */\n  async addAccounts(accounts?: SelectedAccountForImport[]) {\n    this.addAccountsPromise = this.#addAccounts(accounts).finally(() => {\n      this.addAccountsPromise = undefined\n    })\n    await this.addAccountsPromise\n  }\n\n  async #addAccounts(accounts?: SelectedAccountForImport[]) {\n    if (!this.isInitialized) return this.#throwNotInitialized()\n    if (!this.keyIterator) return this.#throwMissingKeyIterator()\n\n    if (!this.#keystore.isReadyToStoreKeys) {\n      this.#addAccountsOnKeystoreReady = { accounts }\n      return\n    }\n\n    this.addAccountsStatus = 'LOADING'\n    await this.forceEmitUpdate()\n\n    let newlyCreatedAccounts: Account['addr'][] = []\n    const accountsToAddOnRelayer: SelectedAccountForImport[] = (\n      accounts || this.selectedAccountsFromCurrentSession\n    )\n      // Identity only for the smart accounts must be created on the Relayer\n      .filter((x) => isSmartAccount(x.account))\n      // Skip creating identity for Ambire v1 smart accounts\n      .filter((x) => !isAmbireV1LinkedAccount(x.account.creation?.factoryAddr))\n\n    if (accountsToAddOnRelayer.length) {\n      const body = accountsToAddOnRelayer.map(({ account }: SelectedAccountForImport) => ({\n        addr: account.addr,\n        ...(account.email ? { email: account.email } : {}),\n        associatedKeys: account.initialPrivileges,\n        creation: {\n          factoryAddr: account.creation!.factoryAddr,\n          salt: account.creation!.salt,\n          baseIdentityAddr: PROXY_AMBIRE_ACCOUNT\n        }\n      }))\n\n      try {\n        const res = await this.#callRelayer('/v2/identity/create-multiple', 'POST', {\n          accounts: body\n        })\n\n        if (!res.success) {\n          throw new Error(res?.message || 'No response received from the Ambire Relayer.')\n        }\n\n        type AccResType = {\n          identity: string\n          status: {\n            created: boolean\n            reason?: string\n          }\n        }\n\n        type BodyType = AccResType[]\n        if (res.body) {\n          newlyCreatedAccounts = (res.body as BodyType)\n            .filter((acc: AccResType) => acc.status.created)\n            .map((acc: AccResType) => acc.identity)\n        }\n      } catch (e: any) {\n        this.emitError({\n          level: 'major',\n          message:\n            'Error when adding accounts on the Ambire Relayer. Please try again later or contact support if the problem persists.',\n          error: new Error(e?.message)\n        })\n\n        this.addAccountsStatus = 'INITIAL'\n        await this.forceEmitUpdate()\n        return\n      }\n    }\n\n    this.readyToAddAccounts = [\n      ...(accounts || this.selectedAccountsFromCurrentSession).map((x, i) => {\n        const alreadyImportedAcc = this.#alreadyImportedAccounts.find(\n          (a) => a.addr === x.account.addr\n        )\n\n        return {\n          ...x.account,\n          // Persist the already imported account preferences on purpose, otherwise,\n          // re-importing the same account via different key type(s) would reset them.\n          preferences: alreadyImportedAcc\n            ? alreadyImportedAcc.preferences\n            : getDefaultAccountPreferences(x.account.addr, this.#alreadyImportedAccounts, i),\n          newlyCreated: newlyCreatedAccounts.includes(x.account.addr)\n        }\n      })\n    ]\n\n    const readyToAddKeys: ReadyToAddKeys = {\n      internal: [],\n      external: []\n    }\n\n    if (this.type === 'internal') {\n      readyToAddKeys.internal = this.retrieveInternalKeysOfSelectedAccounts()\n    } else {\n      // External keys flow\n      const keyType = this.type as ExternalKey['type']\n\n      const deviceIds: { [key in ExternalKey['type']]: string } = {\n        ledger: this.#externalSignerControllers.ledger?.deviceId || '',\n        trezor: this.#externalSignerControllers.trezor?.deviceId || '',\n        lattice: this.#externalSignerControllers?.lattice?.deviceId || ''\n      }\n\n      const deviceModels: { [key in ExternalKey['type']]: string } = {\n        ledger: this.#externalSignerControllers.ledger?.deviceModel || '',\n        trezor: this.#externalSignerControllers.trezor?.deviceModel || '',\n        lattice: this.#externalSignerControllers.lattice?.deviceModel || ''\n      }\n\n      const readyToAddExternalKeys = this.selectedAccountsFromCurrentSession.flatMap(\n        ({ account, accountKeys }) =>\n          accountKeys.map(({ addr, index }, i) => ({\n            addr,\n            type: keyType,\n            label: `${HARDWARE_WALLET_DEVICE_NAMES[this.type as ExternalKey['type']]} ${\n              getExistingKeyLabel(this.#keystore.keys, addr, this.type as Key['type']) ||\n              getDefaultKeyLabel(\n                this.#keystore.keys.filter((key) => account.associatedKeys.includes(key.addr)),\n                i\n              )\n            }`,\n            dedicatedToOneSA: isDerivedForSmartAccountKeyOnly(index),\n            meta: {\n              deviceId: deviceIds[keyType],\n              deviceModel: deviceModels[keyType],\n              // always defined in the case of external keys\n              hdPathTemplate: this.hdPathTemplate as HD_PATH_TEMPLATE_TYPE,\n              index,\n              createdAt: new Date().getTime()\n            }\n          }))\n      )\n\n      readyToAddKeys.external = readyToAddExternalKeys\n    }\n\n    this.readyToAddKeys = readyToAddKeys\n\n    this.addedAccountsFromCurrentSession = [\n      ...this.addedAccountsFromCurrentSession,\n      ...this.readyToAddAccounts\n    ]\n    this.selectedAccountsFromCurrentSession = []\n    this.#onAddAccountsSuccessCallbackPromise = this.#onAddAccountsSuccessCallback().finally(() => {\n      this.#onAddAccountsSuccessCallbackPromise = undefined\n    })\n    await this.#onAddAccountsSuccessCallbackPromise\n\n    this.addAccountsStatus = 'SUCCESS'\n    await this.forceEmitUpdate()\n\n    this.#updateStateWithTheLatestFromAccounts()\n\n    // reset the addAccountsStatus in the next tick to ensure the FE receives the 'SUCCESS' state\n    this.addAccountsStatus = 'INITIAL'\n    await this.forceEmitUpdate()\n  }\n\n  async selectNextAccount() {\n    if (!this.isInitialized) return this.#throwNotInitialized()\n    if (!this.keyIterator) return this.#throwMissingKeyIterator()\n\n    this.selectNextAccountStatus = 'LOADING'\n    await this.forceEmitUpdate()\n\n    let currentPage: number = this.page\n    let nextAccount: AccountWithNetworkMeta | undefined\n    const maxPages = 10000 // limit, acts as a safeguard to prevent infinite loops\n\n    while (currentPage <= maxPages) {\n      // TODO: Flag that excludes getting smart account key addresses\n      // Load the accounts for the current page\n      // eslint-disable-next-line no-await-in-loop\n      await this.setPage({\n        page: currentPage,\n        pageSize: this.pageSize,\n        shouldGetAccountsUsedOnNetworks: false,\n        shouldSearchForLinkedAccounts: false\n      })\n      if (this.pageError) {\n        throw new EmittableError({\n          message: this.pageError,\n          level: 'major',\n          error: new Error(this.pageError)\n        })\n      }\n\n      nextAccount = this.accountsOnPage.find(\n        ({ isLinked, account, importStatus }) =>\n          importStatus !== ImportStatus.ImportedWithTheSameKeys &&\n          !isLinked &&\n          !isSmartAccount(account)\n      )?.account\n\n      if (nextAccount) {\n        this.selectAccount(nextAccount)\n        break\n      }\n\n      // If no account found on the page, move to the next page\n      currentPage++\n    }\n\n    // TODO: Should never happen, but could benefit with better error handling\n    if (!nextAccount) console.error('accountPicker: no next account found')\n\n    this.selectNextAccountStatus = 'SUCCESS'\n    await this.forceEmitUpdate()\n\n    this.selectNextAccountStatus = 'INITIAL'\n    await this.forceEmitUpdate()\n  }\n\n  async createAndAddEmailAccount(selectedAccount: SelectedAccountForImport) {\n    const {\n      account: { email },\n      accountKeys: [recoveryKey]\n    } = selectedAccount\n    if (!this.isInitialized) return this.#throwNotInitialized()\n    if (!this.keyIterator) return this.#throwMissingKeyIterator()\n\n    const keyPublicAddress: string = (await this.keyIterator.retrieve([{ from: 0, to: 1 }]))[0]\n\n    const emailSmartAccount = await getEmailAccount(\n      {\n        emailFrom: email!,\n        secondaryKey: recoveryKey.addr\n      },\n      keyPublicAddress\n    )\n\n    await this.addAccounts([{ ...selectedAccount, account: { ...emailSmartAccount, email } }])\n  }\n\n  // updates the account picker state so the main ctrl receives the readyToAddAccounts\n  // that should be added to the storage of the app\n  async addExistingEmailAccounts(accounts: Account[]) {\n    // There is no need to call the addAccounts method in order to add that\n    // account to the relayer because this func will be called only for accounts returned\n    // from relayer that only need to be stored in the storage of the app\n    this.readyToAddAccounts = accounts\n    this.addAccountsStatus = 'SUCCESS'\n    this.emitUpdate()\n  }\n\n  removeNetworkData(chainId: bigint) {\n    this.networksWithAccountStateError = this.networksWithAccountStateError.filter(\n      (n) => n !== chainId\n    )\n    this.emitUpdate()\n  }\n\n  async #deriveAccounts(): Promise<DerivedAccount[]> {\n    // Should never happen, because before the #deriveAccounts method gets\n    // called - there is a check if the keyIterator exists.\n    if (!this.keyIterator) {\n      console.error('accountPicker: missing keyIterator')\n      return []\n    }\n\n    const accounts: DerivedAccountWithoutNetworkMeta[] = []\n\n    const startIdx = (this.page - 1) * this.pageSize\n    const endIdx = (this.page - 1) * this.pageSize + (this.pageSize - 1)\n\n    const indicesToRetrieve = [\n      { from: startIdx, to: endIdx } // Indices for the basic (EOA) accounts\n    ]\n    // Since v4.31.0, do not retrieve smart accounts for the private key\n    // type. That's because we can't use the common derivation offset\n    // (SMART_ACCOUNT_SIGNER_KEY_DERIVATION_OFFSET), and deriving smart\n    // accounts out of the private key (with another approach - salt and\n    // extra entropy) was creating confusion.\n    const shouldRetrieveSmartAccountIndices = this.keyIterator.subType !== 'private-key'\n    if (shouldRetrieveSmartAccountIndices) {\n      // Indices for the smart accounts.\n      indicesToRetrieve.push({\n        from: startIdx + SMART_ACCOUNT_SIGNER_KEY_DERIVATION_OFFSET,\n        to: endIdx + SMART_ACCOUNT_SIGNER_KEY_DERIVATION_OFFSET\n      })\n    }\n    // Combine the requests for all accounts in one call to the keyIterator.\n    // That's optimization primarily focused on hardware wallets, to reduce the\n    // number of calls to the hardware device. This is important, especially\n    // for Trezor, because it fires a confirmation popup for each call.\n    const combinedBasicAndSmartAccKeys = await this.keyIterator.retrieve(\n      indicesToRetrieve,\n      this.hdPathTemplate\n    )\n\n    const basicAccKeys = combinedBasicAndSmartAccKeys.slice(0, this.pageSize)\n    const smartAccKeys = combinedBasicAndSmartAccKeys.slice(\n      this.pageSize,\n      combinedBasicAndSmartAccKeys.length\n    )\n\n    const smartAccountsPromises: Promise<DerivedAccountWithoutNetworkMeta | null>[] = []\n    // Replace the parallel getKeys with foreach to prevent issues with Ledger,\n    // which can only handle one request at a time.\n    // eslint-disable-next-line no-restricted-syntax\n    for (const [index, smartAccKey] of smartAccKeys.entries()) {\n      const slot = startIdx + (index + 1)\n\n      // The derived EOA (basic) account which is the key for the smart account\n      const account = getBasicAccount(smartAccKey, this.#alreadyImportedAccounts)\n      const indexWithOffset = slot - 1 + SMART_ACCOUNT_SIGNER_KEY_DERIVATION_OFFSET\n      accounts.push({ account, isLinked: false, slot, index: indexWithOffset })\n\n      // Derive the Ambire (smart) account\n      smartAccountsPromises.push(\n        getSmartAccount(\n          [{ addr: smartAccKey, hash: dedicatedToOneSAPriv }],\n          this.#alreadyImportedAccounts\n        )\n          .then((smartAccount) => {\n            return { account: smartAccount, isLinked: false, slot, index: slot - 1 }\n          })\n          // If the error isn't caught here and the promise is rejected, Promise.all\n          // will be rejected entirely.\n          .catch(() => {\n            // No need for emitting an error here, because a relevant error is already\n            // emitted in the method #getAccountsUsedOnNetworks\n            return null\n          })\n      )\n    }\n\n    const unfilteredSmartAccountsList = await Promise.all(smartAccountsPromises)\n    const smartAccounts = unfilteredSmartAccountsList.filter(\n      (x) => x !== null\n    ) as DerivedAccountWithoutNetworkMeta[]\n\n    accounts.push(...smartAccounts)\n\n    // eslint-disable-next-line no-restricted-syntax\n    for (const [index, basicAccKey] of basicAccKeys.entries()) {\n      const slot = startIdx + (index + 1)\n\n      // The EOA (basic) account on this slot\n      const account = getBasicAccount(basicAccKey, this.#alreadyImportedAccounts)\n      accounts.push({ account, isLinked: false, slot, index: slot - 1 })\n    }\n\n    const accountsWithNetworks = await this.#getAccountsUsedOnNetworks({ accounts })\n\n    return accountsWithNetworks\n  }\n\n  // inner func\n  // eslint-disable-next-line class-methods-use-this\n  async #getAccountsUsedOnNetworks({\n    accounts\n  }: {\n    accounts: DerivedAccountWithoutNetworkMeta[]\n  }): Promise<DerivedAccount[]> {\n    if (!this.shouldGetAccountsUsedOnNetworks) {\n      return accounts.map((a) => ({ ...a, account: { ...a.account, usedOnNetworks: [] } }))\n    }\n\n    const accountsObj: { [key: Account['addr']]: DerivedAccount } = Object.fromEntries(\n      accounts.map((a) => [a.account.addr, { ...a, account: { ...a.account, usedOnNetworks: [] } }])\n    )\n\n    const networkLookup: { [key: string]: Network } = {}\n    this.#networks.networks.forEach((network) => {\n      networkLookup[network.chainId.toString()] = network\n    })\n\n    const promises = Object.keys(this.#providers.providers).map(async (chainId: string) => {\n      const network = networkLookup[chainId]\n      if (network) {\n        const accountState = await getAccountState(\n          this.#providers.providers[chainId],\n          network,\n          accounts.map((acc) => acc.account)\n        ).catch(() => {\n          console.error('accountPicker: failed to get account state on ', chainId)\n          if (this.networksWithAccountStateError.includes(BigInt(chainId))) return\n          this.networksWithAccountStateError.push(BigInt(chainId))\n        })\n\n        if (!accountState) return\n\n        accountState.forEach((acc: AccountOnchainState) => {\n          const isUsedOnThisNetwork =\n            // Known limitation: checks only the native token balance. If this\n            // account has any other tokens than native ones, this check will\n            // fail to detect that the account was used on this network.\n            acc.balance > BigInt(0) ||\n            (acc.isEOA\n              ? acc.nonce > BigInt(0)\n              : // For smart accounts, check for 'isDeployed' instead because in\n                // the erc-4337 scenario many cases might be missed with checking\n                // the `acc.nonce`. For instance, `acc.nonce` could be 0, but user\n                // might be actively using the account. This is because in erc-4337,\n                // we use the entry point nonce. However, detecting the entry point\n                // nonce is also not okay, because for various cases we do not use\n                // sequential nonce - i.e., the entry point nonce could still be 0,\n                // but the account is deployed. So the 'isDeployed' check is the\n                // only reliable way to detect if account is used on network.\n                acc.isDeployed)\n          if (isUsedOnThisNetwork) {\n            accountsObj[acc.accountAddr].account.usedOnNetworks.push(network)\n          }\n        })\n      }\n    })\n\n    await Promise.all(promises)\n\n    const finalAccountsWithNetworksArray = Object.values(accountsObj)\n\n    // Preserve the original order of networks based on usedOnNetworks\n    const sortedAccountsWithNetworksArray = finalAccountsWithNetworksArray.sort((a, b) => {\n      const chainIdsA = a.account.usedOnNetworks.map((network) => network.chainId)\n      const chainIdsB = b.account.usedOnNetworks.map((network) => network.chainId)\n      const networkIndexA = this.#networks.networks.findIndex((network) =>\n        chainIdsA.includes(network.chainId)\n      )\n      const networkIndexB = this.#networks.networks.findIndex((network) =>\n        chainIdsB.includes(network.chainId)\n      )\n      return networkIndexA - networkIndexB\n    })\n\n    return sortedAccountsWithNetworksArray\n  }\n\n  async #findAndSetLinkedAccounts({ accounts }: { accounts: Account[] }) {\n    if (!this.shouldSearchForLinkedAccounts) return\n\n    if (accounts.length === 0) return\n\n    this.linkedAccountsLoading = true\n    this.emitUpdate()\n\n    const keys = accounts.map((acc) => `keys[]=${acc.addr}`).join('&')\n    const url = `/v2/account-by-key/linked/accounts?${keys}`\n\n    const { data } = await this.#callRelayer(url)\n    const linkedAccounts: { account: Account; isLinked: boolean }[] = Object.keys(\n      data.accounts\n    ).flatMap((addr: string) => {\n      // In extremely rare cases, on the Relayer, the identity data could be\n      // missing in the identities table but could exist in the logs table.\n      // When this happens, the account data will be `null`.\n      const isIdentityDataMissing = !data.accounts[addr]\n      if (isIdentityDataMissing) {\n        // Same error for both cases, because most prob\n        this.emitError({\n          level: 'minor',\n          message: `The address ${addr} is not linked to an Ambire account. Please try again later or contact support if the problem persists.`,\n          error: new Error(\n            `The address ${addr} is not linked to an Ambire account. This could be because the identity data is missing in the identities table but could exist in the logs table.`\n          )\n        })\n\n        return []\n      }\n\n      const { factoryAddr, bytecode, salt, associatedKeys } = data.accounts[addr]\n      // Checks whether the account.addr matches the addr generated from the\n      // factory. Should never happen, but could be a possible attack vector.\n      const isInvalidAddress =\n        getCreate2Address(factoryAddr, salt, keccak256(bytecode)).toLowerCase() !==\n        addr.toLowerCase()\n      if (isInvalidAddress) {\n        const message = `The address ${addr} can't be verified to be a smart account address.`\n        this.emitError({ level: 'minor', message, error: new Error(message) })\n\n        return []\n      }\n\n      const existingAccount = this.#alreadyImportedAccounts.find((acc) => acc.addr === addr)\n      return [\n        {\n          account: {\n            addr,\n            associatedKeys: Object.keys(associatedKeys),\n            initialPrivileges: data.accounts[addr].initialPrivilegesAddrs.map((address: string) => [\n              address,\n              // this is a default privilege hex we add on account creation\n              '0x0000000000000000000000000000000000000000000000000000000000000001'\n            ]),\n            creation: {\n              factoryAddr,\n              bytecode,\n              salt\n            },\n            preferences: {\n              label: existingAccount?.preferences.label || DEFAULT_ACCOUNT_LABEL,\n              pfp: existingAccount?.preferences?.pfp || addr\n            }\n          },\n          isLinked: true\n        }\n      ]\n    })\n\n    // in case the page is changed or the ctrl is reset do not continue with the logic\n    if (!this.linkedAccountsLoading) return\n\n    const linkedAccountsWithNetworks = await this.#getAccountsUsedOnNetworks({\n      accounts: linkedAccounts as any\n    })\n\n    if (!this.linkedAccountsLoading) return\n\n    this.#linkedAccounts = linkedAccountsWithNetworks\n    this.#verifyLinkedAccounts()\n\n    this.linkedAccountsLoading = false\n    this.emitUpdate()\n  }\n\n  /**\n   * The corresponding derived account for the linked accounts should always be found,\n   * except when something is wrong with the data we have stored on the Relayer.\n   * Also, could be an attack vector. So indicate to the user that something is wrong.\n   */\n  #verifyLinkedAccounts() {\n    this.#linkedAccounts.forEach((linkedAcc) => {\n      const correspondingDerivedAccount = this.#derivedAccounts.find((derivedAccount) =>\n        linkedAcc.account.associatedKeys.includes(derivedAccount.account.addr)\n      )\n\n      // The `correspondingDerivedAccount` should always be found,\n      // except something is wrong with the data we have stored on the Relayer\n      if (!correspondingDerivedAccount) {\n        this.emitError({\n          level: 'major',\n          message: `Something went wrong with finding the corresponding account in the associated keys of the linked account with address ${linkedAcc.account.addr}. Please start the process again. If the problem persists, contact support.`,\n          error: new Error(\n            `Something went wrong with finding the corresponding account in the associated keys of the linked account with address ${linkedAcc.account.addr}.`\n          )\n        })\n      }\n    })\n  }\n\n  #throwNotInitialized() {\n    this.emitError({\n      level: 'major',\n      message:\n        'Something went wrong with deriving the accounts. Please start the process again. If the problem persists, contact support.',\n      error: new Error(\n        'accountPicker: requested a method of the AccountPicker controller, but the controller was not initialized'\n      )\n    })\n  }\n\n  #throwMissingKeyIterator() {\n    this.emitError({\n      level: 'major',\n      message:\n        'Something went wrong with deriving the accounts. Please start the process again. If the problem persists, contact support.',\n      error: new Error('accountPicker: missing keyIterator')\n    })\n  }\n\n  #throwMissingKeyIteratorRetrieveInternalKeysMethod() {\n    this.emitError({\n      level: 'major',\n      message:\n        'Retrieving internal keys failed. Please try to start the process of selecting accounts again. If the problem persist, please contact support.',\n      error: new Error('accountPicker: missing retrieveInternalKeys method')\n    })\n  }\n\n  #throwMissingHdPath() {\n    this.emitError({\n      level: 'major',\n      message:\n        'The HD path template is missing. Please try to start the process of selecting accounts again. If the problem persist, please contact support.',\n      error: new Error('accountPicker: missing hdPathTemplate')\n    })\n  }\n\n  #debounceFunctionCalls(funcName: string, func: () => void, ms: number = 0) {\n    if (this.#shouldDebounceFlags[funcName]) return\n    this.#shouldDebounceFlags[funcName] = true\n\n    setTimeout(() => {\n      this.#shouldDebounceFlags[funcName] = false\n      try {\n        func()\n      } catch (error: any) {\n        this.emitError({\n          level: 'minor',\n          message: `The execution of ${funcName} in the AccountPickerController failed`,\n          error\n        })\n      }\n    }, ms)\n  }\n\n  toJSON() {\n    return {\n      ...this,\n      ...super.toJSON(),\n      // includes the getter in the stringified instance\n      accountsOnPage: this.accountsOnPage,\n      allKeysOnPage: this.allKeysOnPage,\n      selectedAccounts: this.selectedAccounts,\n      addedAccountsFromCurrentSession: this.addedAccountsFromCurrentSession,\n      type: this.type,\n      subType: this.subType,\n      isPageLocked: this.isPageLocked\n    }\n  }\n}\n\nexport default AccountPickerController\n"]}