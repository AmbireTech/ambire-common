{"version":3,"file":"defiPositions.js","sourceRoot":"","sources":["../../../../src/controllers/defiPositions/defiPositions.ts"],"names":[],"mappings":"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","sourcesContent":["import { AccountId } from '../../interfaces/account'\nimport { Fetch } from '../../interfaces/fetch'\nimport { NetworkId } from '../../interfaces/network'\nimport { Storage } from '../../interfaces/storage'\nimport { getAssetValue } from '../../libs/defiPositions/helpers'\nimport { getAAVEPositions, getUniV3Positions } from '../../libs/defiPositions/providers'\nimport getAccountNetworksWithPositions from '../../libs/defiPositions/providers/helpers/networksWithPositions'\nimport {\n  AccountState,\n  DeFiPositionsError,\n  DeFiPositionsState,\n  NetworksWithPositionsByAccounts,\n  PositionsByProvider,\n  ProviderName\n} from '../../libs/defiPositions/types'\nimport EventEmitter from '../eventEmitter/eventEmitter'\nimport { NetworksController } from '../networks/networks'\nimport { ProvidersController } from '../providers/providers'\n// eslint-disable-next-line import/no-cycle\nimport { SelectedAccountController } from '../selectedAccount/selectedAccount'\n\nexport class DefiPositionsController extends EventEmitter {\n  #selectedAccount: SelectedAccountController\n\n  #providers: ProvidersController\n\n  #networks: NetworksController\n\n  #fetch: Fetch\n\n  #storage: Storage\n\n  #minUpdateInterval: number = 60 * 1000 // 1 minute\n\n  #state: DeFiPositionsState = {}\n\n  #networksWithPositionsByAccounts: NetworksWithPositionsByAccounts = {}\n\n  constructor({\n    fetch,\n    storage,\n    selectedAccount,\n    providers,\n    networks\n  }: {\n    fetch: Fetch\n    storage: Storage\n    selectedAccount: SelectedAccountController\n    providers: ProvidersController\n    networks: NetworksController\n  }) {\n    super()\n\n    this.#fetch = fetch\n    this.#storage = storage\n    this.#selectedAccount = selectedAccount\n    this.#providers = providers\n    this.#networks = networks\n  }\n\n  #setProviderError(\n    accountAddr: string,\n    networkId: string,\n    providerName: ProviderName,\n    errorMessage: string\n  ) {\n    if (!this.#state[accountAddr][networkId].providerErrors) {\n      this.#state[accountAddr][networkId].providerErrors = []\n    }\n\n    this.#state[accountAddr][networkId].providerErrors!.push({\n      providerName,\n      error: errorMessage\n    })\n  }\n\n  #getCanSkipUpdate(accountAddr: string, networkId: string) {\n    const networkState = this.#state[accountAddr][networkId]\n\n    if (networkState.error || networkState.providerErrors?.length) return false\n    const isWithinMinUpdateInterval =\n      networkState.updatedAt && Date.now() - networkState.updatedAt < this.#minUpdateInterval\n\n    return isWithinMinUpdateInterval || networkState.isLoading\n  }\n\n  async #updateNetworksWithPositions(accountId: AccountId, accountState: AccountState) {\n    const storageStateByAccount = await this.#storage.get('networksWithPositionsByAccounts', {})\n\n    this.#networksWithPositionsByAccounts[accountId] = getAccountNetworksWithPositions(\n      accountId,\n      accountState,\n      storageStateByAccount,\n      this.#providers.providers\n    )\n\n    this.emitUpdate()\n    await this.#storage.set(\n      'networksWithPositionsByAccounts',\n      this.#networksWithPositionsByAccounts\n    )\n  }\n\n  async updatePositions(networkId?: NetworkId) {\n    if (!this.#selectedAccount.account) return\n\n    const selectedAccountAddr = this.#selectedAccount.account.addr\n    const networksToUpdate = networkId\n      ? this.#networks.networks.filter((n) => n.id === networkId)\n      : this.#networks.networks\n\n    if (!this.#state[selectedAccountAddr]) {\n      this.#state[selectedAccountAddr] = {}\n    }\n\n    await Promise.all(\n      networksToUpdate.map(async (n) => {\n        if (!this.#state[selectedAccountAddr][n.id]) {\n          this.#state[selectedAccountAddr][n.id] = {\n            isLoading: false,\n            positionsByProvider: [],\n            updatedAt: undefined\n          }\n        }\n\n        if (this.#getCanSkipUpdate(selectedAccountAddr, n.id)) {\n          // Emit an update so that the current account data getter is updated\n          this.emitUpdate()\n          return\n        }\n\n        this.#state[selectedAccountAddr][n.id].isLoading = true\n        this.emitUpdate()\n\n        const networkState = this.#state[selectedAccountAddr][n.id]\n        // Reset provider errors before updating\n        networkState.providerErrors = []\n        networkState.error = undefined\n\n        try {\n          const previousPositions = networkState.positionsByProvider\n          const [aavePositions, uniV3Positions] = await Promise.all([\n            getAAVEPositions(selectedAccountAddr, this.#providers.providers[n.id], n).catch(\n              (e: any) => {\n                console.error('getAAVEPositions error:', e)\n                this.#setProviderError(\n                  selectedAccountAddr,\n                  n.id,\n                  'AAVE v3',\n                  e?.message || 'Unknown error'\n                )\n                // We should consider changing the structure of positions in a way\n                // that this isn't needed. This is done so if there is an error,\n                // old data can still be displayed\n                return previousPositions?.find((p) => p.providerName === 'AAVE v3') || null\n              }\n            ),\n            getUniV3Positions(selectedAccountAddr, this.#providers.providers[n.id], n).catch(\n              (e: any) => {\n                console.error('getUniV3Positions error:', e)\n\n                this.#setProviderError(\n                  selectedAccountAddr,\n                  n.id,\n                  'Uniswap V3',\n                  e?.message || 'Unknown error'\n                )\n                // We should consider changing the structure of positions in a way\n                // that this isn't needed. This is done so if there is an error,\n                // old data can still be displayed\n                return previousPositions?.find((p) => p.providerName === 'Uniswap V3') || null\n              }\n            )\n          ])\n\n          const hasErrors = !!this.#state[selectedAccountAddr][n.id].providerErrors?.length\n\n          this.#state[selectedAccountAddr][n.id] = {\n            ...networkState,\n            isLoading: false,\n            positionsByProvider: [aavePositions, uniV3Positions].filter(\n              Boolean\n            ) as PositionsByProvider[],\n            updatedAt: hasErrors ? networkState.updatedAt : Date.now()\n          }\n          await this.#setAssetPrices(selectedAccountAddr, n.id).catch((e) => {\n            console.error('#setAssetPrices error:', e)\n            this.#state[selectedAccountAddr][n.id].error = DeFiPositionsError.AssetPriceError\n          })\n        } catch (e: any) {\n          const prevPositionsByProvider = networkState.positionsByProvider\n          this.#state[selectedAccountAddr][n.id] = {\n            isLoading: false,\n            positionsByProvider: prevPositionsByProvider || [],\n            error: DeFiPositionsError.CriticalError\n          }\n          console.error(`updatePositions error on ${n.id}`, e)\n        } finally {\n          this.emitUpdate()\n        }\n      })\n    )\n\n    await this.#updateNetworksWithPositions(selectedAccountAddr, this.#state[selectedAccountAddr])\n  }\n\n  async #setAssetPrices(accountAddr: string, networkId: string) {\n    const platformId = this.#networks.networks.find((n) => n.id === networkId)?.platformId\n\n    // If we can't determine the Gecko platform ID, we shouldn't make a request to price (cena.ambire.com)\n    // since it would return nothing.\n    // This can happen when adding a custom network that doesn't have a CoinGecko platform ID.\n    if (!platformId) throw new Error('Missing `platformId`')\n\n    const dedup = (x: any[]) => x.filter((y, i) => x.indexOf(y) === i)\n\n    const networkState = this.#state[accountAddr][networkId]\n\n    const addresses: string[] = []\n\n    networkState.positionsByProvider.forEach((providerPos) => {\n      providerPos.positions.forEach((p) => {\n        p.assets.forEach((a) => {\n          addresses.push(a.address)\n        })\n      })\n    })\n\n    const cenaUrl = `https://cena.ambire.com/api/v3/simple/token_price/${platformId}?contract_addresses=${dedup(\n      addresses\n    ).join('%2C')}&vs_currencies=usd`\n\n    const resp = await this.#fetch(cenaUrl)\n    const body = await resp.json()\n    if (resp.status !== 200) throw body\n    // eslint-disable-next-line no-prototype-builtins\n    if (body.hasOwnProperty('message')) throw body\n    // eslint-disable-next-line no-prototype-builtins\n    if (body.hasOwnProperty('error')) throw body\n\n    const positionsByProviderWithPrices = this.#state[accountAddr][\n      networkId\n    ].positionsByProvider.map((positionsByProvider) => {\n      if (positionsByProvider.providerName.toLowerCase().includes('aave'))\n        return positionsByProvider\n\n      const updatedPositions = positionsByProvider.positions.map((position) => {\n        let positionInUSD = position.additionalData.positionInUSD || 0\n\n        const updatedAssets = position.assets.map((asset) => {\n          const priceData = body[asset.address.toLowerCase()]\n          if (!priceData) return asset\n\n          const priceIn = Object.entries(priceData).map(([currency, price]) => ({\n            baseCurrency: currency,\n            price: price as number\n          }))\n\n          const value = getAssetValue(asset.amount, asset.decimals, priceIn)\n\n          positionInUSD += value\n\n          return {\n            ...asset,\n            value,\n            priceIn\n          }\n        })\n\n        return {\n          ...position,\n          assets: updatedAssets,\n          additionalData: { ...position.additionalData, positionInUSD }\n        }\n      })\n\n      let positionInUSD = positionsByProvider.positionInUSD\n\n      // Already set in the corresponding lib\n      if (!positionInUSD) {\n        positionInUSD = updatedPositions.reduce((prevPositionValue, position) => {\n          return prevPositionValue + (position.additionalData.positionInUSD || 0)\n        }, 0)\n      }\n\n      return { ...positionsByProvider, positions: updatedPositions, positionInUSD }\n    })\n\n    this.#state[accountAddr][networkId].positionsByProvider = positionsByProviderWithPrices\n  }\n\n  removeNetworkData(networkId: NetworkId) {\n    Object.keys(this.#state).forEach((accountId) => {\n      delete this.#state[accountId][networkId]\n    })\n    this.emitUpdate()\n  }\n\n  getDefiPositionsState(accountAddr: string) {\n    return this.#state[accountAddr] || {}\n  }\n\n  getNetworksWithPositions(accountAddr: string) {\n    return this.#networksWithPositionsByAccounts[accountAddr] || []\n  }\n\n  removeAccountData(accountAddr: string) {\n    delete this.#state[accountAddr]\n    delete this.#networksWithPositionsByAccounts[accountAddr]\n    this.#storage.set('networksWithPositionsByAccounts', this.#networksWithPositionsByAccounts)\n\n    this.emitUpdate()\n  }\n\n  toJSON() {\n    return {\n      ...this,\n      ...super.toJSON()\n    }\n  }\n}\n"]}