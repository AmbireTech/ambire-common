{"version":3,"file":"gasPrice.js","sourceRoot":"","sources":["../../../../src/controllers/gasPrice/gasPrice.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-floating-promises */\nimport { BUNDLER } from '../../consts/bundlers'\nimport { Network } from '../../interfaces/network'\nimport { RPCProvider } from '../../interfaces/provider'\nimport { decodeError } from '../../libs/errorDecoder'\nimport { ErrorType } from '../../libs/errorDecoder/types'\nimport { GasRecommendation, getGasPriceRecommendations } from '../../libs/gasPrice/gasPrice'\nimport { BundlerSwitcher } from '../../services/bundlers/bundlerSwitcher'\nimport { GasSpeeds } from '../../services/bundlers/types'\nimport wait from '../../utils/wait'\nimport { EstimationController } from '../estimation/estimation'\nimport { EstimationStatus } from '../estimation/types'\nimport EventEmitter, { ErrorRef } from '../eventEmitter/eventEmitter'\n\nexport class GasPriceController extends EventEmitter {\n  #network: Network\n\n  #provider: RPCProvider\n\n  #bundlerSwitcher: BundlerSwitcher\n\n  #getSignAccountOpState: () => {\n    estimation: EstimationController\n    readyToSign: boolean\n    isSignRequestStillActive: Function\n  }\n\n  // network => GasRecommendation[]\n  gasPrices: { [key: string]: GasRecommendation[] } = {}\n\n  // network => BundlerGasPrice\n  bundlerGasPrices: { [key: string]: { speeds: GasSpeeds; bundler: BUNDLER } } = {}\n\n  blockGasLimit: bigint | undefined = undefined\n\n  stopRefetching: boolean = false\n\n  constructor(\n    network: Network,\n    provider: RPCProvider,\n    bundlerSwitcher: BundlerSwitcher,\n    getSignAccountOpState: () => {\n      estimation: EstimationController\n      readyToSign: boolean\n      isSignRequestStillActive: Function\n    }\n  ) {\n    super()\n    this.#network = network\n    this.#provider = provider\n    this.#bundlerSwitcher = bundlerSwitcher\n    this.#getSignAccountOpState = getSignAccountOpState\n  }\n\n  async refetch() {\n    await wait(12000)\n    if (this.stopRefetching) return\n    const signAccountOpState = this.#getSignAccountOpState()\n    if (!signAccountOpState.isSignRequestStillActive()) return\n\n    // no need to update the gas prices if the estimation status is Error\n    // try again after 12s\n    if (signAccountOpState.estimation.status === EstimationStatus.Error) {\n      this.refetch()\n      return\n    }\n\n    this.fetch('major')\n  }\n\n  async fetch(emitLevelOnFailure: ErrorRef['level'] = 'silent') {\n    const bundler = this.#bundlerSwitcher.getBundler()\n\n    const [gasPriceData, bundlerGas] = await Promise.all([\n      getGasPriceRecommendations(this.#provider, this.#network).catch((e) => {\n        const signAccountOpState = this.#getSignAccountOpState()\n        const estimation = signAccountOpState.estimation as EstimationController\n\n        // if the gas price data has been fetched once successfully OR an estimation error\n        // is currently being displayed, do not emit another error\n        if (this.gasPrices[this.#network.chainId.toString()] || estimation.estimationRetryError)\n          return\n\n        const { type } = decodeError(e)\n\n        let message = \"We couldn't retrieve the latest network fee information.\"\n\n        if (type === ErrorType.ConnectivityError) {\n          message = 'Network connection issue prevented us from retrieving the current network fee.'\n        }\n\n        this.emitError({\n          level: emitLevelOnFailure,\n          message,\n          error: new Error(`Failed to fetch gas price on ${this.#network.name}: ${e?.message}`)\n        })\n        return null\n      }),\n      this.#network.erc4337.hasBundlerSupport !== false\n        ? bundler\n            // no error emits here as most of the time estimation/signing\n            // will work even if this fails\n            .fetchGasPrices(this.#network, () => {})\n            .catch((e) => {\n              this.emitError({\n                level: 'silent',\n                message: \"Failed to fetch the bundler's gas price\",\n                error: e\n              })\n            })\n        : null\n    ])\n\n    if (gasPriceData) {\n      if (gasPriceData.gasPrice)\n        this.gasPrices[this.#network.chainId.toString()] = gasPriceData.gasPrice\n      this.blockGasLimit = gasPriceData.blockGasLimit\n    }\n    if (bundlerGas)\n      this.bundlerGasPrices[this.#network.chainId.toString()] = {\n        speeds: bundlerGas,\n        bundler: bundler.getName()\n      }\n\n    this.emitUpdate()\n\n    this.refetch()\n  }\n\n  reset() {\n    this.stopRefetching = true\n  }\n}\n"]}