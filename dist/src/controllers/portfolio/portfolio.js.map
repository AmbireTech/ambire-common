{"version":3,"file":"portfolio.js","sourceRoot":"","sources":["../../../../src/controllers/portfolio/portfolio.ts"],"names":[],"mappings":"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","sourcesContent":["import { getAddress, ZeroAddress } from 'ethers'\n\nimport { Account, AccountId } from '../../interfaces/account'\nimport { Fetch } from '../../interfaces/fetch'\nimport { Network, NetworkId } from '../../interfaces/network'\n/* eslint-disable @typescript-eslint/no-shadow */\nimport { Storage } from '../../interfaces/storage'\nimport { isSmartAccount } from '../../libs/account/account'\nimport { AccountOp, AccountOpStatus, isAccountOpsIntentEqual } from '../../libs/accountOp/accountOp'\nimport { Portfolio } from '../../libs/portfolio'\n/* eslint-disable @typescript-eslint/no-use-before-define */\nimport { CustomToken, TokenPreference } from '../../libs/portfolio/customToken'\nimport getAccountNetworksWithAssets from '../../libs/portfolio/getNetworksWithAssets'\nimport {\n  getFlags,\n  getPinnedGasTankTokens,\n  getTokensReadyToLearn,\n  getTotal,\n  getUpdatedHints,\n  processTokens,\n  shouldGetAdditionalPortfolio,\n  validateERC20Token\n} from '../../libs/portfolio/helpers'\n/* eslint-disable no-restricted-syntax */\n// eslint-disable-next-line import/no-cycle\nimport {\n  AccountAssetsState,\n  AccountState,\n  GetOptions,\n  NetworkState,\n  PortfolioControllerState,\n  PreviousHintsStorage,\n  TemporaryTokens,\n  TokenResult\n} from '../../libs/portfolio/interfaces'\nimport { migrateTokenPreferences } from '../../libs/portfolio/migrations/tokenPreferences'\nimport { relayerCall } from '../../libs/relayerCall/relayerCall'\nimport { AccountsController } from '../accounts/accounts'\nimport EventEmitter from '../eventEmitter/eventEmitter'\nimport { NetworksController } from '../networks/networks'\nimport { ProvidersController } from '../providers/providers'\n\n/* eslint-disable @typescript-eslint/no-shadow */\n\nconst LEARNED_TOKENS_NETWORK_LIMIT = 50\n\nexport class PortfolioController extends EventEmitter {\n  #latest: PortfolioControllerState\n\n  #pending: PortfolioControllerState\n\n  // A queue to prevent race conditions when calling `updateSelectedAccount`.\n  // All calls are queued by network and account.\n  // Each time `updateSelectedAccount` is invoked to update the latest or pending state, the call is added to the queue.\n  // If a previous call is still running, the new call will be queued and executed only after the first one completes,\n  // regardless of whether it succeeds or fails.\n  // Before implementing this queue, multiple `updateSelectedAccount` calls made in a short period of time could cause\n  // the response of the latest call to be overwritten by a slower previous call.\n  #queue: {\n    [accountId: string]: {\n      [networkId: NetworkId]: Promise<void>\n    }\n  }\n\n  #toBeLearnedTokens: { [network in NetworkId]: string[] }\n\n  customTokens: CustomToken[] = []\n\n  tokenPreferences: TokenPreference[] = []\n\n  validTokens: any = { erc20: {}, erc721: {} }\n\n  temporaryTokens: TemporaryTokens = {}\n\n  #portfolioLibs: Map<string, Portfolio>\n\n  #storage: Storage\n\n  #fetch: Fetch\n\n  #callRelayer: Function\n\n  #velcroUrl: string\n\n  #networksWithAssetsByAccounts: {\n    [accountId: string]: AccountAssetsState\n  } = {}\n\n  #minUpdateInterval: number = 20000 // 20 seconds\n\n  /**\n   * Hints stored in storage, divided into three categories:\n   * - fromExternalAPI: Hints fetched from an external API, used when the external API response fails.\n   * - learnedTokens: Hints of learned tokens, each with a timestamp indicating the last time the token was seen with a balance and not included in fromExternalAPI hints. This helps prioritize tokens not yet found by Velcro during cleansing.\n   * - learnedNfts: Hints of learned NFTs.\n   */\n  #previousHints: PreviousHintsStorage = {\n    fromExternalAPI: {},\n    learnedTokens: {},\n    learnedNfts: {}\n  }\n\n  #providers: ProvidersController\n\n  #networks: NetworksController\n\n  #accounts: AccountsController\n\n  // Holds the initial load promise, so that one can wait until it completes\n  #initialLoadPromise: Promise<void>\n\n  constructor(\n    storage: Storage,\n    fetch: Fetch,\n    providers: ProvidersController,\n    networks: NetworksController,\n    accounts: AccountsController,\n    relayerUrl: string,\n    velcroUrl: string\n  ) {\n    super()\n    this.#latest = {}\n    this.#pending = {}\n    this.#queue = {}\n    this.#portfolioLibs = new Map()\n    this.#storage = storage\n    this.#fetch = fetch\n    this.#callRelayer = relayerCall.bind({ url: relayerUrl, fetch })\n    this.#velcroUrl = velcroUrl\n    this.#providers = providers\n    this.#networks = networks\n    this.#accounts = accounts\n    this.temporaryTokens = {}\n    this.#toBeLearnedTokens = {}\n\n    this.#initialLoadPromise = this.#load()\n  }\n\n  async #load() {\n    try {\n      await this.#networks.initialLoadPromise\n      await this.#accounts.initialLoadPromise\n      const storageTokenPreferences = await this.#storage.get('tokenPreferences', [])\n      const storageCustomTokens = await this.#storage.get('customTokens', [])\n\n      const { tokenPreferences, customTokens, shouldUpdateStorage } = migrateTokenPreferences(\n        storageTokenPreferences,\n        storageCustomTokens\n      )\n\n      this.tokenPreferences = tokenPreferences\n      this.customTokens = customTokens\n\n      if (shouldUpdateStorage) {\n        await this.#storage.set('tokenPreferences', this.tokenPreferences)\n        await this.#storage.set('customTokens', this.customTokens)\n      }\n\n      this.#previousHints = await this.#storage.get('previousHints', {})\n      const networksWithAssets = await this.#storage.get('networksWithAssetsByAccount', {})\n      const isOldStructure = Object.keys(networksWithAssets).every(\n        (key) =>\n          Array.isArray(networksWithAssets[key]) &&\n          networksWithAssets[key].every((item: any) => typeof item === 'string')\n      )\n      if (!isOldStructure) {\n        this.#networksWithAssetsByAccounts = networksWithAssets\n      }\n    } catch (e) {\n      this.emitError({\n        message:\n          'Something went wrong when loading portfolio. Please try again or contact support if the problem persists.',\n        level: 'major',\n        error: new Error('portfolio: failed to pull keys from storage')\n      })\n    }\n\n    this.emitUpdate()\n  }\n\n  async #updatePortfolioOnTokenChange(networkId: NetworkId, selectedAccountAddr?: string) {\n    // As this function currently only updates the portfolio we can skip it altogether\n    // if skipPortfolioUpdate is set to true\n    if (!selectedAccountAddr) return\n\n    const networkData = this.#networks.networks.find(({ id }) => id === networkId)\n    await this.updateSelectedAccount(selectedAccountAddr, networkData, undefined, {\n      forceUpdate: true\n    })\n  }\n\n  async addCustomToken(\n    customToken: CustomToken,\n    selectedAccountAddr?: string,\n    shouldUpdatePortfolio?: boolean\n  ) {\n    await this.#initialLoadPromise\n    const isTokenAlreadyAdded = this.customTokens.some(\n      ({ address, networkId }) =>\n        address.toLowerCase() === customToken.address.toLowerCase() &&\n        networkId === customToken.networkId\n    )\n\n    if (isTokenAlreadyAdded) return\n\n    this.customTokens.push(customToken)\n\n    if (shouldUpdatePortfolio) {\n      await this.#updatePortfolioOnTokenChange(customToken.networkId, selectedAccountAddr)\n    }\n\n    await this.#storage.set('customTokens', this.customTokens)\n  }\n\n  async removeCustomToken(\n    customToken: Omit<CustomToken, 'standard'>,\n    selectedAccountAddr?: string,\n    shouldUpdatePortfolio?: boolean\n  ) {\n    await this.#initialLoadPromise\n    this.customTokens = this.customTokens.filter(\n      (token) =>\n        !(\n          token.address.toLowerCase() === customToken.address.toLowerCase() &&\n          token.networkId === customToken.networkId\n        )\n    )\n    const existingPreference = this.tokenPreferences.some(\n      (pref) => pref.address === customToken.address && pref.networkId === customToken.networkId\n    )\n\n    // Delete custom token preference if it exists\n    if (existingPreference) {\n      await this.toggleHideToken(customToken, selectedAccountAddr, shouldUpdatePortfolio)\n      await this.#storage.set('customTokens', this.customTokens)\n    } else {\n      this.emitUpdate()\n      if (shouldUpdatePortfolio) {\n        await this.#updatePortfolioOnTokenChange(customToken.networkId, selectedAccountAddr)\n      }\n      await this.#storage.set('customTokens', this.customTokens)\n    }\n  }\n\n  async toggleHideToken(\n    tokenPreference: TokenPreference,\n    selectedAccountAddr?: string,\n    shouldUpdatePortfolio?: boolean\n  ) {\n    await this.#initialLoadPromise\n\n    const existingPreference = this.tokenPreferences.find(\n      ({ address, networkId }) =>\n        address.toLowerCase() === tokenPreference.address.toLowerCase() &&\n        networkId === tokenPreference.networkId\n    )\n\n    // Push the token as hidden\n    if (!existingPreference) {\n      this.tokenPreferences.push({ ...tokenPreference, isHidden: true })\n      // Remove the token preference if the user decides to show it again\n    } else if (existingPreference.isHidden) {\n      this.tokenPreferences = this.tokenPreferences.filter(\n        ({ address, networkId }) =>\n          !(address === tokenPreference.address && networkId === tokenPreference.networkId)\n      )\n    } else {\n      // Should happen only after migration\n      existingPreference.isHidden = !existingPreference.isHidden\n    }\n\n    this.emitUpdate()\n    if (shouldUpdatePortfolio) {\n      await this.#updatePortfolioOnTokenChange(tokenPreference.networkId, selectedAccountAddr)\n    }\n    await this.#storage.set('tokenPreferences', this.tokenPreferences)\n  }\n\n  async #updateNetworksWithAssets(accountId: AccountId, accountState: AccountState) {\n    const storageStateByAccount = this.#networksWithAssetsByAccounts\n\n    this.#networksWithAssetsByAccounts[accountId] = getAccountNetworksWithAssets(\n      accountId,\n      accountState,\n      storageStateByAccount,\n      this.#providers.providers\n    )\n\n    this.emitUpdate()\n    await this.#storage.set('networksWithAssetsByAccount', this.#networksWithAssetsByAccounts)\n  }\n\n  #setNetworkLoading(\n    accountId: AccountId,\n    stateKey: 'latest' | 'pending',\n    network: string,\n    isLoading: boolean,\n    error?: any\n  ) {\n    const states = {\n      latest: this.#latest,\n      pending: this.#pending\n    }\n    const accountState = states[stateKey][accountId]\n    if (!accountState[network]) accountState[network] = { errors: [], isReady: false, isLoading }\n    accountState[network]!.isLoading = isLoading\n    if (error) accountState[network]!.criticalError = error\n  }\n\n  removeNetworkData(networkId: NetworkId) {\n    for (const accountState of [this.#latest, this.#pending]) {\n      for (const accountId of Object.keys(accountState)) {\n        delete accountState[accountId][networkId]\n      }\n    }\n    this.emitUpdate()\n  }\n\n  // make the pending results the same as the latest ones\n  overridePendingResults(accountOp: AccountOp) {\n    if (\n      this.#pending[accountOp.accountAddr] &&\n      this.#pending[accountOp.accountAddr][accountOp.networkId] &&\n      this.#latest[accountOp.accountAddr] &&\n      this.#latest[accountOp.accountAddr][accountOp.networkId]\n    ) {\n      this.#pending[accountOp.accountAddr][accountOp.networkId]!.result =\n        this.#latest[accountOp.accountAddr][accountOp.networkId]!.result\n      this.emitUpdate()\n    }\n  }\n\n  async updateTokenValidationByStandard(\n    token: { address: TokenResult['address']; networkId: TokenResult['networkId'] },\n    accountId: AccountId\n  ) {\n    await this.#initialLoadPromise\n    if (this.validTokens.erc20[`${token.address}-${token.networkId}`] === true) return\n\n    const [isValid, standard]: [boolean, string] = (await validateERC20Token(\n      token,\n      accountId,\n      this.#providers.providers[token.networkId]\n    )) as [boolean, string]\n\n    this.validTokens[standard] = {\n      ...this.validTokens[standard],\n      [`${token.address}-${token.networkId}`]: isValid\n    }\n\n    this.emitUpdate()\n  }\n\n  initializePortfolioLibIfNeeded(accountId: AccountId, networkId: NetworkId, network: Network) {\n    const providers = this.#providers.providers\n    const key = `${networkId}:${accountId}`\n    // Initialize a new Portfolio lib if:\n    // 1. It does not exist in the portfolioLibs map\n    // 2. The network RPC URL has changed\n    if (\n      !this.#portfolioLibs.has(key) ||\n      this.#portfolioLibs.get(key)?.network?.selectedRpcUrl !==\n        // eslint-disable-next-line no-underscore-dangle\n        providers[network.id]?._getConnection().url\n    ) {\n      this.#portfolioLibs.set(\n        key,\n        new Portfolio(this.#fetch, providers[network.id], network, this.#velcroUrl)\n      )\n    }\n    return this.#portfolioLibs.get(key)!\n  }\n\n  async getTemporaryTokens(accountId: AccountId, networkId: NetworkId, additionalHint: string) {\n    const network = this.#networks.networks.find((x) => x.id === networkId)\n\n    if (!network) throw new Error('network not found')\n\n    const portfolioLib = this.initializePortfolioLibIfNeeded(accountId, networkId, network)\n\n    const temporaryTokensToFetch =\n      (this.temporaryTokens[network.id] &&\n        this.temporaryTokens[network.id].result?.tokens.filter(\n          (x) => x.address !== additionalHint\n        )) ||\n      []\n\n    this.temporaryTokens[network.id] = {\n      isLoading: false,\n      errors: [],\n      result: this.temporaryTokens[network.id] && this.temporaryTokens[network.id].result\n    }\n    this.emitUpdate()\n\n    try {\n      const result = await portfolioLib.get(accountId, {\n        priceRecency: 60000,\n        additionalErc20Hints: [additionalHint, ...temporaryTokensToFetch.map((x) => x.address)],\n        disableAutoDiscovery: true\n      })\n      this.temporaryTokens[network.id] = {\n        isLoading: false,\n        errors: [],\n        result: {\n          tokens: result.tokens\n        }\n      }\n      this.emitUpdate()\n      return true\n    } catch (e: any) {\n      this.emitError({\n        level: 'silent',\n        message: \"Error while executing the 'get' function in the portfolio library.\",\n        error: e\n      })\n      this.temporaryTokens[network.id].isLoading = false\n      this.temporaryTokens[network.id].errors.push(e)\n      this.emitUpdate()\n      return false\n    }\n  }\n\n  async #getAdditionalPortfolio(accountId: AccountId, forceUpdate?: boolean) {\n    const rewardsOrGasTankState =\n      this.#latest[accountId]?.rewards || this.#latest[accountId]?.gasTank\n    const canSkipUpdate = rewardsOrGasTankState\n      ? this.#getCanSkipUpdate(rewardsOrGasTankState, forceUpdate)\n      : false\n\n    if (canSkipUpdate) return\n\n    const hasNonZeroTokens = !!Object.values(\n      this.#networksWithAssetsByAccounts?.[accountId] || {}\n    ).some(Boolean)\n    const start = Date.now()\n    const accountState = this.#latest[accountId]\n\n    this.#setNetworkLoading(accountId, 'latest', 'gasTank', true)\n    this.#setNetworkLoading(accountId, 'latest', 'rewards', true)\n    this.emitUpdate()\n\n    let res: any\n    try {\n      res = await this.#callRelayer(`/v2/identity/${accountId}/portfolio-additional`)\n    } catch (e: any) {\n      console.error('relayer error for portfolio additional')\n      this.#setNetworkLoading(accountId, 'latest', 'gasTank', false, e)\n      this.#setNetworkLoading(accountId, 'latest', 'rewards', false, e)\n      this.emitUpdate()\n      return\n    }\n\n    if (!res) throw new Error('portfolio controller: no res, should never happen')\n\n    const rewardsTokens = [\n      res.data.rewards.xWalletClaimableBalance || [],\n      res.data.rewards.walletClaimableBalance || []\n    ]\n      .flat()\n      .map((t: any) => ({\n        ...t,\n        symbol: t.address === '0x47Cd7E91C3CBaAF266369fe8518345fc4FC12935' ? 'xWALLET' : t.symbol,\n        flags: getFlags(res.data.rewards, 'rewards', t.networkId, t.address)\n      }))\n\n    accountState.rewards = {\n      isReady: true,\n      isLoading: false,\n      errors: [],\n      result: {\n        ...res.data.rewards,\n        lastSuccessfulUpdate: Date.now(),\n        updateStarted: start,\n        tokens: rewardsTokens,\n        total: getTotal(rewardsTokens)\n      }\n    }\n\n    const gasTankTokens = res.data.gasTank.balance.map((t: any) => ({\n      ...t,\n      flags: getFlags(res.data, 'gasTank', t.networkId, t.address)\n    }))\n\n    accountState.gasTank = {\n      isReady: true,\n      isLoading: false,\n      errors: [],\n      result: {\n        updateStarted: start,\n        lastSuccessfulUpdate: Date.now(),\n        tokens: [\n          ...gasTankTokens,\n          ...getPinnedGasTankTokens(\n            res.data.gasTank.availableGasTankAssets,\n            hasNonZeroTokens,\n            accountId,\n            gasTankTokens\n          )\n        ],\n        total: getTotal(gasTankTokens)\n      }\n    }\n\n    this.emitUpdate()\n  }\n\n  #getCanSkipUpdate(networkState?: NetworkState, forceUpdate?: boolean) {\n    const hasImportantErrors = networkState?.errors.some((e) => e.level === 'critical')\n\n    if (forceUpdate || !networkState || networkState.criticalError || hasImportantErrors)\n      return false\n    const updateStarted = networkState.result?.updateStarted || 0\n    const isWithinMinUpdateInterval =\n      !!updateStarted && Date.now() - updateStarted < this.#minUpdateInterval\n\n    return isWithinMinUpdateInterval || networkState.isLoading\n  }\n\n  // By our convention, we always stick with private (#) instead of protected methods.\n  // However, we made a compromise here to allow Jest tests to mock updatePortfolioState.\n  protected async updatePortfolioState(\n    accountId: string,\n    network: Network,\n    portfolioLib: Portfolio,\n    portfolioProps: Partial<GetOptions> & { blockTag: 'latest' | 'pending' },\n    forceUpdate: boolean\n  ): Promise<boolean> {\n    const blockTag = portfolioProps.blockTag\n    const stateKeys = {\n      latest: this.#latest,\n      pending: this.#pending\n    }\n    const accountState = stateKeys[blockTag][accountId]\n    if (!accountState[network.id]) {\n      // isLoading must be false here, otherwise canSkipUpdate will return true\n      // and portfolio will not be updated\n      accountState[network.id] = { isLoading: false, isReady: false, errors: [] }\n    }\n    const canSkipUpdate = this.#getCanSkipUpdate(accountState[network.id], forceUpdate)\n\n    if (canSkipUpdate) return false\n\n    this.#setNetworkLoading(accountId, blockTag, network.id, true)\n    this.emitUpdate()\n\n    const state = accountState[network.id]!\n    const hasNonZeroTokens = !!Object.values(\n      this.#networksWithAssetsByAccounts?.[accountId] || {}\n    ).some(Boolean)\n\n    try {\n      const result = await portfolioLib.get(accountId, {\n        priceRecency: 60000,\n        priceCache: state.result?.priceCache,\n        fetchPinned: !hasNonZeroTokens,\n        ...portfolioProps\n      })\n\n      const hasCriticalError = result.errors.some((e) => e.level === 'critical')\n      const additionalHintsErc20Hints = portfolioProps.additionalErc20Hints || []\n      let lastSuccessfulUpdate = accountState[network.id]?.result?.lastSuccessfulUpdate || 0\n\n      // Reset lastSuccessfulUpdate on forceUpdate in case of critical errors as the user\n      // is likely expecting a change in the portfolio.\n      if (forceUpdate && hasCriticalError) {\n        lastSuccessfulUpdate = 0\n      } else if (!hasCriticalError) {\n        // Update the last successful update only if there are no critical errors.\n        lastSuccessfulUpdate = Date.now()\n      }\n\n      const processedTokens = processTokens(\n        result.tokens,\n        network,\n        hasNonZeroTokens,\n        additionalHintsErc20Hints,\n        this.tokenPreferences\n      )\n\n      accountState[network.id] = {\n        isReady: true,\n        isLoading: false,\n        errors: result.errors,\n        result: {\n          ...result,\n          lastSuccessfulUpdate,\n          tokens: processedTokens,\n          total: getTotal(processedTokens)\n        }\n      }\n      this.emitUpdate()\n      return true\n    } catch (e: any) {\n      this.emitError({\n        level: 'silent',\n        message: \"Error while executing the 'get' function in the portfolio library.\",\n        error: e\n      })\n      state.isLoading = false\n      state.criticalError = e\n      if (forceUpdate && state.result) {\n        // Reset lastSuccessfulUpdate on forceUpdate in case of a critical error as the user\n        // is likely expecting a change in the portfolio.\n        state.result.lastSuccessfulUpdate = 0\n      }\n      this.emitUpdate()\n\n      return false\n    }\n  }\n\n  // NOTE: we always pass in all `accounts` and `networks` to ensure that the user of this\n  // controller doesn't have to update this controller every time that those are updated\n\n  // The recommended behavior of the application that this API encourages is:\n  // 1) when the user selects an account, update it's portfolio on all networks (latest state only) by calling updateSelectedAccount\n  // 2) every time the user has a change in their pending (to be signed or to be mined) bundle(s) on a\n  // certain network, call updateSelectedAccount again with those bundles; it will update the portfolio balance\n  // on each network where there are bundles, and it will update both `latest` and `pending` states on said networks\n  // it will also use a high `priceRecency` to make sure we don't lose time in updating prices (since we care about running the simulations)\n\n  // the purpose of this function is to call it when an account is selected or the queue of accountOps changes\n  async updateSelectedAccount(\n    accountId: AccountId,\n    network?: Network,\n    accountOps?: { [key: string]: AccountOp[] },\n    opts?: { forceUpdate: boolean }\n  ) {\n    await this.#initialLoadPromise\n    const selectedAccount = this.#accounts.accounts.find((x) => x.addr === accountId)\n    if (!selectedAccount) throw new Error('selected account does not exist')\n    if (!this.#latest[accountId]) this.#latest[accountId] = {}\n    if (!this.#pending[accountId]) this.#pending[accountId] = {}\n\n    const accountState = this.#latest[accountId]\n    const pendingState = this.#pending[accountId]\n\n    if (shouldGetAdditionalPortfolio(selectedAccount)) {\n      this.#getAdditionalPortfolio(accountId, opts?.forceUpdate)\n    }\n\n    const networks = network ? [network] : this.#networks.networks\n    await Promise.all(\n      networks.map(async (network) => {\n        const key = `${network.id}:${accountId}`\n\n        const portfolioLib = this.initializePortfolioLibIfNeeded(accountId, network.id, network)\n\n        const currentAccountOps = accountOps?.[network.id]?.filter(\n          (op) => op.accountAddr === accountId\n        )\n        const simulatedAccountOps = pendingState[network.id]?.accountOps\n\n        if (!this.#queue?.[accountId]?.[network.id])\n          this.#queue[accountId] = {\n            ...this.#queue[accountId],\n            [network.id]: Promise.resolve()\n          }\n\n        const updatePromise = async (): Promise<void> => {\n          // We are performing the following extended check because both (or one of both) variables may have an undefined value.\n          // If both variables contain AccountOps, we can simply compare for changes in the AccountOps intent.\n          // However, when one of the variables is not set, two cases arise:\n          // 1. A change occurs if one variable is undefined and the other one holds an AccountOps object.\n          // 2. No change occurs if both variables are undefined.\n          const areAccountOpsChanged =\n            currentAccountOps && simulatedAccountOps\n              ? !isAccountOpsIntentEqual(currentAccountOps, simulatedAccountOps)\n              : currentAccountOps !== simulatedAccountOps\n          const forceUpdate = opts?.forceUpdate || areAccountOpsChanged\n\n          const previousHintsFromExternalAPI = this.#previousHints?.fromExternalAPI?.[key]\n\n          const additionalErc20Hints = [\n            ...Object.keys(\n              (this.#previousHints?.learnedTokens &&\n                this.#previousHints?.learnedTokens[network.id]) ??\n                {}\n            ),\n            ...((this.#toBeLearnedTokens && this.#toBeLearnedTokens[network.id]) ?? []),\n            ...this.customTokens\n              .filter(({ networkId, standard }) => networkId === network.id && standard === 'ERC20')\n              .map(({ address }) => address)\n          ]\n          // TODO: Add custom ERC721 tokens to the hints\n          const additionalErc721Hints = Object.fromEntries(\n            Object.entries(this.#previousHints?.learnedNfts?.[network.id] || {}).map(([k, v]) => [\n              getAddress(k),\n              { isKnown: false, tokens: v.map((i) => i.toString()) }\n            ])\n          )\n          const allHints = {\n            previousHintsFromExternalAPI,\n            additionalErc20Hints,\n            additionalErc721Hints\n          }\n\n          const [isSuccessfulLatestUpdate] = await Promise.all([\n            // Latest state update\n            this.updatePortfolioState(\n              accountId,\n              network,\n              portfolioLib,\n              {\n                blockTag: 'latest',\n                ...allHints\n              },\n              forceUpdate\n            ),\n            this.updatePortfolioState(\n              accountId,\n              network,\n              portfolioLib,\n              {\n                blockTag: 'pending',\n                ...(currentAccountOps && {\n                  simulation: {\n                    account: selectedAccount,\n                    accountOps: currentAccountOps\n                  }\n                }),\n                isEOA: !isSmartAccount(selectedAccount),\n                ...allHints\n              },\n              forceUpdate\n            )\n          ])\n\n          // Persist latest state in previousHints in the disk storage for further requests\n          if (\n            isSuccessfulLatestUpdate &&\n            !areAccountOpsChanged &&\n            accountState[network.id]?.result\n          ) {\n            const networkResult = accountState[network.id]!.result\n            const readyToLearnTokens = getTokensReadyToLearn(\n              this.#toBeLearnedTokens[network.id],\n              networkResult!.tokens\n            )\n\n            if (readyToLearnTokens.length) {\n              await this.learnTokens(readyToLearnTokens, network.id)\n            }\n\n            // Either a valid response or there is no external API to fetch hints from\n            const isExternalHintsApiResponseValid =\n              !!networkResult?.hintsFromExternalAPI || !network.hasRelayer\n\n            if (isExternalHintsApiResponseValid) {\n              const updatedStoragePreviousHints = getUpdatedHints(\n                networkResult!.hintsFromExternalAPI || null,\n                networkResult!.tokens,\n                networkResult!.tokenErrors,\n                network.id,\n                this.#previousHints,\n                key,\n                this.customTokens\n              )\n\n              // Updating hints is only needed when the external API response is valid.\n              // learnTokens and learnNfts update storage separately, so we don't need to update them here\n              // if the external API response is invalid.\n              this.#previousHints = updatedStoragePreviousHints\n              await this.#storage.set('previousHints', updatedStoragePreviousHints)\n            }\n          }\n\n          // We cache the previously simulated AccountOps\n          // in order to compare them with the newly passed AccountOps before executing a new updatePortfolioState.\n          // This allows us to identify any differences between the two.\n          if (currentAccountOps) {\n            pendingState[network.id]!.accountOps = currentAccountOps\n          }\n        }\n\n        // Chain the new updatePromise to the current queue\n        this.#queue[accountId][network.id] = this.#queue[accountId][network.id]\n          .then(updatePromise)\n          .catch(() => updatePromise())\n\n        // Ensure the method waits for the entire queue to resolve\n        await this.#queue[accountId][network.id]\n      })\n    )\n\n    await this.#updateNetworksWithAssets(accountId, accountState)\n    this.emitUpdate()\n  }\n\n  markSimulationAsBroadcasted(accountId: string, networkId: string) {\n    const simulation = this.#pending[accountId][networkId]?.accountOps?.[0]\n\n    if (!simulation) return\n\n    simulation.status = AccountOpStatus.BroadcastedButNotConfirmed\n\n    this.emitUpdate()\n  }\n\n  addTokensToBeLearned(tokenAddresses: string[], networkId: NetworkId) {\n    if (!tokenAddresses.length) return false\n    if (!this.#toBeLearnedTokens[networkId]) this.#toBeLearnedTokens[networkId] = []\n\n    let networkToBeLearnedTokens = this.#toBeLearnedTokens[networkId]\n\n    const alreadyLearned = networkToBeLearnedTokens.map((addr) => getAddress(addr))\n\n    const tokensToLearn = tokenAddresses.filter((address) => {\n      let normalizedAddress\n      try {\n        normalizedAddress = getAddress(address)\n      } catch (e) {\n        console.error('Error while normalizing token address', e)\n      }\n\n      return normalizedAddress && !alreadyLearned.includes(normalizedAddress)\n    })\n\n    if (!tokensToLearn.length) return false\n\n    networkToBeLearnedTokens = [...tokensToLearn, ...networkToBeLearnedTokens]\n\n    this.#toBeLearnedTokens[networkId] = networkToBeLearnedTokens\n    return true\n  }\n\n  // Learn new tokens from humanizer and debug_traceCall\n  // return: whether new tokens have been learned\n  async learnTokens(tokenAddresses: string[] | undefined, networkId: NetworkId): Promise<boolean> {\n    if (!tokenAddresses) return false\n\n    if (!this.#previousHints.learnedTokens) this.#previousHints.learnedTokens = {}\n\n    let networkLearnedTokens: PreviousHintsStorage['learnedTokens'][''] =\n      this.#previousHints.learnedTokens[networkId] || {}\n\n    const alreadyLearned = Object.keys(networkLearnedTokens).map((addr) => getAddress(addr))\n\n    const tokensToLearn = tokenAddresses.reduce((acc: { [key: string]: null }, address) => {\n      if (address === ZeroAddress) return acc\n      if (alreadyLearned.includes(getAddress(address))) return acc\n\n      acc[address] = acc[address] || null // Keep the timestamp of all learned tokens\n      return acc\n    }, {})\n\n    if (!Object.keys(tokensToLearn).length) return false\n    // Add new tokens in the beginning of the list\n    networkLearnedTokens = { ...tokensToLearn, ...networkLearnedTokens }\n\n    // Reached limit\n    if (LEARNED_TOKENS_NETWORK_LIMIT - Object.keys(networkLearnedTokens).length < 0) {\n      // Convert learned tokens into an array of [address, timestamp] pairs and sort by timestamp in descending order.\n      // This ensures that tokens with the most recent timestamps are prioritized for retention,\n      // and tokens with the oldest timestamps are deleted last when the limit is exceeded.\n      const learnedTokensArray = Object.entries(networkLearnedTokens).sort(\n        (a, b) => Number(b[1]) - Number(a[1])\n      )\n\n      networkLearnedTokens = Object.fromEntries(\n        learnedTokensArray.slice(0, LEARNED_TOKENS_NETWORK_LIMIT)\n      )\n    }\n\n    this.#previousHints.learnedTokens[networkId] = networkLearnedTokens\n    await this.#storage.set('previousHints', this.#previousHints)\n    return true\n  }\n\n  async learnNfts(\n    nftsData: [string, bigint[]][] | undefined,\n    networkId: NetworkId\n  ): Promise<boolean> {\n    if (!nftsData?.length) return false\n    if (!this.#previousHints.learnedNfts) this.#previousHints.learnedNfts = {}\n    const networkLearnedNfts: PreviousHintsStorage['learnedNfts'][''] =\n      this.#previousHints.learnedNfts[networkId] || {}\n\n    const newAddrToId = nftsData.map(([addr, ids]) => ids.map((id) => `${addr}:${id}`)).flat()\n    const alreadyLearnedAddrToId = Object.entries(networkLearnedNfts)\n      .map(([addr, ids]) => ids.map((id) => `${addr}:${id}`))\n      .flat()\n    if (newAddrToId.every((i) => alreadyLearnedAddrToId.includes(i))) return false\n    nftsData.forEach(([addr, ids]) => {\n      if (addr === ZeroAddress) return\n      if (!networkLearnedNfts[addr]) networkLearnedNfts[addr] = ids\n      else networkLearnedNfts[addr] = Array.from(new Set([...ids, ...networkLearnedNfts[addr]]))\n    })\n\n    this.#previousHints.learnedNfts[networkId] = networkLearnedNfts\n    await this.#storage.set('previousHints', this.#previousHints)\n    return true\n  }\n\n  removeAccountData(address: Account['addr']) {\n    delete this.#latest[address]\n    delete this.#pending[address]\n    delete this.#networksWithAssetsByAccounts[address]\n\n    this.#networks.networks.forEach((network) => {\n      const key = `${network.id}:${address}`\n\n      if (key in this.#previousHints.fromExternalAPI) {\n        delete this.#previousHints.fromExternalAPI[key]\n      }\n      if (key in this.#portfolioLibs) {\n        this.#portfolioLibs.delete(key)\n      }\n    })\n    this.#storage.set('previousHints', this.#previousHints)\n    this.#storage.set('networksWithAssetsByAccount', this.#networksWithAssetsByAccounts)\n\n    this.emitUpdate()\n  }\n\n  getLatestPortfolioState(accountAddr: string) {\n    return this.#latest[accountAddr] || {}\n  }\n\n  getPendingPortfolioState(accountAddr: string) {\n    return this.#pending[accountAddr] || {}\n  }\n\n  getNetworksWithAssets(accountAddr: string) {\n    return this.#networksWithAssetsByAccounts[accountAddr] || []\n  }\n\n  toJSON() {\n    return {\n      ...this,\n      ...super.toJSON()\n    }\n  }\n}\n"]}