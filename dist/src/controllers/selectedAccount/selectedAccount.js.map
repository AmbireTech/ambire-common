{"version":3,"file":"selectedAccount.js","sourceRoot":"","sources":["../../../../src/controllers/selectedAccount/selectedAccount.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,QAAQ,CAAA;AAEnC,OAAO,EAAE,sBAAsB,EAAE,MAAM,qBAAqB,CAAA;AAM5D,OAAO,EAAE,cAAc,EAAE,MAAM,4BAA4B,CAAA;AAC3D,OAAO,EAAE,WAAW,EAAE,MAAM,kCAAkC,CAAA;AAE9D,2CAA2C;AAC3C,OAAO,EACL,uCAAuC,EACvC,8BAA8B,EAC9B,mCAAmC,EAEpC,MAAM,mCAAmC,CAAA;AAC1C,OAAO,EACL,iCAAiC,EACjC,qCAAqC,EACtC,MAAM,4CAA4C,CAAA;AAOnD,OAAO,YAAY,MAAM,8BAA8B,CAAA;AAMvD,MAAM,CAAC,MAAM,kCAAkC,GAAG;IAChD,MAAM,EAAE,EAAE;IACV,WAAW,EAAE,EAAE;IACf,YAAY,EAAE,EAAE;IAChB,YAAY,EAAE,CAAC;IACf,UAAU,EAAE,KAAK;IACjB,yBAAyB,EAAE,EAAE;IAC7B,MAAM,EAAE,EAAE;IACV,OAAO,EAAE,EAAE;CACZ,CAAA;AAED,MAAM,OAAO,yBAA0B,SAAQ,YAAY;IACzD,QAAQ,CAAS;IAEjB,SAAS,CAAoB;IAE7B,UAAU,GAA+B,IAAI,CAAA;IAE7C,cAAc,GAAmC,IAAI,CAAA;IAErD,QAAQ,GAA6B,IAAI,CAAA;IAEzC,SAAS,GAA8B,IAAI,CAAA;IAE3C,UAAU,GAA+B,IAAI,CAAA;IAE7C,OAAO,GAAmB,IAAI,CAAA;IAE9B,SAAS,GAA6B,kCAAkC,CAAA;IAExE,kCAAkC,GAAkB,IAAI,CAAA;IAExD,sBAAsB,GAAqB,IAAI,CAAA;IAE/C,oBAAoB,GAA+B,EAAE,CAAA;IAErD,aAAa,GAA0B,EAAE,CAAA;IAEzC,gBAAgB,GAAkC,EAAE,CAAA;IAEpD,oBAAoB,GAAkC,EAAE,CAAA;IAExD,OAAO,GAAY,KAAK,CAAA;IAExB,yBAAyB,GAAY,KAAK,CAAA;IAE1C,0EAA0E;IAC1E,kBAAkB,CAAe;IAEjC,YAAY,EAAE,OAAO,EAAE,QAAQ,EAAsD;QACnF,KAAK,EAAE,CAAA;QAEP,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAA;QACvB,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAA;QAEzB,mEAAmE;QACnE,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,KAAK,EAAE,CAAA;IACxC,CAAC;IAED,KAAK,CAAC,KAAK;QACT,MAAM,IAAI,CAAC,SAAS,CAAC,kBAAkB,CAAA;QACvC,MAAM,sBAAsB,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAA;QAE/E,MAAM,eAAe,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,sBAAsB,CAAC,CAAA;QAE9F,IAAI,CAAC,OAAO,GAAG,eAAe,IAAI,IAAI,CAAA;QACtC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAA;QAEnB,IAAI,CAAC,UAAU,EAAE,CAAA;IACnB,CAAC;IAED,eAAe,CAAC,EACd,SAAS,EACT,aAAa,EACb,OAAO,EACP,QAAQ,EACR,SAAS,EAOV;QACC,IAAI,CAAC,UAAU,GAAG,SAAS,CAAA;QAC3B,IAAI,CAAC,cAAc,GAAG,aAAa,CAAA;QACnC,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAA;QACvB,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAA;QACzB,IAAI,CAAC,UAAU,GAAG,SAAS,CAAA;QAE3B,IAAI,CAAC,+BAA+B,CAAC,IAAI,CAAC,CAAA;QAC1C,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAA;QACjC,IAAI,CAAC,mCAAmC,CAAC,IAAI,CAAC,CAAA;QAC9C,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC,CAAA;QAErC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,IAAI,EAAE;YAClC,IAAI,CAAC,gCAAgC,CAAC,gCAAgC,EAAE,GAAG,EAAE;gBAC3E,IAAI,CAAC,+BAA+B,EAAE,CAAA;YACxC,CAAC,CAAC,CAAA;QACJ,CAAC,EAAE,iBAAiB,CAAC,CAAA;QAErB,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,GAAG,EAAE;YAChC,IAAI,CAAC,gCAAgC,CAAC,oCAAoC,EAAE,GAAG,EAAE;gBAC/E,IAAI,CAAC,mCAAmC,EAAE,CAAA;gBAE1C,IAAI,CAAC,IAAI,CAAC,uBAAuB,IAAI,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE;oBAC9D,IAAI,CAAC,+BAA+B,CAAC,IAAI,CAAC,CAAA;oBAC1C,IAAI,CAAC,0BAA0B,EAAE,CAAA;iBAClC;YACH,CAAC,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;QAEF,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,EAAE;YAC5B,IAAI,CAAC,gCAAgC,CAAC,2BAA2B,EAAE,GAAG,EAAE;gBACtE,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAA;gBACjC,IAAI,CAAC,0BAA0B,EAAE,CAAA;YACnC,CAAC,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;QAEF,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,EAAE;YAC3B,IAAI,CAAC,gCAAgC,CAAC,qCAAqC,EAAE,GAAG,EAAE;gBAChF,IAAI,CAAC,IAAI,CAAC,sBAAsB;oBAAE,OAAM;gBACxC,MAAM,wBAAwB,GAAG,IAAI,CAAC,SAAU,CAAC,QAAQ,CAAC,IAAI,CAC5D,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,IAAI,CAAC,sBAAsB,CAC5C,CAAA;gBAED,6DAA6D;gBAC7D,IAAI,CAAC,wBAAwB;oBAAE,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,CAAA;YACrE,CAAC,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;QAEF,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,EAAE;YAC3B,IAAI,CAAC,gCAAgC,CAAC,uBAAuB,EAAE,GAAG,EAAE;gBAClE,IAAI,CAAC,sBAAsB,EAAE,CAAA;gBAC7B,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAA;gBACjC,IAAI,CAAC,0BAA0B,EAAE,CAAA;YACnC,CAAC,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;QAEF,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAA;QAErC,IAAI,CAAC,UAAU,EAAE,CAAA;IACnB,CAAC;IAED,KAAK,CAAC,UAAU,CAAC,OAAuB;QACtC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAA;QACtB,IAAI,CAAC,gBAAgB,GAAG,EAAE,CAAA;QAC1B,IAAI,CAAC,oBAAoB,GAAG,EAAE,CAAA;QAC9B,IAAI,CAAC,6BAA6B,CAAC,IAAI,CAAC,CAAA;QACxC,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAA;QAElC,IAAI,CAAC,OAAO,EAAE;YACZ,MAAM,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAA;SAC9C;aAAM;YACL,MAAM,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,iBAAiB,EAAE,OAAO,CAAC,IAAI,CAAC,CAAA;SACzD;QAED,IAAI,CAAC,UAAU,EAAE,CAAA;IACnB,CAAC;IAED,sBAAsB;QACpB,IAAI,CAAC,IAAI,CAAC,OAAO;YAAE,OAAM;QAEzB,MAAM,cAAc,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,OAAQ,CAAC,IAAI,CAAC,CAAA;QACzF,IAAI,CAAC,cAAc;YAAE,OAAM;QAE3B,IAAI,CAAC,OAAO,GAAG,cAAc,CAAA;QAE7B,IAAI,CAAC,UAAU,EAAE,CAAA;IACnB,CAAC;IAED,6BAA6B,CAAC,UAAoB;QAChD,IAAI,CAAC,SAAS,GAAG,kCAAkC,CAAA;QACnD,IAAI,CAAC,gBAAgB,GAAG,EAAE,CAAA;QAE1B,IAAI,CAAC,UAAU,EAAE;YACf,IAAI,CAAC,UAAU,EAAE,CAAA;SAClB;IACH,CAAC;IAED,+BAA+B,CAAC,UAAoB;QAClD,IAAI,CAAC,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,cAAc,IAAI,CAAC,IAAI,CAAC,OAAO;YAAE,OAAM;QACrE,MAAM,yBAAyB,GAAG,IAAI,CAAC,cAAc,CAAC,qBAAqB,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;QAE9F,MAAM,0BAA0B,GAAG,eAAe,CAChD,IAAI,CAAC,UAAU,CAAC,uBAAuB,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAC3D,CAAA;QACD,MAAM,2BAA2B,GAAG,eAAe,CACjD,IAAI,CAAC,UAAU,CAAC,wBAAwB,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAC5D,CAAA;QAED,MAAM,2CAA2C,GAAG,qCAAqC,CACvF,0BAA0B,EAC1B,yBAAyB,EACzB,IAAI,CAAC,uBAAuB,CAC7B,CAAA;QAED,MAAM,4CAA4C,GAAG,qCAAqC,CACxF,2BAA2B,EAC3B,yBAAyB,EACzB,IAAI,CAAC,uBAAuB,CAC7B,CAAA;QAED,MAAM,gBAAgB,GAAG,CAAC,CAAC,IAAI,CAAC,QAAQ,EAAE,mBAAmB,CAAC,MAAM,CAClE,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,KAAK,WAAW,CACxC,CAAA;QAED,MAAM,2BAA2B,GAAG,iCAAiC,CACnE,2CAA2C,EAC3C,4CAA4C,EAC5C,IAAI,CAAC,SAAS,EACd,gBAAgB,CACjB,CAAA;QAED,IAAI,IAAI,CAAC,kCAAkC,IAAI,2BAA2B,CAAC,UAAU,EAAE;YACrF,IAAI,CAAC,kCAAkC,GAAG,IAAI,CAAA;SAC/C;QAED,IAAI,CAAC,IAAI,CAAC,kCAAkC,IAAI,CAAC,2BAA2B,CAAC,UAAU,EAAE;YACvF,IAAI,CAAC,kCAAkC,GAAG,IAAI,CAAC,GAAG,EAAE,CAAA;SACrD;QAED,IACE,2BAA2B,CAAC,UAAU;YACtC,CAAC,CAAC,IAAI,CAAC,SAAS,EAAE,MAAM,EAAE,MAAM,IAAI,2BAA2B,CAAC,MAAM,CAAC,MAAM,CAAC,EAC9E;YACA,IAAI,CAAC,SAAS,GAAG,2BAA2B,CAAA;YAC5C,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAA;SAClC;QAED,IAAI,CAAC,UAAU,EAAE;YACf,IAAI,CAAC,UAAU,EAAE,CAAA;SAClB;IACH,CAAC;IAED,IAAI,uBAAuB;QACzB,IAAI,CAAC,IAAI,CAAC,OAAO,IAAI,CAAC,IAAI,CAAC,cAAc;YAAE,OAAO,KAAK,CAAA;QAEvD,MAAM,yBAAyB,GAAG,IAAI,CAAC,cAAc,CAAC,qBAAqB,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;QAC9F,OAAO,MAAM,CAAC,MAAM,CAAC,yBAAyB,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAA;IAC1E,CAAC;IAED,mCAAmC,CAAC,UAAoB;QACtD,IAAI,CAAC,IAAI,CAAC,cAAc,IAAI,CAAC,IAAI,CAAC,OAAO;YAAE,OAAM;QAEjD,MAAM,yBAAyB,GAAG,IAAI,CAAC,cAAc,CAAC,qBAAqB,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;QAE9F,MAAM,mBAAmB,GAAG,MAAM,CAAC,MAAM,CAAC,yBAAyB,CAAC,CAAC,OAAO,CAC1E,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,mBAAmB,CAC7B,CAAA;QAED,MAAM,mCAAmC,GAAG,mBAAmB,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE;YAC/E,MAAM,SAAS,GAAG,QAAQ,CAAC,SAAS;iBACjC,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE;gBAChB,MAAM,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,WAAW,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAA;gBAE5E,OAAO,EAAE,GAAG,QAAQ,EAAE,MAAM,EAAE,CAAA;YAChC,CAAC,CAAC;iBACD,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,WAAW,CAAC,CAAC,CAAC,cAAc,CAAC,aAAa,EAAE,CAAC,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC,CAAA;YAE9F,OAAO,EAAE,GAAG,QAAQ,EAAE,SAAS,EAAE,CAAA;QACnC,CAAC,CAAC,CAAA;QAEF,MAAM,yBAAyB,GAAG,mCAAmC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAClF,WAAW,CAAC,CAAC,CAAC,aAAa,EAAE,CAAC,CAAC,aAAa,CAAC,CAC9C,CAAA;QAED,IAAI,CAAC,aAAa,GAAG,yBAAyB,CAAA;QAE9C,IAAI,CAAC,UAAU,EAAE;YACf,IAAI,CAAC,UAAU,EAAE,CAAA;SAClB;IACH,CAAC;IAED,gCAAgC,CAAC,QAAgB,EAAE,IAAgB;QACjE,IAAI,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC;YAAE,OAAM;QAC/C,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAA;QAE1C,wEAAwE;QACxE,UAAU,CAAC,GAAG,EAAE;YACd,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAA;YAC3C,IAAI;gBACF,IAAI,EAAE,CAAA;aACP;YAAC,OAAO,KAAU,EAAE;gBACnB,IAAI,CAAC,SAAS,CAAC;oBACb,KAAK,EAAE,OAAO;oBACd,OAAO,EAAE,oBAAoB,QAAQ,sCAAsC;oBAC3E,KAAK;iBACN,CAAC,CAAA;aACH;QACH,CAAC,EAAE,CAAC,CAAC,CAAA;IACP,CAAC;IAED,0BAA0B,CAAC,UAAoB;QAC7C,IACE,CAAC,IAAI,CAAC,OAAO;YACb,CAAC,IAAI,CAAC,SAAS;YACf,CAAC,IAAI,CAAC,UAAU;YAChB,CAAC,IAAI,CAAC,cAAc;YACpB,IAAI,CAAC,uBAAuB,EAC5B;YACA,IAAI,CAAC,oBAAoB,GAAG,EAAE,CAAA;YAC9B,IAAI,CAAC,UAAU,EAAE;gBACf,IAAI,CAAC,UAAU,EAAE,CAAA;aAClB;YACD,OAAM;SACP;QAED,MAAM,yBAAyB,GAAG,IAAI,CAAC,cAAc,CAAC,qBAAqB,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;QAE9F,MAAM,YAAY,GAAG,uCAAuC,CAAC;YAC3D,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ;YACjC,mBAAmB,EAAE,yBAAyB;YAC9C,SAAS,EAAE,IAAI,CAAC,UAAU,CAAC,SAAS;YACpC,qBAAqB,EAAE,IAAI,CAAC,cAAc,CAAC,wBAAwB,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;SACvF,CAAC,CAAA;QAEF,IAAI,CAAC,oBAAoB,GAAG,YAAY,CAAA;QAExC,IAAI,CAAC,UAAU,EAAE;YACf,IAAI,CAAC,UAAU,EAAE,CAAA;SAClB;IACH,CAAC;IAED,sBAAsB,CAAC,UAAoB;QACzC,IACE,CAAC,IAAI,CAAC,OAAO;YACb,CAAC,IAAI,CAAC,SAAS;YACf,CAAC,IAAI,CAAC,UAAU;YAChB,CAAC,IAAI,CAAC,UAAU;YAChB,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,EAC1B;YACA,IAAI,CAAC,gBAAgB,GAAG,EAAE,CAAA;YAC1B,IAAI,CAAC,UAAU,EAAE;gBACf,IAAI,CAAC,UAAU,EAAE,CAAA;aAClB;YACD,OAAM;SACP;QAED,MAAM,4BAA4B,GAAG,8BAA8B,CAAC;YAClE,SAAS,EAAE,IAAI,CAAC,UAAU,CAAC,SAAS;YACpC,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ;YACjC,kBAAkB,EAAE,IAAI,CAAC,UAAU,CAAC,qBAAqB,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;SAC7E,CAAC,CAAA;QAEF,MAAM,YAAY,GAAG,mCAAmC,CAAC;YACvD,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ;YACjC,qBAAqB,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM;YAC5C,SAAS,EAAE,IAAI,CAAC,UAAU,CAAC,SAAS;SACrC,CAAC,CAAA;QAEF,IAAI,CAAC,gBAAgB,GAAG,CAAC,GAAG,4BAA4B,EAAE,GAAG,YAAY,CAAC,CAAA;QAE1E,IAAI,CAAC,UAAU,EAAE;YACf,IAAI,CAAC,UAAU,EAAE,CAAA;SAClB;IACH,CAAC;IAED,IAAI,sBAAsB;QACxB,OAAO,CAAC,GAAG,IAAI,CAAC,gBAAgB,EAAE,GAAG,IAAI,CAAC,oBAAoB,CAAC,CAAA;IACjE,CAAC;IAED,IAAI,4BAA4B;QAC9B,IAAI,CAAC,IAAI,CAAC,OAAO,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC;YAAE,OAAO,EAAE,CAAA;QAE7D,IACE,CAAC,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;YAChD,CAAC,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,QAAQ;YACzD,CAAC,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,IAAI;YAE9D,OAAO,EAAE,CAAA;QAEX,IACE,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ;YACtB,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,WAAW,CAAC,KAAK,sBAAsB;YAExE,OAAO,EAAE,CAAA;QAEX,OAAO;YACL;gBACE,EAAE,EAAE,aAAa;gBACjB,WAAW,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI;gBAC9B,IAAI,EAAE,SAAS;gBACf,QAAQ,EAAE,aAAa;gBACvB,KAAK,EAAE,oBAAoB;gBAC3B,IAAI,EAAE,uSAAuS;gBAC7S,OAAO,EAAE,EAAE;aACZ;SACF,CAAA;IACH,CAAC;IAED,yBAAyB,CAAC,aAA+B;QACvD,IAAI,CAAC,sBAAsB,GAAG,aAAa,CAAA;QAC3C,IAAI,CAAC,UAAU,EAAE,CAAA;IACnB,CAAC;IAED,MAAM;QACJ,OAAO;YACL,GAAG,IAAI;YACP,GAAG,KAAK,CAAC,MAAM,EAAE;YACjB,4BAA4B,EAAE,IAAI,CAAC,4BAA4B;YAC/D,uBAAuB,EAAE,IAAI,CAAC,uBAAuB;YACrD,sBAAsB,EAAE,IAAI,CAAC,sBAAsB;SACpD,CAAA;IACH,CAAC;CACF","sourcesContent":["import { getAddress } from 'ethers'\n\nimport { AMBIRE_ACCOUNT_FACTORY } from '../../consts/deploy'\nimport { Account } from '../../interfaces/account'\nimport { Banner } from '../../interfaces/banner'\nimport { NetworkId } from '../../interfaces/network'\nimport { SelectedAccountPortfolio } from '../../interfaces/selectedAccount'\nimport { Storage } from '../../interfaces/storage'\nimport { isSmartAccount } from '../../libs/account/account'\nimport { sortByValue } from '../../libs/defiPositions/helpers'\nimport { PositionsByProvider } from '../../libs/defiPositions/types'\n// eslint-disable-next-line import/no-cycle\nimport {\n  getNetworksWithDeFiPositionsErrorErrors,\n  getNetworksWithFailedRPCErrors,\n  getNetworksWithPortfolioErrorErrors,\n  SelectedAccountBalanceError\n} from '../../libs/selectedAccount/errors'\nimport {\n  calculateSelectedAccountPortfolio,\n  updatePortfolioStateWithDefiPositions\n} from '../../libs/selectedAccount/selectedAccount'\n// eslint-disable-next-line import/no-cycle\nimport { AccountsController } from '../accounts/accounts'\n// eslint-disable-next-line import/no-cycle\nimport { ActionsController } from '../actions/actions'\n// eslint-disable-next-line import/no-cycle\nimport { DefiPositionsController } from '../defiPositions/defiPositions'\nimport EventEmitter from '../eventEmitter/eventEmitter'\nimport { NetworksController } from '../networks/networks'\n// eslint-disable-next-line import/no-cycle\nimport { PortfolioController } from '../portfolio/portfolio'\nimport { ProvidersController } from '../providers/providers'\n\nexport const DEFAULT_SELECTED_ACCOUNT_PORTFOLIO = {\n  tokens: [],\n  collections: [],\n  tokenAmounts: [],\n  totalBalance: 0,\n  isAllReady: false,\n  networkSimulatedAccountOp: {},\n  latest: {},\n  pending: {}\n}\n\nexport class SelectedAccountController extends EventEmitter {\n  #storage: Storage\n\n  #accounts: AccountsController\n\n  #portfolio: PortfolioController | null = null\n\n  #defiPositions: DefiPositionsController | null = null\n\n  #actions: ActionsController | null = null\n\n  #networks: NetworksController | null = null\n\n  #providers: ProvidersController | null = null\n\n  account: Account | null = null\n\n  portfolio: SelectedAccountPortfolio = DEFAULT_SELECTED_ACCOUNT_PORTFOLIO\n\n  portfolioStartedLoadingAtTimestamp: number | null = null\n\n  dashboardNetworkFilter: NetworkId | null = null\n\n  #shouldDebounceFlags: { [key: string]: boolean } = {}\n\n  defiPositions: PositionsByProvider[] = []\n\n  #portfolioErrors: SelectedAccountBalanceError[] = []\n\n  #defiPositionsErrors: SelectedAccountBalanceError[] = []\n\n  isReady: boolean = false\n\n  areControllersInitialized: boolean = false\n\n  // Holds the initial load promise, so that one can wait until it completes\n  initialLoadPromise: Promise<void>\n\n  constructor({ storage, accounts }: { storage: Storage; accounts: AccountsController }) {\n    super()\n\n    this.#storage = storage\n    this.#accounts = accounts\n\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.initialLoadPromise = this.#load()\n  }\n\n  async #load() {\n    await this.#accounts.initialLoadPromise\n    const selectedAccountAddress = await this.#storage.get('selectedAccount', null)\n\n    const selectedAccount = this.#accounts.accounts.find((a) => a.addr === selectedAccountAddress)\n\n    this.account = selectedAccount || null\n    this.isReady = true\n\n    this.emitUpdate()\n  }\n\n  initControllers({\n    portfolio,\n    defiPositions,\n    actions,\n    networks,\n    providers\n  }: {\n    portfolio: PortfolioController\n    defiPositions: DefiPositionsController\n    actions: ActionsController\n    networks: NetworksController\n    providers: ProvidersController\n  }) {\n    this.#portfolio = portfolio\n    this.#defiPositions = defiPositions\n    this.#actions = actions\n    this.#networks = networks\n    this.#providers = providers\n\n    this.#updateSelectedAccountPortfolio(true)\n    this.#updatePortfolioErrors(true)\n    this.#updateSelectedAccountDefiPositions(true)\n    this.#updateDefiPositionsErrors(true)\n\n    this.#portfolio.onUpdate(async () => {\n      this.#debounceFunctionCallsOnSameTick('updateSelectedAccountPortfolio', () => {\n        this.#updateSelectedAccountPortfolio()\n      })\n    }, 'selectedAccount')\n\n    this.#defiPositions.onUpdate(() => {\n      this.#debounceFunctionCallsOnSameTick('updateSelectedAccountDefiPositions', () => {\n        this.#updateSelectedAccountDefiPositions()\n\n        if (!this.areDefiPositionsLoading && this.portfolio.isAllReady) {\n          this.#updateSelectedAccountPortfolio(true)\n          this.#updateDefiPositionsErrors()\n        }\n      })\n    })\n\n    this.#providers.onUpdate(() => {\n      this.#debounceFunctionCallsOnSameTick('updateDefiPositionsErrors', () => {\n        this.#updatePortfolioErrors(true)\n        this.#updateDefiPositionsErrors()\n      })\n    })\n\n    this.#networks.onUpdate(() => {\n      this.#debounceFunctionCallsOnSameTick('resetDashboardNetworkFilterIfNeeded', () => {\n        if (!this.dashboardNetworkFilter) return\n        const dashboardFilteredNetwork = this.#networks!.networks.find(\n          (n) => n.id === this.dashboardNetworkFilter\n        )\n\n        // reset the dashboardNetworkFilter if the network is removed\n        if (!dashboardFilteredNetwork) this.setDashboardNetworkFilter(null)\n      })\n    })\n\n    this.#accounts.onUpdate(() => {\n      this.#debounceFunctionCallsOnSameTick('updateSelectedAccount', () => {\n        this.#updateSelectedAccount()\n        this.#updatePortfolioErrors(true)\n        this.#updateDefiPositionsErrors()\n      })\n    })\n\n    this.areControllersInitialized = true\n\n    this.emitUpdate()\n  }\n\n  async setAccount(account: Account | null) {\n    this.account = account\n    this.#portfolioErrors = []\n    this.#defiPositionsErrors = []\n    this.resetSelectedAccountPortfolio(true)\n    this.dashboardNetworkFilter = null\n\n    if (!account) {\n      await this.#storage.remove('selectedAccount')\n    } else {\n      await this.#storage.set('selectedAccount', account.addr)\n    }\n\n    this.emitUpdate()\n  }\n\n  #updateSelectedAccount() {\n    if (!this.account) return\n\n    const updatedAccount = this.#accounts.accounts.find((a) => a.addr === this.account!.addr)\n    if (!updatedAccount) return\n\n    this.account = updatedAccount\n\n    this.emitUpdate()\n  }\n\n  resetSelectedAccountPortfolio(skipUpdate?: boolean) {\n    this.portfolio = DEFAULT_SELECTED_ACCOUNT_PORTFOLIO\n    this.#portfolioErrors = []\n\n    if (!skipUpdate) {\n      this.emitUpdate()\n    }\n  }\n\n  #updateSelectedAccountPortfolio(skipUpdate?: boolean) {\n    if (!this.#portfolio || !this.#defiPositions || !this.account) return\n    const defiPositionsAccountState = this.#defiPositions.getDefiPositionsState(this.account.addr)\n\n    const latestStateSelectedAccount = structuredClone(\n      this.#portfolio.getLatestPortfolioState(this.account.addr)\n    )\n    const pendingStateSelectedAccount = structuredClone(\n      this.#portfolio.getPendingPortfolioState(this.account.addr)\n    )\n\n    const latestStateSelectedAccountWithDefiPositions = updatePortfolioStateWithDefiPositions(\n      latestStateSelectedAccount,\n      defiPositionsAccountState,\n      this.areDefiPositionsLoading\n    )\n\n    const pendingStateSelectedAccountWithDefiPositions = updatePortfolioStateWithDefiPositions(\n      pendingStateSelectedAccount,\n      defiPositionsAccountState,\n      this.areDefiPositionsLoading\n    )\n\n    const hasSignAccountOp = !!this.#actions?.visibleActionsQueue.filter(\n      (action) => action.type === 'accountOp'\n    )\n\n    const newSelectedAccountPortfolio = calculateSelectedAccountPortfolio(\n      latestStateSelectedAccountWithDefiPositions,\n      pendingStateSelectedAccountWithDefiPositions,\n      this.portfolio,\n      hasSignAccountOp\n    )\n\n    if (this.portfolioStartedLoadingAtTimestamp && newSelectedAccountPortfolio.isAllReady) {\n      this.portfolioStartedLoadingAtTimestamp = null\n    }\n\n    if (!this.portfolioStartedLoadingAtTimestamp && !newSelectedAccountPortfolio.isAllReady) {\n      this.portfolioStartedLoadingAtTimestamp = Date.now()\n    }\n\n    if (\n      newSelectedAccountPortfolio.isAllReady ||\n      (!this.portfolio?.tokens?.length && newSelectedAccountPortfolio.tokens.length)\n    ) {\n      this.portfolio = newSelectedAccountPortfolio\n      this.#updatePortfolioErrors(true)\n    }\n\n    if (!skipUpdate) {\n      this.emitUpdate()\n    }\n  }\n\n  get areDefiPositionsLoading() {\n    if (!this.account || !this.#defiPositions) return false\n\n    const defiPositionsAccountState = this.#defiPositions.getDefiPositionsState(this.account.addr)\n    return Object.values(defiPositionsAccountState).some((n) => n.isLoading)\n  }\n\n  #updateSelectedAccountDefiPositions(skipUpdate?: boolean) {\n    if (!this.#defiPositions || !this.account) return\n\n    const defiPositionsAccountState = this.#defiPositions.getDefiPositionsState(this.account.addr)\n\n    const positionsByProvider = Object.values(defiPositionsAccountState).flatMap(\n      (n) => n.positionsByProvider\n    )\n\n    const positionsByProviderWithSortedAssets = positionsByProvider.map((provider) => {\n      const positions = provider.positions\n        .map((position) => {\n          const assets = position.assets.sort((a, b) => sortByValue(a.value, b.value))\n\n          return { ...position, assets }\n        })\n        .sort((a, b) => sortByValue(a.additionalData.positionInUSD, b.additionalData.positionInUSD))\n\n      return { ...provider, positions }\n    })\n\n    const sortedPositionsByProvider = positionsByProviderWithSortedAssets.sort((a, b) =>\n      sortByValue(a.positionInUSD, b.positionInUSD)\n    )\n\n    this.defiPositions = sortedPositionsByProvider\n\n    if (!skipUpdate) {\n      this.emitUpdate()\n    }\n  }\n\n  #debounceFunctionCallsOnSameTick(funcName: string, func: () => void) {\n    if (this.#shouldDebounceFlags[funcName]) return\n    this.#shouldDebounceFlags[funcName] = true\n\n    // Debounce multiple calls in the same tick and only execute one of them\n    setTimeout(() => {\n      this.#shouldDebounceFlags[funcName] = false\n      try {\n        func()\n      } catch (error: any) {\n        this.emitError({\n          level: 'minor',\n          message: `The execution of ${funcName} in SelectedAccountController failed`,\n          error\n        })\n      }\n    }, 0)\n  }\n\n  #updateDefiPositionsErrors(skipUpdate?: boolean) {\n    if (\n      !this.account ||\n      !this.#networks ||\n      !this.#providers ||\n      !this.#defiPositions ||\n      this.areDefiPositionsLoading\n    ) {\n      this.#defiPositionsErrors = []\n      if (!skipUpdate) {\n        this.emitUpdate()\n      }\n      return\n    }\n\n    const defiPositionsAccountState = this.#defiPositions.getDefiPositionsState(this.account.addr)\n\n    const errorBanners = getNetworksWithDeFiPositionsErrorErrors({\n      networks: this.#networks.networks,\n      currentAccountState: defiPositionsAccountState,\n      providers: this.#providers.providers,\n      networksWithPositions: this.#defiPositions.getNetworksWithPositions(this.account.addr)\n    })\n\n    this.#defiPositionsErrors = errorBanners\n\n    if (!skipUpdate) {\n      this.emitUpdate()\n    }\n  }\n\n  #updatePortfolioErrors(skipUpdate?: boolean) {\n    if (\n      !this.account ||\n      !this.#networks ||\n      !this.#providers ||\n      !this.#portfolio ||\n      !this.portfolio.isAllReady\n    ) {\n      this.#portfolioErrors = []\n      if (!skipUpdate) {\n        this.emitUpdate()\n      }\n      return\n    }\n\n    const networksWithFailedRPCBanners = getNetworksWithFailedRPCErrors({\n      providers: this.#providers.providers,\n      networks: this.#networks.networks,\n      networksWithAssets: this.#portfolio.getNetworksWithAssets(this.account.addr)\n    })\n\n    const errorBanners = getNetworksWithPortfolioErrorErrors({\n      networks: this.#networks.networks,\n      selectedAccountLatest: this.portfolio.latest,\n      providers: this.#providers.providers\n    })\n\n    this.#portfolioErrors = [...networksWithFailedRPCBanners, ...errorBanners]\n\n    if (!skipUpdate) {\n      this.emitUpdate()\n    }\n  }\n\n  get balanceAffectingErrors() {\n    return [...this.#portfolioErrors, ...this.#defiPositionsErrors]\n  }\n\n  get deprecatedSmartAccountBanner(): Banner[] {\n    if (!this.account || !isSmartAccount(this.account)) return []\n\n    if (\n      !this.#accounts.accountStates[this.account.addr] ||\n      !this.#accounts.accountStates[this.account.addr].ethereum ||\n      !this.#accounts.accountStates[this.account.addr].ethereum.isV2\n    )\n      return []\n\n    if (\n      !this.account.creation ||\n      getAddress(this.account.creation.factoryAddr) === AMBIRE_ACCOUNT_FACTORY\n    )\n      return []\n\n    return [\n      {\n        id: 'old-account',\n        accountAddr: this.account.addr,\n        type: 'warning',\n        category: 'old-account',\n        title: 'Old Ambire Account',\n        text: \"The account you are using is an old Ambire Account that was intended for testing the extension only. Fee options aren't available on custom networks. It won't be supported in the future. Please migrate to another by creating a new smart account in the extension or contact the team for support\",\n        actions: []\n      }\n    ]\n  }\n\n  setDashboardNetworkFilter(networkFilter: NetworkId | null) {\n    this.dashboardNetworkFilter = networkFilter\n    this.emitUpdate()\n  }\n\n  toJSON() {\n    return {\n      ...this,\n      ...super.toJSON(),\n      deprecatedSmartAccountBanner: this.deprecatedSmartAccountBanner,\n      areDefiPositionsLoading: this.areDefiPositionsLoading,\n      balanceAffectingErrors: this.balanceAffectingErrors\n    }\n  }\n}\n"]}