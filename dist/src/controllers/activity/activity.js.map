{"version":3,"file":"activity.js","sourceRoot":"","sources":["../../../../src/controllers/activity/activity.ts"],"names":[],"mappings":"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","sourcesContent":["import { Account, AccountId } from '../../interfaces/account'\nimport { Banner } from '../../interfaces/banner'\nimport { Fetch } from '../../interfaces/fetch'\nimport { Network } from '../../interfaces/network'\nimport { isSmartAccount } from '../../libs/account/account'\nimport {\n  AccountOpIdentifiedBy,\n  fetchFrontRanTxnId,\n  fetchTxnId,\n  isIdentifiedByRelayer,\n  isIdentifiedByUserOpHash,\n  SubmittedAccountOp,\n  updateOpStatus\n} from '../../libs/accountOp/submittedAccountOp'\nimport { AccountOpStatus } from '../../libs/accountOp/types'\n/* eslint-disable import/no-extraneous-dependencies */\nimport { parseLogs } from '../../libs/userOperation/userOperation'\nimport { getBenzinUrlParams } from '../../utils/benzin'\nimport wait from '../../utils/wait'\nimport { AccountsController } from '../accounts/accounts'\nimport EventEmitter from '../eventEmitter/eventEmitter'\nimport { NetworksController } from '../networks/networks'\nimport { ProvidersController } from '../providers/providers'\nimport { SelectedAccountController } from '../selectedAccount/selectedAccount'\nimport { StorageController } from '../storage/storage'\nimport { InternalSignedMessages, SignedMessage } from './types'\n\nexport interface Pagination {\n  fromPage: number\n  itemsPerPage: number\n}\n\ninterface PaginationResult<T> {\n  items: T[]\n  itemsTotal: number\n  currentPage: number\n  maxPages: number\n}\n\ninterface AccountsOps extends PaginationResult<SubmittedAccountOp> {}\ninterface MessagesToBeSigned extends PaginationResult<SignedMessage> {}\n\nexport interface Filters {\n  account: string\n  chainId?: bigint\n}\n\nexport interface InternalAccountsOps {\n  // account => network => SubmittedAccountOp[]\n  [key: string]: { [key: string]: SubmittedAccountOp[] }\n}\n\n// We are limiting items array to include no more than 1000 records,\n// as we trim out the oldest ones (in the beginning of the items array).\n// We do this to maintain optimal storage and performance.\nconst trim = <T>(items: T[], maxSize = 1000): void => {\n  if (items.length > maxSize) {\n    // If the array size is greater than maxSize, remove the last (oldest) item\n    // newest items are added to the beginning of the array so oldest will be at the end (thats why we .pop())\n    items.pop()\n  }\n}\n\nconst paginate = (items: any[], fromPage: number, itemsPerPage: number) => {\n  return {\n    items: items.slice(fromPage * itemsPerPage, fromPage * itemsPerPage + itemsPerPage),\n    itemsTotal: items.length,\n    currentPage: fromPage, // zero/index based\n    maxPages: Math.ceil(items.length / itemsPerPage)\n  }\n}\n\n/**\n * Activity Controller\n * Manages signed AccountsOps and Messages in controller memory and browser storage.\n *\n * Raw, unfiltered data is stored in private properties `ActivityController.#accountsOps` and\n * `ActivityController.#signedMessages`.\n *\n * Public methods and properties are exposed for retrieving data with filtering and pagination.\n *\n * To apply filters or pagination, call `filterAccountsOps()` or `filterSignedMessages()` with the\n * required parameters. Filtered items are stored in `ActivityController.accountsOps` and\n * `ActivityController.signedMessages` by session ID.\n *\n * Sessions ensure that each page manages its own filters and pagination independently. For example,\n * filters in \"Settings -> Transactions History\" and \"Dashboard -> Activity Tab\" are isolated per session.\n *\n * After adding or removing an AccountOp or SignedMessage, call `syncFilteredAccountsOps()` or\n * `syncFilteredSignedMessages()` to synchronize filtered data with the source data.\n *\n * The frontend is responsible for clearing filtered items for a session when a component unmounts\n * by calling `resetAccountsOpsFilters()` or `resetSignedMessagesFilters()`. If not cleared, all\n * sessions will be automatically removed when the browser is closed or the controller terminates.\n *\n * 💡 For performance, items per account and network are limited to 1000.\n * Older items are trimmed, keeping the most recent ones.\n */\nexport class ActivityController extends EventEmitter {\n  #storage: StorageController\n\n  #fetch: Fetch\n\n  #initialLoadPromise: Promise<void>\n\n  #accounts: AccountsController\n\n  #selectedAccount: SelectedAccountController\n\n  #accountsOps: InternalAccountsOps = {}\n\n  accountsOps: {\n    [sessionId: string]: {\n      result: AccountsOps\n      filters: Filters\n      pagination: Pagination\n    }\n  } = {}\n\n  #signedMessages: InternalSignedMessages = {}\n\n  signedMessages: {\n    [sessionId: string]: {\n      result: MessagesToBeSigned\n      filters: Filters\n      pagination: Pagination\n    }\n  } = {}\n\n  #providers: ProvidersController\n\n  #networks: NetworksController\n\n  #onContractsDeployed: (network: Network) => Promise<void>\n\n  #rbfStatuses = [AccountOpStatus.BroadcastedButNotConfirmed, AccountOpStatus.BroadcastButStuck]\n\n  #callRelayer: Function\n\n  constructor(\n    storage: StorageController,\n    fetch: Fetch,\n    callRelayer: Function,\n    accounts: AccountsController,\n    selectedAccount: SelectedAccountController,\n    providers: ProvidersController,\n    networks: NetworksController,\n    onContractsDeployed: (network: Network) => Promise<void>\n  ) {\n    super()\n    this.#storage = storage\n    this.#fetch = fetch\n    this.#callRelayer = callRelayer\n    this.#accounts = accounts\n    this.#selectedAccount = selectedAccount\n    this.#providers = providers\n    this.#networks = networks\n    this.#onContractsDeployed = onContractsDeployed\n    this.#initialLoadPromise = this.#load()\n  }\n\n  async #load(): Promise<void> {\n    await this.#accounts.initialLoadPromise\n    await this.#selectedAccount.initialLoadPromise\n    const [accountsOps, signedMessages] = await Promise.all([\n      this.#storage.get('accountsOps', {}),\n      this.#storage.get('signedMessages', {})\n    ])\n\n    this.#accountsOps = accountsOps\n    this.#signedMessages = signedMessages\n\n    this.emitUpdate()\n  }\n\n  async filterAccountsOps(\n    sessionId: string,\n    filters: Filters,\n    pagination: Pagination = {\n      fromPage: 0,\n      itemsPerPage: 10\n    }\n  ) {\n    await this.#initialLoadPromise\n\n    let filteredItems\n\n    if (filters.chainId) {\n      filteredItems = this.#accountsOps[filters.account]?.[filters.chainId.toString()] || []\n    } else {\n      filteredItems = Object.values(this.#accountsOps[filters.account] || []).flat()\n      // By default, #accountsOps are grouped by network and sorted in descending order.\n      // However, when the network filter is omitted, #accountsOps from different networks are mixed,\n      // requiring additional sorting to ensure they are also in descending order.\n      filteredItems.sort((a, b) => b.timestamp - a.timestamp)\n    }\n\n    const result = paginate(filteredItems, pagination.fromPage, pagination.itemsPerPage)\n\n    this.accountsOps[sessionId] = {\n      result,\n      filters,\n      pagination\n    }\n\n    this.emitUpdate()\n  }\n\n  // Reset filtered AccountsOps session.\n  // Example: when a FE component is being unmounted, we don't need anymore the filtered accounts ops and we\n  // free the memory calling this method.\n  resetAccountsOpsFilters(sessionId: string) {\n    delete this.accountsOps[sessionId]\n    this.emitUpdate()\n  }\n\n  // Everytime we add/remove an AccOp, we should run this method in order to keep the filtered and internal accounts ops in sync.\n  private async syncFilteredAccountsOps() {\n    const promises = Object.keys(this.accountsOps).map(async (sessionId) => {\n      await this.filterAccountsOps(\n        sessionId,\n        this.accountsOps[sessionId].filters,\n        this.accountsOps[sessionId].pagination\n      )\n    })\n\n    await Promise.all(promises)\n  }\n\n  async filterSignedMessages(\n    sessionId: string,\n    filters: Filters,\n    pagination: Pagination = {\n      fromPage: 0,\n      itemsPerPage: 10\n    }\n  ) {\n    await this.#initialLoadPromise\n\n    const filteredItems = this.#signedMessages[filters.account] || []\n\n    const result = paginate(filteredItems, pagination.fromPage, pagination.itemsPerPage)\n\n    this.signedMessages[sessionId] = {\n      result,\n      filters,\n      pagination\n    }\n\n    this.emitUpdate()\n  }\n\n  // Reset filtered Messages session.\n  // Example: when a FE component is being unmounted, we don't need anymore the filtered messages and we\n  // free the memory calling this method.\n  resetSignedMessagesFilters(sessionId: string) {\n    delete this.signedMessages[sessionId]\n    this.emitUpdate()\n  }\n\n  // Everytime we add/remove a Message, we should run this method in order to keep the filtered and internal messages in sync.\n  private async syncSignedMessages() {\n    const promises = Object.keys(this.signedMessages).map(async (sessionId) => {\n      await this.filterSignedMessages(\n        sessionId,\n        this.signedMessages[sessionId].filters,\n        this.signedMessages[sessionId].pagination\n      )\n    })\n\n    await Promise.all(promises)\n  }\n\n  removeNetworkData(chainId: bigint) {\n    Object.keys(this.accountsOps).forEach(async (sessionId) => {\n      const state = this.accountsOps[sessionId]\n      const isFilteredByRemovedNetwork = state.filters.chainId === chainId\n\n      if (isFilteredByRemovedNetwork) {\n        await this.filterAccountsOps(\n          sessionId,\n          { account: state.filters.account },\n          state.pagination\n        )\n      }\n    })\n  }\n\n  async addAccountOp(accountOp: SubmittedAccountOp) {\n    await this.#initialLoadPromise\n\n    const { accountAddr, chainId } = accountOp\n\n    if (!this.#accountsOps[accountAddr]) this.#accountsOps[accountAddr] = {}\n    if (!this.#accountsOps[accountAddr][chainId.toString()])\n      this.#accountsOps[accountAddr][chainId.toString()] = []\n\n    // newest SubmittedAccountOp goes first in the list\n    this.#accountsOps[accountAddr][chainId.toString()].unshift({ ...accountOp })\n    trim(this.#accountsOps[accountAddr][chainId.toString()])\n\n    await this.syncFilteredAccountsOps()\n\n    await this.#storage.set('accountsOps', this.#accountsOps)\n    this.emitUpdate()\n  }\n\n  /**\n   * Update AccountsOps statuses (inner and public state, and storage)\n   *\n   * Here is the algorithm:\n   * 0. Once we broadcast an AccountOp, we are adding it to ActivityController via `addAccountOp`,\n   * and are setting its status to AccountOpStatus.BroadcastedButNotConfirmed.\n   * 1. Here, we firstly rely on `getTransactionReceipt` for determining the status (success or failure).\n   * 2. If we don't manage to determine its status, we are comparing AccountOp and Account nonce.\n   * If Account nonce is greater than AccountOp, then we know that AccountOp has past nonce (AccountOpStatus.UnknownButPastNonce).\n   */\n  async updateAccountsOpsStatuses(): Promise<{\n    shouldEmitUpdate: boolean\n    shouldUpdatePortfolio: boolean\n    updatedAccountsOps: SubmittedAccountOp[]\n    newestOpTimestamp: number\n  }> {\n    await this.#initialLoadPromise\n\n    if (!this.#selectedAccount.account || !this.#accountsOps[this.#selectedAccount.account.addr])\n      return {\n        shouldEmitUpdate: false,\n        shouldUpdatePortfolio: false,\n        updatedAccountsOps: [],\n        newestOpTimestamp: 0\n      }\n\n    // This flag tracks the changes to AccountsOps statuses\n    // and optimizes the number of the emitted updates and storage/state updates.\n    let shouldEmitUpdate = false\n\n    let shouldUpdatePortfolio = false\n    const updatedAccountsOps: SubmittedAccountOp[] = []\n\n    // Use this flag to make the auto-refresh slower with the passege of time.\n    // implementation is in background.ts\n    let newestOpTimestamp: number = 0\n\n    await Promise.all(\n      Object.keys(this.#accountsOps[this.#selectedAccount.account.addr]).map(\n        async (keyAsChainId) => {\n          const network = this.#networks.networks.find((n) => n.chainId.toString() === keyAsChainId)\n          if (!network) return\n          const provider = this.#providers.providers[network.chainId.toString()]\n\n          const selectedAccount = this.#selectedAccount.account?.addr\n\n          if (!selectedAccount) return\n\n          return Promise.all(\n            this.#accountsOps[selectedAccount][network.chainId.toString()].map(\n              async (accountOp, accountOpIndex) => {\n                // Don't update the current network account ops statuses,\n                // as the statuses are already updated in the previous calls.\n                if (accountOp.status !== AccountOpStatus.BroadcastedButNotConfirmed) return\n\n                shouldEmitUpdate = true\n\n                if (newestOpTimestamp === undefined || newestOpTimestamp < accountOp.timestamp) {\n                  newestOpTimestamp = accountOp.timestamp\n                }\n\n                const declareStuckIfQuaterPassed = (op: SubmittedAccountOp) => {\n                  const accountOpDate = new Date(op.timestamp)\n                  accountOpDate.setMinutes(accountOpDate.getMinutes() + 15)\n                  const aQuaterHasPassed = accountOpDate < new Date()\n                  if (aQuaterHasPassed) {\n                    const updatedOpIfAny = updateOpStatus(\n                      this.#accountsOps[selectedAccount][network.chainId.toString()][\n                        accountOpIndex\n                      ],\n                      AccountOpStatus.BroadcastButStuck\n                    )\n                    if (updatedOpIfAny) updatedAccountsOps.push(updatedOpIfAny)\n                  }\n                }\n\n                const fetchTxnIdResult = await fetchTxnId(\n                  accountOp.identifiedBy,\n                  network,\n                  this.#fetch,\n                  this.#callRelayer,\n                  accountOp\n                )\n                if (fetchTxnIdResult.status === 'rejected') {\n                  const updatedOpIfAny = updateOpStatus(\n                    this.#accountsOps[selectedAccount][network.chainId.toString()][accountOpIndex],\n                    AccountOpStatus.Rejected\n                  )\n                  if (updatedOpIfAny) updatedAccountsOps.push(updatedOpIfAny)\n                  return\n                }\n                if (fetchTxnIdResult.status === 'not_found') {\n                  declareStuckIfQuaterPassed(accountOp)\n                  return\n                }\n\n                const txnId = fetchTxnIdResult.txnId as string\n                this.#accountsOps[selectedAccount][network.chainId.toString()][\n                  accountOpIndex\n                ].txnId = txnId\n\n                try {\n                  let receipt = await provider.getTransactionReceipt(txnId)\n                  if (receipt) {\n                    // if the status is a failure and it's an userOp, it means it\n                    // could've been front ran. We need to make sure we find the\n                    // transaction that has succeeded\n                    if (!receipt.status && isIdentifiedByUserOpHash(accountOp.identifiedBy)) {\n                      const frontRanTxnId = await fetchFrontRanTxnId(\n                        accountOp.identifiedBy,\n                        txnId,\n                        network\n                      )\n                      this.#accountsOps[selectedAccount][network.chainId.toString()][\n                        accountOpIndex\n                      ].txnId = frontRanTxnId\n                      receipt = await provider.getTransactionReceipt(frontRanTxnId)\n                      if (!receipt) return\n                    }\n\n                    // if this is an user op, we have to check the logs\n                    let isSuccess: boolean | undefined\n                    if (isIdentifiedByUserOpHash(accountOp.identifiedBy)) {\n                      const userOpEventLog = parseLogs(\n                        receipt.logs,\n                        accountOp.identifiedBy.identifier\n                      )\n                      if (userOpEventLog) isSuccess = userOpEventLog.success\n                    }\n\n                    // if it's not an userOp or it is, but isSuccess was not found\n                    if (isSuccess === undefined) isSuccess = !!receipt.status\n\n                    const updatedOpIfAny = updateOpStatus(\n                      this.#accountsOps[selectedAccount][network.chainId.toString()][\n                        accountOpIndex\n                      ],\n                      isSuccess ? AccountOpStatus.Success : AccountOpStatus.Failure,\n                      receipt\n                    )\n                    if (updatedOpIfAny) updatedAccountsOps.push(updatedOpIfAny)\n\n                    if (receipt.status) {\n                      shouldUpdatePortfolio = true\n                    }\n\n                    if (accountOp.isSingletonDeploy && receipt.status) {\n                      await this.#onContractsDeployed(network)\n                    }\n                    return\n                  }\n\n                  // if there's no receipt, confirm there's a txn\n                  // if there's no txn and 15 minutes have passed, declare it a failure\n                  const txn = await provider.getTransaction(txnId)\n                  if (txn) return\n                  declareStuckIfQuaterPassed(accountOp)\n                } catch {\n                  this.emitError({\n                    level: 'silent',\n                    message: `Failed to determine transaction status on network with id ${accountOp.chainId} for ${accountOp.txnId}.`,\n                    error: new Error(\n                      `activity: failed to get transaction receipt for ${accountOp.txnId}`\n                    )\n                  })\n                }\n\n                // if there are more than 1 txns with the same nonce and payer,\n                // we can conclude this one is replaced by fee\n                const sameNonceTxns = this.#accountsOps[selectedAccount][\n                  network.chainId.toString()\n                ].filter(\n                  (accOp) =>\n                    accOp.gasFeePayment &&\n                    accountOp.gasFeePayment &&\n                    accOp.gasFeePayment.paidBy === accountOp.gasFeePayment.paidBy &&\n                    accOp.nonce.toString() === accountOp.nonce.toString()\n                )\n                const confirmedSameNonceTxns = sameNonceTxns.find(\n                  (accOp) =>\n                    accOp.status === AccountOpStatus.Success ||\n                    accOp.status === AccountOpStatus.Failure\n                )\n                if (sameNonceTxns.length > 1 && !!confirmedSameNonceTxns) {\n                  const updatedOpIfAny = updateOpStatus(\n                    this.#accountsOps[selectedAccount][network.chainId.toString()][accountOpIndex],\n                    AccountOpStatus.UnknownButPastNonce\n                  )\n                  if (updatedOpIfAny) updatedAccountsOps.push(updatedOpIfAny)\n                  shouldUpdatePortfolio = true\n                }\n              }\n            )\n          )\n        }\n      )\n    )\n\n    if (shouldEmitUpdate) {\n      await this.#storage.set('accountsOps', this.#accountsOps)\n      await this.syncFilteredAccountsOps()\n      this.emitUpdate()\n    }\n\n    return { shouldEmitUpdate, shouldUpdatePortfolio, updatedAccountsOps, newestOpTimestamp }\n  }\n\n  async addSignedMessage(signedMessage: SignedMessage, account: string) {\n    await this.#initialLoadPromise\n\n    if (!this.#signedMessages[account]) this.#signedMessages[account] = []\n\n    // newest SignedMessage goes first in the list\n    this.#signedMessages[account].unshift(signedMessage)\n    trim(this.#signedMessages[account])\n    await this.syncSignedMessages()\n\n    await this.#storage.set('signedMessages', this.#signedMessages)\n    this.emitUpdate()\n  }\n\n  async removeAccountData(address: Account['addr']) {\n    await this.#initialLoadPromise\n\n    delete this.#accountsOps[address]\n    delete this.#signedMessages[address]\n\n    await this.syncFilteredAccountsOps()\n    await this.syncSignedMessages()\n\n    await this.#storage.set('accountsOps', this.#accountsOps)\n    await this.#storage.set('signedMessages', this.#signedMessages)\n\n    this.emitUpdate()\n  }\n\n  async hideBanner({\n    addr,\n    chainId,\n    timestamp\n  }: {\n    addr: string\n    chainId: bigint\n    timestamp: number\n  }) {\n    await this.#initialLoadPromise\n\n    // shouldn't happen\n    if (!this.#accountsOps[addr]) return\n    if (!this.#accountsOps[addr][chainId.toString()]) return\n\n    // find the op we want to update\n    const op = this.#accountsOps[addr][chainId.toString()].find(\n      (accOp) => accOp.timestamp === timestamp\n    )\n    if (!op) return\n\n    // update by reference\n    if (!op.flags) op.flags = {}\n    op.flags.hideActivityBanner = true\n\n    await this.#storage.set('accountsOps', this.#accountsOps)\n\n    this.emitUpdate()\n  }\n\n  get broadcastedButNotConfirmed(): SubmittedAccountOp[] {\n    if (!this.#selectedAccount.account || !this.#accountsOps[this.#selectedAccount.account.addr])\n      return []\n\n    return Object.values(this.#accountsOps[this.#selectedAccount.account.addr])\n      .flat()\n      .filter((accountOp) => accountOp.status === AccountOpStatus.BroadcastedButNotConfirmed)\n  }\n\n  get banners(): Banner[] {\n    if (!this.#networks.isInitialized) return []\n    return (\n      this.broadcastedButNotConfirmed\n        // do not show a banner for forcefully hidden banners\n        .filter((op) => !(op.flags && op.flags.hideActivityBanner))\n        .map((accountOp) => {\n          const network = this.#networks.networks.find((n) => n.chainId === accountOp.chainId)!\n\n          const url = `https://benzin.ambire.com/${getBenzinUrlParams({\n            chainId: network.chainId,\n            txnId: accountOp.txnId,\n            identifiedBy: accountOp.identifiedBy\n          })}`\n\n          return {\n            id: accountOp.txnId,\n            type: 'success',\n            category: 'pending-to-be-confirmed-acc-op',\n            title: 'Transaction successfully signed and sent!\\nCheck it out on the block explorer!',\n            text: '',\n            actions: [\n              {\n                label: 'Close',\n                actionName: 'hide-activity-banner',\n                meta: {\n                  addr: accountOp.accountAddr,\n                  chainId: accountOp.chainId,\n                  timestamp: accountOp.timestamp,\n                  isHideStyle: true\n                }\n              },\n              {\n                label: 'Check',\n                actionName: 'open-external-url',\n                meta: { url }\n              }\n            ]\n          } as Banner\n        })\n    )\n  }\n\n  /**\n   * A not confirmed account op can actually be with a status of BroadcastButNotConfirmed\n   * and BroadcastButStuck. Typically, it becomes BroadcastButStuck if not confirmed\n   * in a 15 minutes interval after becoming BroadcastButNotConfirmed. We need two\n   * statuses to hide the banner of BroadcastButNotConfirmed from the dashboard.\n   */\n  getNotConfirmedOpIfAny(accId: AccountId, chainId: bigint): SubmittedAccountOp | null {\n    const acc = this.#accounts.accounts.find((oneA) => oneA.addr === accId)\n    if (!acc) return null\n\n    // if the broadcasting account is a smart account, it means relayer\n    // broadcast => it's in this.#accountsOps[acc.addr][chainId]\n    // disregard erc-4337 txns as they shouldn't have an RBF\n    const isSA = isSmartAccount(acc)\n    if (isSA) {\n      if (!this.#accountsOps[acc.addr] || !this.#accountsOps[acc.addr][chainId.toString(0)])\n        return null\n      if (!this.#rbfStatuses.includes(this.#accountsOps[acc.addr][chainId.toString(0)][0].status!))\n        return null\n\n      return this.#accountsOps[acc.addr][chainId.toString(0)][0]\n    }\n\n    // if the account is an EOA, we have to go through all the smart accounts\n    // to check whether the EOA has made a broadcast for them\n    const theEOAandSAaccounts = this.#accounts.accounts.filter(\n      (oneA) => isSmartAccount(oneA) || oneA.addr === accId\n    )\n    const ops: SubmittedAccountOp[] = []\n    theEOAandSAaccounts.forEach((oneA) => {\n      if (!this.#accountsOps[oneA.addr] || !this.#accountsOps[oneA.addr][chainId.toString()]) return\n      const op = this.#accountsOps[oneA.addr][chainId.toString()].find(\n        (oneOp) =>\n          this.#rbfStatuses.includes(this.#accountsOps[oneA.addr][chainId.toString()][0].status!) &&\n          oneOp.gasFeePayment?.paidBy === oneA.addr\n      )\n      if (!op) return\n      ops.push(op)\n    })\n    return !ops.length ? null : ops.reduce((m, e) => (e.nonce > m.nonce ? e : m))\n  }\n\n  async findMessage(account: string, filter: (item: SignedMessage) => boolean) {\n    await this.#initialLoadPromise\n\n    if (!this.#signedMessages[account]) return null\n\n    return this.#signedMessages[account].find(filter)\n  }\n\n  // return a txn id only if we have certainty that this is the final txn id:\n  // EOA broadcast: 100% certainty on broadcast\n  // Relayer | Bundler broadcast: once we have a receipt as there could be\n  // front running or txnId replacement issues\n  async getConfirmedTxId(\n    submittedAccountOp: SubmittedAccountOp,\n    counter = 0\n  ): Promise<string | undefined> {\n    if (\n      !this.#accountsOps[submittedAccountOp.accountAddr] ||\n      !this.#accountsOps[submittedAccountOp.accountAddr][submittedAccountOp.chainId.toString()]\n    )\n      return undefined\n\n    const activityAccountOp = this.#accountsOps[submittedAccountOp.accountAddr][\n      submittedAccountOp.chainId.toString()\n    ].find((op) => op.identifiedBy === submittedAccountOp.identifiedBy)\n    // shouldn't happen\n    if (!activityAccountOp) return undefined\n\n    if (\n      !isIdentifiedByUserOpHash(activityAccountOp.identifiedBy) &&\n      !isIdentifiedByRelayer(activityAccountOp.identifiedBy)\n    )\n      return activityAccountOp.txnId\n\n    // @frontrunning\n    if (\n      activityAccountOp.status === AccountOpStatus.Pending ||\n      activityAccountOp.status === AccountOpStatus.BroadcastedButNotConfirmed\n    ) {\n      // if the receipt cannot be confirmed after a lot of retries, continue on\n      if (counter >= 30) return activityAccountOp.txnId\n\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      await wait(1000)\n      return this.getConfirmedTxId(submittedAccountOp, counter + 1)\n    }\n\n    return activityAccountOp.txnId\n  }\n\n  findByIdentifiedBy(\n    identifiedBy: AccountOpIdentifiedBy,\n    accountAddr: string,\n    chainId: bigint\n  ): SubmittedAccountOp | undefined {\n    if (!this.#accountsOps[accountAddr] || !this.#accountsOps[accountAddr][chainId.toString()]) {\n      return undefined\n    }\n\n    return this.#accountsOps[accountAddr][chainId.toString()].find(\n      (op) => op.identifiedBy.identifier === identifiedBy.identifier\n    )\n  }\n\n  toJSON() {\n    return {\n      ...this,\n      ...super.toJSON(),\n      broadcastedButNotConfirmed: this.broadcastedButNotConfirmed, // includes the getter in the stringified instance\n      banners: this.banners // includes the getter in the stringified instance\n    }\n  }\n}\n"]}