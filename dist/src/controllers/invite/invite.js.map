{"version":3,"file":"invite.js","sourceRoot":"","sources":["../../../../src/controllers/invite/invite.ts"],"names":[],"mappings":"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","sourcesContent":["import { Fetch } from '../../interfaces/fetch'\nimport { Storage } from '../../interfaces/storage'\nimport { relayerCall } from '../../libs/relayerCall/relayerCall'\nimport EventEmitter from '../eventEmitter/eventEmitter'\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport enum INVITE_STATUS {\n  UNVERIFIED = 'UNVERIFIED',\n  VERIFIED = 'VERIFIED'\n}\n\ntype InviteState = {\n  status: INVITE_STATUS\n  verifiedAt: null | number // timestamp\n  verifiedCode: null | string\n  becameOGAt: null // timestamp\n}\n\nconst DEFAULT_STATE = {\n  status: INVITE_STATUS.UNVERIFIED,\n  verifiedAt: null,\n  verifiedCode: null,\n  becameOGAt: null\n}\n\n/**\n * As of v4.20.0, an invite verification flow is introduced as a first step upon\n * extension installation. This flow requires users to provide a valid invite\n * code before they can use the Ambire extension. This controller manages the\n * verification of these invite codes and persisting the current invite status.\n */\nexport class InviteController extends EventEmitter {\n  #storage: Storage\n\n  #callRelayer: Function\n\n  #state: InviteState = DEFAULT_STATE\n\n  inviteStatus: InviteState['status'] = INVITE_STATUS.UNVERIFIED\n\n  verifiedCode: InviteState['verifiedCode'] = null\n\n  /**\n   * Whether the user has become an Ambire OG (Original Gangster), a status that\n   * comes with specific privileges (e.g. early access to new or experimental features).\n   */\n  isOG: boolean = false\n\n  #initialLoadPromise: Promise<void>\n\n  constructor({\n    relayerUrl,\n    fetch,\n    storage\n  }: {\n    relayerUrl: string\n    fetch: Fetch\n    storage: Storage\n  }) {\n    super()\n\n    this.#storage = storage\n    this.#callRelayer = relayerCall.bind({ url: relayerUrl, fetch })\n    this.#initialLoadPromise = this.#load()\n  }\n\n  async #load() {\n    const nextState = await this.#storage.get('invite', this.#state)\n    this.#state = { ...DEFAULT_STATE, ...nextState }\n\n    this.inviteStatus = this.#state.status\n    this.verifiedCode = this.#state.verifiedCode\n    this.isOG = !!this.#state.becameOGAt\n    this.emitUpdate()\n  }\n\n  /**\n   * Verifies an invite code and if verified successfully, persists the invite\n   * status (and some meta information) in the storage.\n   */\n  async verify(code: string) {\n    await this.#initialLoadPromise\n\n    try {\n      const res = await this.#callRelayer(`/promotions/extension-key/${code}`, 'GET')\n\n      if (!res.success) throw new Error(res.message || \"Couldn't verify the invite code\")\n\n      this.inviteStatus = INVITE_STATUS.VERIFIED\n      this.verifiedCode = code\n      this.emitUpdate()\n\n      const verifiedAt = Date.now()\n      await this.#storage.set('invite', {\n        ...this.#state,\n        status: INVITE_STATUS.VERIFIED,\n        verifiedAt,\n        verifiedCode: code\n      })\n    } catch (error: any) {\n      this.emitError(error)\n    }\n  }\n\n  async becomeOG() {\n    await this.#initialLoadPromise\n\n    const becameOGAt = Date.now()\n    await this.#storage.set('invite', { ...this.#state, becameOGAt })\n\n    this.isOG = true\n    this.emitUpdate()\n  }\n\n  async revokeOG() {\n    await this.#initialLoadPromise\n\n    await this.#storage.set('invite', { ...this.#state, becameOGAt: null })\n\n    this.isOG = false\n    this.emitUpdate()\n  }\n}\n"]}