{"version":3,"file":"main.js","sourceRoot":"","sources":["../../../../src/controllers/main/main.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/brace-style */\n\nimport { ethErrors } from 'eth-rpc-errors'\nimport { getAddress, getBigInt, Interface, isAddress } from 'ethers'\n\nimport AmbireAccount from '../../../contracts/compiled/AmbireAccount.json'\nimport AmbireFactory from '../../../contracts/compiled/AmbireFactory.json'\nimport EmittableError from '../../classes/EmittableError'\nimport SwapAndBridgeError from '../../classes/SwapAndBridgeError'\nimport { BUNDLER } from '../../consts/bundlers'\nimport { ORIGINS_WHITELISTED_TO_ALL_ACCOUNTS } from '../../consts/dappCommunication'\nimport { AMBIRE_ACCOUNT_FACTORY, SINGLETON } from '../../consts/deploy'\nimport {\n  BIP44_LEDGER_DERIVATION_TEMPLATE,\n  BIP44_STANDARD_DERIVATION_TEMPLATE\n} from '../../consts/derivation'\nimport {\n  Account,\n  AccountId,\n  AccountOnchainState,\n  AccountWithNetworkMeta\n} from '../../interfaces/account'\nimport { Banner } from '../../interfaces/banner'\nimport { DappProviderRequest } from '../../interfaces/dapp'\nimport { Fetch } from '../../interfaces/fetch'\nimport {\n  ExternalSignerControllers,\n  Key,\n  KeystoreSignerType,\n  TxnRequest\n} from '../../interfaces/keystore'\nimport { AddNetworkRequestParams, Network, NetworkId } from '../../interfaces/network'\nimport { NotificationManager } from '../../interfaces/notification'\nimport { RPCProvider } from '../../interfaces/provider'\nimport { Storage } from '../../interfaces/storage'\nimport { SocketAPISendTransactionRequest } from '../../interfaces/swapAndBridge'\nimport { Calls, DappUserRequest, SignUserRequest, UserRequest } from '../../interfaces/userRequest'\nimport { WindowManager } from '../../interfaces/window'\nimport { getDefaultSelectedAccount, isSmartAccount } from '../../libs/account/account'\nimport { AccountOp, AccountOpStatus, getSignableCalls } from '../../libs/accountOp/accountOp'\nimport {\n  AccountOpIdentifiedBy,\n  getDappIdentifier,\n  pollTxnId,\n  SubmittedAccountOp\n} from '../../libs/accountOp/submittedAccountOp'\nimport { Call } from '../../libs/accountOp/types'\nimport {\n  dappRequestMethodToActionKind,\n  getAccountOpActionsByNetwork,\n  getAccountOpFromAction\n} from '../../libs/actions/actions'\nimport { getAccountOpBanners } from '../../libs/banners/banners'\nimport { getPaymasterService } from '../../libs/erc7677/erc7677'\nimport {\n  getHumanReadableBroadcastError,\n  getHumanReadableEstimationError\n} from '../../libs/errorHumanizer'\nimport { insufficientPaymasterFunds } from '../../libs/errorHumanizer/errors'\nimport { estimate } from '../../libs/estimate/estimate'\nimport { EstimateResult } from '../../libs/estimate/interfaces'\nimport { GasRecommendation, getGasPriceRecommendations } from '../../libs/gasPrice/gasPrice'\nimport { humanizeAccountOp } from '../../libs/humanizer'\nimport { KeyIterator } from '../../libs/keyIterator/keyIterator'\nimport {\n  ACCOUNT_SWITCH_USER_REQUEST,\n  buildSwitchAccountUserRequest,\n  getAccountOpsForSimulation,\n  makeBasicAccountOpAction,\n  makeSmartAccountOpAction\n} from '../../libs/main/main'\nimport { relayerAdditionalNetworks } from '../../libs/networks/networks'\nimport { GetOptions, TokenResult } from '../../libs/portfolio/interfaces'\nimport { relayerCall } from '../../libs/relayerCall/relayerCall'\nimport { parse } from '../../libs/richJson/richJson'\nimport { isNetworkReady } from '../../libs/selectedAccount/selectedAccount'\nimport {\n  adjustEntryPointAuthorization,\n  getEntryPointAuthorization\n} from '../../libs/signMessage/signMessage'\nimport {\n  buildSwapAndBridgeUserRequests,\n  getActiveRoutesForAccount\n} from '../../libs/swapAndBridge/swapAndBridge'\nimport { debugTraceCall } from '../../libs/tracer/debugTraceCall'\nimport {\n  buildClaimWalletRequest,\n  buildMintVestingRequest,\n  buildTransferUserRequest\n} from '../../libs/transfer/userRequest'\nimport {\n  ENTRY_POINT_AUTHORIZATION_REQUEST_ID,\n  isErc4337Broadcast,\n  shouldAskForEntryPointAuthorization\n} from '../../libs/userOperation/userOperation'\nimport { getDefaultBundler } from '../../services/bundlers/getBundler'\nimport { GasSpeeds } from '../../services/bundlers/types'\nimport { paymasterFactory } from '../../services/paymaster'\nimport { failedPaymasters } from '../../services/paymaster/FailedPaymasters'\nimport { SocketAPI } from '../../services/socket/api'\nimport { getIsViewOnly } from '../../utils/accounts'\nimport shortenAddress from '../../utils/shortenAddress'\nimport wait from '../../utils/wait'\nimport { AccountAdderController } from '../accountAdder/accountAdder'\nimport { AccountsController } from '../accounts/accounts'\nimport {\n  AccountOpAction,\n  ActionExecutionType,\n  ActionPosition,\n  ActionsController,\n  SignMessageAction\n} from '../actions/actions'\nimport { ActivityController } from '../activity/activity'\nimport { AddressBookController } from '../addressBook/addressBook'\nimport { DappsController } from '../dapps/dapps'\nimport { DefiPositionsController } from '../defiPositions/defiPositions'\nimport { DomainsController } from '../domains/domains'\nimport { EmailVaultController } from '../emailVault/emailVault'\nimport EventEmitter, { ErrorRef, Statuses } from '../eventEmitter/eventEmitter'\nimport { InviteController } from '../invite/invite'\nimport { KeystoreController } from '../keystore/keystore'\nimport { NetworksController } from '../networks/networks'\nimport { PortfolioController } from '../portfolio/portfolio'\nimport { ProvidersController } from '../providers/providers'\n/* eslint-disable @typescript-eslint/no-floating-promises */\nimport { SelectedAccountController } from '../selectedAccount/selectedAccount'\n/* eslint-disable no-underscore-dangle */\nimport { SignAccountOpController, SigningStatus } from '../signAccountOp/signAccountOp'\nimport { SignMessageController } from '../signMessage/signMessage'\nimport { SwapAndBridgeController, SwapAndBridgeFormStatus } from '../swapAndBridge/swapAndBridge'\n\nconst STATUS_WRAPPED_METHODS = {\n  onAccountAdderSuccess: 'INITIAL',\n  signAccountOp: 'INITIAL',\n  broadcastSignedAccountOp: 'INITIAL',\n  removeAccount: 'INITIAL',\n  handleAccountAdderInitLedger: 'INITIAL',\n  handleAccountAdderInitLattice: 'INITIAL',\n  importSmartAccountFromDefaultSeed: 'INITIAL',\n  buildSwapAndBridgeUserRequest: 'INITIAL',\n  importSmartAccountFromSavedSeed: 'INITIAL',\n  selectAccount: 'INITIAL'\n} as const\n\nexport class MainController extends EventEmitter {\n  #storage: Storage\n\n  fetch: Fetch\n\n  // Holds the initial load promise, so that one can wait until it completes\n  #initialLoadPromise: Promise<void>\n\n  callRelayer: Function\n\n  isReady: boolean = false\n\n  invite: InviteController\n\n  keystore: KeystoreController\n\n  /**\n   * Hardware wallets (usually) need an additional (external signer) controller,\n   * that is app-specific (web, mobile) and is used to interact with the device.\n   * (example: LedgerController, TrezorController, LatticeController)\n   */\n  #externalSignerControllers: ExternalSignerControllers = {}\n\n  // Subcontrollers\n  networks: NetworksController\n\n  providers: ProvidersController\n\n  accountAdder: AccountAdderController\n\n  portfolio: PortfolioController\n\n  defiPositions: DefiPositionsController\n\n  dapps: DappsController\n\n  actions: ActionsController\n\n  // Public sub-structures\n  // @TODO emailVaults\n  emailVault: EmailVaultController\n\n  signMessage: SignMessageController\n\n  swapAndBridge: SwapAndBridgeController\n\n  signAccountOp: SignAccountOpController | null = null\n\n  signAccOpInitError: string | null = null\n\n  activity: ActivityController\n\n  addressBook: AddressBookController\n\n  domains: DomainsController\n\n  accounts: AccountsController\n\n  selectedAccount: SelectedAccountController\n\n  userRequests: UserRequest[] = []\n\n  userRequestWaitingAccountSwitch: UserRequest[] = []\n\n  // network => GasRecommendation[]\n  gasPrices: { [key: string]: GasRecommendation[] } = {}\n\n  // network => BundlerGasPrice\n  bundlerGasPrices: { [key: string]: { speeds: GasSpeeds; bundler: BUNDLER } } = {}\n\n  accountOpsToBeConfirmed: { [key: string]: { [key: string]: AccountOp } } = {}\n\n  // TODO: Temporary solution to expose the fee payer key during Account Op broadcast.\n  feePayerKey: Key | null = null\n\n  lastUpdate: Date = new Date()\n\n  isOffline: boolean = false\n\n  statuses: Statuses<keyof typeof STATUS_WRAPPED_METHODS> = STATUS_WRAPPED_METHODS\n\n  #windowManager: WindowManager\n\n  #notificationManager: NotificationManager\n\n  #signAccountOpSigningPromise?: Promise<AccountOp | void | null>\n\n  #signAccountOpBroadcastPromise?: Promise<SubmittedAccountOp>\n\n  constructor({\n    storage,\n    fetch,\n    relayerUrl,\n    velcroUrl,\n    socketApiKey,\n    keystoreSigners,\n    externalSignerControllers,\n    windowManager,\n    notificationManager\n  }: {\n    storage: Storage\n    fetch: Fetch\n    relayerUrl: string\n    velcroUrl: string\n    socketApiKey: string\n    keystoreSigners: Partial<{ [key in Key['type']]: KeystoreSignerType }>\n    externalSignerControllers: ExternalSignerControllers\n    windowManager: WindowManager\n    notificationManager: NotificationManager\n  }) {\n    super()\n    this.#storage = storage\n    this.fetch = fetch\n    this.#windowManager = windowManager\n    this.#notificationManager = notificationManager\n\n    this.invite = new InviteController({ relayerUrl, fetch, storage: this.#storage })\n    this.keystore = new KeystoreController(this.#storage, keystoreSigners, windowManager)\n    this.#externalSignerControllers = externalSignerControllers\n    this.networks = new NetworksController(\n      this.#storage,\n      this.fetch,\n      async (network: Network) => {\n        this.providers.setProvider(network)\n        await this.reloadSelectedAccount({ networkId: network.id })\n      },\n      (networkId: NetworkId) => {\n        this.providers.removeProvider(networkId)\n      }\n    )\n    this.providers = new ProvidersController(this.networks)\n    this.accounts = new AccountsController(\n      this.#storage,\n      this.providers,\n      this.networks,\n      async (accounts) => {\n        const defaultSelectedAccount = getDefaultSelectedAccount(accounts)\n        if (defaultSelectedAccount) {\n          await this.#selectAccount(defaultSelectedAccount.addr)\n        }\n      },\n      this.providers.updateProviderIsWorking.bind(this.providers),\n      this.#updateIsOffline.bind(this)\n    )\n    this.selectedAccount = new SelectedAccountController({\n      storage: this.#storage,\n      accounts: this.accounts\n    })\n    this.portfolio = new PortfolioController(\n      this.#storage,\n      this.fetch,\n      this.providers,\n      this.networks,\n      this.accounts,\n      relayerUrl,\n      velcroUrl\n    )\n    this.defiPositions = new DefiPositionsController({\n      fetch: this.fetch,\n      storage,\n      selectedAccount: this.selectedAccount,\n      networks: this.networks,\n      providers: this.providers\n    })\n    this.emailVault = new EmailVaultController(this.#storage, this.fetch, relayerUrl, this.keystore)\n    this.accountAdder = new AccountAdderController({\n      accounts: this.accounts,\n      keystore: this.keystore,\n      networks: this.networks,\n      providers: this.providers,\n      relayerUrl,\n      fetch: this.fetch\n    })\n    this.addressBook = new AddressBookController(this.#storage, this.accounts, this.selectedAccount)\n    this.signMessage = new SignMessageController(\n      this.keystore,\n      this.providers,\n      this.networks,\n      this.accounts,\n      this.#externalSignerControllers\n    )\n    const socketAPI = new SocketAPI({ apiKey: socketApiKey, fetch: this.fetch })\n    this.dapps = new DappsController(this.#storage)\n    this.actions = new ActionsController({\n      selectedAccount: this.selectedAccount,\n      windowManager,\n      notificationManager,\n      onActionWindowClose: () => {\n        const userRequestsToRejectOnWindowClose = this.userRequests.filter(\n          (r) => r.action.kind !== 'calls'\n        )\n        userRequestsToRejectOnWindowClose.forEach((r) =>\n          r.dappPromise?.reject(ethErrors.provider.userRejectedRequest())\n        )\n        this.userRequests = this.userRequests.filter((r) => r.action.kind === 'calls')\n        this.userRequestWaitingAccountSwitch = []\n        this.emitUpdate()\n      }\n    })\n    this.selectedAccount.initControllers({\n      portfolio: this.portfolio,\n      defiPositions: this.defiPositions,\n      actions: this.actions,\n      networks: this.networks,\n      providers: this.providers\n    })\n\n    this.callRelayer = relayerCall.bind({ url: relayerUrl, fetch: this.fetch })\n    this.activity = new ActivityController(\n      this.#storage,\n      this.fetch,\n      this.callRelayer,\n      this.accounts,\n      this.selectedAccount,\n      this.providers,\n      this.networks,\n      async (network: Network) => {\n        await this.setContractsDeployedToTrueIfDeployed(network)\n      }\n    )\n    this.swapAndBridge = new SwapAndBridgeController({\n      selectedAccount: this.selectedAccount,\n      networks: this.networks,\n      activity: this.activity,\n      invite: this.invite,\n      socketAPI,\n      storage: this.#storage,\n      actions: this.actions\n    })\n    this.domains = new DomainsController(this.providers.providers)\n    this.#initialLoadPromise = this.#load()\n    paymasterFactory.init(relayerUrl, fetch, (e: ErrorRef) => {\n      if (!this.signAccountOp) return\n      this.emitError(e)\n    })\n  }\n\n  /**\n   * - Updates the selected account's account state, portfolio and defi positions\n   * - Calls batchReverseLookup for all accounts\n   *\n   * It's not a problem to call it many times consecutively as all methods have internal\n   * caching mechanisms to prevent unnecessary calls.\n   */\n  onPopupOpen() {\n    const FIVE_MINUTES = 1000 * 60 * 5\n    const selectedAccountAddr = this.selectedAccount.account?.addr\n    this.domains.batchReverseLookup(this.accounts.accounts.map((a) => a.addr))\n    if (!this.activity.broadcastedButNotConfirmed.length) {\n      // Update defi positions together with the portfolio for simplicity\n      this.defiPositions.updatePositions({ maxDataAgeMs: FIVE_MINUTES })\n      this.updateSelectedAccountPortfolio(undefined, undefined, FIVE_MINUTES)\n    }\n\n    if (selectedAccountAddr && !this.accounts.areAccountStatesLoading)\n      this.accounts.updateAccountState(selectedAccountAddr)\n  }\n\n  async #load(): Promise<void> {\n    this.isReady = false\n    // #load is called in the constructor which is synchronous\n    // we await (1 ms/next tick) for the constructor to extend the EventEmitter class\n    // and then we call it's methods\n    await wait(1)\n    this.emitUpdate()\n    await this.networks.initialLoadPromise\n    await this.providers.initialLoadPromise\n    await this.accounts.initialLoadPromise\n    await this.selectedAccount.initialLoadPromise\n\n    this.defiPositions.updatePositions()\n    this.updateSelectedAccountPortfolio()\n    this.domains.batchReverseLookup(this.accounts.accounts.map((a) => a.addr))\n    /**\n     * Listener that gets triggered as a finalization step of adding new\n     * accounts via the AccountAdder controller flow.\n     *\n     * VIEW-ONLY ACCOUNTS: In case of changes in this method, make sure these\n     * changes are reflected for view-only accounts as well. Because the\n     * view-only accounts import flow bypasses the AccountAdder, this method\n     * won't click for them. Their on add success flow continues in the\n     * MAIN_CONTROLLER_ADD_VIEW_ONLY_ACCOUNTS action case.\n     */\n    const onAccountAdderSuccess = () => {\n      if (this.accountAdder.addAccountsStatus !== 'SUCCESS') return\n\n      return this.withStatus(\n        'onAccountAdderSuccess',\n        async () => {\n          // Add accounts first, because some of the next steps have validation\n          // if accounts exists.\n          await this.accounts.addAccounts(this.accountAdder.readyToAddAccounts)\n\n          // Then add keys, because some of the next steps could have validation\n          // if keys exists. Should be separate (not combined in Promise.all,\n          // since firing multiple keystore actions is not possible\n          // (the #wrapKeystoreAction listens for the first one to finish and\n          // skips the parallel one, if one is requested).\n\n          await this.keystore.addKeys(this.accountAdder.readyToAddKeys.internal)\n          await this.keystore.addKeysExternallyStored(this.accountAdder.readyToAddKeys.external)\n\n          // Update the saved seed `hdPathTemplate` if accounts were added from\n          // the saved seed, so when user opts in to \"Import a new Smart Account\n          // from the saved Seed Phrase\" the next account is derived based\n          // on the latest `hdPathTemplate` chosen in the AccountAdder.\n          if (this.accountAdder.isInitializedWithSavedSeed)\n            this.keystore.changeSavedSeedHdPathTemplateIfNeeded(this.accountAdder.hdPathTemplate)\n          if (this.keystore.hasKeystoreTempSeed)\n            this.keystore.changeTempSeedHdPathTemplateIfNeeded(this.accountAdder.hdPathTemplate)\n        },\n        true\n      )\n    }\n    this.accountAdder.onUpdate(onAccountAdderSuccess)\n\n    this.isReady = true\n    this.emitUpdate()\n  }\n\n  lock() {\n    this.keystore.lock()\n    this.emailVault.cleanMagicAndSessionKeys()\n    this.selectedAccount.setDashboardNetworkFilter(null)\n  }\n\n  async selectAccount(toAccountAddr: string) {\n    await this.withStatus('selectAccount', async () => this.#selectAccount(toAccountAddr), true)\n  }\n\n  async #selectAccount(toAccountAddr: string | null) {\n    await this.#initialLoadPromise\n    if (!toAccountAddr) {\n      await this.selectedAccount.setAccount(null)\n\n      this.emitUpdate()\n      return\n    }\n\n    const accountToSelect = this.accounts.accounts.find((acc) => acc.addr === toAccountAddr)\n    if (!accountToSelect) {\n      console.error(`Account with address ${toAccountAddr} does not exist`)\n      return\n    }\n\n    this.isOffline = false\n    // call closeActionWindow while still on the currently selected account to allow proper\n    // state cleanup of the controllers like actionsCtrl, signAccountOpCtrl, signMessageCtrl...\n    if (this.actions?.currentAction?.type !== 'switchAccount') {\n      this.actions.closeActionWindow()\n    }\n    this.selectedAccount.setAccount(accountToSelect)\n    this.swapAndBridge.onAccountChange()\n    this.dapps.broadcastDappSessionEvent('accountsChanged', [toAccountAddr])\n    // forceEmitUpdate to update the getters in the FE state of the ctrl\n    await this.forceEmitUpdate()\n    await this.actions.forceEmitUpdate()\n    await this.addressBook.forceEmitUpdate()\n    // Don't await these as they are not critical for the account selection\n    // and if the user decides to quickly change to another account withStatus\n    // will block the UI until these are resolved.\n    this.reloadSelectedAccount({ forceUpdate: false })\n    this.emitUpdate()\n  }\n\n  async importSmartAccountFromSavedSeed(seed?: string) {\n    await this.withStatus(\n      'importSmartAccountFromSavedSeed',\n      async () => {\n        if (this.accountAdder.isInitialized) this.accountAdder.reset()\n        if (seed && !this.keystore.hasKeystoreSavedSeed) {\n          await this.keystore.addSeed({ seed, hdPathTemplate: BIP44_STANDARD_DERIVATION_TEMPLATE })\n        }\n\n        const savedSeed = await this.keystore.getSavedSeed()\n        if (!savedSeed) {\n          throw new EmittableError({\n            message:\n              'Failed to retrieve saved seed phrase from keystore. Please try again or contact Ambire support if the issue persists.',\n            level: 'major',\n            error: new Error('failed to retrieve saved seed phrase from keystore')\n          })\n        }\n\n        const keyIterator = new KeyIterator(savedSeed.seed)\n        await this.accountAdder.init({\n          keyIterator,\n          hdPathTemplate: savedSeed.hdPathTemplate,\n          pageSize: 1,\n          shouldGetAccountsUsedOnNetworks: false,\n          shouldSearchForLinkedAccounts: false\n        })\n\n        let currentPage: number = 1\n        let isAccountAlreadyAdded: boolean\n        let nextSmartAccount: AccountWithNetworkMeta | undefined\n\n        const findNextSmartAccount = async () => {\n          do {\n            // eslint-disable-next-line no-await-in-loop\n            await this.accountAdder.setPage({ page: currentPage })\n\n            nextSmartAccount = this.accountAdder.accountsOnPage.find(\n              ({ isLinked, account }) => !isLinked && isSmartAccount(account)\n            )?.account\n\n            if (!nextSmartAccount) break\n\n            isAccountAlreadyAdded = !!this.accounts.accounts.find(\n              // eslint-disable-next-line @typescript-eslint/no-loop-func\n              (a) => a.addr === nextSmartAccount!.addr\n            )\n\n            currentPage++\n          } while (isAccountAlreadyAdded)\n        }\n\n        await findNextSmartAccount()\n\n        if (!nextSmartAccount) {\n          throw new EmittableError({\n            message:\n              'Internal error while looking for account to add. Please start the process all over again and if the issue persists contact Ambire support.',\n            level: 'major',\n            error: new Error('Internal error: Failed to find a smart account to add')\n          })\n        }\n\n        this.accountAdder.selectAccount(nextSmartAccount)\n\n        const readyToAddKeys = this.accountAdder.retrieveInternalKeysOfSelectedAccounts()\n\n        await this.accountAdder.addAccounts(this.accountAdder.selectedAccounts, {\n          internal: readyToAddKeys,\n          external: []\n        })\n      },\n      true\n    )\n  }\n\n  initSignAccOp(actionId: AccountOpAction['id']): null | void {\n    const accountOp = getAccountOpFromAction(actionId, this.actions.actionsQueue)\n    if (!accountOp) {\n      this.signAccOpInitError =\n        'We cannot initiate the signing process because no transaction has been found for the specified account and network.'\n      return null\n    }\n\n    const network = this.networks.networks.find((net) => net.id === accountOp.networkId)\n\n    if (\n      !this.selectedAccount.account ||\n      this.selectedAccount.account.addr !== accountOp.accountAddr\n    ) {\n      this.signAccOpInitError =\n        'Attempting to initialize an accountOp for an account other than the currently selected one.'\n      return null\n    }\n\n    if (!network) {\n      this.signAccOpInitError =\n        'We cannot initiate the signing process as we are unable to locate the specified network.'\n      return null\n    }\n\n    // on init, set the accountOp nonce to the latest one we know\n    // it could happen that the user inits a userRequest with an old\n    // accountState and therefore caching the old nonce in the accountOp.\n    // we make sure the latest nonce is set when initing signAccountOp\n    const state = this.accounts.accountStates?.[accountOp.accountAddr]?.[accountOp.networkId]\n    if (state) accountOp.nonce = state.nonce\n\n    this.signAccOpInitError = null\n\n    this.signAccountOp = new SignAccountOpController(\n      this.accounts,\n      this.keystore,\n      this.portfolio,\n      this.#externalSignerControllers,\n      this.selectedAccount.account,\n      network,\n      actionId,\n      accountOp,\n      () => {\n        this.estimateSignAccountOp()\n      },\n      () => {\n        return this.isSignRequestStillActive\n      }\n    )\n\n    this.emitUpdate()\n\n    this.updateSignAccountOpGasPrice()\n    this.estimateSignAccountOp()\n  }\n\n  async handleSignAndBroadcastAccountOp() {\n    await this.withStatus(\n      'signAccountOp',\n      async () => {\n        const wasAlreadySigned = this.signAccountOp?.status?.type === SigningStatus.Done\n        if (wasAlreadySigned) return Promise.resolve()\n\n        if (!this.signAccountOp) {\n          const message =\n            'The signing process was not initialized as expected. Please try again later or contact Ambire support if the issue persists.'\n          const error = new Error('SignAccountOp is not initialized')\n          this.emitError({ level: 'major', message, error })\n          return Promise.reject(error)\n        }\n\n        // Reset the promise in the `finally` block to ensure it doesn't remain unresolved if an error is thrown\n        this.#signAccountOpSigningPromise = this.signAccountOp.sign().finally(() => {\n          this.#signAccountOpSigningPromise = undefined\n        })\n\n        return this.#signAccountOpSigningPromise\n      },\n      true\n    )\n\n    // Error handling on the prev step will notify the user, it's fine to return here\n    if (this.signAccountOp?.status?.type !== SigningStatus.Done) return\n\n    return this.withStatus(\n      'broadcastSignedAccountOp',\n      async () => {\n        // Reset the promise in the `finally` block to ensure it doesn't remain unresolved if an error is thrown\n        this.#signAccountOpBroadcastPromise = this.#broadcastSignedAccountOp().finally(() => {\n          this.#signAccountOpBroadcastPromise = undefined\n        })\n        return this.#signAccountOpBroadcastPromise\n      },\n      true\n    )\n  }\n\n  destroySignAccOp() {\n    if (!this.signAccountOp) return\n\n    this.feePayerKey = null\n    this.signAccountOp = null\n    this.signAccOpInitError = null\n\n    // NOTE: no need to update the portfolio here as an update is\n    // fired upon removeUserRequest\n\n    this.emitUpdate()\n  }\n\n  async traceCall(estimation: EstimateResult) {\n    const accountOp = this.signAccountOp?.accountOp\n    if (!accountOp) return\n\n    const network = this.networks.networks.find((net) => net.id === accountOp?.networkId)\n    if (!network) return\n\n    try {\n      const account = this.accounts.accounts.find((acc) => acc.addr === accountOp.accountAddr)!\n      const state = this.accounts.accountStates[accountOp.accountAddr][accountOp.networkId]\n      const provider = this.providers.providers[network.id]\n      const gasPrice = this.gasPrices[network.id]\n      const { tokens, nfts } = await debugTraceCall(\n        account,\n        accountOp,\n        provider,\n        state,\n        estimation.gasUsed,\n        gasPrice,\n        !network.rpcNoStateOverride\n      )\n      const learnedNewTokens = this.portfolio.addTokensToBeLearned(tokens, network.id)\n      const learnedNewNfts = await this.portfolio.learnNfts(nfts, network.id)\n      // update the portfolio only if new tokens were found through tracing\n      if (learnedNewTokens || learnedNewNfts) {\n        this.portfolio\n          .updateSelectedAccount(\n            accountOp.accountAddr,\n            network,\n            getAccountOpsForSimulation(\n              account,\n              this.actions.visibleActionsQueue,\n              network,\n              accountOp\n            ),\n            { forceUpdate: true }\n          )\n          // fire an update request to refresh the warnings if any\n          .then(() => this.signAccountOp?.update({}))\n      }\n    } catch (e: any) {\n      this.emitError({\n        level: 'silent',\n        message: 'Error in main.traceCall',\n        error: e\n      })\n    }\n  }\n\n  async handleSignMessage() {\n    const accountAddr = this.signMessage.messageToSign?.accountAddr\n    const networkId = this.signMessage.messageToSign?.networkId\n\n    // Could (rarely) happen if not even a single account state is fetched yet\n    const shouldForceUpdateAndWaitForAccountState =\n      accountAddr && networkId && !this.accounts.accountStates?.[accountAddr]?.[networkId]\n    if (shouldForceUpdateAndWaitForAccountState)\n      await this.accounts.updateAccountState(accountAddr, 'latest', [networkId])\n\n    const isAccountStateStillMissing =\n      !accountAddr || !networkId || !this.accounts.accountStates?.[accountAddr]?.[networkId]\n    if (isAccountStateStillMissing) {\n      const message =\n        'Unable to sign the message. During the preparation step, required account data failed to get received. Please try again later or contact Ambire support.'\n      const error = new Error(\n        `The account state of ${accountAddr} is missing for the network with id ${networkId}.`\n      )\n      return this.emitError({ level: 'major', message, error })\n    }\n\n    await this.signMessage.sign()\n\n    const signedMessage = this.signMessage.signedMessage\n    // Error handling on the prev step will notify the user, it's fine to return here\n    if (!signedMessage) return\n\n    if (signedMessage.fromActionId === ENTRY_POINT_AUTHORIZATION_REQUEST_ID) {\n      const accountOpAction = makeSmartAccountOpAction({\n        account: this.accounts.accounts.filter((a) => a.addr === signedMessage.accountAddr)[0],\n        networkId: signedMessage.networkId,\n        nonce:\n          this.accounts.accountStates[signedMessage.accountAddr][signedMessage.networkId].nonce,\n        userRequests: this.userRequests,\n        actionsQueue: this.actions.actionsQueue\n      })\n      if (!accountOpAction.accountOp.meta) accountOpAction.accountOp.meta = {}\n      accountOpAction.accountOp.meta.entryPointAuthorization = adjustEntryPointAuthorization(\n        signedMessage.signature as string\n      )\n\n      this.actions.addOrUpdateAction(accountOpAction, 'first')\n    }\n\n    await this.activity.addSignedMessage(signedMessage, signedMessage.accountAddr)\n    await this.resolveUserRequest({ hash: signedMessage.signature }, signedMessage.fromActionId)\n\n    await this.#notificationManager.create({\n      title: 'Done!',\n      message: 'The Message was successfully signed.'\n    })\n  }\n\n  async #handleAccountAdderInitLedger(\n    LedgerKeyIterator: any // TODO: KeyIterator type mismatch\n  ) {\n    if (this.accountAdder.isInitialized) this.accountAdder.reset()\n\n    try {\n      const ledgerCtrl = this.#externalSignerControllers.ledger\n      if (!ledgerCtrl) {\n        const message =\n          'Could not initialize connection with your Ledger device. Please try again later or contact Ambire support.'\n        throw new EmittableError({ message, level: 'major', error: new Error(message) })\n      }\n\n      // Once a session with the Ledger device gets initiated, the user might\n      // use the device with another app. In this scenario, when coming back to\n      // Ambire (the second time a connection gets requested onwards),\n      // the Ledger device throws with \"invalid channel\" error.\n      // To overcome this, always make sure to clean up before starting\n      // a new session when retrieving keys, in case there already is one.\n      if (ledgerCtrl.walletSDK) await ledgerCtrl.cleanUp()\n\n      const hdPathTemplate = BIP44_LEDGER_DERIVATION_TEMPLATE\n      await ledgerCtrl.unlock(hdPathTemplate)\n\n      if (!ledgerCtrl.walletSDK) {\n        const message = 'Could not establish connection with the Ledger device'\n        throw new EmittableError({ message, level: 'major', error: new Error(message) })\n      }\n\n      const keyIterator = new LedgerKeyIterator({ controller: ledgerCtrl })\n      await this.accountAdder.init({ keyIterator, hdPathTemplate })\n\n      return await this.accountAdder.setPage({ page: 1 })\n    } catch (error: any) {\n      const message = error?.message || 'Could not unlock the Ledger device. Please try again.'\n      throw new EmittableError({ message, level: 'major', error })\n    }\n  }\n\n  async handleAccountAdderInitLedger(LedgerKeyIterator: any /* TODO: KeyIterator type mismatch */) {\n    await this.withStatus('handleAccountAdderInitLedger', async () =>\n      this.#handleAccountAdderInitLedger(LedgerKeyIterator)\n    )\n  }\n\n  async #handleAccountAdderInitLattice(\n    LatticeKeyIterator: any /* TODO: KeyIterator type mismatch */\n  ) {\n    if (this.accountAdder.isInitialized) this.accountAdder.reset()\n\n    try {\n      const latticeCtrl = this.#externalSignerControllers.lattice\n      if (!latticeCtrl) {\n        const message =\n          'Could not initialize connection with your Lattice1 device. Please try again later or contact Ambire support.'\n        throw new EmittableError({ message, level: 'major', error: new Error(message) })\n      }\n\n      const hdPathTemplate = BIP44_STANDARD_DERIVATION_TEMPLATE\n      await latticeCtrl.unlock(hdPathTemplate, undefined, true)\n\n      const { walletSDK } = latticeCtrl\n      await this.accountAdder.init({\n        keyIterator: new LatticeKeyIterator({ walletSDK }),\n        hdPathTemplate\n      })\n\n      return await this.accountAdder.setPage({ page: 1 })\n    } catch (error: any) {\n      const message = error?.message || 'Could not unlock the Lattice1 device. Please try again.'\n      throw new EmittableError({ message, level: 'major', error })\n    }\n  }\n\n  async handleAccountAdderInitLattice(\n    LatticeKeyIterator: any /* TODO: KeyIterator type mismatch */\n  ) {\n    await this.withStatus('handleAccountAdderInitLattice', async () =>\n      this.#handleAccountAdderInitLattice(LatticeKeyIterator)\n    )\n  }\n\n  async updateAccountsOpsStatuses(): Promise<{ newestOpTimestamp: number }> {\n    await this.#initialLoadPromise\n\n    const { shouldEmitUpdate, shouldUpdatePortfolio, updatedAccountsOps, newestOpTimestamp } =\n      await this.activity.updateAccountsOpsStatuses()\n\n    if (shouldEmitUpdate) {\n      this.emitUpdate()\n\n      if (shouldUpdatePortfolio) {\n        this.updateSelectedAccountPortfolio(true)\n      }\n    }\n\n    updatedAccountsOps.forEach((op) => {\n      this.swapAndBridge.handleUpdateActiveRouteOnSubmittedAccountOpStatusUpdate(op)\n    })\n\n    return { newestOpTimestamp }\n  }\n\n  // call this function after a call to the singleton has been made\n  // it will check if the factory has been deployed and update the network settings if it has been\n  async setContractsDeployedToTrueIfDeployed(network: Network) {\n    await this.#initialLoadPromise\n    if (network.areContractsDeployed) return\n\n    const provider = this.providers.providers[network.id]\n    if (!provider) return\n\n    const factoryCode = await provider.getCode(AMBIRE_ACCOUNT_FACTORY)\n    if (factoryCode === '0x') return\n    await this.networks.updateNetwork({ areContractsDeployed: true }, network.id)\n  }\n\n  #removeAccountKeyData(address: Account['addr']) {\n    // Compute account keys that are only associated with this account\n    const accountAssociatedKeys =\n      this.accounts.accounts.find((acc) => acc.addr === address)?.associatedKeys || []\n    const keysInKeystore = this.keystore.keys\n    const importedAccountKeys = keysInKeystore.filter((key) =>\n      accountAssociatedKeys.includes(key.addr)\n    )\n    const solelyAccountKeys = importedAccountKeys.filter((key) => {\n      const isKeyAssociatedWithOtherAccounts = this.accounts.accounts.some(\n        (acc) => acc.addr !== address && acc.associatedKeys.includes(key.addr)\n      )\n\n      return !isKeyAssociatedWithOtherAccounts\n    })\n\n    // Remove account keys from the keystore\n    solelyAccountKeys.forEach((key) => {\n      this.keystore.removeKey(key.addr, key.type).catch((e) => {\n        throw new EmittableError({\n          level: 'major',\n          message: 'Failed to remove account key',\n          error: e\n        })\n      })\n    })\n  }\n\n  async removeAccount(address: Account['addr']) {\n    await this.withStatus('removeAccount', async () => {\n      try {\n        this.#removeAccountKeyData(address)\n        // Remove account data from sub-controllers\n        await this.accounts.removeAccountData(address)\n        this.portfolio.removeAccountData(address)\n        await this.activity.removeAccountData(address)\n        this.actions.removeAccountData(address)\n        this.signMessage.removeAccountData(address)\n        this.defiPositions.removeAccountData(address)\n\n        if (this.selectedAccount.account?.addr === address) {\n          await this.#selectAccount(this.accounts.accounts[0]?.addr)\n        }\n\n        if (this.signAccountOp?.account.addr === address) {\n          this.destroySignAccOp()\n        }\n\n        this.emitUpdate()\n      } catch (e: any) {\n        throw new EmittableError({\n          level: 'major',\n          message: 'Failed to remove account',\n          error: e || new Error('Failed to remove account')\n        })\n      }\n    })\n  }\n\n  async #ensureAccountInfo(accountAddr: AccountId, networkId: NetworkId) {\n    await this.#initialLoadPromise\n    // Initial sanity check: does this account even exist?\n    if (!this.accounts.accounts.find((x) => x.addr === accountAddr)) {\n      this.signAccOpInitError = `Account ${accountAddr} does not exist`\n      return\n    }\n    // If this still didn't work, re-load\n    if (!this.accounts.accountStates[accountAddr]?.[networkId])\n      await this.accounts.updateAccountState(accountAddr, 'pending', [networkId])\n    // If this still didn't work, throw error: this prob means that we're calling for a non-existent acc/network\n    if (!this.accounts.accountStates[accountAddr]?.[networkId])\n      this.signAccOpInitError = `Failed to retrieve account info for ${networkId}, because of one of the following reasons: 1) network doesn't exist, 2) RPC is down for this network`\n  }\n\n  #batchCallsFromUserRequests(accountAddr: AccountId, networkId: NetworkId): Call[] {\n    // Note: we use reduce instead of filter/map so that the compiler can deduce that we're checking .kind\n    return (this.userRequests.filter((r) => r.action.kind === 'calls') as SignUserRequest[]).reduce(\n      (uCalls: Call[], req) => {\n        if (req.meta.networkId === networkId && req.meta.accountAddr === accountAddr) {\n          const { calls } = req.action as Calls\n          calls.map((call) => uCalls.push({ ...call, fromUserRequestId: req.id }))\n        }\n        return uCalls\n      },\n      []\n    )\n  }\n\n  async reloadSelectedAccount(options?: { forceUpdate?: boolean; networkId?: NetworkId }) {\n    const { forceUpdate = true, networkId } = options || {}\n    const networkToUpdate = networkId\n      ? this.networks.networks.find((n) => n.id === networkId)\n      : undefined\n    if (!this.selectedAccount.account) return\n\n    this.selectedAccount.resetSelectedAccountPortfolio()\n    await Promise.all([\n      // When we trigger `reloadSelectedAccount` (for instance, from Dashboard -> Refresh balance icon),\n      // it's very likely that the account state is already in the process of being updated.\n      // If we try to run the same action, `withStatus` validation will throw an error.\n      // So, we perform this safety check to prevent the error.\n      // However, even if we don't trigger an update here, it's not a big problem,\n      // as the account state will be updated anyway, and its update will be very recent.\n      !this.accounts.areAccountStatesLoading && this.selectedAccount.account?.addr\n        ? this.accounts.updateAccountState(\n            this.selectedAccount.account.addr,\n            'pending',\n            networkId ? [networkId] : undefined\n          )\n        : Promise.resolve(),\n      // `updateSelectedAccountPortfolio` doesn't rely on `withStatus` validation internally,\n      // as the PortfolioController already exposes flags that are highly sufficient for the UX.\n      // Additionally, if we trigger the portfolio update twice (i.e., running a long-living interval + force update from the Dashboard),\n      // there won't be any error thrown, as all portfolio updates are queued and they don't use the `withStatus` helper.\n      this.updateSelectedAccountPortfolio(forceUpdate, networkToUpdate),\n      this.defiPositions.updatePositions({ networkId })\n    ])\n  }\n\n  #updateIsOffline() {\n    const oldIsOffline = this.isOffline\n    const accountAddr = this.selectedAccount.account?.addr\n\n    if (!accountAddr) return\n\n    // We have to make calculations based on the state of the portfolio\n    // and not the selected account portfolio the flag isOffline\n    // and the errors of the selected account portfolio should\n    // come in the same tick. Otherwise the UI may flash the wrong error.\n    const latestState = this.portfolio.getLatestPortfolioState(accountAddr)\n    const latestStateKeys = Object.keys(latestState)\n\n    const isAllReady = latestStateKeys.every((networkId) => {\n      return isNetworkReady(latestState[networkId])\n    })\n\n    if (!isAllReady) return\n\n    const allPortfolioNetworksHaveErrors = latestStateKeys.every((networkId) => {\n      const state = latestState[networkId]\n\n      return !!state?.criticalError\n    })\n\n    const allNetworkRpcsAreDown = Object.keys(this.providers.providers).every((networkId) => {\n      const provider = this.providers.providers[networkId]\n      const isWorking = provider.isWorking\n\n      return typeof isWorking === 'boolean' && !isWorking\n    })\n\n    // Update isOffline if either all portfolio networks have errors or we've failed to fetch\n    // the account state for every account. This is because either update may fail first.\n    this.isOffline = !!allNetworkRpcsAreDown || !!allPortfolioNetworksHaveErrors\n\n    if (oldIsOffline !== this.isOffline) {\n      this.emitUpdate()\n    }\n  }\n\n  // TODO: Refactor this to accept an optional object with options\n  async updateSelectedAccountPortfolio(\n    // eslint-disable-next-line default-param-last\n    forceUpdate: boolean = false,\n    network?: Network,\n    maxDataAgeMs?: number\n  ) {\n    await this.#initialLoadPromise\n    if (!this.selectedAccount.account) return\n\n    const signAccountOpNetworkId = this.signAccountOp?.accountOp.networkId\n    const networkData =\n      network || this.networks.networks.find((n) => n.id === signAccountOpNetworkId)\n\n    const accountOpsToBeSimulatedByNetwork = getAccountOpsForSimulation(\n      this.selectedAccount.account,\n      this.actions.visibleActionsQueue,\n      networkData,\n      this.signAccountOp?.accountOp\n    )\n\n    await this.portfolio.updateSelectedAccount(\n      this.selectedAccount.account.addr,\n      network,\n      accountOpsToBeSimulatedByNetwork,\n      { forceUpdate, maxDataAgeMs }\n    )\n    this.#updateIsOffline()\n  }\n\n  #getUserRequestAccountError(dappOrigin: string, fromAccountAddr: string): string | null {\n    if (ORIGINS_WHITELISTED_TO_ALL_ACCOUNTS.includes(dappOrigin)) {\n      const isAddressInAccounts = this.accounts.accounts.some((a) => a.addr === fromAccountAddr)\n\n      if (isAddressInAccounts) return null\n\n      return 'The dApp is trying to sign using an address that is not imported in the extension.'\n    }\n    const isAddressSelected = this.selectedAccount.account?.addr === fromAccountAddr\n\n    if (isAddressSelected) return null\n\n    return 'The dApp is trying to sign using an address that is not selected in the extension.'\n  }\n\n  async buildUserRequestFromDAppRequest(\n    request: DappProviderRequest,\n    dappPromise: {\n      session: { name: string; origin: string; icon: string }\n      resolve: (data: any) => void\n      reject: (data: any) => void\n    }\n  ) {\n    await this.#initialLoadPromise\n    let userRequest = null\n    let actionPosition: ActionPosition = 'last'\n    const kind = dappRequestMethodToActionKind(request.method)\n    const dapp = this.dapps.getDapp(request.origin)\n\n    if (kind === 'calls') {\n      if (!this.selectedAccount.account) throw ethErrors.rpc.internal()\n      const network = this.networks.networks.find(\n        (n) => Number(n.chainId) === Number(dapp?.chainId)\n      )\n      if (!network) {\n        throw ethErrors.provider.chainDisconnected('Transaction failed - unknown network')\n      }\n\n      const isWalletSendCalls = !!request.params[0].calls\n      const accountAddr = getAddress(request.params[0].from)\n\n      const calls: Calls['calls'] = isWalletSendCalls\n        ? request.params[0].calls\n        : [request.params[0]]\n      const paymasterService = isWalletSendCalls\n        ? getPaymasterService(network.chainId, request.params[0].capabilities)\n        : null\n\n      userRequest = {\n        id: new Date().getTime(),\n        action: {\n          kind,\n          calls: calls.map((call) => ({\n            to: call.to,\n            data: call.data || '0x',\n            value: call.value ? getBigInt(call.value) : 0n\n          }))\n        },\n        meta: {\n          isSignAction: true,\n          isWalletSendCalls,\n          accountAddr,\n          networkId: network.id,\n          paymasterService\n        },\n        dappPromise\n      } as SignUserRequest\n      if (!this.selectedAccount.account.creation) {\n        const otherUserRequestFromSameDapp = this.userRequests.find(\n          (r) => r.dappPromise?.session?.origin === dappPromise?.session?.origin\n        )\n\n        if (!otherUserRequestFromSameDapp && !!dappPromise?.session?.origin) {\n          actionPosition = 'first'\n        }\n      }\n    } else if (kind === 'message') {\n      if (!this.selectedAccount.account) throw ethErrors.rpc.internal()\n\n      const msg = request.params\n      if (!msg) {\n        throw ethErrors.rpc.invalidRequest('No msg request to sign')\n      }\n      const msgAddress = getAddress(msg?.[1])\n\n      const network = this.networks.networks.find(\n        (n) => Number(n.chainId) === Number(dapp?.chainId)\n      )\n\n      if (!network) {\n        throw ethErrors.provider.chainDisconnected('Transaction failed - unknown network')\n      }\n\n      userRequest = {\n        id: new Date().getTime(),\n        action: {\n          kind: 'message',\n          message: msg[0]\n        },\n        session: request.session,\n        meta: {\n          isSignAction: true,\n          accountAddr: msgAddress,\n          networkId: network.id\n        },\n        dappPromise\n      } as SignUserRequest\n    } else if (kind === 'typedMessage') {\n      if (!this.selectedAccount.account) throw ethErrors.rpc.internal()\n\n      const msg = request.params\n      if (!msg) {\n        throw ethErrors.rpc.invalidRequest('No msg request to sign')\n      }\n      const msgAddress = getAddress(msg?.[0])\n\n      const network = this.networks.networks.find(\n        (n) => Number(n.chainId) === Number(dapp?.chainId)\n      )\n\n      if (!network) {\n        throw ethErrors.provider.chainDisconnected('Transaction failed - unknown network')\n      }\n\n      let typedData = msg?.[1]\n\n      try {\n        typedData = parse(typedData)\n      } catch (error) {\n        throw ethErrors.rpc.invalidRequest('Invalid typedData provided')\n      }\n\n      if (\n        !typedData?.types ||\n        !typedData?.domain ||\n        !typedData?.message ||\n        !typedData?.primaryType\n      ) {\n        throw ethErrors.rpc.methodNotSupported(\n          'Invalid typedData format - only typedData v4 is supported'\n        )\n      }\n\n      if (\n        msgAddress === this.selectedAccount.account.addr &&\n        (typedData.primaryType === 'AmbireOperation' || !!typedData.types.AmbireOperation)\n      ) {\n        throw ethErrors.rpc.methodNotSupported('Signing an AmbireOperation is not allowed')\n      }\n\n      userRequest = {\n        id: new Date().getTime(),\n        action: {\n          kind: 'typedMessage',\n          types: typedData.types,\n          domain: typedData.domain,\n          message: typedData.message,\n          primaryType: typedData.primaryType\n        },\n        session: request.session,\n        meta: {\n          isSignAction: true,\n          accountAddr: msgAddress,\n          networkId: network.id\n        },\n        dappPromise\n      } as SignUserRequest\n    } else {\n      userRequest = {\n        id: new Date().getTime(),\n        session: request.session,\n        action: { kind, params: request.params },\n        meta: { isSignAction: false },\n        dappPromise\n      } as DappUserRequest\n    }\n\n    if (userRequest.action.kind !== 'calls') {\n      const otherUserRequestFromSameDapp = this.userRequests.find(\n        (r) => r.dappPromise?.session?.origin === dappPromise?.session?.origin\n      )\n\n      if (!otherUserRequestFromSameDapp && !!dappPromise?.session?.origin) {\n        actionPosition = 'first'\n      }\n    }\n\n    if (!userRequest) return\n\n    const isASignOperationRequestedForAnotherAccount =\n      userRequest.meta.isSignAction &&\n      userRequest.meta.accountAddr !== this.selectedAccount.account?.addr\n\n    // We can simply add the user request if it's not a sign operation\n    // for another account\n    if (!isASignOperationRequestedForAnotherAccount) {\n      await this.addUserRequest(\n        userRequest,\n        actionPosition,\n        actionPosition === 'first' || isSmartAccount(this.selectedAccount.account)\n          ? 'open-action-window'\n          : 'queue-but-open-action-window'\n      )\n      return\n    }\n\n    const accountError = this.#getUserRequestAccountError(\n      dappPromise.session.origin,\n      userRequest.meta.accountAddr\n    )\n\n    if (accountError) {\n      dappPromise.reject(ethErrors.provider.userRejectedRequest(accountError))\n      return\n    }\n\n    const network = this.networks.networks.find((n) => Number(n.chainId) === Number(dapp?.chainId))\n\n    if (!network) {\n      throw ethErrors.provider.chainDisconnected('Transaction failed - unknown network')\n    }\n\n    this.userRequestWaitingAccountSwitch.push(userRequest)\n    await this.addUserRequest(\n      buildSwitchAccountUserRequest({\n        nextUserRequest: userRequest,\n        networkId: network.id,\n        selectedAccountAddr: userRequest.meta.accountAddr,\n        session: dappPromise.session,\n        dappPromise\n      }),\n      'last',\n      'open-action-window'\n    )\n  }\n\n  async buildTransferUserRequest(\n    amount: string,\n    recipientAddress: string,\n    selectedToken: TokenResult,\n    actionExecutionType: ActionExecutionType = 'open-action-window'\n  ) {\n    await this.#initialLoadPromise\n    if (!this.selectedAccount.account) return\n\n    const userRequest = buildTransferUserRequest({\n      selectedAccount: this.selectedAccount.account.addr,\n      amount,\n      selectedToken,\n      recipientAddress\n    })\n\n    if (!userRequest) {\n      this.emitError({\n        level: 'major',\n        message: 'Unexpected error while building transfer request',\n        error: new Error(\n          'buildUserRequestFromTransferRequest: bad parameters passed to buildTransferUserRequest'\n        )\n      })\n      return\n    }\n\n    await this.addUserRequest(userRequest, 'last', actionExecutionType)\n  }\n\n  async buildSwapAndBridgeUserRequest(activeRouteId?: number) {\n    await this.withStatus(\n      'buildSwapAndBridgeUserRequest',\n      async () => {\n        if (!this.selectedAccount.account) return\n        let transaction: SocketAPISendTransactionRequest | null | undefined = null\n\n        const activeRoute = this.swapAndBridge.activeRoutes.find(\n          (r) => r.activeRouteId === activeRouteId\n        )\n\n        if (this.swapAndBridge.formStatus === SwapAndBridgeFormStatus.ReadyToSubmit) {\n          transaction = await this.swapAndBridge.getRouteStartUserTx()\n        }\n\n        if (activeRoute) {\n          this.removeUserRequest(activeRoute.activeRouteId, {\n            shouldRemoveSwapAndBridgeRoute: false,\n            shouldOpenNextRequest: false\n          })\n          this.swapAndBridge.updateActiveRoute(activeRoute.activeRouteId, { error: undefined })\n          if (!isSmartAccount(this.selectedAccount.account)) {\n            this.removeUserRequest(`${activeRouteId}-revoke-approval`, {\n              shouldRemoveSwapAndBridgeRoute: false,\n              shouldOpenNextRequest: false\n            })\n            this.removeUserRequest(`${activeRouteId}-approval`, {\n              shouldRemoveSwapAndBridgeRoute: false,\n              shouldOpenNextRequest: false\n            })\n          }\n          transaction = await this.swapAndBridge.getNextRouteUserTx(activeRoute.activeRouteId)\n        }\n\n        if (!this.selectedAccount.account || !transaction) {\n          const errorDetails = `missing ${\n            this.selectedAccount.account ? 'selected account' : 'transaction'\n          } info`\n          const error = new SwapAndBridgeError(\n            `Something went wrong when preparing your request. Please try again later or contact Ambire support. Error details: <${errorDetails}>`\n          )\n          throw new EmittableError({ message: error.message, level: 'major', error })\n        }\n\n        const network = this.networks.networks.find(\n          (n) => Number(n.chainId) === transaction!.chainId\n        )!\n\n        // TODO: Consider refining the error handling in here, because this\n        // swallows errors and doesn't provide any feedback to the user.\n        const swapAndBridgeUserRequests = await buildSwapAndBridgeUserRequests(\n          transaction,\n          network.id,\n          this.selectedAccount.account,\n          this.providers.providers[network.id]\n        )\n\n        for (let i = 0; i < swapAndBridgeUserRequests.length; i++) {\n          if (i === 0) {\n            this.addUserRequest(swapAndBridgeUserRequests[i], 'last', 'open-action-window')\n          } else {\n            // eslint-disable-next-line no-await-in-loop\n            await this.addUserRequest(swapAndBridgeUserRequests[i], 'last', 'queue')\n          }\n        }\n\n        if (this.swapAndBridge.formStatus === SwapAndBridgeFormStatus.ReadyToSubmit) {\n          await this.swapAndBridge.addActiveRoute({\n            activeRouteId: transaction.activeRouteId,\n            userTxIndex: transaction.userTxIndex\n          })\n        }\n\n        if (activeRouteId) {\n          this.swapAndBridge.updateActiveRoute(\n            activeRouteId,\n            {\n              userTxIndex: transaction.userTxIndex,\n              userTxHash: null\n            },\n            true\n          )\n        }\n      },\n      true\n    )\n  }\n\n  buildClaimWalletUserRequest(token: TokenResult) {\n    if (!this.selectedAccount.account) return\n\n    const claimableRewardsData =\n      this.selectedAccount.portfolio.latest.rewards?.result?.claimableRewardsData\n\n    if (!claimableRewardsData) return\n\n    const userRequest: UserRequest = buildClaimWalletRequest({\n      selectedAccount: this.selectedAccount.account.addr,\n      selectedToken: token,\n      claimableRewardsData\n    })\n\n    this.addUserRequest(userRequest)\n  }\n\n  buildMintVestingUserRequest(token: TokenResult) {\n    if (!this.selectedAccount.account) return\n\n    const addrVestingData = this.selectedAccount.portfolio.latest.rewards?.result?.addrVestingData\n\n    if (!addrVestingData) return\n    const userRequest: UserRequest = buildMintVestingRequest({\n      selectedAccount: this.selectedAccount.account.addr,\n      selectedToken: token,\n      addrVestingData\n    })\n\n    this.addUserRequest(userRequest)\n  }\n\n  resolveUserRequest(data: any, requestId: UserRequest['id']) {\n    const userRequest = this.userRequests.find((r) => r.id === requestId)\n    if (!userRequest) return // TODO: emit error\n\n    userRequest.dappPromise?.resolve(data)\n    // These requests are transitionary initiated internally (not dApp requests) that block dApp requests\n    // before being resolved. The timeout prevents the action-window from closing before the actual dApp request arrives\n    if (['unlock', 'dappConnect'].includes(userRequest.action.kind)) {\n      setTimeout(() => {\n        this.removeUserRequest(requestId)\n        this.emitUpdate()\n      }, 300)\n    } else {\n      this.removeUserRequest(requestId)\n      this.emitUpdate()\n    }\n  }\n\n  rejectUserRequest(err: string, requestId: UserRequest['id']) {\n    const userRequest = this.userRequests.find((r) => r.id === requestId)\n    if (!userRequest) return\n\n    if (requestId === ENTRY_POINT_AUTHORIZATION_REQUEST_ID) {\n      this.userRequests = this.userRequests.filter(\n        (r) =>\n          !(\n            r.action.kind === 'calls' &&\n            r.meta.accountAddr === userRequest.meta.accountAddr &&\n            r.meta.networkId === userRequest.meta.networkId\n          )\n      )\n    }\n\n    // if the userRequest that is about to be removed is an approval request\n    // find and remove the associated pending transaction request if there is any\n    // this is valid scenario for a swap & bridge txs with a BA\n    if (userRequest.action.kind === 'calls') {\n      const acc = this.accounts.accounts.find((a) => a.addr === userRequest.meta.accountAddr)!\n\n      if (!isSmartAccount(acc) && userRequest.meta.isSwapAndBridgeCall) {\n        this.removeUserRequest(userRequest.meta.activeRouteId)\n        this.removeUserRequest(`${userRequest.meta.activeRouteId}-approval`)\n        this.removeUserRequest(`${userRequest.meta.activeRouteId}-revoke-approval`)\n      }\n    }\n\n    userRequest.dappPromise?.reject(ethErrors.provider.userRejectedRequest<any>(err))\n    this.removeUserRequest(requestId)\n  }\n\n  rejectSignAccountOpCall(callId: string) {\n    if (!this.signAccountOp) return\n\n    const { calls, networkId, accountAddr } = this.signAccountOp.accountOp\n\n    const requestId = calls.find((c) => c.id === callId)?.fromUserRequestId\n    if (requestId) {\n      const userRequestIndex = this.userRequests.findIndex((r) => r.id === requestId)\n      const userRequest = this.userRequests[userRequestIndex] as SignUserRequest\n      if (userRequest.action.kind === 'calls') {\n        ;(userRequest.action as Calls).calls = (userRequest.action as Calls).calls.filter(\n          (c) => c.id !== callId\n        )\n\n        if (userRequest.action.calls.length === 0) {\n          // the reject will remove the userRequest which will rebuild the action and update the signAccountOp\n          this.rejectUserRequest('User rejected the transaction request.', userRequest.id)\n        } else {\n          const accountOpAction = makeSmartAccountOpAction({\n            account: this.accounts.accounts.find((a) => a.addr === accountAddr)!,\n            networkId,\n            nonce: this.accounts.accountStates[accountAddr][networkId].nonce,\n            userRequests: this.userRequests,\n            actionsQueue: this.actions.actionsQueue\n          })\n\n          this.actions.addOrUpdateAction(accountOpAction)\n          this.signAccountOp?.update({ calls: accountOpAction.accountOp.calls })\n          this.estimateSignAccountOp()\n        }\n      }\n    } else {\n      this.emitError({\n        message: 'Reject call: the call was not found or was not linked to a user request',\n        level: 'major',\n        error: new Error(\n          `Error: rejectAccountOpCall: userRequest for call with id ${callId} was not found`\n        )\n      })\n    }\n  }\n\n  removeActiveRoute(activeRouteId: number) {\n    const userRequest = this.userRequests.find((r) =>\n      [activeRouteId, `${activeRouteId}-approval`, `${activeRouteId}-revoke-approval`].includes(\n        r.id\n      )\n    )\n\n    if (userRequest) {\n      this.rejectUserRequest('User rejected the transaction request.', userRequest.id)\n    } else {\n      this.swapAndBridge.removeActiveRoute(activeRouteId)\n    }\n  }\n\n  async addUserRequest(\n    req: UserRequest,\n    actionPosition: ActionPosition = 'last',\n    actionExecutionType: ActionExecutionType = 'open-action-window'\n  ) {\n    if (req.action.kind === 'calls') {\n      ;(req.action as Calls).calls.forEach((_, i) => {\n        ;(req.action as Calls).calls[i].id = `${req.id}-${i}`\n      })\n    }\n    if (actionPosition === 'first') {\n      this.userRequests.unshift(req)\n    } else {\n      this.userRequests.push(req)\n    }\n\n    const { id, action, meta } = req\n    if (action.kind === 'calls') {\n      // @TODO\n      // one solution would be to, instead of checking, have a promise that we always await here, that is responsible for fetching\n      // account data; however, this won't work with EOA accountOps, which have to always pick the first userRequest for a particular acc/network,\n      // and be recalculated when one gets dismissed\n      // although it could work like this: 1) await the promise, 2) check if exists 3) if not, re-trigger the promise;\n      // 4) manage recalc on removeUserRequest too in order to handle EOAs\n      // @TODO consider re-using this whole block in removeUserRequest\n      await this.#ensureAccountInfo(meta.accountAddr, meta.networkId)\n      if (this.signAccOpInitError) {\n        return req.dappPromise?.reject(\n          ethErrors.provider.custom({\n            code: 1001,\n            message: this.signAccOpInitError\n          })\n        )\n      }\n\n      if (this.#signAccountOpSigningPromise) await this.#signAccountOpSigningPromise\n      if (this.#signAccountOpBroadcastPromise) await this.#signAccountOpBroadcastPromise\n\n      const account = this.accounts.accounts.find((x) => x.addr === meta.accountAddr)!\n      const accountState = this.accounts.accountStates[meta.accountAddr][meta.networkId]\n\n      if (isSmartAccount(account)) {\n        const network = this.networks.networks.find((n) => n.id === meta.networkId)!\n\n        // find me the accountOp for the network if any, it's always 1 for SA\n        const currentAccountOpAction = this.actions.actionsQueue.find(\n          (a) =>\n            a.type === 'accountOp' &&\n            a.accountOp.accountAddr === account.addr &&\n            a.accountOp.networkId === network.id\n        ) as AccountOpAction | undefined\n\n        const entryPointAuthorizationMessageFromHistory = await this.activity.findMessage(\n          account.addr,\n          (message) =>\n            message.fromActionId === ENTRY_POINT_AUTHORIZATION_REQUEST_ID &&\n            message.networkId === network.id\n        )\n\n        const hasAuthorized =\n          !!currentAccountOpAction?.accountOp?.meta?.entryPointAuthorization ||\n          !!entryPointAuthorizationMessageFromHistory\n\n        if (shouldAskForEntryPointAuthorization(network, account, accountState, hasAuthorized)) {\n          await this.addEntryPointAuthorization(req, network, accountState, actionExecutionType)\n          this.emitUpdate()\n          return\n        }\n\n        const accountOpAction = makeSmartAccountOpAction({\n          account,\n          networkId: meta.networkId,\n          nonce: accountState.nonce,\n          userRequests: this.userRequests,\n          actionsQueue: this.actions.actionsQueue,\n          entryPointAuthorizationSignature:\n            entryPointAuthorizationMessageFromHistory?.signature ?? undefined\n        })\n        this.actions.addOrUpdateAction(accountOpAction, actionPosition, actionExecutionType)\n        if (this.signAccountOp) {\n          if (this.signAccountOp.fromActionId === accountOpAction.id) {\n            this.signAccountOp.update({ calls: accountOpAction.accountOp.calls })\n            this.estimateSignAccountOp()\n          }\n        } else {\n          // Even without an initialized SignAccountOpController or Screen, we should still update the portfolio and run the simulation.\n          // It's necessary to continue operating with the token `amountPostSimulation` amount.\n          this.updateSelectedAccountPortfolio(true, network)\n        }\n      } else {\n        const accountOpAction = makeBasicAccountOpAction({\n          account,\n          networkId: meta.networkId,\n          nonce: accountState.nonce,\n          userRequest: req\n        })\n        this.actions.addOrUpdateAction(accountOpAction, actionPosition, actionExecutionType)\n      }\n    } else {\n      let actionType: 'dappRequest' | 'benzin' | 'signMessage' | 'switchAccount' = 'dappRequest'\n\n      if (req.action.kind === 'typedMessage' || req.action.kind === 'message') {\n        actionType = 'signMessage'\n\n        if (this.actions.visibleActionsQueue.find((a) => a.type === 'signMessage')) {\n          const msgReq = this.userRequests.find((uReq) => uReq.id === id)\n          if (!msgReq) return\n          msgReq.dappPromise?.reject(\n            ethErrors.provider.custom({\n              code: 1001,\n              message:\n                'Rejected: Please complete your pending message request before initiating a new one.'\n            })\n          )\n          this.userRequests.splice(this.userRequests.indexOf(msgReq), 1)\n          return\n        }\n      }\n      if (req.action.kind === 'benzin') actionType = 'benzin'\n      if (req.action.kind === 'switchAccount') actionType = 'switchAccount'\n\n      this.actions.addOrUpdateAction(\n        {\n          id,\n          type: actionType,\n          userRequest: req as UserRequest as never\n        },\n        actionPosition,\n        actionExecutionType\n      )\n    }\n\n    this.emitUpdate()\n  }\n\n  // @TODO allow this to remove multiple OR figure out a way to debounce re-estimations\n  // first one sounds more reasonable\n  // although the second one can't hurt and can help (or no debounce, just a one-at-a-time queue)\n  removeUserRequest(\n    id: UserRequest['id'],\n    options: {\n      shouldRemoveSwapAndBridgeRoute: boolean\n      shouldUpdateAccount?: boolean\n      shouldOpenNextRequest?: boolean\n    } = {\n      shouldRemoveSwapAndBridgeRoute: true,\n      shouldUpdateAccount: true,\n      shouldOpenNextRequest: true\n    }\n  ) {\n    const req = this.userRequests.find((uReq) => uReq.id === id)\n    if (!req) return\n\n    // remove from the request queue\n    this.userRequests.splice(this.userRequests.indexOf(req), 1)\n\n    // update the pending stuff to be signed\n    const { action, meta } = req\n    if (action.kind === 'calls') {\n      const network = this.networks.networks.find((net) => net.id === meta.networkId)!\n      const account = this.accounts.accounts.find((x) => x.addr === meta.accountAddr)\n      if (!account)\n        throw new Error(\n          `batchCallsFromUserRequests: tried to run for non-existent account ${meta.accountAddr}`\n        )\n\n      if (isSmartAccount(account)) {\n        const accountOpIndex = this.actions.actionsQueue.findIndex(\n          (a) => a.type === 'accountOp' && a.id === `${meta.accountAddr}-${meta.networkId}`\n        )\n        const accountOpAction = this.actions.actionsQueue[accountOpIndex] as\n          | AccountOpAction\n          | undefined\n        // accountOp has just been rejected or broadcasted\n        if (!accountOpAction) {\n          if (options.shouldUpdateAccount) this.updateSelectedAccountPortfolio(true, network)\n\n          if (this.swapAndBridge.activeRoutes.length && options.shouldRemoveSwapAndBridgeRoute) {\n            this.swapAndBridge.removeActiveRoute(meta.activeRouteId)\n          }\n          this.emitUpdate()\n          return\n        }\n\n        accountOpAction.accountOp.calls = this.#batchCallsFromUserRequests(\n          meta.accountAddr,\n          meta.networkId\n        )\n        if (accountOpAction.accountOp.calls.length) {\n          this.actions.addOrUpdateAction(accountOpAction)\n\n          if (this.signAccountOp && this.signAccountOp.fromActionId === accountOpAction.id) {\n            this.signAccountOp.update({ calls: accountOpAction.accountOp.calls, estimation: null })\n            this.estimateSignAccountOp()\n          }\n        } else {\n          if (this.signAccountOp && this.signAccountOp.fromActionId === accountOpAction.id) {\n            this.destroySignAccOp()\n          }\n          this.actions.removeAction(\n            `${meta.accountAddr}-${meta.networkId}`,\n            options.shouldOpenNextRequest\n          )\n\n          if (options.shouldUpdateAccount) this.updateSelectedAccountPortfolio(true, network)\n        }\n      } else {\n        if (this.signAccountOp && this.signAccountOp.fromActionId === req.id) {\n          this.destroySignAccOp()\n        }\n        this.actions.removeAction(id, options.shouldOpenNextRequest)\n\n        if (options.shouldUpdateAccount) this.updateSelectedAccountPortfolio(true, network)\n      }\n      if (this.swapAndBridge.activeRoutes.length && options.shouldRemoveSwapAndBridgeRoute) {\n        this.swapAndBridge.removeActiveRoute(meta.activeRouteId)\n      }\n    } else if (id === ACCOUNT_SWITCH_USER_REQUEST) {\n      const requestsToAdd = this.userRequestWaitingAccountSwitch.filter(\n        (r) => r.meta.accountAddr === this.selectedAccount.account!.addr\n      )\n      this.actions.removeAction(\n        id,\n        this.selectedAccount.account?.addr !== (action as any).params!.switchToAccountAddr\n      )\n      ;(async () => {\n        // eslint-disable-next-line no-restricted-syntax\n        for (const r of requestsToAdd) {\n          this.userRequestWaitingAccountSwitch.splice(this.userRequests.indexOf(r), 1)\n          // eslint-disable-next-line no-await-in-loop\n          await this.addUserRequest(r)\n        }\n      })()\n    } else {\n      this.actions.removeAction(id, options.shouldOpenNextRequest)\n    }\n    this.emitUpdate()\n  }\n\n  async addEntryPointAuthorization(\n    req: UserRequest,\n    network: Network,\n    accountState: AccountOnchainState,\n    actionExecutionType: ActionExecutionType = 'open-action-window'\n  ) {\n    if (\n      this.actions.visibleActionsQueue.find(\n        (a) =>\n          a.id === ENTRY_POINT_AUTHORIZATION_REQUEST_ID &&\n          (a as SignMessageAction).userRequest.meta.networkId === req.meta.networkId\n      )\n    ) {\n      this.actions.setCurrentActionById(ENTRY_POINT_AUTHORIZATION_REQUEST_ID)\n      return\n    }\n\n    const typedMessageAction = await getEntryPointAuthorization(\n      req.meta.accountAddr,\n      network.chainId,\n      BigInt(accountState.nonce)\n    )\n    await this.addUserRequest(\n      {\n        id: ENTRY_POINT_AUTHORIZATION_REQUEST_ID,\n        action: typedMessageAction,\n        meta: {\n          isSignAction: true,\n          accountAddr: req.meta.accountAddr,\n          networkId: req.meta.networkId\n        },\n        session: req.session,\n        dappPromise: req?.dappPromise\n          ? { reject: req?.dappPromise?.reject, resolve: () => {} }\n          : undefined\n      } as SignUserRequest,\n      'first',\n      actionExecutionType\n    )\n  }\n\n  async addNetwork(network: AddNetworkRequestParams) {\n    await this.networks.addNetwork(network)\n    await this.updateSelectedAccountPortfolio()\n  }\n\n  async removeNetwork(id: NetworkId) {\n    await this.networks.removeNetwork(id)\n    this.portfolio.removeNetworkData(id)\n    this.defiPositions.removeNetworkData(id)\n    this.accountAdder.removeNetworkData(id)\n  }\n\n  async resolveAccountOpAction(data: any, actionId: AccountOpAction['id']) {\n    const accountOpAction = this.actions.actionsQueue.find((a) => a.id === actionId)\n    if (!accountOpAction) return\n\n    const { accountOp } = accountOpAction as AccountOpAction\n    const network = this.networks.networks.find((n) => n.id === accountOp.networkId)\n\n    if (!network) return\n\n    const meta: SignUserRequest['meta'] = {\n      isSignAction: true,\n      accountAddr: accountOp.accountAddr,\n      chainId: network.chainId,\n      networkId: '',\n      txnId: null,\n      userOpHash: null\n    }\n    if (data.submittedAccountOp) {\n      // can be undefined, check submittedAccountOp.ts\n      meta.txnId = data.submittedAccountOp.txnId\n\n      meta.identifiedBy = data.submittedAccountOp.identifiedBy\n      meta.submittedAccountOp = data.submittedAccountOp\n    }\n\n    const benzinUserRequest: SignUserRequest = {\n      id: new Date().getTime(),\n      action: { kind: 'benzin' },\n      meta\n    }\n    await this.addUserRequest(benzinUserRequest, 'first')\n\n    this.actions.removeAction(actionId)\n\n    // handle wallet_sendCalls before pollTxnId as 1) it's faster\n    // 2) the identifier is different\n    // eslint-disable-next-line no-restricted-syntax\n    for (const call of accountOp.calls) {\n      const walletSendCallsUserReq = this.userRequests.find(\n        (r) => r.id === call.fromUserRequestId && r.meta.isWalletSendCalls\n      )\n      if (walletSendCallsUserReq) {\n        walletSendCallsUserReq.dappPromise?.resolve({\n          hash: getDappIdentifier(data.submittedAccountOp)\n        })\n\n        // eslint-disable-next-line no-await-in-loop\n        this.removeUserRequest(walletSendCallsUserReq.id, {\n          shouldRemoveSwapAndBridgeRoute: false,\n          // Since `resolveAccountOpAction` is invoked only when we broadcast a transaction,\n          // we don't want to update the account portfolio immediately, as we would lose the simulation.\n          // The simulation is required to calculate the pending badges (see: calculatePendingAmounts()).\n          // Once the transaction is confirmed, delayed, or the user manually refreshes the portfolio,\n          // the account will be updated automatically.\n          shouldUpdateAccount: false\n        })\n      }\n    }\n\n    // Note: this may take a while!\n    const txnId = await pollTxnId(\n      data.submittedAccountOp.identifiedBy,\n      network,\n      this.fetch,\n      this.callRelayer\n    )\n\n    // eslint-disable-next-line no-restricted-syntax\n    for (const call of accountOp.calls) {\n      const uReq = this.userRequests.find((r) => r.id === call.fromUserRequestId)\n      if (uReq) {\n        if (txnId) {\n          uReq.dappPromise?.resolve({ hash: txnId })\n        } else {\n          uReq.dappPromise?.reject(\n            ethErrors.rpc.transactionRejected({\n              message: 'Transaction rejected by the bundler'\n            })\n          )\n        }\n\n        // eslint-disable-next-line no-await-in-loop\n        this.removeUserRequest(uReq.id, {\n          shouldRemoveSwapAndBridgeRoute: false,\n          // Since `resolveAccountOpAction` is invoked only when we broadcast a transaction,\n          // we don't want to update the account portfolio immediately, as we would lose the simulation.\n          // The simulation is required to calculate the pending badges (see: calculatePendingAmounts()).\n          // Once the transaction is confirmed, delayed, or the user manually refreshes the portfolio,\n          // the account will be updated automatically.\n          shouldUpdateAccount: false\n        })\n      }\n    }\n\n    this.emitUpdate()\n  }\n\n  rejectAccountOpAction(\n    err: string,\n    actionId: AccountOpAction['id'],\n    shouldOpenNextAction: boolean\n  ) {\n    const accountOpAction = this.actions.actionsQueue.find((a) => a.id === actionId)\n    if (!accountOpAction) return\n\n    const { accountOp, id } = accountOpAction as AccountOpAction\n\n    if (this.signAccountOp && this.signAccountOp.fromActionId === id) {\n      this.destroySignAccOp()\n    }\n    this.actions.removeAction(actionId, shouldOpenNextAction)\n    // eslint-disable-next-line no-restricted-syntax\n    for (const call of accountOp.calls) {\n      if (call.fromUserRequestId) this.rejectUserRequest(err, call.fromUserRequestId)\n    }\n\n    this.emitUpdate()\n  }\n\n  async #updateGasPrice() {\n    await this.#initialLoadPromise\n\n    // if there's no signAccountOp initialized, we don't want to fetch gas\n    const accOp = this.signAccountOp?.accountOp ?? null\n    if (!accOp) return undefined\n\n    const network = this.networks.networks.find((net) => net.id === accOp.networkId)\n    if (!network) return undefined // shouldn't happen\n\n    const account = this.accounts.accounts.find((x) => x.addr === accOp.accountAddr)\n    if (!account) return undefined // shouldn't happen\n\n    const is4337 = isErc4337Broadcast(\n      account,\n      network,\n      this.accounts.accountStates[accOp.accountAddr][accOp.networkId]\n    )\n    const bundler = this.signAccountOp\n      ? this.signAccountOp.bundlerSwitcher.getBundler()\n      : getDefaultBundler(network)\n    const bundlerFetch = async () => {\n      if (!is4337) return null\n      const errorCallback = (e: ErrorRef) => {\n        if (!this.signAccountOp) return\n        this.emitError(e)\n      }\n      return bundler.fetchGasPrices(network, errorCallback).catch((e) => {\n        this.emitError({\n          level: 'silent',\n          message: \"Failed to fetch the bundler's gas price\",\n          error: e\n        })\n      })\n    }\n    const [gasPriceData, bundlerGas] = await Promise.all([\n      getGasPriceRecommendations(this.providers.providers[network.id], network).catch((e) => {\n        this.emitError({\n          level: 'major',\n          message: `Unable to get gas price for ${network.id}`,\n          error: new Error(`Failed to fetch gas price: ${e?.message}`)\n        })\n        return null\n      }),\n      bundlerFetch()\n    ])\n\n    if (gasPriceData && gasPriceData.gasPrice) this.gasPrices[network.id] = gasPriceData.gasPrice\n    if (bundlerGas)\n      this.bundlerGasPrices[network.id] = { speeds: bundlerGas, bundler: bundler.getName() }\n\n    return {\n      blockGasLimit: gasPriceData?.blockGasLimit\n    }\n  }\n\n  async updateSignAccountOpGasPrice() {\n    if (!this.signAccountOp) return\n\n    const accOp = this.signAccountOp.accountOp\n    const gasData = await this.#updateGasPrice()\n\n    // there's a chance signAccountOp gets destroyed between the time\n    // the first \"if (!this.signAccountOp) return\" is performed and\n    // the time we get here. To prevent issues, we check one more time\n    if (!this.signAccountOp) return\n\n    this.signAccountOp.update({\n      gasPrices: this.gasPrices[accOp.networkId],\n      bundlerGasPrices: this.bundlerGasPrices[accOp.networkId],\n      blockGasLimit: gasData && gasData.blockGasLimit ? gasData.blockGasLimit : undefined\n    })\n    this.emitUpdate()\n  }\n\n  // @TODO: protect this from race conditions/simultanous executions\n  async estimateSignAccountOp() {\n    try {\n      if (!this.signAccountOp) return\n\n      // make a local copy to avoid updating the main reference\n      const localAccountOp: AccountOp = { ...this.signAccountOp.accountOp }\n\n      await this.#initialLoadPromise\n      // new accountOps should have spoof signatures so that they can be easily simulated\n      // this is not used by the Estimator, because it iterates through all associatedKeys and\n      // it knows which ones are authenticated, and it can generate it's own spoofSig\n      // @TODO\n      // accountOp.signature = `${}03`\n\n      // TODO check if needed data in accountStates are available\n      // this.accountStates[accountOp.accountAddr][accountOp.networkId].\n      const account = this.accounts.accounts.find((x) => x.addr === localAccountOp.accountAddr)\n\n      // Here, we list EOA accounts for which you can also obtain an estimation of the AccountOp payment.\n      // In the case of operating with a smart account (an account with creation code), all other EOAs can pay the fee.\n      //\n      // If the current account is an EOA, only this account can pay the fee,\n      // and there's no need for checking other EOA accounts native balances.\n      // This is already handled and estimated as a fee option in the estimate library, which is why we pass an empty array here.\n      //\n      // we're excluding the view only accounts from the natives to check\n      // in all cases EXCEPT the case where we're making an estimation for\n      // the view only account itself. In all other, view only accounts options\n      // should not be present as the user cannot pay the fee with them (no key)\n      const nativeToCheck = account?.creation\n        ? this.accounts.accounts\n            .filter(\n              (acc) =>\n                !isSmartAccount(acc) &&\n                (acc.addr === localAccountOp.accountAddr ||\n                  !getIsViewOnly(this.keystore.keys, acc.associatedKeys))\n            )\n            .map((acc) => acc.addr)\n        : []\n\n      if (!account)\n        throw new Error(\n          `estimateSignAccountOp: ${localAccountOp.accountAddr}: account does not exist`\n        )\n      const network = this.networks.networks.find((x) => x.id === localAccountOp.networkId)\n      if (!network)\n        throw new Error(\n          `estimateSignAccountOp: ${localAccountOp.networkId}: network does not exist`\n        )\n\n      // Take the fee tokens from two places: the user's tokens and his gasTank\n      // The gasTank tokens participate on each network as they belong everywhere\n      // NOTE: at some point we should check all the \"?\" signs below and if\n      // an error pops out, we should notify the user about it\n      const networkFeeTokens =\n        this.portfolio.getLatestPortfolioState(localAccountOp.accountAddr)?.[\n          localAccountOp.networkId\n        ]?.result?.feeTokens ?? []\n      const gasTankFeeTokens =\n        this.portfolio.getLatestPortfolioState(localAccountOp.accountAddr)?.gasTank?.result\n          ?.tokens ?? []\n\n      const feeTokens =\n        [...networkFeeTokens, ...gasTankFeeTokens].filter((t) => t.flags.isFeeToken) || []\n\n      // can be read from the UI\n      const humanization = humanizeAccountOp(localAccountOp, {})\n      humanization.forEach((call: any) => {\n        if (!call.fullVisualization) return\n\n        call.fullVisualization.forEach(async (visualization: any) => {\n          if (visualization.type !== 'address' || !visualization.address) return\n\n          await this.domains.reverseLookup(visualization.address)\n        })\n      })\n\n      const additionalHints: GetOptions['additionalErc20Hints'] = humanization\n        .map((call: any) =>\n          !call.fullVisualization\n            ? []\n            : call.fullVisualization.map((vis: any) =>\n                vis.address && isAddress(vis.address) ? getAddress(vis.address) : ''\n              )\n        )\n        .flat()\n        .filter((x: any) => isAddress(x))\n\n      this.portfolio.addTokensToBeLearned(additionalHints, network.id)\n\n      const accountOpsToBeSimulatedByNetwork = getAccountOpsForSimulation(\n        account,\n        this.actions.visibleActionsQueue,\n        network,\n        this.signAccountOp.accountOp\n      )\n\n      const [, estimation] = await Promise.all([\n        // NOTE: we are not emitting an update here because the portfolio controller will do that\n        // NOTE: the portfolio controller has it's own logic of constructing/caching providers, this is intentional, as\n        // it may have different needs\n        this.portfolio.updateSelectedAccount(\n          localAccountOp.accountAddr,\n          network,\n          accountOpsToBeSimulatedByNetwork,\n          { forceUpdate: true }\n        ),\n        estimate(\n          this.providers.providers[localAccountOp.networkId],\n          network,\n          account,\n          localAccountOp,\n          this.accounts.accountStates,\n          nativeToCheck,\n          // @TODO - first time calling this, portfolio is still not loaded.\n          feeTokens,\n          (e: ErrorRef) => {\n            if (!this.signAccountOp) return\n            this.emitError(e)\n          },\n          this.signAccountOp.bundlerSwitcher,\n          {\n            is4337Broadcast: isErc4337Broadcast(\n              account,\n              network,\n              this.accounts.accountStates[localAccountOp.accountAddr][localAccountOp.networkId]\n            )\n          }\n        ).catch((e) => {\n          const { message } = getHumanReadableEstimationError(e)\n\n          this.emitError({\n            level: 'major',\n            message,\n            error: e\n          })\n          return null\n        })\n      ])\n\n      // @race\n      // if the signAccountOp has been deleted, don't continue as the request has already finished\n      if (!this.signAccountOp) return\n\n      if (estimation) {\n        const currentNonceAhead =\n          BigInt(estimation.currentAccountNonce) > (localAccountOp.nonce ?? 0n)\n\n        // if the nonce from the estimation is bigger than the one in localAccountOp,\n        // override the accountState and accountOp with the newly detected nonce\n        if (currentNonceAhead) {\n          localAccountOp.nonce = BigInt(estimation.currentAccountNonce)\n          this.signAccountOp.accountOp.nonce = BigInt(estimation.currentAccountNonce)\n\n          if (this.accounts.accountStates?.[localAccountOp.accountAddr]?.[localAccountOp.networkId])\n            this.accounts.accountStates[localAccountOp.accountAddr][\n              localAccountOp.networkId\n            ].nonce = localAccountOp.nonce\n        }\n\n        const hasNonceDiscrepancy = estimation.error?.cause === 'NONCE_FAILURE'\n        const lastTxn = this.activity.getLastTxn(localAccountOp.networkId)\n        const SAHasOldNonceOnARelayerNetwork =\n          isSmartAccount(account) &&\n          !network.erc4337.enabled &&\n          lastTxn &&\n          localAccountOp.nonce === lastTxn.nonce &&\n          lastTxn.success &&\n          lastTxn.status === AccountOpStatus.Success\n\n        if (hasNonceDiscrepancy || SAHasOldNonceOnARelayerNetwork) {\n          this.accounts\n            .updateAccountState(localAccountOp.accountAddr, 'pending', [localAccountOp.networkId])\n            .then(() => this.estimateSignAccountOp())\n            .catch((error) =>\n              this.emitError({\n                level: 'major',\n                message:\n                  'Failed to refetch the account state. Please try again to initialize your transaction',\n                error\n              })\n            )\n          return\n        }\n      }\n\n      if (\n        estimation &&\n        estimation.nonFatalErrors &&\n        estimation.nonFatalErrors.find((err) => err.cause === '4337_INVALID_NONCE') &&\n        this.accounts.accountStates?.[localAccountOp.accountAddr]?.[localAccountOp.networkId]\n      ) {\n        this.accounts\n          .updateAccountState(localAccountOp.accountAddr, 'pending', [localAccountOp.networkId])\n          .then(() => this.estimateSignAccountOp())\n          .catch((error) =>\n            this.emitError({\n              level: 'major',\n              message:\n                'Failed to refetch the account state. Please try again to initialize your transaction',\n              error\n            })\n          )\n\n        // returning here means estimation will not be set => better UX as\n        // the user will not see the warning but instead\n        // just wait for the new estimation\n        return\n      }\n\n      // check if an RBF should be applied for the incoming transaction\n      // for SA conditions are: take the last broadcast but not confirmed accOp\n      // and check if the nonce is the same as the current nonce (non 4337 txns)\n      // for EOA: check the last broadcast but not confirmed txn across SA\n      // as the EOA could've broadcast a txn there + it's own history and\n      // compare the highest found nonce\n      const rbfAccountOps: { [key: string]: SubmittedAccountOp | null } = {}\n      nativeToCheck.push(localAccountOp.accountAddr)\n      nativeToCheck.forEach((accId) => {\n        const notConfirmedOp = this.activity.getNotConfirmedOpIfAny(accId, localAccountOp.networkId)\n\n        // the accountState of the nativeToCheck may no be initialized\n        const currentNonce =\n          this.accounts.accountStates &&\n          this.accounts.accountStates[accId] &&\n          this.accounts.accountStates[accId][localAccountOp.networkId]\n            ? this.accounts.accountStates[accId][localAccountOp.networkId].nonce\n            : null\n\n        rbfAccountOps[accId] =\n          notConfirmedOp &&\n          !notConfirmedOp.gasFeePayment?.isERC4337 &&\n          currentNonce &&\n          currentNonce === notConfirmedOp.nonce\n            ? notConfirmedOp\n            : null\n      })\n\n      // if there's an estimation error, override the pending results\n      if (estimation && estimation.error) {\n        this.portfolio.overridePendingResults(localAccountOp)\n      }\n      // update the signAccountOp controller once estimation finishes;\n      // this eliminates the infinite loading bug if the estimation comes slower\n      if (this.signAccountOp && estimation) {\n        this.signAccountOp.update({ estimation, rbfAccountOps })\n      }\n    } catch (error: any) {\n      this.signAccountOp?.calculateWarnings()\n      this.emitError({\n        level: 'silent',\n        message: 'Estimation error',\n        error\n      })\n    }\n  }\n\n  /**\n   * There are 4 ways to broadcast an AccountOp:\n   *   1. For basic accounts (EOA), there is only one way to do that. After\n   *   signing the transaction, the serialized signed transaction object gets\n   *   send to the network.\n   *   2. For smart accounts, when EOA pays the fee. Two signatures are needed\n   *   for this. The first one is the signature of the AccountOp itself. The\n   *   second one is the signature of the transaction that will be executed\n   *   by the smart account.\n   *   3. For smart accounts that broadcast the ERC-4337 way.\n   *   4. for smart accounts, when the Relayer does the broadcast.\n   *\n   */\n  async #broadcastSignedAccountOp() {\n    const accountOp = this.signAccountOp?.accountOp\n    const estimation = this.signAccountOp?.estimation\n    const actionId = this.signAccountOp?.fromActionId\n    const bundlerSwitcher = this.signAccountOp?.bundlerSwitcher\n    const contactSupportPrompt = 'Please try again or contact support if the problem persists.'\n\n    if (\n      !accountOp ||\n      !estimation ||\n      !actionId ||\n      !accountOp.signingKeyAddr ||\n      !accountOp.signingKeyType ||\n      !accountOp.signature ||\n      !bundlerSwitcher\n    ) {\n      const message = `Missing mandatory transaction details. ${contactSupportPrompt}`\n      return this.throwBroadcastAccountOp({ message })\n    }\n\n    const provider = this.providers.providers[accountOp.networkId]\n    const account = this.accounts.accounts.find((acc) => acc.addr === accountOp.accountAddr)\n    const network = this.networks.networks.find((n) => n.id === accountOp.networkId)\n\n    if (!provider) {\n      const networkName = network?.name || `network with id ${accountOp.networkId}`\n      const message = `Provider for ${networkName} not found. ${contactSupportPrompt}`\n      return this.throwBroadcastAccountOp({ message })\n    }\n\n    if (!account) {\n      const addr = shortenAddress(accountOp.accountAddr, 13)\n      const message = `Account with address ${addr} not found. ${contactSupportPrompt}`\n      return this.throwBroadcastAccountOp({ message })\n    }\n\n    if (!network) {\n      const message = `Network with id ${accountOp.networkId} not found. ${contactSupportPrompt}`\n      return this.throwBroadcastAccountOp({ message })\n    }\n\n    const accountState = this.accounts.accountStates[accountOp.accountAddr][accountOp.networkId]\n    let transactionRes: {\n      txnId?: string\n      nonce: number\n      identifiedBy: AccountOpIdentifiedBy\n    } | null = null\n\n    // Basic account (EOA)\n    if (!isSmartAccount(account)) {\n      try {\n        const feePayerKeys = this.keystore.keys.filter(\n          (key) => key.addr === accountOp.gasFeePayment!.paidBy\n        )\n        const feePayerKey =\n          // Temporarily prioritize the key with the same type as the signing key.\n          // TODO: Implement a way to choose the key type to broadcast with.\n          feePayerKeys.find((key) => key.type === accountOp.signingKeyType) || feePayerKeys[0]\n        if (!feePayerKey) {\n          const missingKeyAddr = shortenAddress(accountOp.gasFeePayment!.paidBy, 13)\n          const accAddr = shortenAddress(accountOp.accountAddr, 13)\n          const message = `Key with address ${missingKeyAddr} for account with address ${accAddr} not found. ${contactSupportPrompt}`\n          return await this.throwBroadcastAccountOp({ message, accountState })\n        }\n        this.feePayerKey = feePayerKey\n        this.emitUpdate()\n\n        const signer = await this.keystore.getSigner(feePayerKey.addr, feePayerKey.type)\n        if (signer.init) signer.init(this.#externalSignerControllers[feePayerKey.type])\n\n        const gasFeePayment = accountOp.gasFeePayment!\n        const { to, value, data } = accountOp.calls[0]\n        const rawTxn: TxnRequest = {\n          to: to ?? undefined,\n          value,\n          data,\n          chainId: network!.chainId,\n          nonce: await provider.getTransactionCount(accountOp.accountAddr),\n          gasLimit: gasFeePayment.simulatedGasLimit\n        }\n\n        // if it's eip1559, send it as such. If no, go to legacy\n        if (gasFeePayment.maxPriorityFeePerGas !== undefined) {\n          rawTxn.maxFeePerGas = gasFeePayment.gasPrice\n          rawTxn.maxPriorityFeePerGas = gasFeePayment.maxPriorityFeePerGas\n          rawTxn.type = 2\n        } else {\n          rawTxn.gasPrice = gasFeePayment.gasPrice\n          rawTxn.type = 0\n        }\n\n        const signedTxn = await signer.signRawTransaction(rawTxn)\n        const broadcastRes = await provider.broadcastTransaction(signedTxn)\n        transactionRes = {\n          txnId: broadcastRes.hash,\n          nonce: broadcastRes.nonce,\n          identifiedBy: {\n            type: 'Transaction',\n            identifier: broadcastRes.hash\n          }\n        }\n      } catch (error: any) {\n        return this.throwBroadcastAccountOp({ error, accountState })\n      }\n    }\n    // Smart account but EOA pays the fee\n    else if (\n      account.creation &&\n      accountOp.gasFeePayment &&\n      accountOp.gasFeePayment.paidBy !== account.addr\n    ) {\n      const feePayerKeys = this.keystore.keys.filter(\n        (key) => key.addr === accountOp.gasFeePayment!.paidBy\n      )\n      const feePayerKey =\n        // Temporarily prioritize the key with the same type as the signing key.\n        // TODO: Implement a way to choose the key type to broadcast with.\n        feePayerKeys.find((key) => key.type === accountOp.signingKeyType) || feePayerKeys[0]\n      if (!feePayerKey) {\n        const missingKeyAddr = shortenAddress(accountOp.gasFeePayment!.paidBy, 13)\n        const accAddr = shortenAddress(accountOp.accountAddr, 13)\n        const message = `Key with address ${missingKeyAddr} for account with address ${accAddr} not found.`\n\n        return this.throwBroadcastAccountOp({ message, accountState })\n      }\n\n      this.feePayerKey = feePayerKey\n      this.emitUpdate()\n\n      let data\n      let to\n      if (accountState.isDeployed) {\n        const ambireAccount = new Interface(AmbireAccount.abi)\n        to = accountOp.accountAddr\n        data = ambireAccount.encodeFunctionData('execute', [\n          getSignableCalls(accountOp),\n          accountOp.signature\n        ])\n      } else {\n        const ambireFactory = new Interface(AmbireFactory.abi)\n        to = account.creation.factoryAddr\n        data = ambireFactory.encodeFunctionData('deployAndExecute', [\n          account.creation.bytecode,\n          account.creation.salt,\n          getSignableCalls(accountOp),\n          accountOp.signature\n        ])\n      }\n\n      try {\n        const signer = await this.keystore.getSigner(feePayerKey.addr, feePayerKey.type)\n        if (signer.init) signer.init(this.#externalSignerControllers[feePayerKey.type])\n\n        const rawTxn: TxnRequest = {\n          to,\n          data,\n          // We ultimately do a smart contract call, which means we don't need\n          // to send any `value` from the EOA address. The actual `value` will\n          // get taken from the value encoded in the `data` field.\n          value: BigInt(0),\n          chainId: network.chainId,\n          nonce: await provider.getTransactionCount(accountOp.gasFeePayment!.paidBy),\n          gasLimit: accountOp.gasFeePayment.simulatedGasLimit\n        }\n\n        if (accountOp.gasFeePayment.maxPriorityFeePerGas !== undefined) {\n          rawTxn.maxFeePerGas = accountOp.gasFeePayment.gasPrice\n          rawTxn.maxPriorityFeePerGas = accountOp.gasFeePayment.maxPriorityFeePerGas\n          rawTxn.type = 2\n        } else {\n          rawTxn.gasPrice = accountOp.gasFeePayment.gasPrice\n          rawTxn.type = 0\n        }\n\n        const signedTxn = await signer.signRawTransaction(rawTxn)\n        const broadcastRes = await provider.broadcastTransaction(signedTxn)\n        transactionRes = {\n          txnId: broadcastRes.hash,\n          nonce: broadcastRes.nonce,\n          identifiedBy: {\n            type: 'Transaction',\n            identifier: broadcastRes.hash\n          }\n        }\n      } catch (error: any) {\n        return this.throwBroadcastAccountOp({ error, accountState })\n      }\n    }\n    // Smart account, the ERC-4337 way\n    else if (accountOp.gasFeePayment && accountOp.gasFeePayment.isERC4337) {\n      const userOperation = accountOp.asUserOperation\n      if (!userOperation) {\n        const accAddr = shortenAddress(accountOp.accountAddr, 13)\n        const message = `Trying to broadcast an ERC-4337 request but userOperation is not set for the account with address ${accAddr}`\n        return this.throwBroadcastAccountOp({ message, accountState })\n      }\n\n      // broadcast through bundler's service\n      let userOperationHash\n      const bundler = bundlerSwitcher.getBundler()\n      try {\n        userOperationHash = await bundler.broadcast(userOperation, network)\n      } catch (e: any) {\n        let retryMsg\n\n        // if the signAccountOp is still active (it should be)\n        // try to switch the bundler and ask the user to try again\n        // TODO: explore more error case where we switch the bundler\n        if (this.signAccountOp) {\n          const decodedError = bundler.decodeBundlerError(e)\n          const humanReadable = getHumanReadableBroadcastError(decodedError)\n          const switcher = this.signAccountOp.bundlerSwitcher\n          this.signAccountOp.updateStatus(SigningStatus.ReadyToSign)\n\n          if (switcher.canSwitch(humanReadable)) {\n            switcher.switch()\n            this.estimateSignAccountOp()\n            this.#updateGasPrice()\n            retryMsg = 'Broadcast failed because bundler was down. Please try again'\n          }\n        }\n\n        return this.throwBroadcastAccountOp({\n          error: e,\n          accountState,\n          provider,\n          network,\n          message: retryMsg\n        })\n      }\n      if (!userOperationHash) {\n        return this.throwBroadcastAccountOp({\n          message: 'Bundler broadcast failed. Please try broadcasting by an EOA or contact support.'\n        })\n      }\n\n      transactionRes = {\n        nonce: Number(userOperation.nonce),\n        identifiedBy: {\n          type: 'UserOperation',\n          identifier: userOperationHash,\n          bundler: bundler.getName()\n        }\n      }\n    }\n    // Smart account, the Relayer way\n    else {\n      try {\n        const body = {\n          gasLimit: Number(accountOp.gasFeePayment!.simulatedGasLimit),\n          txns: getSignableCalls(accountOp),\n          signature: accountOp.signature,\n          signer: { address: accountOp.signingKeyAddr },\n          nonce: Number(accountOp.nonce)\n        }\n        const additionalRelayerNetwork = relayerAdditionalNetworks.find(\n          (net) => net.chainId === network.chainId\n        )\n        const relayerNetworkId = additionalRelayerNetwork\n          ? additionalRelayerNetwork.name\n          : accountOp.networkId\n        const response = await this.callRelayer(\n          `/identity/${accountOp.accountAddr}/${relayerNetworkId}/submit`,\n          'POST',\n          body\n        )\n        if (!response.success) throw new Error(response.message)\n\n        transactionRes = {\n          txnId: response.txId,\n          nonce: Number(accountOp.nonce),\n          identifiedBy: {\n            type: 'Relayer',\n            identifier: response.id\n          }\n        }\n      } catch (error: any) {\n        return this.throwBroadcastAccountOp({ error, accountState, isRelayer: true })\n      }\n    }\n\n    if (!transactionRes)\n      return this.throwBroadcastAccountOp({\n        message: 'No transaction response received after being broadcasted.'\n      })\n\n    this.portfolio.markSimulationAsBroadcasted(account.addr, network.id)\n\n    const submittedAccountOp: SubmittedAccountOp = {\n      ...accountOp,\n      status: AccountOpStatus.BroadcastedButNotConfirmed,\n      txnId: transactionRes.txnId,\n      nonce: BigInt(transactionRes.nonce),\n      identifiedBy: transactionRes.identifiedBy,\n      timestamp: new Date().getTime(),\n      isSingletonDeploy: !!accountOp.calls.find(\n        (call) => call.to && getAddress(call.to) === SINGLETON\n      )\n    }\n    await this.activity.addAccountOp(submittedAccountOp)\n    this.swapAndBridge.handleUpdateActiveRouteOnSubmittedAccountOpStatusUpdate(submittedAccountOp)\n    await this.resolveAccountOpAction(\n      {\n        networkId: network.id,\n        isUserOp: !!accountOp?.asUserOperation,\n        submittedAccountOp\n      },\n      actionId\n    )\n    await this.#notificationManager.create({\n      title: 'Done!',\n      message: 'The transaction was successfully signed and broadcasted to the network.'\n    })\n    return Promise.resolve(submittedAccountOp)\n  }\n\n  // ! IMPORTANT !\n  // Banners that depend on async data from sub-controllers should be implemented\n  // in the sub-controllers themselves. This is because updates in the sub-controllers\n  // will not trigger emitUpdate in the MainController, therefore the banners will\n  // remain the same until a subsequent update in the MainController.\n  get banners(): Banner[] {\n    if (!this.selectedAccount.account || !this.networks.isInitialized) return []\n\n    const activeSwapAndBridgeRoutesForSelectedAccount = getActiveRoutesForAccount(\n      this.selectedAccount.account.addr,\n      this.swapAndBridge.activeRoutes\n    )\n    const swapAndBridgeRoutesPendingSignature = activeSwapAndBridgeRoutesForSelectedAccount.filter(\n      (r) => r.routeStatus === 'ready'\n    )\n\n    const accountOpBanners = getAccountOpBanners({\n      accountOpActionsByNetwork: getAccountOpActionsByNetwork(\n        this.selectedAccount.account.addr,\n        this.actions.actionsQueue\n      ),\n      selectedAccount: this.selectedAccount.account.addr,\n      accounts: this.accounts.accounts,\n      networks: this.networks.networks,\n      swapAndBridgeRoutesPendingSignature\n    })\n\n    return [...accountOpBanners]\n  }\n\n  // Technically this is an anti-pattern, but it's the only way to\n  // test the error handling in the method.\n  protected throwBroadcastAccountOp({\n    message: humanReadableMessage,\n    error: _err,\n    accountState,\n    isRelayer = false,\n    provider = undefined,\n    network = undefined\n  }: {\n    message?: string\n    error?: Error\n    accountState?: AccountOnchainState\n    isRelayer?: boolean\n    provider?: RPCProvider\n    network?: Network\n  }) {\n    const originalMessage = _err?.message\n    let message = humanReadableMessage\n    let isReplacementFeeLow = false\n\n    if (originalMessage) {\n      if (originalMessage.includes('replacement fee too low')) {\n        message =\n          'Replacement fee is insufficient. Fees have been automatically adjusted so please try submitting your transaction again.'\n        isReplacementFeeLow = true\n        this.estimateSignAccountOp()\n      } else if (\n        originalMessage.includes('pimlico_getUserOperationGasPrice') ||\n        originalMessage.includes('preVerificationGas')\n      ) {\n        message =\n          'Transaction fee underpriced. Please select a higher transaction speed and try again'\n        this.updateSignAccountOpGasPrice()\n      } else if (originalMessage.includes('INSUFFICIENT_PRIVILEGE')) {\n        message = `Signer key not supported on this network.${\n          !accountState?.isV2\n            ? 'You can add/change signers from the web wallet or contact support.'\n            : 'Please contact support.'\n        }`\n      } else if (originalMessage.includes('underpriced')) {\n        message =\n          'Transaction fee underpriced. Please select a higher transaction speed and try again'\n        this.updateSignAccountOpGasPrice()\n        this.estimateSignAccountOp()\n      } else if (originalMessage.includes('Failed to fetch') && isRelayer) {\n        message =\n          'Currently, the Ambire relayer seems to be down. Please try again a few moments later or broadcast with a Basic Account'\n      }\n    }\n\n    if (!message) {\n      message = getHumanReadableBroadcastError(_err || new Error('')).message\n\n      // if the message states that the paymaster doesn't have sufficient amount,\n      // add it to the failedPaymasters to disable it until a top-up is made\n      if (message.includes(insufficientPaymasterFunds) && provider && network) {\n        failedPaymasters.addInsufficientFunds(provider, network).then(() => {\n          this.estimateSignAccountOp()\n        })\n      }\n    }\n\n    // To enable another try for signing in case of broadcast fail\n    // broadcast is called in the FE only after successful signing\n    this.signAccountOp?.updateStatus(SigningStatus.ReadyToSign, isReplacementFeeLow)\n    this.feePayerKey = null\n\n    return Promise.reject(\n      new EmittableError({ level: 'major', message, error: _err || new Error(message) })\n    )\n  }\n\n  get isSignRequestStillActive(): boolean {\n    if (!this.signAccountOp) return false\n\n    return !!this.actions.actionsQueue.find((a) => a.id === this.signAccountOp!.fromActionId)\n  }\n\n  // includes the getters in the stringified instance\n  toJSON() {\n    return {\n      ...this,\n      ...super.toJSON(),\n      banners: this.banners,\n      isSignRequestStillActive: this.isSignRequestStillActive\n    }\n  }\n}\n"]}