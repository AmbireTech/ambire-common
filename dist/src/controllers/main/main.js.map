{"version":3,"file":"main.js","sourceRoot":"","sources":["../../../../src/controllers/main/main.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/brace-style */\nimport { ethErrors } from 'eth-rpc-errors'\nimport { getAddress, getBigInt } from 'ethers'\n\nimport AmbireAccount7702 from '../../../contracts/compiled/AmbireAccount7702.json'\nimport EmittableError from '../../classes/EmittableError'\nimport SwapAndBridgeError from '../../classes/SwapAndBridgeError'\nimport { ORIGINS_WHITELISTED_TO_ALL_ACCOUNTS } from '../../consts/dappCommunication'\nimport { AMBIRE_ACCOUNT_FACTORY, SINGLETON } from '../../consts/deploy'\nimport {\n  BIP44_LEDGER_DERIVATION_TEMPLATE,\n  BIP44_STANDARD_DERIVATION_TEMPLATE\n} from '../../consts/derivation'\nimport { Account, AccountId, AccountOnchainState } from '../../interfaces/account'\nimport { Banner } from '../../interfaces/banner'\nimport { DappProviderRequest } from '../../interfaces/dapp'\nimport { Fetch } from '../../interfaces/fetch'\nimport { Hex } from '../../interfaces/hex'\nimport { ExternalSignerControllers, Key, KeystoreSignerType } from '../../interfaces/keystore'\nimport { AddNetworkRequestParams, Network } from '../../interfaces/network'\nimport { NotificationManager } from '../../interfaces/notification'\nimport { Platform } from '../../interfaces/platform'\nimport { RPCProvider } from '../../interfaces/provider'\n/* eslint-disable @typescript-eslint/no-floating-promises */\nimport { TraceCallDiscoveryStatus } from '../../interfaces/signAccountOp'\nimport { Storage } from '../../interfaces/storage'\nimport {\n  SwapAndBridgeActiveRoute,\n  SwapAndBridgeSendTxRequest\n} from '../../interfaces/swapAndBridge'\nimport { Calls, DappUserRequest, SignUserRequest, UserRequest } from '../../interfaces/userRequest'\nimport { WindowManager } from '../../interfaces/window'\nimport {\n  getDefaultSelectedAccount,\n  isBasicAccount,\n  isSmartAccount\n} from '../../libs/account/account'\nimport { getBaseAccount } from '../../libs/account/getBaseAccount'\nimport { AccountOp, getSignableCalls } from '../../libs/accountOp/accountOp'\nimport {\n  AccountOpIdentifiedBy,\n  getDappIdentifier,\n  SubmittedAccountOp\n} from '../../libs/accountOp/submittedAccountOp'\nimport { AccountOpStatus, Call } from '../../libs/accountOp/types'\nimport {\n  dappRequestMethodToActionKind,\n  getAccountOpActionsByNetwork,\n  getAccountOpFromAction\n} from '../../libs/actions/actions'\nimport { getAccountOpBanners } from '../../libs/banners/banners'\nimport { BROADCAST_OPTIONS, buildRawTransaction } from '../../libs/broadcast/broadcast'\nimport { getAmbirePaymasterService, getPaymasterService } from '../../libs/erc7677/erc7677'\nimport { getHumanReadableBroadcastError } from '../../libs/errorHumanizer'\nimport { insufficientPaymasterFunds } from '../../libs/errorHumanizer/errors'\nimport {\n  ACCOUNT_SWITCH_USER_REQUEST,\n  buildSwitchAccountUserRequest,\n  getAccountOpsForSimulation,\n  makeAccountOpAction\n} from '../../libs/main/main'\nimport { relayerAdditionalNetworks } from '../../libs/networks/networks'\nimport { TokenResult } from '../../libs/portfolio/interfaces'\nimport { relayerCall } from '../../libs/relayerCall/relayerCall'\nimport { parse } from '../../libs/richJson/richJson'\nimport { isNetworkReady } from '../../libs/selectedAccount/selectedAccount'\nimport {\n  buildSwapAndBridgeUserRequests,\n  getActiveRoutesForAccount\n} from '../../libs/swapAndBridge/swapAndBridge'\nimport { debugTraceCall } from '../../libs/tracer/debugTraceCall'\nimport {\n  buildClaimWalletRequest,\n  buildMintVestingRequest,\n  buildTransferUserRequest\n} from '../../libs/transfer/userRequest'\n/* eslint-disable no-underscore-dangle */\nimport { LiFiAPI } from '../../services/lifi/api'\nimport { paymasterFactory } from '../../services/paymaster'\nimport { failedPaymasters } from '../../services/paymaster/FailedPaymasters'\nimport shortenAddress from '../../utils/shortenAddress'\n/* eslint-disable no-await-in-loop */\nimport { generateUuid } from '../../utils/uuid'\nimport wait from '../../utils/wait'\nimport { AccountPickerController } from '../accountPicker/accountPicker'\nimport { AccountsController } from '../accounts/accounts'\nimport {\n  AccountOpAction,\n  ActionExecutionType,\n  ActionPosition,\n  ActionsController\n} from '../actions/actions'\nimport { ActivityController } from '../activity/activity'\nimport { AddressBookController } from '../addressBook/addressBook'\nimport { DappsController } from '../dapps/dapps'\nimport { DefiPositionsController } from '../defiPositions/defiPositions'\nimport { DomainsController } from '../domains/domains'\nimport { EmailVaultController } from '../emailVault/emailVault'\nimport { EstimationStatus } from '../estimation/types'\nimport EventEmitter, { ErrorRef, Statuses } from '../eventEmitter/eventEmitter'\nimport { FeatureFlagsController } from '../featureFlags/featureFlags'\nimport { InviteController } from '../invite/invite'\nimport { KeystoreController } from '../keystore/keystore'\nimport { NetworksController } from '../networks/networks'\nimport { PhishingController } from '../phishing/phishing'\nimport { PortfolioController } from '../portfolio/portfolio'\nimport { ProvidersController } from '../providers/providers'\nimport { SelectedAccountController } from '../selectedAccount/selectedAccount'\nimport {\n  SIGN_ACCOUNT_OP_MAIN,\n  SIGN_ACCOUNT_OP_SWAP,\n  SignAccountOpType\n} from '../signAccountOp/helper'\nimport { SignAccountOpController, SigningStatus } from '../signAccountOp/signAccountOp'\nimport { SignMessageController } from '../signMessage/signMessage'\nimport { StorageController } from '../storage/storage'\nimport { SwapAndBridgeController, SwapAndBridgeFormStatus } from '../swapAndBridge/swapAndBridge'\n\nconst STATUS_WRAPPED_METHODS = {\n  removeAccount: 'INITIAL',\n  handleAccountPickerInitLedger: 'INITIAL',\n  handleAccountPickerInitTrezor: 'INITIAL',\n  handleAccountPickerInitLattice: 'INITIAL',\n  importSmartAccountFromDefaultSeed: 'INITIAL',\n  buildSwapAndBridgeUserRequest: 'INITIAL',\n  selectAccount: 'INITIAL',\n  signAndBroadcastAccountOp: 'INITIAL'\n} as const\n\ntype CustomStatuses = {\n  signAndBroadcastAccountOp: 'INITIAL' | 'SIGNING' | 'BROADCASTING' | 'SUCCESS' | 'ERROR'\n}\n\nexport class MainController extends EventEmitter {\n  #storageAPI: Storage\n\n  storage: StorageController\n\n  fetch: Fetch\n\n  // Holds the initial load promise, so that one can wait until it completes\n  #initialLoadPromise: Promise<void>\n\n  callRelayer: Function\n\n  isReady: boolean = false\n\n  featureFlags: FeatureFlagsController\n\n  invite: InviteController\n\n  keystore: KeystoreController\n\n  /**\n   * Hardware wallets (usually) need an additional (external signer) controller,\n   * that is app-specific (web, mobile) and is used to interact with the device.\n   * (example: LedgerController, TrezorController, LatticeController)\n   */\n  #externalSignerControllers: ExternalSignerControllers = {}\n\n  // Subcontrollers\n  networks: NetworksController\n\n  providers: ProvidersController\n\n  accountPicker: AccountPickerController\n\n  portfolio: PortfolioController\n\n  defiPositions: DefiPositionsController\n\n  dapps: DappsController\n\n  phishing: PhishingController\n\n  actions: ActionsController\n\n  // Public sub-structures\n  // @TODO emailVaults\n  emailVault: EmailVaultController\n\n  signMessage: SignMessageController\n\n  swapAndBridge: SwapAndBridgeController\n\n  signAccountOp: SignAccountOpController | null = null\n\n  signAccOpInitError: string | null = null\n\n  activity: ActivityController\n\n  addressBook: AddressBookController\n\n  domains: DomainsController\n\n  accounts: AccountsController\n\n  selectedAccount: SelectedAccountController\n\n  userRequests: UserRequest[] = []\n\n  userRequestWaitingAccountSwitch: UserRequest[] = []\n\n  accountOpsToBeConfirmed: { [key: string]: { [key: string]: AccountOp } } = {}\n\n  // TODO: Temporary solution to expose the fee payer key during Account Op broadcast.\n  feePayerKey: Key | null = null\n\n  lastUpdate: Date = new Date()\n\n  isOffline: boolean = false\n\n  statuses: Statuses<keyof typeof STATUS_WRAPPED_METHODS> & CustomStatuses = STATUS_WRAPPED_METHODS\n\n  #windowManager: WindowManager\n\n  #notificationManager: NotificationManager\n\n  #signAccountOpSigningPromise?: Promise<AccountOp | void | null>\n\n  #traceCallTimeoutId: ReturnType<typeof setTimeout> | null = null\n\n  /**\n   * Tracks broadcast request IDs to abort stale requests.\n   * Prevents rejected hardware wallet signatures from affecting new requests\n   * when a user closes an action window and starts a new one.\n   */\n  #signAndBroadcastCallId: string | null = null\n\n  #relayerUrl: string\n\n  constructor({\n    platform,\n    storageAPI,\n    fetch,\n    relayerUrl,\n    velcroUrl,\n    swapApiKey,\n    keystoreSigners,\n    externalSignerControllers,\n    windowManager,\n    notificationManager\n  }: {\n    platform: Platform\n    storageAPI: Storage\n    fetch: Fetch\n    relayerUrl: string\n    velcroUrl: string\n    swapApiKey?: string\n    keystoreSigners: Partial<{ [key in Key['type']]: KeystoreSignerType }>\n    externalSignerControllers: ExternalSignerControllers\n    windowManager: WindowManager\n    notificationManager: NotificationManager\n  }) {\n    super()\n    this.#storageAPI = storageAPI\n    this.fetch = fetch\n    this.#windowManager = windowManager\n    this.#notificationManager = notificationManager\n\n    this.storage = new StorageController(this.#storageAPI)\n    this.invite = new InviteController({ relayerUrl, fetch, storage: this.storage })\n    this.keystore = new KeystoreController(platform, this.storage, keystoreSigners, windowManager)\n    this.#externalSignerControllers = externalSignerControllers\n    this.networks = new NetworksController(\n      this.storage,\n      this.fetch,\n      relayerUrl,\n      async (network: Network) => {\n        if (network.disabled) {\n          await this.removeNetworkData(network.chainId)\n          return\n        }\n        this.providers.setProvider(network)\n        await this.reloadSelectedAccount({ chainId: network.chainId })\n      },\n      (chainId: bigint) => {\n        this.providers.removeProvider(chainId)\n      }\n    )\n    this.featureFlags = new FeatureFlagsController(this.networks)\n    this.providers = new ProvidersController(this.networks)\n    this.accounts = new AccountsController(\n      this.storage,\n      this.providers,\n      this.networks,\n      async (accounts) => {\n        const defaultSelectedAccount = getDefaultSelectedAccount(accounts)\n        if (defaultSelectedAccount) {\n          await this.#selectAccount(defaultSelectedAccount.addr)\n        }\n      },\n      this.providers.updateProviderIsWorking.bind(this.providers),\n      this.#updateIsOffline.bind(this)\n    )\n    this.selectedAccount = new SelectedAccountController({\n      storage: this.storage,\n      accounts: this.accounts\n    })\n    this.portfolio = new PortfolioController(\n      this.storage,\n      this.fetch,\n      this.providers,\n      this.networks,\n      this.accounts,\n      this.keystore,\n      relayerUrl,\n      velcroUrl\n    )\n    this.defiPositions = new DefiPositionsController({\n      fetch: this.fetch,\n      storage: this.storage,\n      selectedAccount: this.selectedAccount,\n      networks: this.networks,\n      providers: this.providers\n    })\n    this.emailVault = new EmailVaultController(this.storage, this.fetch, relayerUrl, this.keystore)\n    this.#relayerUrl = relayerUrl\n    this.accountPicker = new AccountPickerController({\n      accounts: this.accounts,\n      keystore: this.keystore,\n      networks: this.networks,\n      providers: this.providers,\n      externalSignerControllers: this.#externalSignerControllers,\n      relayerUrl,\n      fetch: this.fetch,\n      /**\n       * callback that gets triggered as a finalization step of adding new\n       * accounts via the AccountPickerController.\n       *\n       * VIEW-ONLY ACCOUNTS: In case of changes in this method, make sure these\n       * changes are reflected for view-only accounts as well. Because the\n       * view-only accounts import flow bypasses the AccountPicker, this method\n       * won't click for them. Their on add success flow continues in the\n       * MAIN_CONTROLLER_ADD_VIEW_ONLY_ACCOUNTS action case.\n       */\n      onAddAccountsSuccessCallback: this.#onAccountPickerSuccess.bind(this)\n    })\n    this.addressBook = new AddressBookController(this.storage, this.accounts, this.selectedAccount)\n    this.signMessage = new SignMessageController(\n      this.keystore,\n      this.providers,\n      this.networks,\n      this.accounts,\n      this.#externalSignerControllers,\n      this.invite,\n      () => {\n        if (this.signMessage.signingKeyType === 'trezor') {\n          this.#handleTrezorCleanup()\n        }\n      }\n    )\n    this.phishing = new PhishingController({\n      fetch: this.fetch,\n      storage: this.storage,\n      windowManager: this.#windowManager\n    })\n    // const socketAPI = new SocketAPI({ apiKey: swapApiKey, fetch: this.fetch })\n    const lifiAPI = new LiFiAPI({ apiKey: swapApiKey, fetch: this.fetch })\n    this.dapps = new DappsController(this.storage)\n    this.actions = new ActionsController({\n      selectedAccount: this.selectedAccount,\n      windowManager,\n      notificationManager,\n      onActionWindowClose: () => {\n        const userRequestsToRejectOnWindowClose = this.userRequests.filter(\n          (r) => r.action.kind !== 'calls'\n        )\n        userRequestsToRejectOnWindowClose.forEach((r) =>\n          this.rejectUserRequest(ethErrors.provider.userRejectedRequest().message, r.id)\n        )\n\n        this.userRequestWaitingAccountSwitch = []\n        this.emitUpdate()\n      }\n    })\n    this.selectedAccount.initControllers({\n      portfolio: this.portfolio,\n      defiPositions: this.defiPositions,\n      actions: this.actions,\n      networks: this.networks,\n      providers: this.providers\n    })\n\n    this.callRelayer = relayerCall.bind({ url: relayerUrl, fetch: this.fetch })\n    this.activity = new ActivityController(\n      this.storage,\n      this.fetch,\n      this.callRelayer,\n      this.accounts,\n      this.selectedAccount,\n      this.providers,\n      this.networks,\n      async (network: Network) => {\n        await this.setContractsDeployedToTrueIfDeployed(network)\n      }\n    )\n    this.swapAndBridge = new SwapAndBridgeController({\n      accounts: this.accounts,\n      keystore: this.keystore,\n      portfolio: this.portfolio,\n      externalSignerControllers: this.#externalSignerControllers,\n      providers: this.providers,\n      selectedAccount: this.selectedAccount,\n      networks: this.networks,\n      activity: this.activity,\n      invite: this.invite,\n      // TODO: This doesn't work, because the invite controller is not yet loaded at this stage\n      // serviceProviderAPI: this.invite.isOG ? lifiAPI : socketAPI,\n      serviceProviderAPI: lifiAPI,\n      storage: this.storage,\n      actions: this.actions,\n      relayerUrl,\n      portfolioUpdate: () => {\n        this.updateSelectedAccountPortfolio(true)\n      },\n      userRequests: this.userRequests,\n      isMainSignAccountOpThrowingAnEstimationError: (\n        fromChainId: number | null,\n        toChainId: number | null\n      ) => {\n        return (\n          this.signAccountOp &&\n          fromChainId &&\n          toChainId &&\n          this.signAccountOp.estimation.status === EstimationStatus.Error &&\n          this.signAccountOp.accountOp.chainId === BigInt(fromChainId) &&\n          fromChainId === toChainId\n        )\n      }\n    })\n    this.domains = new DomainsController(this.providers.providers)\n\n    this.#initialLoadPromise = this.#load()\n    paymasterFactory.init(relayerUrl, fetch, (e: ErrorRef) => {\n      if (!this.signAccountOp) return\n      this.emitError(e)\n    })\n\n    this.keystore.onUpdate(() => {\n      if (this.keystore.statuses.unlockWithSecret === 'SUCCESS') {\n        this.storage.associateAccountKeysWithLegacySavedSeedMigration(\n          new AccountPickerController({\n            accounts: this.accounts,\n            keystore: this.keystore,\n            networks: this.networks,\n            providers: this.providers,\n            externalSignerControllers: this.#externalSignerControllers,\n            relayerUrl,\n            fetch: this.fetch,\n            onAddAccountsSuccessCallback: async () => {}\n          }),\n          this.keystore,\n          async () => {\n            await this.keystore.updateKeystoreKeys()\n          }\n        )\n      }\n    })\n  }\n\n  /**\n   * - Updates the selected account's account state, portfolio and defi positions\n   * - Calls batchReverseLookup for all accounts\n   *\n   * It's not a problem to call it many times consecutively as all methods have internal\n   * caching mechanisms to prevent unnecessary calls.\n   */\n  onPopupOpen() {\n    const FIVE_MINUTES = 1000 * 60 * 5\n    const selectedAccountAddr = this.selectedAccount.account?.addr\n    this.domains.batchReverseLookup(this.accounts.accounts.map((a) => a.addr))\n    if (!this.activity.broadcastedButNotConfirmed.length) {\n      // Update defi positions together with the portfolio for simplicity\n      this.defiPositions.updatePositions({ maxDataAgeMs: FIVE_MINUTES })\n      this.updateSelectedAccountPortfolio(undefined, undefined, FIVE_MINUTES)\n    }\n\n    if (selectedAccountAddr && !this.accounts.areAccountStatesLoading)\n      this.accounts.updateAccountState(selectedAccountAddr)\n  }\n\n  async #load(): Promise<void> {\n    this.isReady = false\n    // #load is called in the constructor which is synchronous\n    // we await (1 ms/next tick) for the constructor to extend the EventEmitter class\n    // and then we call it's methods\n    await wait(1)\n    this.emitUpdate()\n    await this.networks.initialLoadPromise\n    await this.providers.initialLoadPromise\n    await this.accounts.initialLoadPromise\n    await this.selectedAccount.initialLoadPromise\n\n    this.defiPositions.updatePositions()\n    this.updateSelectedAccountPortfolio()\n    this.domains.batchReverseLookup(this.accounts.accounts.map((a) => a.addr))\n\n    this.isReady = true\n    this.emitUpdate()\n  }\n\n  lock() {\n    this.keystore.lock()\n    this.emailVault.cleanMagicAndSessionKeys()\n    this.selectedAccount.setDashboardNetworkFilter(null)\n  }\n\n  async selectAccount(toAccountAddr: string) {\n    await this.withStatus('selectAccount', async () => this.#selectAccount(toAccountAddr), true)\n  }\n\n  async #selectAccount(toAccountAddr: string | null) {\n    await this.#initialLoadPromise\n    if (!toAccountAddr) {\n      await this.selectedAccount.setAccount(null)\n\n      this.emitUpdate()\n      return\n    }\n\n    const accountToSelect = this.accounts.accounts.find((acc) => acc.addr === toAccountAddr)\n    if (!accountToSelect) {\n      console.error(`Account with address ${toAccountAddr} does not exist`)\n      return\n    }\n\n    this.isOffline = false\n    // call closeActionWindow while still on the currently selected account to allow proper\n    // state cleanup of the controllers like actionsCtrl, signAccountOpCtrl, signMessageCtrl...\n    if (this.actions?.currentAction?.type !== 'switchAccount') {\n      this.actions.closeActionWindow()\n    }\n    const swapAndBridgeSigningAction = this.actions.visibleActionsQueue.find(\n      ({ type }) => type === 'swapAndBridge'\n    )\n    if (swapAndBridgeSigningAction) {\n      this.actions.removeAction(swapAndBridgeSigningAction.id)\n    }\n    this.selectedAccount.setAccount(accountToSelect)\n    this.swapAndBridge.reset()\n    await this.dapps.broadcastDappSessionEvent('accountsChanged', [toAccountAddr])\n    // forceEmitUpdate to update the getters in the FE state of the ctrl\n    await this.forceEmitUpdate()\n    await this.actions.forceEmitUpdate()\n    await this.addressBook.forceEmitUpdate()\n    // Don't await these as they are not critical for the account selection\n    // and if the user decides to quickly change to another account withStatus\n    // will block the UI until these are resolved.\n    this.reloadSelectedAccount({ forceUpdate: false })\n    this.emitUpdate()\n  }\n\n  async #onAccountPickerSuccess() {\n    // Add accounts first, because some of the next steps have validation\n    // if accounts exists.\n    if (this.accountPicker.readyToRemoveAccounts) {\n      // eslint-disable-next-line no-restricted-syntax\n      for (const acc of this.accountPicker.readyToRemoveAccounts) {\n        await this.#removeAccount(acc.addr)\n      }\n    }\n\n    await this.accounts.addAccounts(this.accountPicker.readyToAddAccounts)\n\n    if (this.keystore.isKeyIteratorInitializedWithTempSeed(this.accountPicker.keyIterator)) {\n      await this.keystore.persistTempSeed()\n    }\n\n    const storedSeed = await this.keystore.getKeystoreSeed(this.accountPicker.keyIterator)\n\n    if (storedSeed) {\n      this.keystore.updateSeed({\n        id: storedSeed.id,\n        hdPathTemplate: this.accountPicker.hdPathTemplate\n      })\n\n      this.accountPicker.readyToAddKeys.internal = this.accountPicker.readyToAddKeys.internal.map(\n        (key) => ({ ...key, meta: { ...key.meta, fromSeedId: storedSeed.id } })\n      )\n    }\n    // Then add keys, because some of the next steps could have validation\n    // if keys exists. Should be separate (not combined in Promise.all,\n    // since firing multiple keystore actions is not possible\n    // (the #wrapKeystoreAction listens for the first one to finish and\n    // skips the parallel one, if one is requested).\n    await this.keystore.addKeys(this.accountPicker.readyToAddKeys.internal)\n    await this.keystore.addKeysExternallyStored(this.accountPicker.readyToAddKeys.external)\n  }\n\n  initSignAccOp(actionId: AccountOpAction['id']): null | void {\n    const accountOp = getAccountOpFromAction(actionId, this.actions.actionsQueue)\n    if (!accountOp) {\n      this.signAccOpInitError =\n        'We cannot initiate the signing process because no transaction has been found for the specified account and network.'\n      return null\n    }\n\n    const network = this.networks.networks.find((n) => n.chainId === accountOp.chainId)\n\n    if (\n      !this.selectedAccount.account ||\n      this.selectedAccount.account.addr !== accountOp.accountAddr\n    ) {\n      this.signAccOpInitError =\n        'Attempting to initialize an accountOp for an account other than the currently selected one.'\n      return null\n    }\n\n    if (!network) {\n      this.signAccOpInitError =\n        'We cannot initiate the signing process as we are unable to locate the specified network.'\n      return null\n    }\n\n    // on init, set the accountOp nonce to the latest one we know\n    // it could happen that the user inits a userRequest with an old\n    // accountState and therefore caching the old nonce in the accountOp.\n    // we make sure the latest nonce is set when initing signAccountOp\n    const state =\n      this.accounts.accountStates?.[accountOp.accountAddr]?.[accountOp.chainId.toString()]\n    if (state) accountOp.nonce = state.nonce\n\n    this.signAccOpInitError = null\n\n    // if there's no signAccountOp OR\n    // there is but there's a new actionId requested, rebuild it\n    if (!this.signAccountOp || this.signAccountOp.fromActionId !== actionId) {\n      this.destroySignAccOp()\n      this.signAccountOp = new SignAccountOpController(\n        this.accounts,\n        this.networks,\n        this.keystore,\n        this.portfolio,\n        this.#externalSignerControllers,\n        this.selectedAccount.account,\n        network,\n        this.providers.providers[network.chainId.toString()],\n        actionId,\n        accountOp,\n        () => {\n          return this.isSignRequestStillActive\n        },\n        true,\n        (ctrl: SignAccountOpController) => {\n          this.traceCall(ctrl)\n        }\n      )\n    }\n\n    this.emitUpdate()\n  }\n\n  async handleSignAndBroadcastAccountOp(type: SignAccountOpType) {\n    if (this.statuses.signAndBroadcastAccountOp !== 'INITIAL') {\n      this.emitError({\n        level: 'major',\n        message: 'The signing process is already in progress.',\n        error: new Error(\n          'The signing process is already in progress. (handleSignAndBroadcastAccountOp)'\n        )\n      })\n      return\n    }\n\n    const signAndBroadcastCallId = generateUuid()\n    this.#signAndBroadcastCallId = signAndBroadcastCallId\n\n    this.statuses.signAndBroadcastAccountOp = 'SIGNING'\n    this.forceEmitUpdate()\n\n    const signAccountOp =\n      type === SIGN_ACCOUNT_OP_MAIN\n        ? this.signAccountOp\n        : this.swapAndBridge.signAccountOpController\n\n    // It's vital that everything that can throw an error is wrapped in a try/catch block\n    // to prevent signAndBroadcastAccountOp from being stuck in the SIGNING state\n    try {\n      // if the accountOp has a swapTxn, start the route as the user is broadcasting it\n      if (signAccountOp?.accountOp.meta?.swapTxn) {\n        await this.swapAndBridge.addActiveRoute({\n          activeRouteId: signAccountOp?.accountOp.meta?.swapTxn.activeRouteId,\n          userTxIndex: signAccountOp?.accountOp.meta?.swapTxn.userTxIndex\n        })\n      }\n\n      const wasAlreadySigned = signAccountOp?.status?.type === SigningStatus.Done\n\n      if (!wasAlreadySigned) {\n        if (!signAccountOp) {\n          const message =\n            'The signing process was not initialized as expected. Please try again later or contact Ambire support if the issue persists.'\n\n          throw new EmittableError({ level: 'major', message })\n        }\n\n        // Reset the promise in the `finally` block to ensure it doesn't remain unresolved if an error is thrown\n        this.#signAccountOpSigningPromise = signAccountOp.sign().finally(() => {\n          if (this.#signAndBroadcastCallId !== signAndBroadcastCallId) return\n\n          this.#signAccountOpSigningPromise = undefined\n        })\n\n        await this.#signAccountOpSigningPromise\n      }\n\n      if (this.#signAndBroadcastCallId !== signAndBroadcastCallId) return\n\n      // Error handling on the prev step will notify the user, it's fine to return here\n      if (signAccountOp?.status?.type !== SigningStatus.Done) {\n        // remove the active route on signing failure\n        if (signAccountOp?.accountOp.meta?.swapTxn) {\n          this.swapAndBridge.removeActiveRoute(signAccountOp.accountOp.meta.swapTxn.activeRouteId)\n        }\n        this.statuses.signAndBroadcastAccountOp = 'ERROR'\n        await this.forceEmitUpdate()\n        this.statuses.signAndBroadcastAccountOp = 'INITIAL'\n        this.#signAndBroadcastCallId = null\n        await this.forceEmitUpdate()\n        return\n      }\n\n      await this.#broadcastSignedAccountOp(signAccountOp, type, signAndBroadcastCallId)\n      if (signAndBroadcastCallId === this.#signAndBroadcastCallId) {\n        this.statuses.signAndBroadcastAccountOp = 'SUCCESS'\n        await this.forceEmitUpdate()\n      }\n    } catch (error: any) {\n      if (signAndBroadcastCallId === this.#signAndBroadcastCallId) {\n        if ('message' in error && 'level' in error && 'error' in error) {\n          this.emitError(error)\n        } else {\n          const hasSigned = signAccountOp?.status?.type === SigningStatus.Done\n\n          this.emitError({\n            level: 'major',\n            message:\n              error.message ||\n              `Unknown error occurred while ${\n                !hasSigned ? 'signing the transaction' : 'broadcasting the transaction'\n              }`,\n            error\n          })\n        }\n        this.statuses.signAndBroadcastAccountOp = 'ERROR'\n        await this.forceEmitUpdate()\n      }\n    } finally {\n      if (signAndBroadcastCallId === this.#signAndBroadcastCallId) {\n        this.statuses.signAndBroadcastAccountOp = 'INITIAL'\n        this.#signAndBroadcastCallId = null\n        await this.forceEmitUpdate()\n      }\n    }\n  }\n\n  async resolveDappBroadcast(\n    submittedAccountOp: SubmittedAccountOp,\n    dappHandlers: {\n      promise: {\n        session: { name: string; origin: string; icon: string }\n        resolve: (data: any) => void\n        reject: (data: any) => void\n      }\n      txnId?: string\n    }[]\n  ) {\n    // this could take a while\n    // return the txnId to the dapp once it's confirmed as return a txId\n    // that could be front ran would cause bad UX on the dapp side\n    const txnId = await this.activity.getConfirmedTxId(submittedAccountOp)\n    dappHandlers.forEach((handler) => {\n      if (txnId) {\n        // If the call has a txnId, resolve the promise with it.\n        // This could happen when an EOA account is broadcasting multiple transactions.\n        handler.promise.resolve({ hash: handler.txnId || txnId })\n      } else {\n        handler.promise.reject(\n          ethErrors.rpc.transactionRejected({\n            message: 'Transaction rejected by the bundler'\n          })\n        )\n      }\n    })\n\n    this.emitUpdate()\n  }\n\n  #abortHWSign(signAccountOp: SignAccountOpController) {\n    if (!signAccountOp) return\n\n    const isAwaitingHWSignature =\n      (signAccountOp.accountOp.signingKeyType !== 'internal' &&\n        this.statuses.signAndBroadcastAccountOp === 'SIGNING') ||\n      (this.feePayerKey?.type !== 'internal' &&\n        this.statuses.signAndBroadcastAccountOp === 'BROADCASTING')\n\n    // Reset these flags only if we were awaiting a HW signature\n    // to broadcast a transaction.\n    // If the user is using a hot wallet we can sign the transaction immediately\n    // and once its signed there is no way to cancel the broadcast. Once the user\n    // On the other hand HWs can be in 'SIGNING' or 'BROADCASTING' state\n    // and be able to 'cancel' the broadcast.\n    if (isAwaitingHWSignature) {\n      this.statuses.signAndBroadcastAccountOp = 'INITIAL'\n      this.#signAndBroadcastCallId = null\n    }\n\n    const isSignerTrezor =\n      signAccountOp.accountOp.signingKeyType === 'trezor' || this.feePayerKey?.type === 'trezor'\n\n    if (isSignerTrezor) {\n      this.#handleTrezorCleanup()\n    }\n    this.#signAccountOpSigningPromise = undefined\n  }\n\n  destroySignAccOp() {\n    if (!this.signAccountOp) return\n\n    this.#abortHWSign(this.signAccountOp)\n    this.feePayerKey = null\n    this.signAccountOp.reset()\n    this.signAccountOp = null\n    this.signAccOpInitError = null\n\n    // NOTE: no need to update the portfolio here as an update is\n    // fired upon removeUserRequest\n\n    this.emitUpdate()\n  }\n\n  async traceCall(signAccountOpCtrl: SignAccountOpController) {\n    const accountOp = signAccountOpCtrl.accountOp\n    if (!accountOp) return\n\n    const network = this.networks.networks.find((n) => n.chainId === accountOp.chainId)\n    if (!network) return\n\n    const account = this.accounts.accounts.find((acc) => acc.addr === accountOp.accountAddr)\n    if (!account) return\n\n    // `traceCall` should not be invoked too frequently. However, if there is a pending timeout,\n    // it should be cleared to prevent the previous interval from changing the status\n    // to `SlowPendingResponse` for the newer `traceCall` invocation.\n    if (this.#traceCallTimeoutId) clearTimeout(this.#traceCallTimeoutId)\n\n    // Here, we also check the status because, in the case of re-estimation,\n    // `traceCallDiscoveryStatus` is already set, and we don’t want to reset it to \"InProgress\".\n    // This prevents the BalanceDecrease banner from flickering.\n    if (signAccountOpCtrl.traceCallDiscoveryStatus === TraceCallDiscoveryStatus.NotStarted)\n      signAccountOpCtrl.setDiscoveryStatus(TraceCallDiscoveryStatus.InProgress)\n\n    // Flag the discovery logic as `SlowPendingResponse` if the call does not resolve within 2 seconds.\n    const timeoutId = setTimeout(() => {\n      signAccountOpCtrl.setDiscoveryStatus(TraceCallDiscoveryStatus.SlowPendingResponse)\n      signAccountOpCtrl.calculateWarnings()\n    }, 2000)\n\n    this.#traceCallTimeoutId = timeoutId\n\n    try {\n      const state = this.accounts.accountStates[accountOp.accountAddr][accountOp.chainId.toString()]\n      const provider = this.providers.providers[network.chainId.toString()]\n      const stateOverride =\n        accountOp.calls.length > 1 && isBasicAccount(account, state)\n          ? {\n              [account.addr]: {\n                code: AmbireAccount7702.binRuntime\n              }\n            }\n          : undefined\n      const { tokens, nfts } = await debugTraceCall(\n        account,\n        accountOp,\n        provider,\n        state,\n        !network.rpcNoStateOverride,\n        stateOverride\n      )\n      const learnedNewTokens = this.portfolio.addTokensToBeLearned(tokens, network.chainId)\n      const learnedNewNfts = await this.portfolio.learnNfts(nfts, network.chainId)\n      const accountOpsForSimulation = getAccountOpsForSimulation(\n        account,\n        this.actions.visibleActionsQueue,\n        this.networks.networks\n      )\n\n      // update the portfolio only if new tokens were found through tracing\n      const canUpdateSignAccountOp = !signAccountOpCtrl || signAccountOpCtrl.canUpdate()\n      if (canUpdateSignAccountOp && (learnedNewTokens || learnedNewNfts)) {\n        await this.portfolio.updateSelectedAccount(\n          accountOp.accountAddr,\n          network,\n          accountOpsForSimulation\n            ? {\n                accountOps: accountOpsForSimulation,\n                states: await this.accounts.getOrFetchAccountStates(account.addr)\n              }\n            : undefined,\n          { forceUpdate: true }\n        )\n      }\n\n      signAccountOpCtrl.setDiscoveryStatus(TraceCallDiscoveryStatus.Done)\n    } catch (e: any) {\n      signAccountOpCtrl.setDiscoveryStatus(TraceCallDiscoveryStatus.Failed)\n\n      this.emitError({\n        level: 'silent',\n        message: 'Error in main.traceCall',\n        error: new Error(`Debug trace call error on ${network.name}: ${e.message}`)\n      })\n    }\n\n    signAccountOpCtrl?.calculateWarnings()\n    this.#traceCallTimeoutId = null\n    clearTimeout(timeoutId)\n  }\n\n  async handleSignMessage() {\n    const accountAddr = this.signMessage.messageToSign?.accountAddr\n    const chainId = this.signMessage.messageToSign?.chainId\n\n    // Could (rarely) happen if not even a single account state is fetched yet\n    const shouldForceUpdateAndWaitForAccountState =\n      accountAddr && chainId && !this.accounts.accountStates?.[accountAddr]?.[chainId.toString()]\n    if (shouldForceUpdateAndWaitForAccountState)\n      await this.accounts.updateAccountState(accountAddr, 'latest', [chainId])\n\n    const isAccountStateStillMissing =\n      !accountAddr || !chainId || !this.accounts.accountStates?.[accountAddr]?.[chainId.toString()]\n    if (isAccountStateStillMissing) {\n      const message =\n        'Unable to sign the message. During the preparation step, required account data failed to get received. Please try again later or contact Ambire support.'\n      const error = new Error(\n        `The account state of ${accountAddr} is missing for the network with id ${chainId}.`\n      )\n      return this.emitError({ level: 'major', message, error })\n    }\n\n    await this.signMessage.sign()\n\n    const signedMessage = this.signMessage.signedMessage\n    // Error handling on the prev step will notify the user, it's fine to return here\n    if (!signedMessage) return\n\n    await this.activity.addSignedMessage(signedMessage, signedMessage.accountAddr)\n\n    this.resolveUserRequest({ hash: signedMessage.signature }, signedMessage.fromActionId)\n\n    await this.#notificationManager.create({\n      title: 'Done!',\n      message: 'The Message was successfully signed.'\n    })\n  }\n\n  async #handleAccountPickerInitLedger(\n    LedgerKeyIterator: any // TODO: KeyIterator type mismatch\n  ) {\n    try {\n      const ledgerCtrl = this.#externalSignerControllers.ledger\n      if (!ledgerCtrl) {\n        const message =\n          'Could not initialize connection with your Ledger device. Please try again later or contact Ambire support.'\n        throw new EmittableError({ message, level: 'major', error: new Error(message) })\n      }\n\n      // Once a session with the Ledger device gets initiated, the user might\n      // use the device with another app. In this scenario, when coming back to\n      // Ambire (the second time a connection gets requested onwards),\n      // the Ledger device throws with \"invalid channel\" error.\n      // To overcome this, always make sure to clean up before starting\n      // a new session when retrieving keys, in case there already is one.\n      if (ledgerCtrl.walletSDK) await ledgerCtrl.cleanUp()\n\n      const hdPathTemplate = BIP44_LEDGER_DERIVATION_TEMPLATE\n      await ledgerCtrl.unlock(hdPathTemplate)\n\n      if (!ledgerCtrl.walletSDK) {\n        const message = 'Could not establish connection with the Ledger device'\n        throw new EmittableError({ message, level: 'major', error: new Error(message) })\n      }\n\n      const keyIterator = new LedgerKeyIterator({ controller: ledgerCtrl })\n      await this.accountPicker.setInitParams({\n        keyIterator,\n        hdPathTemplate,\n        pageSize: 5,\n        shouldAddNextAccountAutomatically: false\n      })\n    } catch (error: any) {\n      const message = error?.message || 'Could not unlock the Ledger device. Please try again.'\n      throw new EmittableError({ message, level: 'major', error })\n    }\n  }\n\n  async handleAccountPickerInitLedger(\n    LedgerKeyIterator: any /* TODO: KeyIterator type mismatch */\n  ) {\n    await this.withStatus('handleAccountPickerInitLedger', async () =>\n      this.#handleAccountPickerInitLedger(LedgerKeyIterator)\n    )\n  }\n\n  async #handleAccountPickerInitTrezor(\n    TrezorKeyIterator: any /* TODO: KeyIterator type mismatch */\n  ) {\n    try {\n      const trezorCtrl = this.#externalSignerControllers.trezor\n\n      if (!trezorCtrl) {\n        const message =\n          'Could not initialize connection with your Trezor device. Please try again later or contact Ambire support.'\n        throw new EmittableError({ message, level: 'major', error: new Error(message) })\n      }\n\n      const hdPathTemplate = BIP44_STANDARD_DERIVATION_TEMPLATE\n      const { walletSDK } = trezorCtrl\n      await this.accountPicker.setInitParams({\n        keyIterator: new TrezorKeyIterator({ walletSDK }),\n        hdPathTemplate,\n        pageSize: 5,\n        shouldAddNextAccountAutomatically: false\n      })\n    } catch (error: any) {\n      const message = error?.message || 'Could not unlock the Trezor device. Please try again.'\n      throw new EmittableError({ message, level: 'major', error })\n    }\n  }\n\n  async handleAccountPickerInitTrezor(\n    TrezorKeyIterator: any /* TODO: KeyIterator type mismatch */\n  ) {\n    await this.withStatus('handleAccountPickerInitTrezor', async () =>\n      this.#handleAccountPickerInitTrezor(TrezorKeyIterator)\n    )\n  }\n\n  async #handleAccountPickerInitLattice(\n    LatticeKeyIterator: any /* TODO: KeyIterator type mismatch */\n  ) {\n    try {\n      const latticeCtrl = this.#externalSignerControllers.lattice\n      if (!latticeCtrl) {\n        const message =\n          'Could not initialize connection with your Lattice1 device. Please try again later or contact Ambire support.'\n        throw new EmittableError({ message, level: 'major', error: new Error(message) })\n      }\n\n      const hdPathTemplate = BIP44_STANDARD_DERIVATION_TEMPLATE\n\n      await this.accountPicker.setInitParams({\n        keyIterator: new LatticeKeyIterator({ controller: latticeCtrl }),\n        hdPathTemplate,\n        pageSize: 5,\n        shouldAddNextAccountAutomatically: false\n      })\n    } catch (error: any) {\n      const message = error?.message || 'Could not unlock the Lattice1 device. Please try again.'\n      throw new EmittableError({ message, level: 'major', error })\n    }\n  }\n\n  async handleAccountPickerInitLattice(\n    LatticeKeyIterator: any /* TODO: KeyIterator type mismatch */\n  ) {\n    await this.withStatus('handleAccountPickerInitLattice', async () =>\n      this.#handleAccountPickerInitLattice(LatticeKeyIterator)\n    )\n  }\n\n  async updateAccountsOpsStatuses(): Promise<{ newestOpTimestamp: number }> {\n    await this.#initialLoadPromise\n\n    const { shouldEmitUpdate, shouldUpdatePortfolio, updatedAccountsOps, newestOpTimestamp } =\n      await this.activity.updateAccountsOpsStatuses()\n\n    if (shouldEmitUpdate) {\n      this.emitUpdate()\n\n      if (shouldUpdatePortfolio) {\n        this.updateSelectedAccountPortfolio(true)\n      }\n    }\n\n    updatedAccountsOps.forEach((op) => {\n      this.swapAndBridge.handleUpdateActiveRouteOnSubmittedAccountOpStatusUpdate(op)\n    })\n\n    return { newestOpTimestamp }\n  }\n\n  // call this function after a call to the singleton has been made\n  // it will check if the factory has been deployed and update the network settings if it has been\n  async setContractsDeployedToTrueIfDeployed(network: Network) {\n    await this.#initialLoadPromise\n    if (network.areContractsDeployed) return\n\n    const provider = this.providers.providers[network.chainId.toString()]\n    if (!provider) return\n\n    const factoryCode = await provider.getCode(AMBIRE_ACCOUNT_FACTORY)\n    if (factoryCode === '0x') return\n    await this.networks.updateNetwork({ areContractsDeployed: true }, network.chainId)\n  }\n\n  #removeAccountKeyData(address: Account['addr']) {\n    // Compute account keys that are only associated with this account\n    const accountAssociatedKeys =\n      this.accounts.accounts.find((acc) => acc.addr === address)?.associatedKeys || []\n    const keysInKeystore = this.keystore.keys\n    const importedAccountKeys = keysInKeystore.filter((key) =>\n      accountAssociatedKeys.includes(key.addr)\n    )\n    const solelyAccountKeys = importedAccountKeys.filter((key) => {\n      const isKeyAssociatedWithOtherAccounts = this.accounts.accounts.some(\n        (acc) => acc.addr !== address && acc.associatedKeys.includes(key.addr)\n      )\n\n      return !isKeyAssociatedWithOtherAccounts\n    })\n\n    // Remove account keys from the keystore\n    solelyAccountKeys.forEach((key) => {\n      this.keystore.removeKey(key.addr, key.type).catch((e) => {\n        throw new EmittableError({\n          level: 'major',\n          message: 'Failed to remove account key',\n          error: e\n        })\n      })\n    })\n  }\n\n  async #removeAccount(address: Account['addr']) {\n    try {\n      this.#removeAccountKeyData(address)\n      // Remove account data from sub-controllers\n      this.accounts.removeAccountData(address)\n      this.portfolio.removeAccountData(address)\n      await this.activity.removeAccountData(address)\n      this.actions.removeAccountData(address)\n      this.signMessage.removeAccountData(address)\n      this.defiPositions.removeAccountData(address)\n\n      if (this.selectedAccount.account?.addr === address) {\n        await this.#selectAccount(this.accounts.accounts[0]?.addr)\n      }\n\n      if (this.signAccountOp?.account.addr === address) {\n        this.destroySignAccOp()\n      }\n\n      this.emitUpdate()\n    } catch (e: any) {\n      throw new EmittableError({\n        level: 'major',\n        message: 'Failed to remove account',\n        error: e || new Error('Failed to remove account')\n      })\n    }\n  }\n\n  async removeAccount(address: Account['addr']) {\n    await this.withStatus('removeAccount', async () => this.#removeAccount(address))\n  }\n\n  async #ensureAccountInfo(\n    accountAddr: AccountId,\n    chainId: bigint\n  ): Promise<{ hasAccountInfo: true } | { hasAccountInfo: false; errorMessage: string }> {\n    await this.#initialLoadPromise\n    // Initial sanity check: does this account even exist?\n    if (!this.accounts.accounts.find((x) => x.addr === accountAddr)) {\n      return {\n        hasAccountInfo: false,\n        errorMessage: `Account ${accountAddr} does not exist`\n      }\n    }\n    // If this still didn't work, re-load\n    if (!this.accounts.accountStates[accountAddr]?.[chainId.toString()])\n      await this.accounts.updateAccountState(accountAddr, 'pending', [chainId])\n    // If this still didn't work, throw error: this prob means that we're calling for a non-existent acc/network\n    if (!this.accounts.accountStates[accountAddr]?.[chainId.toString()]) {\n      const network = this.networks.networks.find((n) => n.chainId === chainId)\n\n      return {\n        hasAccountInfo: false,\n        errorMessage: `We couldn't complete your last action because we couldn't retrieve your account information for ${\n          network?.name || chainId\n        }. Please try reloading your account from the Dashboard. If the issue persists, contact support for assistance.`\n      }\n    }\n\n    return {\n      hasAccountInfo: true\n    }\n  }\n\n  #batchCallsFromUserRequests(accountAddr: AccountId, chainId: bigint): Call[] {\n    // Note: we use reduce instead of filter/map so that the compiler can deduce that we're checking .kind\n    return (this.userRequests.filter((r) => r.action.kind === 'calls') as SignUserRequest[]).reduce(\n      (uCalls: Call[], req) => {\n        if (req.meta.chainId === chainId && req.meta.accountAddr === accountAddr) {\n          const { calls } = req.action as Calls\n          calls.map((call) => uCalls.push({ ...call, fromUserRequestId: req.id }))\n        }\n        return uCalls\n      },\n      []\n    )\n  }\n\n  async reloadSelectedAccount(options?: { forceUpdate?: boolean; chainId?: bigint }) {\n    const { forceUpdate = true, chainId } = options || {}\n    const networkToUpdate = chainId\n      ? this.networks.networks.find((n) => n.chainId === chainId)\n      : undefined\n    if (!this.selectedAccount.account) return\n\n    this.selectedAccount.resetSelectedAccountPortfolio()\n    await Promise.all([\n      // When we trigger `reloadSelectedAccount` (for instance, from Dashboard -> Refresh balance icon),\n      // it's very likely that the account state is already in the process of being updated.\n      // If we try to run the same action, `withStatus` validation will throw an error.\n      // So, we perform this safety check to prevent the error.\n      // However, even if we don't trigger an update here, it's not a big problem,\n      // as the account state will be updated anyway, and its update will be very recent.\n      !this.accounts.areAccountStatesLoading && this.selectedAccount.account?.addr\n        ? this.accounts.updateAccountState(\n            this.selectedAccount.account.addr,\n            'pending',\n            chainId ? [chainId] : undefined\n          )\n        : Promise.resolve(),\n      // `updateSelectedAccountPortfolio` doesn't rely on `withStatus` validation internally,\n      // as the PortfolioController already exposes flags that are highly sufficient for the UX.\n      // Additionally, if we trigger the portfolio update twice (i.e., running a long-living interval + force update from the Dashboard),\n      // there won't be any error thrown, as all portfolio updates are queued and they don't use the `withStatus` helper.\n      this.updateSelectedAccountPortfolio(forceUpdate, networkToUpdate),\n      this.defiPositions.updatePositions({ chainId })\n    ])\n  }\n\n  #updateIsOffline() {\n    const oldIsOffline = this.isOffline\n    const accountAddr = this.selectedAccount.account?.addr\n\n    if (!accountAddr) return\n\n    // We have to make calculations based on the state of the portfolio\n    // and not the selected account portfolio the flag isOffline\n    // and the errors of the selected account portfolio should\n    // come in the same tick. Otherwise the UI may flash the wrong error.\n    const latestState = this.portfolio.getLatestPortfolioState(accountAddr)\n    const latestStateKeys = Object.keys(latestState)\n    const isAllLoaded = latestStateKeys.every((chainId) => {\n      return isNetworkReady(latestState[chainId]) && !latestState[chainId]?.isLoading\n    })\n\n    // Set isOffline back to false if the portfolio is loading.\n    // This is done to prevent the UI from flashing the offline error\n    if (!latestStateKeys.length || !isAllLoaded) {\n      // Skip unnecessary updates\n      if (!this.isOffline) return\n\n      this.isOffline = false\n      this.emitUpdate()\n      return\n    }\n\n    const allPortfolioNetworksHaveErrors = latestStateKeys.every((chainId) => {\n      const state = latestState[chainId]\n\n      return !!state?.criticalError\n    })\n\n    const allNetworkRpcsAreDown = Object.keys(this.providers.providers).every((chainId) => {\n      const provider = this.providers.providers[chainId]\n      const isWorking = provider.isWorking\n\n      return typeof isWorking === 'boolean' && !isWorking\n    })\n\n    // Update isOffline if either all portfolio networks have errors or we've failed to fetch\n    // the account state for every account. This is because either update may fail first.\n    this.isOffline = !!allNetworkRpcsAreDown || !!allPortfolioNetworksHaveErrors\n\n    if (oldIsOffline !== this.isOffline) {\n      this.emitUpdate()\n    }\n  }\n\n  // TODO: Refactor this to accept an optional object with options\n  async updateSelectedAccountPortfolio(\n    // eslint-disable-next-line default-param-last\n    forceUpdate: boolean = false,\n    network?: Network,\n    maxDataAgeMs?: number\n  ) {\n    await this.#initialLoadPromise\n    if (!this.selectedAccount.account) return\n    const canUpdateSignAccountOp = !this.signAccountOp || this.signAccountOp.canUpdate()\n    if (!canUpdateSignAccountOp) return\n\n    const accountOpsToBeSimulatedByNetwork = getAccountOpsForSimulation(\n      this.selectedAccount.account,\n      this.actions.visibleActionsQueue,\n      this.networks.networks\n    )\n\n    await this.portfolio.updateSelectedAccount(\n      this.selectedAccount.account.addr,\n      network,\n      accountOpsToBeSimulatedByNetwork\n        ? {\n            accountOps: accountOpsToBeSimulatedByNetwork,\n            states: await this.accounts.getOrFetchAccountStates(this.selectedAccount.account.addr)\n          }\n        : undefined,\n      { forceUpdate, maxDataAgeMs }\n    )\n    this.#updateIsOffline()\n  }\n\n  #getUserRequestAccountError(dappOrigin: string, fromAccountAddr: string): string | null {\n    if (ORIGINS_WHITELISTED_TO_ALL_ACCOUNTS.includes(dappOrigin)) {\n      const isAddressInAccounts = this.accounts.accounts.some((a) => a.addr === fromAccountAddr)\n\n      if (isAddressInAccounts) return null\n\n      return 'The dApp is trying to sign using an address that is not imported in the extension.'\n    }\n    const isAddressSelected = this.selectedAccount.account?.addr === fromAccountAddr\n\n    if (isAddressSelected) return null\n\n    return 'The dApp is trying to sign using an address that is not selected in the extension.'\n  }\n\n  /**\n   * Don't allow the user to open new action windows if there's a pending to sign swap action.\n   * This is done to prevent complications with the signing process- e.g. a new request\n   * being sent to the hardware wallet while the swap and bridge one is still pending.\n   * @returns {boolean} - true if an error was thrown\n   * @throws {Error} - if throwRpcError is true\n   */\n  async #swapAndBridgeActionSafeguard(throwRpcError = false): Promise<boolean> {\n    const pendingSwapAction = this.actions.visibleActionsQueue.find(\n      ({ type }) => type === 'swapAndBridge'\n    )\n\n    if (!pendingSwapAction) return false\n\n    const isSigningOrBroadcasting =\n      this.statuses.signAndBroadcastAccountOp === 'SIGNING' ||\n      this.statuses.signAndBroadcastAccountOp === 'BROADCASTING'\n\n    // The swap and bridge is done/forgotten so we can remove the action\n    if (!isSigningOrBroadcasting) {\n      this.actions.removeAction(pendingSwapAction.id)\n      this.swapAndBridge.reset()\n      // TODO: remove this ugly fix.\n      // Issue: https://github.com/AmbireTech/ambire-app/issues/4469\n      await wait(500)\n      return false\n    }\n\n    this.actions.focusActionWindow()\n    this.emitError({\n      level: 'major',\n      message: 'Please complete the pending swap action.',\n      error: new Error('Pending swap action')\n    })\n\n    if (throwRpcError) {\n      throw ethErrors.rpc.transactionRejected({\n        message: 'You have a pending swap action. Please complete it before signing.'\n      })\n    }\n\n    return true\n  }\n\n  async buildUserRequestFromDAppRequest(\n    request: DappProviderRequest,\n    dappPromise: {\n      session: { name: string; origin: string; icon: string }\n      resolve: (data: any) => void\n      reject: (data: any) => void\n    }\n  ) {\n    await this.#initialLoadPromise\n    await this.#swapAndBridgeActionSafeguard(true)\n\n    let userRequest = null\n    let actionPosition: ActionPosition = 'last'\n    const kind = dappRequestMethodToActionKind(request.method)\n    const dapp = this.dapps.getDapp(request.origin)\n\n    if (kind === 'calls') {\n      if (!this.selectedAccount.account) throw ethErrors.rpc.internal()\n      const network = this.networks.networks.find(\n        (n) => Number(n.chainId) === Number(dapp?.chainId)\n      )\n      if (!network) {\n        throw ethErrors.provider.chainDisconnected('Transaction failed - unknown network')\n      }\n\n      const baseAcc = getBaseAccount(\n        this.selectedAccount.account,\n        await this.accounts.getOrFetchAccountOnChainState(\n          this.selectedAccount.account.addr,\n          network.chainId\n        ),\n        this.keystore.getAccountKeys(this.selectedAccount.account),\n        network\n      )\n\n      const isWalletSendCalls = !!request.params[0].calls\n      const accountAddr = getAddress(request.params[0].from)\n\n      const calls: Calls['calls'] = isWalletSendCalls\n        ? request.params[0].calls\n        : [request.params[0]]\n      const paymasterService =\n        isWalletSendCalls && !!request.params[0].capabilities?.paymasterService\n          ? getPaymasterService(network.chainId, request.params[0].capabilities)\n          : getAmbirePaymasterService(baseAcc, this.#relayerUrl)\n\n      const atomicRequired = isWalletSendCalls && !!request.params[0].atomicRequired\n      if (isWalletSendCalls && atomicRequired && baseAcc.getAtomicStatus() === 'unsupported') {\n        throw ethErrors.provider.custom({\n          code: 5700,\n          message: 'Transaction failed - atomicity is not supported for this account'\n        })\n      }\n\n      const walletSendCallsVersion = isWalletSendCalls\n        ? request.params[0].version ?? '1.0.0'\n        : undefined\n\n      userRequest = {\n        id: new Date().getTime(),\n        action: {\n          kind,\n          calls: calls.map((call) => ({\n            to: call.to,\n            data: call.data || '0x',\n            value: call.value ? getBigInt(call.value) : 0n\n          }))\n        },\n        meta: {\n          isSignAction: true,\n          isWalletSendCalls,\n          walletSendCallsVersion,\n          accountAddr,\n          chainId: network.chainId,\n          paymasterService\n        },\n        dappPromise\n      } as SignUserRequest\n\n      const accountState = await this.accounts.getOrFetchAccountOnChainState(\n        accountAddr,\n        network.chainId\n      )\n      if (isBasicAccount(this.selectedAccount.account, accountState)) {\n        const otherUserRequestFromSameDapp = this.userRequests.find(\n          (r) => r.dappPromise?.session?.origin === dappPromise?.session?.origin\n        )\n\n        if (!otherUserRequestFromSameDapp && !!dappPromise?.session?.origin) {\n          actionPosition = 'first'\n        }\n      }\n    } else if (kind === 'message') {\n      if (!this.selectedAccount.account) throw ethErrors.rpc.internal()\n\n      const msg = request.params\n      if (!msg) {\n        throw ethErrors.rpc.invalidRequest('No msg request to sign')\n      }\n      const msgAddress = getAddress(msg?.[1])\n\n      const network = this.networks.networks.find(\n        (n) => Number(n.chainId) === Number(dapp?.chainId)\n      )\n\n      if (!network) {\n        throw ethErrors.provider.chainDisconnected('Transaction failed - unknown network')\n      }\n\n      userRequest = {\n        id: new Date().getTime(),\n        action: {\n          kind: 'message',\n          message: msg[0]\n        },\n        session: request.session,\n        meta: {\n          isSignAction: true,\n          accountAddr: msgAddress,\n          chainId: network.chainId\n        },\n        dappPromise\n      } as SignUserRequest\n    } else if (kind === 'typedMessage') {\n      if (!this.selectedAccount.account) throw ethErrors.rpc.internal()\n\n      const msg = request.params\n      if (!msg) {\n        throw ethErrors.rpc.invalidRequest('No msg request to sign')\n      }\n      const msgAddress = getAddress(msg?.[0])\n\n      const network = this.networks.networks.find(\n        (n) => Number(n.chainId) === Number(dapp?.chainId)\n      )\n\n      if (!network) {\n        throw ethErrors.provider.chainDisconnected('Transaction failed - unknown network')\n      }\n\n      let typedData = msg?.[1]\n\n      try {\n        typedData = parse(typedData)\n      } catch (error) {\n        throw ethErrors.rpc.invalidRequest('Invalid typedData provided')\n      }\n\n      if (\n        !typedData?.types ||\n        !typedData?.domain ||\n        !typedData?.message ||\n        !typedData?.primaryType\n      ) {\n        throw ethErrors.rpc.methodNotSupported(\n          'Invalid typedData format - only typedData v4 is supported'\n        )\n      }\n\n      if (\n        msgAddress === this.selectedAccount.account.addr &&\n        (typedData.primaryType === 'AmbireOperation' || !!typedData.types.AmbireOperation)\n      ) {\n        throw ethErrors.rpc.methodNotSupported('Signing an AmbireOperation is not allowed')\n      }\n\n      userRequest = {\n        id: new Date().getTime(),\n        action: {\n          kind: 'typedMessage',\n          types: typedData.types,\n          domain: typedData.domain,\n          message: typedData.message,\n          primaryType: typedData.primaryType\n        },\n        session: request.session,\n        meta: {\n          isSignAction: true,\n          accountAddr: msgAddress,\n          chainId: network.chainId\n        },\n        dappPromise\n      } as SignUserRequest\n    } else {\n      userRequest = {\n        id: new Date().getTime(),\n        session: request.session,\n        action: { kind, params: request.params },\n        meta: { isSignAction: false },\n        dappPromise\n      } as DappUserRequest\n    }\n\n    if (userRequest.action.kind !== 'calls') {\n      const otherUserRequestFromSameDapp = this.userRequests.find(\n        (r) => r.dappPromise?.session?.origin === dappPromise?.session?.origin\n      )\n\n      if (!otherUserRequestFromSameDapp && !!dappPromise?.session?.origin) {\n        actionPosition = 'first'\n      }\n    }\n\n    if (!userRequest) return\n\n    const isASignOperationRequestedForAnotherAccount =\n      userRequest.meta.isSignAction &&\n      userRequest.meta.accountAddr !== this.selectedAccount.account?.addr\n\n    // We can simply add the user request if it's not a sign operation\n    // for another account\n    if (!isASignOperationRequestedForAnotherAccount) {\n      await this.addUserRequest(\n        userRequest,\n        actionPosition,\n        actionPosition === 'first' || isSmartAccount(this.selectedAccount.account)\n          ? 'open-action-window'\n          : 'queue-but-open-action-window'\n      )\n      return\n    }\n\n    const accountError = this.#getUserRequestAccountError(\n      dappPromise.session.origin,\n      userRequest.meta.accountAddr\n    )\n\n    if (accountError) {\n      dappPromise.reject(ethErrors.provider.userRejectedRequest(accountError))\n      return\n    }\n\n    await this.#addSwitchAccountUserRequest(userRequest)\n  }\n\n  async buildTransferUserRequest(\n    amount: string,\n    recipientAddress: string,\n    selectedToken: TokenResult,\n    actionExecutionType: ActionExecutionType = 'open-action-window'\n  ) {\n    await this.#initialLoadPromise\n    if (!this.selectedAccount.account) return\n\n    const baseAcc = getBaseAccount(\n      this.selectedAccount.account,\n      await this.accounts.getOrFetchAccountOnChainState(\n        this.selectedAccount.account.addr,\n        selectedToken.chainId\n      ),\n      this.keystore.getAccountKeys(this.selectedAccount.account),\n      this.networks.networks.find((net) => net.chainId === selectedToken.chainId)!\n    )\n    const userRequest = buildTransferUserRequest({\n      selectedAccount: this.selectedAccount.account.addr,\n      amount,\n      selectedToken,\n      recipientAddress,\n      paymasterService: getAmbirePaymasterService(baseAcc, this.#relayerUrl)\n    })\n\n    if (!userRequest) {\n      this.emitError({\n        level: 'major',\n        message: 'Unexpected error while building transfer request',\n        error: new Error(\n          'buildUserRequestFromTransferRequest: bad parameters passed to buildTransferUserRequest'\n        )\n      })\n      return\n    }\n\n    await this.addUserRequest(userRequest, 'last', actionExecutionType)\n  }\n\n  async buildSwapAndBridgeUserRequest(activeRouteId?: SwapAndBridgeActiveRoute['activeRouteId']) {\n    await this.withStatus(\n      'buildSwapAndBridgeUserRequest',\n      async () => {\n        if (!this.selectedAccount.account) return\n        let transaction: SwapAndBridgeSendTxRequest | null | undefined = null\n\n        const activeRoute = this.swapAndBridge.activeRoutes.find(\n          (r) => r.activeRouteId === activeRouteId\n        )\n\n        // learn the receiving token\n        if (this.swapAndBridge.toSelectedToken && this.swapAndBridge.toChainId) {\n          this.portfolio.addTokensToBeLearned(\n            [this.swapAndBridge.toSelectedToken.address],\n            BigInt(this.swapAndBridge.toChainId)\n          )\n        }\n\n        if (this.swapAndBridge.signAccountOpController?.accountOp.meta?.swapTxn) {\n          transaction = this.swapAndBridge.signAccountOpController?.accountOp.meta?.swapTxn\n        }\n\n        if (activeRoute) {\n          this.removeUserRequest(activeRoute.activeRouteId, {\n            shouldRemoveSwapAndBridgeRoute: false,\n            shouldOpenNextRequest: false\n          })\n          this.swapAndBridge.updateActiveRoute(activeRoute.activeRouteId, { error: undefined })\n\n          transaction = await this.swapAndBridge.getNextRouteUserTx({\n            activeRouteId: activeRoute.activeRouteId,\n            activeRoute\n          })\n\n          if (transaction) {\n            const network = this.networks.networks.find(\n              (n) => Number(n.chainId) === transaction!.chainId\n            )!\n            if (\n              isBasicAccount(\n                this.selectedAccount.account,\n                await this.accounts.getOrFetchAccountOnChainState(\n                  this.selectedAccount.account.addr,\n                  network.chainId\n                )\n              )\n            ) {\n              this.removeUserRequest(`${activeRouteId}-revoke-approval`, {\n                shouldRemoveSwapAndBridgeRoute: false,\n                shouldOpenNextRequest: false\n              })\n              this.removeUserRequest(`${activeRouteId}-approval`, {\n                shouldRemoveSwapAndBridgeRoute: false,\n                shouldOpenNextRequest: false\n              })\n            }\n          }\n        }\n\n        if (!this.selectedAccount.account || !transaction) {\n          const errorDetails = `missing ${\n            this.selectedAccount.account ? 'selected account' : 'transaction'\n          } info`\n          const error = new SwapAndBridgeError(\n            `Something went wrong when preparing your request. Please try again later or contact Ambire support. Error details: <${errorDetails}>`\n          )\n          throw new EmittableError({ message: error.message, level: 'major', error })\n        }\n\n        const network = this.networks.networks.find(\n          (n) => Number(n.chainId) === transaction!.chainId\n        )!\n\n        // TODO: Consider refining the error handling in here, because this\n        // swallows errors and doesn't provide any feedback to the user.\n        const accountState = await this.accounts.getOrFetchAccountOnChainState(\n          this.selectedAccount.account.addr,\n          network.chainId\n        )\n        const baseAcc = getBaseAccount(\n          this.selectedAccount.account,\n          accountState,\n          this.keystore.getAccountKeys(this.selectedAccount.account),\n          network\n        )\n        const swapAndBridgeUserRequests = await buildSwapAndBridgeUserRequests(\n          transaction,\n          network.chainId,\n          this.selectedAccount.account,\n          this.providers.providers[network.chainId.toString()],\n          accountState,\n          getAmbirePaymasterService(baseAcc, this.#relayerUrl)\n        )\n\n        for (let i = 0; i < swapAndBridgeUserRequests.length; i++) {\n          if (i === 0) {\n            this.addUserRequest(swapAndBridgeUserRequests[i], 'last', 'queue')\n          } else {\n            await this.addUserRequest(swapAndBridgeUserRequests[i], 'last', 'queue')\n          }\n        }\n\n        if (this.swapAndBridge.formStatus === SwapAndBridgeFormStatus.ReadyToSubmit) {\n          await this.swapAndBridge.addActiveRoute({\n            activeRouteId: transaction.activeRouteId,\n            userTxIndex: transaction.userTxIndex\n          })\n        }\n\n        if (activeRouteId) {\n          this.swapAndBridge.updateActiveRoute(\n            activeRouteId,\n            {\n              userTxIndex: transaction.userTxIndex,\n              userTxHash: null\n            },\n            true\n          )\n        }\n\n        this.swapAndBridge.resetForm()\n      },\n      true\n    )\n  }\n\n  buildClaimWalletUserRequest(token: TokenResult) {\n    if (!this.selectedAccount.account) return\n\n    const claimableRewardsData =\n      this.selectedAccount.portfolio.latest.rewards?.result?.claimableRewardsData\n\n    if (!claimableRewardsData) return\n\n    const userRequest: UserRequest = buildClaimWalletRequest({\n      selectedAccount: this.selectedAccount.account.addr,\n      selectedToken: token,\n      claimableRewardsData\n    })\n\n    this.addUserRequest(userRequest)\n  }\n\n  buildMintVestingUserRequest(token: TokenResult) {\n    if (!this.selectedAccount.account) return\n\n    const addrVestingData = this.selectedAccount.portfolio.latest.rewards?.result?.addrVestingData\n\n    if (!addrVestingData) return\n    const userRequest: UserRequest = buildMintVestingRequest({\n      selectedAccount: this.selectedAccount.account.addr,\n      selectedToken: token,\n      addrVestingData\n    })\n\n    this.addUserRequest(userRequest)\n  }\n\n  resolveUserRequest(data: any, requestId: UserRequest['id']) {\n    const userRequest = this.userRequests.find((r) => r.id === requestId)\n    if (!userRequest) return // TODO: emit error\n\n    userRequest.dappPromise?.resolve(data)\n    // These requests are transitionary initiated internally (not dApp requests) that block dApp requests\n    // before being resolved. The timeout prevents the action-window from closing before the actual dApp request arrives\n    if (['unlock', 'dappConnect'].includes(userRequest.action.kind)) {\n      setTimeout(() => {\n        this.removeUserRequest(requestId)\n        this.emitUpdate()\n      }, 300)\n    } else {\n      this.removeUserRequest(requestId)\n      this.emitUpdate()\n    }\n  }\n\n  rejectUserRequest(err: string, requestId: UserRequest['id']) {\n    const userRequest = this.userRequests.find((r) => r.id === requestId)\n    if (!userRequest) return\n\n    // if the userRequest that is about to be removed is an approval request\n    // find and remove the associated pending transaction request if there is any\n    // this is valid scenario for a swap & bridge txs with a BA\n    if (userRequest.action.kind === 'calls') {\n      const acc = this.accounts.accounts.find((a) => a.addr === userRequest.meta.accountAddr)!\n\n      if (\n        isBasicAccount(acc, this.accounts.accountStates[acc.addr][userRequest.meta.chainId]) &&\n        userRequest.meta.isSwapAndBridgeCall\n      ) {\n        this.removeUserRequest(userRequest.meta.activeRouteId)\n        this.removeUserRequest(`${userRequest.meta.activeRouteId}-approval`)\n        this.removeUserRequest(`${userRequest.meta.activeRouteId}-revoke-approval`)\n      }\n    }\n\n    userRequest.dappPromise?.reject(ethErrors.provider.userRejectedRequest<any>(err))\n    this.removeUserRequest(requestId)\n  }\n\n  rejectSignAccountOpCall(callId: string) {\n    if (!this.signAccountOp) return\n\n    const { calls, chainId, accountAddr } = this.signAccountOp.accountOp\n\n    const requestId = calls.find((c) => c.id === callId)?.fromUserRequestId\n    if (requestId) {\n      const userRequestIndex = this.userRequests.findIndex((r) => r.id === requestId)\n      const userRequest = this.userRequests[userRequestIndex] as SignUserRequest\n      if (userRequest.action.kind === 'calls') {\n        ;(userRequest.action as Calls).calls = (userRequest.action as Calls).calls.filter(\n          (c) => c.id !== callId\n        )\n\n        if (userRequest.action.calls.length === 0) {\n          // the reject will remove the userRequest which will rebuild the action and update the signAccountOp\n          this.rejectUserRequest('User rejected the transaction request.', userRequest.id)\n        } else {\n          const accountOpAction = makeAccountOpAction({\n            account: this.accounts.accounts.find((a) => a.addr === accountAddr)!,\n            chainId,\n            nonce: this.accounts.accountStates[accountAddr][chainId.toString()].nonce,\n            userRequests: this.userRequests,\n            actionsQueue: this.actions.actionsQueue\n          })\n\n          this.actions.addOrUpdateAction(accountOpAction)\n          this.signAccountOp?.update({ calls: accountOpAction.accountOp.calls })\n        }\n      }\n    } else {\n      this.emitError({\n        message: 'Reject call: the call was not found or was not linked to a user request',\n        level: 'major',\n        error: new Error(\n          `Error: rejectAccountOpCall: userRequest for call with id ${callId} was not found`\n        )\n      })\n    }\n  }\n\n  removeActiveRoute(activeRouteId: SwapAndBridgeActiveRoute['activeRouteId']) {\n    const userRequest = this.userRequests.find((r) =>\n      [activeRouteId, `${activeRouteId}-approval`, `${activeRouteId}-revoke-approval`].includes(\n        r.id as string\n      )\n    )\n\n    if (userRequest) {\n      this.rejectUserRequest('User rejected the transaction request.', userRequest.id)\n    } else {\n      this.swapAndBridge.removeActiveRoute(activeRouteId)\n    }\n  }\n\n  async addUserRequest(\n    req: UserRequest,\n    actionPosition: ActionPosition = 'last',\n    actionExecutionType: ActionExecutionType = 'open-action-window',\n    allowAccountSwitch: boolean = false\n  ) {\n    const shouldSkipAddUserRequest = await this.#swapAndBridgeActionSafeguard()\n\n    if (shouldSkipAddUserRequest) return\n\n    if (\n      allowAccountSwitch &&\n      req.meta.isSignAction &&\n      req.meta.accountAddr !== this.selectedAccount.account?.addr\n    ) {\n      await this.#addSwitchAccountUserRequest(req)\n      return\n    }\n\n    if (req.action.kind === 'calls') {\n      ;(req.action as Calls).calls.forEach((_, i) => {\n        ;(req.action as Calls).calls[i].id = `${req.id}-${i}`\n      })\n    }\n    if (actionPosition === 'first') {\n      this.userRequests.unshift(req)\n    } else {\n      this.userRequests.push(req)\n    }\n\n    const { id, action, meta } = req\n    if (action.kind === 'calls') {\n      // @TODO\n      // one solution would be to, instead of checking, have a promise that we always await here, that is responsible for fetching\n      // account data; however, this won't work with EOA accountOps, which have to always pick the first userRequest for a particular acc/network,\n      // and be recalculated when one gets dismissed\n      // although it could work like this: 1) await the promise, 2) check if exists 3) if not, re-trigger the promise;\n      // 4) manage recalc on removeUserRequest too in order to handle EOAs\n      // @TODO consider re-using this whole block in removeUserRequest\n      const accountInfo = await this.#ensureAccountInfo(meta.accountAddr, meta.chainId)\n      if (!accountInfo.hasAccountInfo) {\n        // Reject request if we couldn't load the account and account state for the request\n        req.dappPromise?.reject(\n          ethErrors.provider.custom({\n            code: 1001,\n            message: accountInfo.errorMessage\n          })\n        )\n\n        // Remove the request as it's already added\n        this.removeUserRequest(req.id)\n\n        // Show a toast\n        throw new EmittableError({\n          level: 'major',\n          message: accountInfo.errorMessage,\n          error: new Error(\n            `Couldn't retrieve account information for network with id ${meta.chainId}, because of one of the following reasons: 1) network doesn't exist, 2) RPC is down for this network.`\n          )\n        })\n      }\n\n      if (this.#signAccountOpSigningPromise) {\n        console.error('addUserRequest called with active #signAccountOpSigningPromise')\n        await this.#signAccountOpSigningPromise\n      }\n\n      const account = this.accounts.accounts.find((x) => x.addr === meta.accountAddr)!\n      const accountState = await this.accounts.getOrFetchAccountOnChainState(\n        meta.accountAddr,\n        meta.chainId\n      )\n      const network = this.networks.networks.find((n) => n.chainId === meta.chainId)!\n\n      const accountOpAction = makeAccountOpAction({\n        account,\n        chainId: meta.chainId,\n        nonce: accountState.nonce,\n        userRequests: this.userRequests,\n        actionsQueue: this.actions.actionsQueue\n      })\n      this.actions.addOrUpdateAction(accountOpAction, actionPosition, actionExecutionType)\n      if (this.signAccountOp) {\n        if (this.signAccountOp.fromActionId === accountOpAction.id) {\n          this.signAccountOp.update({ calls: accountOpAction.accountOp.calls })\n        }\n      } else {\n        // Even without an initialized SignAccountOpController or Screen, we should still update the portfolio and run the simulation.\n        // It's necessary to continue operating with the token `amountPostSimulation` amount.\n        this.updateSelectedAccountPortfolio(true, network)\n      }\n    } else {\n      let actionType: 'dappRequest' | 'benzin' | 'signMessage' | 'switchAccount' = 'dappRequest'\n\n      if (req.action.kind === 'typedMessage' || req.action.kind === 'message') {\n        actionType = 'signMessage'\n\n        if (this.actions.visibleActionsQueue.find((a) => a.type === 'signMessage')) {\n          const msgReq = this.userRequests.find((uReq) => uReq.id === id)\n          if (!msgReq) return\n          msgReq.dappPromise?.reject(\n            ethErrors.provider.custom({\n              code: 1001,\n              message:\n                'Rejected: Please complete your pending message request before initiating a new one.'\n            })\n          )\n          this.userRequests.splice(this.userRequests.indexOf(msgReq), 1)\n          return\n        }\n      }\n      if (req.action.kind === 'benzin') actionType = 'benzin'\n      if (req.action.kind === 'switchAccount') actionType = 'switchAccount'\n      if (req.action.kind === 'authorization-7702') actionType = 'signMessage'\n\n      this.actions.addOrUpdateAction(\n        {\n          id,\n          type: actionType,\n          userRequest: req as UserRequest as never\n        },\n        actionPosition,\n        actionExecutionType\n      )\n    }\n\n    this.emitUpdate()\n  }\n\n  // @TODO allow this to remove multiple OR figure out a way to debounce re-estimations\n  // first one sounds more reasonable\n  // although the second one can't hurt and can help (or no debounce, just a one-at-a-time queue)\n  removeUserRequest(\n    id: UserRequest['id'],\n    options?: {\n      shouldRemoveSwapAndBridgeRoute: boolean\n      shouldUpdateAccount?: boolean\n      shouldOpenNextRequest?: boolean\n    }\n  ) {\n    const {\n      shouldRemoveSwapAndBridgeRoute = true,\n      shouldUpdateAccount = true,\n      shouldOpenNextRequest = true\n    } = options || {}\n    const req = this.userRequests.find((uReq) => uReq.id === id)\n    if (!req) return\n\n    // remove from the request queue\n    this.userRequests.splice(this.userRequests.indexOf(req), 1)\n\n    // update the pending stuff to be signed\n    const { action, meta } = req\n    if (action.kind === 'calls') {\n      const network = this.networks.networks.find((net) => net.chainId === meta.chainId)!\n      const account = this.accounts.accounts.find((x) => x.addr === meta.accountAddr)\n      if (!account)\n        throw new Error(\n          `batchCallsFromUserRequests: tried to run for non-existent account ${meta.accountAddr}`\n        )\n\n      const accountOpIndex = this.actions.actionsQueue.findIndex(\n        (a) => a.type === 'accountOp' && a.id === `${meta.accountAddr}-${meta.chainId}`\n      )\n      const accountOpAction = this.actions.actionsQueue[accountOpIndex] as\n        | AccountOpAction\n        | undefined\n      // accountOp has just been rejected or broadcasted\n      if (!accountOpAction) {\n        if (shouldUpdateAccount) this.updateSelectedAccountPortfolio(true, network)\n\n        if (this.swapAndBridge.activeRoutes.length && shouldRemoveSwapAndBridgeRoute) {\n          this.swapAndBridge.removeActiveRoute(meta.activeRouteId)\n        }\n        this.emitUpdate()\n        return\n      }\n\n      accountOpAction.accountOp.calls = this.#batchCallsFromUserRequests(\n        meta.accountAddr,\n        meta.chainId\n      )\n      if (accountOpAction.accountOp.calls.length) {\n        this.actions.addOrUpdateAction(accountOpAction)\n\n        if (this.signAccountOp && this.signAccountOp.fromActionId === accountOpAction.id) {\n          this.signAccountOp.update({ calls: accountOpAction.accountOp.calls })\n        }\n      } else {\n        if (this.signAccountOp && this.signAccountOp.fromActionId === accountOpAction.id) {\n          this.destroySignAccOp()\n        }\n        this.actions.removeAction(`${meta.accountAddr}-${meta.chainId}`, shouldOpenNextRequest)\n        if (shouldUpdateAccount) this.updateSelectedAccountPortfolio(true, network)\n      }\n      if (this.swapAndBridge.activeRoutes.length && shouldRemoveSwapAndBridgeRoute) {\n        this.swapAndBridge.removeActiveRoute(meta.activeRouteId)\n      }\n    } else if (id === ACCOUNT_SWITCH_USER_REQUEST) {\n      const requestsToAddOrRemove = this.userRequestWaitingAccountSwitch.filter(\n        (r) => r.meta.accountAddr === this.selectedAccount.account!.addr\n      )\n      const isSelectedAccountSwitched =\n        this.selectedAccount.account?.addr === (action as any).params!.switchToAccountAddr\n\n      if (!isSelectedAccountSwitched) {\n        this.actions.removeAction(id)\n      } else {\n        ;(async () => {\n          // eslint-disable-next-line no-restricted-syntax\n          for (const r of requestsToAddOrRemove) {\n            this.userRequestWaitingAccountSwitch.splice(this.userRequests.indexOf(r), 1)\n            await this.addUserRequest(r)\n          }\n        })()\n      }\n    } else {\n      this.actions.removeAction(id, shouldOpenNextRequest)\n    }\n    this.emitUpdate()\n  }\n\n  async addNetwork(network: AddNetworkRequestParams) {\n    await this.networks.addNetwork(network)\n\n    await this.updateSelectedAccountPortfolio()\n  }\n\n  async removeNetworkData(chainId: bigint) {\n    this.portfolio.removeNetworkData(chainId)\n    this.defiPositions.removeNetworkData(chainId)\n    this.accountPicker.removeNetworkData(chainId)\n    // Don't remove user activity for now because removing networks\n    // is no longer possible in the UI. Users can only disable networks\n    // and it doesn't make sense to delete their activity\n    // this.activity.removeNetworkData(chainId)\n  }\n\n  async resolveAccountOpAction(\n    submittedAccountOp: SubmittedAccountOp,\n    actionId: AccountOpAction['id'],\n    isBasicAccountBroadcastingMultiple: boolean\n  ) {\n    const accountOpAction = this.actions.actionsQueue.find((a) => a.id === actionId)\n    if (!accountOpAction) return\n\n    const { accountOp } = accountOpAction as AccountOpAction\n    const network = this.networks.networks.find((n) => n.chainId === accountOp.chainId)\n\n    if (!network) return\n\n    const calls: Call[] = submittedAccountOp.calls\n    const meta: SignUserRequest['meta'] = {\n      isSignAction: true,\n      accountAddr: accountOp.accountAddr,\n      chainId: network.chainId,\n      txnId: null,\n      userOpHash: null\n    }\n\n    if (submittedAccountOp) {\n      // can be undefined, check submittedAccountOp.ts\n      meta.txnId = submittedAccountOp.txnId\n      meta.identifiedBy = submittedAccountOp.identifiedBy\n      meta.submittedAccountOp = submittedAccountOp\n    }\n\n    if (!isBasicAccountBroadcastingMultiple) {\n      const benzinUserRequest: SignUserRequest = {\n        id: new Date().getTime(),\n        action: { kind: 'benzin' },\n        meta\n      }\n      await this.addUserRequest(benzinUserRequest, 'first')\n    }\n\n    this.actions.removeAction(actionId)\n\n    // handle wallet_sendCalls before activity.getConfirmedTxId as 1) it's faster\n    // 2) the identifier is different\n    // eslint-disable-next-line no-restricted-syntax\n    for (const call of calls) {\n      const walletSendCallsUserReq = this.userRequests.find(\n        (r) => r.id === call.fromUserRequestId && r.meta.isWalletSendCalls\n      )\n      if (walletSendCallsUserReq) {\n        walletSendCallsUserReq.dappPromise?.resolve({\n          hash: getDappIdentifier(submittedAccountOp)\n        })\n\n        this.removeUserRequest(walletSendCallsUserReq.id, {\n          shouldRemoveSwapAndBridgeRoute: false,\n          // Since `resolveAccountOpAction` is invoked only when we broadcast a transaction,\n          // we don't want to update the account portfolio immediately, as we would lose the simulation.\n          // The simulation is required to calculate the pending badges (see: calculatePendingAmounts()).\n          // Once the transaction is confirmed, delayed, or the user manually refreshes the portfolio,\n          // the account will be updated automatically.\n          shouldUpdateAccount: false\n        })\n      }\n    }\n\n    const dappHandlers = []\n    // eslint-disable-next-line no-restricted-syntax\n    for (const call of calls) {\n      const uReq = this.userRequests.find((r) => r.id === call.fromUserRequestId)\n      if (uReq) {\n        if (uReq.dappPromise) {\n          dappHandlers.push({\n            promise: uReq.dappPromise,\n            txnId: call.txnId\n          })\n        }\n\n        this.removeUserRequest(uReq.id, {\n          shouldRemoveSwapAndBridgeRoute: false,\n          // Since `resolveAccountOpAction` is invoked only when we broadcast a transaction,\n          // we don't want to update the account portfolio immediately, as we would lose the simulation.\n          // The simulation is required to calculate the pending badges (see: calculatePendingAmounts()).\n          // Once the transaction is confirmed, delayed, or the user manually refreshes the portfolio,\n          // the account will be updated automatically.\n          shouldUpdateAccount: false\n        })\n      }\n    }\n\n    this.resolveDappBroadcast(submittedAccountOp, dappHandlers)\n\n    this.emitUpdate()\n  }\n\n  rejectAccountOpAction(\n    err: string,\n    actionId: AccountOpAction['id'],\n    shouldOpenNextAction: boolean\n  ) {\n    const accountOpAction = this.actions.actionsQueue.find((a) => a.id === actionId)\n    if (!accountOpAction) return\n\n    const { accountOp, id } = accountOpAction as AccountOpAction\n\n    if (this.signAccountOp && this.signAccountOp.fromActionId === id) {\n      this.destroySignAccOp()\n    }\n    this.actions.removeAction(actionId, shouldOpenNextAction)\n    // eslint-disable-next-line no-restricted-syntax\n    for (const call of accountOp.calls) {\n      if (call.fromUserRequestId) this.rejectUserRequest(err, call.fromUserRequestId)\n    }\n\n    this.emitUpdate()\n  }\n\n  async #addSwitchAccountUserRequest(req: UserRequest) {\n    this.userRequestWaitingAccountSwitch.push(req)\n    await this.addUserRequest(\n      buildSwitchAccountUserRequest({\n        nextUserRequest: req,\n        selectedAccountAddr: req.meta.accountAddr,\n        session: req.dappPromise ? req.dappPromise.session : undefined,\n        dappPromise: req.dappPromise\n      }),\n      'last',\n      'open-action-window'\n    )\n  }\n\n  onOneClickSwapClose() {\n    const signAccountOp = this.swapAndBridge.signAccountOpController\n\n    // Always unload the screen when the action window is closed\n    this.swapAndBridge.unloadScreen('action-window', true)\n\n    if (!signAccountOp) return\n\n    // Remove the active route if it exists\n    if (signAccountOp.accountOp.meta?.swapTxn) {\n      this.swapAndBridge.removeActiveRoute(signAccountOp.accountOp.meta.swapTxn.activeRouteId)\n    }\n\n    this.#abortHWSign(signAccountOp)\n\n    const network = this.networks.networks.find(\n      (n) => n.chainId === signAccountOp.accountOp.chainId\n    )\n\n    this.updateSelectedAccountPortfolio(true, network)\n    this.emitUpdate()\n  }\n\n  async #handleTrezorCleanup() {\n    try {\n      await this.#windowManager.closePopupWithUrl('https://connect.trezor.io/9/popup.html')\n    } catch (e) {\n      console.error('Error while removing Trezor window', e)\n    }\n  }\n\n  /**\n   * There are 4 ways to broadcast an AccountOp:\n   *   1. For EOAs, there is only one way to do that. After\n   *   signing the transaction, the serialized signed transaction object gets\n   *   send to the network.\n   *   2. For smart accounts, when EOA pays the fee. Two signatures are needed\n   *   for this. The first one is the signature of the AccountOp itself. The\n   *   second one is the signature of the transaction that will be executed\n   *   by the smart account.\n   *   3. For smart accounts that broadcast the ERC-4337 way.\n   *   4. for smart accounts, when the Relayer does the broadcast.\n   *\n   */\n  async #broadcastSignedAccountOp(\n    signAccountOp: SignAccountOpController,\n    type: SignAccountOpType,\n    callId: string\n  ) {\n    if (this.statuses.signAndBroadcastAccountOp !== 'SIGNING') {\n      this.throwBroadcastAccountOp({\n        signAccountOp,\n        message: 'Pending broadcast. Please try again in a bit.'\n      })\n      return\n    }\n    const accountOp = signAccountOp.accountOp\n    const estimation = signAccountOp.estimation.estimation\n    const actionId = signAccountOp.fromActionId\n    const bundlerSwitcher = signAccountOp.bundlerSwitcher\n    const contactSupportPrompt = 'Please try again or contact support if the problem persists.'\n\n    if (\n      !accountOp ||\n      !estimation ||\n      !actionId ||\n      !accountOp.signingKeyAddr ||\n      !accountOp.signingKeyType ||\n      !accountOp.signature ||\n      !bundlerSwitcher ||\n      !accountOp.gasFeePayment\n    ) {\n      const message = `Missing mandatory transaction details. ${contactSupportPrompt}`\n      return this.throwBroadcastAccountOp({ signAccountOp, message })\n    }\n\n    const provider = this.providers.providers[accountOp.chainId.toString()]\n    const account = this.accounts.accounts.find((acc) => acc.addr === accountOp.accountAddr)\n    const network = this.networks.networks.find((n) => n.chainId === accountOp.chainId)\n\n    if (!provider) {\n      const networkName = network?.name || `network with id ${accountOp.chainId}`\n      const message = `Provider for ${networkName} not found. ${contactSupportPrompt}`\n      return this.throwBroadcastAccountOp({ signAccountOp, message })\n    }\n\n    if (!account) {\n      const addr = shortenAddress(accountOp.accountAddr, 13)\n      const message = `Account with address ${addr} not found. ${contactSupportPrompt}`\n      return this.throwBroadcastAccountOp({ signAccountOp, message })\n    }\n\n    if (!network) {\n      const message = `Network with id ${accountOp.chainId} not found. ${contactSupportPrompt}`\n      return this.throwBroadcastAccountOp({ signAccountOp, message })\n    }\n\n    this.statuses.signAndBroadcastAccountOp = 'BROADCASTING'\n    await this.forceEmitUpdate()\n\n    const accountState = await this.accounts.getOrFetchAccountOnChainState(\n      accountOp.accountAddr,\n      accountOp.chainId\n    )\n    const baseAcc = getBaseAccount(\n      account,\n      accountState,\n      this.keystore.getAccountKeys(account),\n      network\n    )\n    let transactionRes: {\n      txnId?: string\n      nonce: number\n      identifiedBy: AccountOpIdentifiedBy\n    } | null = null\n\n    // broadcasting by EOA is quite the same:\n    // 1) build a rawTxn 2) sign 3) broadcast\n    // we have one handle, just a diff rawTxn for each case\n    const rawTxnBroadcast = [\n      BROADCAST_OPTIONS.bySelf,\n      BROADCAST_OPTIONS.bySelf7702,\n      BROADCAST_OPTIONS.byOtherEOA,\n      BROADCAST_OPTIONS.delegation\n    ]\n\n    if (rawTxnBroadcast.includes(accountOp.gasFeePayment.broadcastOption)) {\n      const multipleTxnsBroadcastRes = []\n      const senderAddr = BROADCAST_OPTIONS.byOtherEOA\n        ? accountOp.gasFeePayment.paidBy\n        : accountOp.accountAddr\n      const nonce = await provider.getTransactionCount(senderAddr).catch((e) => e)\n\n      // @precaution\n      if (nonce instanceof Error) {\n        return this.throwBroadcastAccountOp({\n          signAccountOp,\n          message: 'RPC error. Please try again',\n          accountState\n        })\n      }\n\n      try {\n        const feePayerKey = this.keystore.getFeePayerKey(accountOp)\n        if (feePayerKey instanceof Error) {\n          return this.throwBroadcastAccountOp({\n            signAccountOp,\n            message: feePayerKey.message,\n            accountState\n          })\n        }\n        this.feePayerKey = feePayerKey\n        this.emitUpdate()\n\n        const signer = await this.keystore.getSigner(feePayerKey.addr, feePayerKey.type)\n        if (signer.init) {\n          signer.init(this.#externalSignerControllers[feePayerKey.type])\n        }\n\n        const txnLength = baseAcc.shouldBroadcastCallsSeparately(accountOp)\n          ? accountOp.calls.length\n          : 1\n        if (txnLength > 1) signAccountOp.update({ signedTransactionsCount: 0 })\n        for (let i = 0; i < txnLength; i++) {\n          const currentNonce = nonce + i\n          const rawTxn = await buildRawTransaction(\n            account,\n            accountOp,\n            accountState,\n            provider,\n            network,\n            currentNonce,\n            accountOp.gasFeePayment.broadcastOption,\n            accountOp.calls[i]\n          )\n          const signedTxn =\n            accountOp.gasFeePayment.broadcastOption === BROADCAST_OPTIONS.delegation\n              ? signer.signTransactionTypeFour(rawTxn, accountOp.meta!.delegation!)\n              : await signer.signRawTransaction(rawTxn)\n          if (callId !== this.#signAndBroadcastCallId) {\n            return\n          }\n          if (accountOp.gasFeePayment.broadcastOption === BROADCAST_OPTIONS.delegation) {\n            multipleTxnsBroadcastRes.push({\n              hash: await provider.send('eth_sendRawTransaction', [signedTxn])\n            })\n          } else {\n            multipleTxnsBroadcastRes.push(await provider.broadcastTransaction(signedTxn))\n          }\n          if (txnLength > 1) signAccountOp.update({ signedTransactionsCount: i + 1 })\n\n          // send the txn to the relayer if it's an EOA sending for itself\n          if (accountOp.gasFeePayment.broadcastOption !== BROADCAST_OPTIONS.byOtherEOA) {\n            this.callRelayer(`/v2/eoaSubmitTxn/${accountOp.chainId}`, 'POST', {\n              rawTxn: signedTxn\n            }).catch((e: any) => {\n              // eslint-disable-next-line no-console\n              console.log('failed to record EOA txn to relayer')\n              // eslint-disable-next-line no-console\n              console.log(e)\n            })\n          }\n        }\n        if (callId !== this.#signAndBroadcastCallId) return\n        transactionRes = {\n          nonce,\n          identifiedBy: {\n            type: txnLength > 1 ? 'MultipleTxns' : 'Transaction',\n            identifier: multipleTxnsBroadcastRes.map((res) => res.hash).join('-')\n          },\n          txnId:\n            txnLength === 1 ? multipleTxnsBroadcastRes.map((res) => res.hash).join('-') : undefined\n        }\n      } catch (error: any) {\n        if (this.#signAndBroadcastCallId !== callId) return\n        // eslint-disable-next-line no-console\n        console.error('Error broadcasting', error)\n        // for multiple txn cases\n        // if a batch of 5 txn is sent to Ledger for sign but the user reject\n        // #3, #1 and #2 are already broadcast. Reduce the accountOp's call\n        // to #1 and #2 and create a submittedAccountOp\n        if (multipleTxnsBroadcastRes.length) {\n          transactionRes = {\n            nonce,\n            identifiedBy: {\n              type: 'MultipleTxns',\n              identifier: multipleTxnsBroadcastRes.map((res) => res.hash).join('-')\n            }\n          }\n        } else {\n          return this.throwBroadcastAccountOp({ signAccountOp, error, accountState })\n        }\n      } finally {\n        if (this.#signAndBroadcastCallId === callId) {\n          signAccountOp.update({ signedTransactionsCount: null })\n        }\n      }\n    }\n    // Smart account, the ERC-4337 way\n    else if (accountOp.gasFeePayment?.broadcastOption === BROADCAST_OPTIONS.byBundler) {\n      const userOperation = accountOp.asUserOperation\n      if (!userOperation) {\n        const accAddr = shortenAddress(accountOp.accountAddr, 13)\n        const message = `Trying to broadcast an ERC-4337 request but userOperation is not set for the account with address ${accAddr}`\n        return this.throwBroadcastAccountOp({ signAccountOp, message, accountState })\n      }\n\n      // broadcast through bundler's service\n      let userOperationHash\n      const bundler = bundlerSwitcher.getBundler()\n      try {\n        userOperationHash = await bundler.broadcast(userOperation, network)\n      } catch (e: any) {\n        let retryMsg\n\n        // if the signAccountOp is still active (it should be)\n        // try to switch the bundler and ask the user to try again\n        // TODO: explore more error case where we switch the bundler\n        if (signAccountOp) {\n          const decodedError = bundler.decodeBundlerError(e)\n          const humanReadable = getHumanReadableBroadcastError(decodedError)\n          const switcher = signAccountOp.bundlerSwitcher\n          signAccountOp.updateStatus(SigningStatus.ReadyToSign)\n\n          if (switcher.canSwitch(account, humanReadable)) {\n            switcher.switch()\n            signAccountOp.simulate()\n            signAccountOp.gasPrice.fetch()\n            retryMsg = 'Broadcast failed because bundler was down. Please try again'\n          }\n        }\n\n        return this.throwBroadcastAccountOp({\n          signAccountOp,\n          error: e,\n          accountState,\n          provider,\n          network,\n          message: retryMsg\n        })\n      }\n      if (!userOperationHash) {\n        return this.throwBroadcastAccountOp({\n          signAccountOp,\n          message: 'Bundler broadcast failed. Please try broadcasting by an EOA or contact support.'\n        })\n      }\n\n      transactionRes = {\n        nonce: Number(userOperation.nonce),\n        identifiedBy: {\n          type: 'UserOperation',\n          identifier: userOperationHash,\n          bundler: bundler.getName()\n        }\n      }\n    }\n    // Smart account, the Relayer way\n    else {\n      try {\n        const body = {\n          gasLimit: Number(accountOp.gasFeePayment!.simulatedGasLimit),\n          txns: getSignableCalls(accountOp),\n          signature: accountOp.signature,\n          signer: { address: accountOp.signingKeyAddr },\n          nonce: Number(accountOp.nonce)\n        }\n        const additionalRelayerNetwork = relayerAdditionalNetworks.find(\n          (net) => net.chainId === network.chainId\n        )\n        const relayerChainId = additionalRelayerNetwork\n          ? additionalRelayerNetwork.chainId\n          : accountOp.chainId\n        const response = await this.callRelayer(\n          `/identity/${accountOp.accountAddr}/${relayerChainId}/submit`,\n          'POST',\n          body\n        )\n        if (!response.success) throw new Error(response.message)\n\n        transactionRes = {\n          txnId: response.txId,\n          nonce: Number(accountOp.nonce),\n          identifiedBy: {\n            type: 'Relayer',\n            identifier: response.id\n          }\n        }\n      } catch (error: any) {\n        return this.throwBroadcastAccountOp({ signAccountOp, error, accountState, isRelayer: true })\n      }\n    }\n\n    if (this.#signAndBroadcastCallId !== callId) return\n\n    if (!transactionRes)\n      return this.throwBroadcastAccountOp({\n        signAccountOp,\n        message: 'No transaction response received after being broadcasted.'\n      })\n\n    // simulate the swap & bridge only after a succesfull broadcast\n    if (type === SIGN_ACCOUNT_OP_SWAP) {\n      this.swapAndBridge.signAccountOpController?.simulateSwapOrBridge().then(() => {\n        this.portfolio.markSimulationAsBroadcasted(account.addr, network.chainId)\n      })\n    } else {\n      this.portfolio.markSimulationAsBroadcasted(account.addr, network.chainId)\n    }\n\n    const submittedAccountOp: SubmittedAccountOp = {\n      ...accountOp,\n      status: AccountOpStatus.BroadcastedButNotConfirmed,\n      txnId: transactionRes.txnId,\n      nonce: BigInt(transactionRes.nonce),\n      identifiedBy: transactionRes.identifiedBy,\n      timestamp: new Date().getTime(),\n      isSingletonDeploy: !!accountOp.calls.find(\n        (call) => call.to && getAddress(call.to) === SINGLETON\n      )\n    }\n\n    // add the txnIds from each transaction to each Call from the accountOp\n    // if identifiedBy is MultipleTxns\n    const isBasicAccountBroadcastingMultiple = transactionRes.identifiedBy.type === 'MultipleTxns'\n    if (isBasicAccountBroadcastingMultiple) {\n      const txnIds = transactionRes.identifiedBy.identifier.split('-')\n      const calls = submittedAccountOp.calls\n        .map((oneCall, i) => {\n          const localCall = { ...oneCall }\n\n          // we're cutting off calls the user didn't sign / weren't broadcast\n          if (!(i in txnIds)) return null\n\n          localCall.txnId = txnIds[i] as Hex\n          localCall.status = AccountOpStatus.BroadcastedButNotConfirmed\n          return localCall\n        })\n        .filter((aCall) => aCall !== null) as Call[]\n      submittedAccountOp.calls = calls\n\n      // Handle the calls that weren't signed\n      const rejectedCalls = accountOp.calls.filter((call) =>\n        submittedAccountOp.calls.every((c) => c.id !== call.id)\n      )\n      const rejectedSwapActiveRouteIds = rejectedCalls.map((call) => {\n        const userRequest = this.userRequests.find((r) => r.id === call.fromUserRequestId)\n\n        return userRequest?.meta.activeRouteId\n      })\n\n      rejectedSwapActiveRouteIds.forEach((routeId) => {\n        this.removeActiveRoute(routeId)\n      })\n\n      if (rejectedCalls.length) {\n        // remove the user requests that were rejected\n        rejectedCalls.forEach((call) => {\n          if (!call.fromUserRequestId) return\n          this.rejectUserRequest('Transaction rejected by the bundler', call.fromUserRequestId)\n        })\n      }\n    }\n\n    this.swapAndBridge.handleUpdateActiveRouteOnSubmittedAccountOpStatusUpdate(submittedAccountOp)\n    await this.activity.addAccountOp(submittedAccountOp)\n\n    // resolve dapp requests, open benzin and etc only if the main sign accountOp\n    if (type === SIGN_ACCOUNT_OP_MAIN) {\n      await this.resolveAccountOpAction(\n        submittedAccountOp,\n        actionId,\n        isBasicAccountBroadcastingMultiple\n      )\n    }\n    // TODO<Bobby>: make a new SwapAndBridgeFormStatus \"Broadcast\" and\n    // visualize the success page on the FE instead of resetting the form\n    if (type === SIGN_ACCOUNT_OP_SWAP) {\n      this.swapAndBridge.resetForm()\n    }\n\n    await this.#notificationManager.create({\n      title:\n        // different count can happen only on isBasicAccountBroadcastingMultiple\n        submittedAccountOp.calls.length === accountOp.calls.length\n          ? 'Done!'\n          : 'Partially submitted',\n      message: `${\n        isBasicAccountBroadcastingMultiple\n          ? `${submittedAccountOp.calls.length}/${accountOp.calls.length} transactions were`\n          : 'The transaction was'\n      } successfully signed and broadcast to the network.`\n    })\n\n    // reset the fee payer key\n    this.feePayerKey = null\n    return Promise.resolve()\n  }\n\n  // ! IMPORTANT !\n  // Banners that depend on async data from sub-controllers should be implemented\n  // in the sub-controllers themselves. This is because updates in the sub-controllers\n  // will not trigger emitUpdate in the MainController, therefore the banners will\n  // remain the same until a subsequent update in the MainController.\n  get banners(): Banner[] {\n    if (!this.selectedAccount.account || !this.networks.isInitialized) return []\n\n    const activeSwapAndBridgeRoutesForSelectedAccount = getActiveRoutesForAccount(\n      this.selectedAccount.account.addr,\n      this.swapAndBridge.activeRoutes\n    )\n    const swapAndBridgeRoutesPendingSignature = activeSwapAndBridgeRoutesForSelectedAccount.filter(\n      (r) => r.routeStatus === 'ready'\n    )\n\n    return getAccountOpBanners({\n      accountOpActionsByNetwork: getAccountOpActionsByNetwork(\n        this.selectedAccount.account.addr,\n        this.actions.actionsQueue\n      ),\n      selectedAccount: this.selectedAccount.account.addr,\n      accounts: this.accounts.accounts,\n      networks: this.networks.networks,\n      swapAndBridgeRoutesPendingSignature\n    })\n  }\n\n  // Technically this is an anti-pattern, but it's the only way to\n  // test the error handling in the method.\n  protected throwBroadcastAccountOp({\n    signAccountOp,\n    message: humanReadableMessage,\n    error: _err,\n    accountState,\n    isRelayer = false,\n    provider = undefined,\n    network = undefined\n  }: {\n    signAccountOp: SignAccountOpController\n    message?: string\n    error?: Error\n    accountState?: AccountOnchainState\n    isRelayer?: boolean\n    provider?: RPCProvider\n    network?: Network\n  }) {\n    const originalMessage = _err?.message\n    let message = humanReadableMessage\n    let isReplacementFeeLow = false\n\n    this.statuses.signAndBroadcastAccountOp = 'ERROR'\n    this.forceEmitUpdate()\n\n    if (originalMessage) {\n      if (originalMessage.includes('replacement fee too low')) {\n        message =\n          'Replacement fee is insufficient. Fees have been automatically adjusted so please try submitting your transaction again.'\n        isReplacementFeeLow = true\n        if (signAccountOp) {\n          signAccountOp.simulate(false)\n        }\n      } else if (originalMessage.includes('INSUFFICIENT_PRIVILEGE')) {\n        message = accountState?.isV2\n          ? 'Broadcast failed because of a pending transaction. Please try again'\n          : 'Signer key not supported on this network'\n      } else if (originalMessage.includes('underpriced')) {\n        message =\n          'Transaction fee underpriced. Please select a higher transaction speed and try again'\n        if (signAccountOp) {\n          signAccountOp.gasPrice.fetch()\n          signAccountOp.simulate(false)\n        }\n      } else if (originalMessage.includes('Failed to fetch') && isRelayer) {\n        message =\n          'Currently, the Ambire relayer seems to be down. Please try again a few moments later or broadcast with an EOA account'\n      } else if (originalMessage.includes('user nonce') && isRelayer) {\n        if (this.signAccountOp) {\n          this.accounts\n            .updateAccountState(this.signAccountOp.accountOp.accountAddr, 'pending', [\n              this.signAccountOp.accountOp.chainId\n            ])\n            .then(() => this.signAccountOp?.simulate())\n            .catch((e) => e)\n        }\n      }\n    }\n\n    if (!message) {\n      message = getHumanReadableBroadcastError(_err || new Error('')).message\n\n      // if the message states that the paymaster doesn't have sufficient amount,\n      // add it to the failedPaymasters to disable it until a top-up is made\n      if (message.includes(insufficientPaymasterFunds) && provider && network) {\n        failedPaymasters.addInsufficientFunds(provider, network).then(() => {\n          if (signAccountOp) {\n            signAccountOp.simulate(false)\n          }\n        })\n      }\n      if (message.includes('the selected fee is too low')) {\n        signAccountOp.gasPrice.fetch()\n      }\n    }\n\n    // To enable another try for signing in case of broadcast fail\n    // broadcast is called in the FE only after successful signing\n    signAccountOp?.updateStatus(SigningStatus.ReadyToSign, isReplacementFeeLow)\n    this.feePayerKey = null\n\n    // remove the active route on broadcast failure\n    if (signAccountOp?.accountOp.meta?.swapTxn) {\n      this.swapAndBridge.removeActiveRoute(signAccountOp.accountOp.meta.swapTxn.activeRouteId)\n    }\n\n    throw new EmittableError({ level: 'major', message, error: _err || new Error(message) })\n  }\n\n  get isSignRequestStillActive(): boolean {\n    if (!this.signAccountOp) return false\n\n    return !!this.actions.actionsQueue.find((a) => a.id === this.signAccountOp!.fromActionId)\n  }\n\n  // includes the getters in the stringified instance\n  toJSON() {\n    return {\n      ...this,\n      ...super.toJSON(),\n      banners: this.banners,\n      isSignRequestStillActive: this.isSignRequestStillActive\n    }\n  }\n}\n"]}