{"version":3,"file":"transfer.js","sourceRoot":"","sources":["../../../../src/controllers/transfer/transfer.ts"],"names":[],"mappings":"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","sourcesContent":["import { formatUnits, isAddress, parseUnits } from 'ethers'\n\nimport { FEE_COLLECTOR } from '../../consts/addresses'\nimport { Account } from '../../interfaces/account'\nimport { AddressState } from '../../interfaces/domains'\nimport { Network } from '../../interfaces/network'\nimport { Storage } from '../../interfaces/storage'\nimport { TransferUpdate } from '../../interfaces/transfer'\nimport { isSmartAccount } from '../../libs/account/account'\nimport { HumanizerMeta } from '../../libs/humanizer/interfaces'\nimport { TokenResult } from '../../libs/portfolio'\nimport { getTokenAmount } from '../../libs/portfolio/helpers'\nimport { getSanitizedAmount } from '../../libs/transfer/amount'\nimport { validateSendTransferAddress, validateSendTransferAmount } from '../../services/validations'\nimport { convertTokenPriceToBigInt } from '../../utils/numbers/formatters'\nimport { Contacts } from '../addressBook/addressBook'\nimport EventEmitter from '../eventEmitter/eventEmitter'\n\nconst CONVERSION_PRECISION = 16\nconst CONVERSION_PRECISION_POW = BigInt(10 ** CONVERSION_PRECISION)\n\nconst DEFAULT_ADDRESS_STATE = {\n  fieldValue: '',\n  ensAddress: '',\n  udAddress: '',\n  isDomainResolving: false\n}\n\nconst DEFAULT_VALIDATION_FORM_MSGS = {\n  amount: {\n    success: false,\n    message: ''\n  },\n  recipientAddress: {\n    success: false,\n    message: ''\n  }\n}\n\nconst HARD_CODED_CURRENCY = 'usd'\n\nexport class TransferController extends EventEmitter {\n  #storage: Storage\n\n  #networks: Network[] = []\n\n  #addressBookContacts: Contacts = []\n\n  #selectedToken: TokenResult | null = null\n\n  #selectedAccountData: Account | null = null\n\n  #humanizerInfo: HumanizerMeta | null = null\n\n  isSWWarningVisible = false\n\n  isSWWarningAgreed = false\n\n  amount = ''\n\n  amountInFiat = ''\n\n  amountFieldMode: 'fiat' | 'token' = 'token'\n\n  addressState: AddressState = { ...DEFAULT_ADDRESS_STATE }\n\n  isRecipientAddressUnknown = false\n\n  isRecipientAddressUnknownAgreed = false\n\n  isRecipientHumanizerKnownTokenOrSmartContract = false\n\n  isTopUp: boolean = false\n\n  #shouldSkipTransactionQueuedModal: boolean = false\n\n  // Holds the initial load promise, so that one can wait until it completes\n  #initialLoadPromise: Promise<void>\n\n  constructor(\n    storage: Storage,\n    humanizerInfo: HumanizerMeta,\n    selectedAccountData: Account,\n    networks: Network[]\n  ) {\n    super()\n\n    this.#storage = storage\n    this.#humanizerInfo = humanizerInfo\n    this.#selectedAccountData = selectedAccountData\n    this.#networks = networks\n\n    this.#initialLoadPromise = this.#load()\n    this.emitUpdate()\n  }\n\n  async #load() {\n    this.#shouldSkipTransactionQueuedModal = await this.#storage.get(\n      'shouldSkipTransactionQueuedModal',\n      false\n    )\n\n    this.emitUpdate()\n  }\n\n  get shouldSkipTransactionQueuedModal() {\n    return this.#shouldSkipTransactionQueuedModal\n  }\n\n  set shouldSkipTransactionQueuedModal(value: boolean) {\n    this.#shouldSkipTransactionQueuedModal = value\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.#storage.set('shouldSkipTransactionQueuedModal', value)\n    this.emitUpdate()\n  }\n\n  // every time when updating selectedToken update the amount and maxAmount of the form\n  set selectedToken(token: TokenResult | null) {\n    if (!token || Number(getTokenAmount(token)) === 0) {\n      this.#selectedToken = null\n      this.amount = ''\n      this.amountInFiat = ''\n      this.amountFieldMode = 'token'\n      return\n    }\n\n    const prevSelectedToken = { ...this.selectedToken }\n\n    this.#selectedToken = token\n\n    if (\n      prevSelectedToken?.address !== token?.address ||\n      prevSelectedToken?.networkId !== token?.networkId\n    ) {\n      if (!token.priceIn.length) {\n        this.amountFieldMode = 'token'\n      }\n      this.amount = ''\n      this.amountInFiat = ''\n      this.#setSWWarningVisibleIfNeeded()\n    }\n  }\n\n  get selectedToken() {\n    return this.#selectedToken\n  }\n\n  get maxAmount(): string {\n    if (\n      !this.selectedToken ||\n      getTokenAmount(this.selectedToken) === 0n ||\n      typeof this.selectedToken.decimals !== 'number'\n    )\n      return '0'\n\n    return formatUnits(getTokenAmount(this.selectedToken), this.selectedToken.decimals)\n  }\n\n  get maxAmountInFiat(): string {\n    if (!this.selectedToken || getTokenAmount(this.selectedToken) === 0n) return '0'\n\n    const tokenPrice = this.selectedToken?.priceIn.find(\n      (p) => p.baseCurrency === HARD_CODED_CURRENCY\n    )?.price\n    if (!tokenPrice || !Number(this.maxAmount)) return '0'\n\n    const maxAmount = getTokenAmount(this.selectedToken)\n    const { tokenPriceBigInt, tokenPriceDecimals } = convertTokenPriceToBigInt(tokenPrice)\n\n    // Multiply the max amount by the token price. The calculation is done in big int to avoid precision loss\n    return formatUnits(\n      maxAmount * tokenPriceBigInt,\n      // Shift the decimal point by the number of decimals in the token price\n      this.selectedToken.decimals + tokenPriceDecimals\n    )\n  }\n\n  resetForm() {\n    this.amount = ''\n    this.amountInFiat = ''\n    this.addressState = { ...DEFAULT_ADDRESS_STATE }\n    this.isRecipientAddressUnknown = false\n    this.isRecipientAddressUnknownAgreed = false\n    this.isRecipientHumanizerKnownTokenOrSmartContract = false\n    this.isSWWarningVisible = false\n    this.isSWWarningAgreed = false\n\n    this.emitUpdate()\n  }\n\n  get validationFormMsgs() {\n    if (!this.isInitialized) return DEFAULT_VALIDATION_FORM_MSGS\n\n    const validationFormMsgsNew = DEFAULT_VALIDATION_FORM_MSGS\n\n    if (this.#humanizerInfo && this.#selectedAccountData) {\n      const isUDAddress = !!this.addressState.udAddress\n      const isEnsAddress = !!this.addressState.ensAddress\n\n      validationFormMsgsNew.recipientAddress = validateSendTransferAddress(\n        this.recipientAddress,\n        this.#selectedAccountData.addr,\n        this.isRecipientAddressUnknownAgreed,\n        this.isRecipientAddressUnknown,\n        this.isRecipientHumanizerKnownTokenOrSmartContract,\n        isUDAddress,\n        isEnsAddress,\n        this.addressState.isDomainResolving,\n        this.isSWWarningVisible,\n        this.isSWWarningAgreed\n      )\n    }\n\n    // Validate the amount\n    if (this.selectedToken) {\n      validationFormMsgsNew.amount = validateSendTransferAmount(\n        this.amount,\n        Number(this.maxAmount),\n        Number(this.maxAmountInFiat),\n        this.selectedToken\n      )\n    }\n\n    return validationFormMsgsNew\n  }\n\n  get isFormValid() {\n    if (!this.isInitialized) return false\n\n    // if the amount is set, it's enough in topUp mode\n    if (this.isTopUp) {\n      return (\n        this.selectedToken &&\n        validateSendTransferAmount(\n          this.amount,\n          Number(this.maxAmount),\n          Number(this.maxAmountInFiat),\n          this.selectedToken\n        ).success\n      )\n    }\n\n    const areFormFieldsValid =\n      this.validationFormMsgs.amount.success && this.validationFormMsgs.recipientAddress.success\n\n    const isSWWarningMissingOrAccepted = !this.isSWWarningVisible || this.isSWWarningAgreed\n\n    const isRecipientAddressUnknownMissingOrAccepted =\n      !this.isRecipientAddressUnknown || this.isRecipientAddressUnknownAgreed\n\n    return (\n      areFormFieldsValid &&\n      isSWWarningMissingOrAccepted &&\n      isRecipientAddressUnknownMissingOrAccepted &&\n      !this.addressState.isDomainResolving\n    )\n  }\n\n  get isInitialized() {\n    return !!this.#humanizerInfo && !!this.#selectedAccountData && !!this.#networks.length\n  }\n\n  get recipientAddress() {\n    return (\n      this.addressState.ensAddress || this.addressState.udAddress || this.addressState.fieldValue\n    )\n  }\n\n  update({\n    selectedAccountData,\n    humanizerInfo,\n    selectedToken,\n    amount,\n    addressState,\n    isSWWarningAgreed,\n    isRecipientAddressUnknownAgreed,\n    isTopUp,\n    networks,\n    contacts,\n    amountFieldMode\n  }: TransferUpdate) {\n    if (humanizerInfo) {\n      this.#humanizerInfo = humanizerInfo\n    }\n    if (networks) {\n      this.#networks = networks\n    }\n    if (contacts) {\n      this.#addressBookContacts = contacts\n\n      if (this.isInitialized) {\n        this.checkIsRecipientAddressUnknown()\n      }\n    }\n    if (selectedAccountData) {\n      if (this.#selectedAccountData?.addr !== selectedAccountData.addr) {\n        this.#setAmount('')\n        this.selectedToken = null\n      }\n      this.#selectedAccountData = selectedAccountData\n    }\n    if (selectedToken) {\n      this.selectedToken = selectedToken\n    }\n    // If we do a regular check the value won't update if it's '' or '0'\n    if (typeof amount === 'string') {\n      this.#setAmount(amount)\n    }\n    if (amountFieldMode) {\n      this.amountFieldMode = amountFieldMode\n    }\n\n    if (addressState) {\n      this.addressState = {\n        ...this.addressState,\n        ...addressState\n      }\n      if (this.isInitialized) {\n        this.#onRecipientAddressChange()\n      }\n    }\n    // We can do a regular check here, because the property defines if it should be updated\n    // and not the actual value\n    if (isSWWarningAgreed) {\n      this.isSWWarningAgreed = !this.isSWWarningAgreed\n    }\n    // We can do a regular check here, because the property defines if it should be updated\n    // and not the actual value\n    if (isRecipientAddressUnknownAgreed) {\n      this.isRecipientAddressUnknownAgreed = !this.isRecipientAddressUnknownAgreed\n    }\n\n    if (typeof isTopUp === 'boolean') {\n      this.isTopUp = isTopUp\n      this.#setSWWarningVisibleIfNeeded()\n    }\n\n    this.emitUpdate()\n  }\n\n  checkIsRecipientAddressUnknown() {\n    if (!isAddress(this.recipientAddress)) {\n      this.isRecipientAddressUnknown = false\n      this.isRecipientAddressUnknownAgreed = false\n\n      this.emitUpdate()\n      return\n    }\n    const isAddressInAddressBook = this.#addressBookContacts.some(\n      ({ address }) => address.toLowerCase() === this.recipientAddress.toLowerCase()\n    )\n\n    this.isRecipientAddressUnknown =\n      !isAddressInAddressBook && this.recipientAddress.toLowerCase() !== FEE_COLLECTOR.toLowerCase()\n    this.isRecipientAddressUnknownAgreed = false\n    this.#setSWWarningVisibleIfNeeded()\n\n    this.emitUpdate()\n  }\n\n  #onRecipientAddressChange() {\n    if (!isAddress(this.recipientAddress)) {\n      this.isRecipientAddressUnknown = false\n      this.isRecipientAddressUnknownAgreed = false\n      this.isRecipientHumanizerKnownTokenOrSmartContract = false\n      this.isSWWarningVisible = false\n      this.isSWWarningAgreed = false\n\n      return\n    }\n\n    if (this.#humanizerInfo) {\n      // @TODO: could fetch address code\n      this.isRecipientHumanizerKnownTokenOrSmartContract =\n        !!this.#humanizerInfo.knownAddresses[this.recipientAddress.toLowerCase()]?.isSC\n    }\n\n    this.checkIsRecipientAddressUnknown()\n  }\n\n  #setAmount(fieldValue: string) {\n    if (!fieldValue) {\n      this.amount = ''\n      this.amountInFiat = ''\n      return\n    }\n\n    const tokenPrice = this.selectedToken?.priceIn.find(\n      (p) => p.baseCurrency === HARD_CODED_CURRENCY\n    )?.price\n\n    if (!tokenPrice) {\n      this.amount = fieldValue\n      this.amountInFiat = ''\n      return\n    }\n\n    if (this.amountFieldMode === 'fiat' && typeof this.selectedToken?.decimals === 'number') {\n      this.amountInFiat = fieldValue\n\n      // Get the number of decimals\n      const amountInFiatDecimals = fieldValue.split('.')[1]?.length || 0\n      const { tokenPriceBigInt, tokenPriceDecimals } = convertTokenPriceToBigInt(tokenPrice)\n\n      // Convert the numbers to big int\n      const amountInFiatBigInt = parseUnits(fieldValue, amountInFiatDecimals)\n\n      this.amount = formatUnits(\n        (amountInFiatBigInt * CONVERSION_PRECISION_POW) / tokenPriceBigInt,\n        // Shift the decimal point by the number of decimals in the token price\n        amountInFiatDecimals + CONVERSION_PRECISION - tokenPriceDecimals\n      )\n\n      return\n    }\n    if (this.amountFieldMode === 'token') {\n      this.amount = fieldValue\n\n      if (!this.selectedToken) return\n\n      const sanitizedFieldValue = getSanitizedAmount(fieldValue, this.selectedToken.decimals)\n      // Convert the field value to big int\n      const formattedAmount = parseUnits(sanitizedFieldValue, this.selectedToken.decimals)\n\n      if (!formattedAmount) return\n\n      const { tokenPriceBigInt, tokenPriceDecimals } = convertTokenPriceToBigInt(tokenPrice)\n\n      this.amountInFiat = formatUnits(\n        formattedAmount * tokenPriceBigInt,\n        // Shift the decimal point by the number of decimals in the token price\n        this.selectedToken.decimals + tokenPriceDecimals\n      )\n    }\n  }\n\n  #setSWWarningVisibleIfNeeded() {\n    if (!this.#selectedAccountData) return\n\n    this.isSWWarningVisible =\n      this.isRecipientAddressUnknown &&\n      isSmartAccount(this.#selectedAccountData) &&\n      !this.isTopUp &&\n      !!this.selectedToken?.address &&\n      Number(this.selectedToken?.address) === 0 &&\n      this.#networks\n        .filter((n) => n.id !== 'ethereum')\n        .map(({ id }) => id)\n        .includes(this.selectedToken.networkId || 'ethereum')\n\n    this.emitUpdate()\n  }\n\n  // includes the getters in the stringified instance\n  toJSON() {\n    return {\n      ...this,\n      ...super.toJSON(),\n      validationFormMsgs: this.validationFormMsgs,\n      isFormValid: this.isFormValid,\n      isInitialized: this.isInitialized,\n      selectedToken: this.selectedToken,\n      maxAmount: this.maxAmount,\n      maxAmountInFiat: this.maxAmountInFiat,\n      shouldSkipTransactionQueuedModal: this.shouldSkipTransactionQueuedModal\n    }\n  }\n}\n"]}