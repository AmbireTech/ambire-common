{"version":3,"file":"signAccountOp.js","sourceRoot":"","sources":["../../../../src/controllers/signAccountOp/signAccountOp.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  AbiCoder,\n  formatEther,\n  formatUnits,\n  getAddress,\n  Interface,\n  toBeHex,\n  ZeroAddress\n} from 'ethers'\n\nimport AmbireAccount from '../../../contracts/compiled/AmbireAccount.json'\nimport ERC20 from '../../../contracts/compiled/IERC20.json'\nimport { FEE_COLLECTOR } from '../../consts/addresses'\nimport { BUNDLER } from '../../consts/bundlers'\nimport { SINGLETON } from '../../consts/deploy'\nimport gasTankFeeTokens from '../../consts/gasTankFeeTokens'\n/* eslint-disable no-restricted-syntax */\nimport { ERRORS, RETRY_TO_INIT_ACCOUNT_OP_MSG } from '../../consts/signAccountOp/errorHandling'\nimport {\n  GAS_TANK_TRANSFER_GAS_USED,\n  SA_ERC20_TRANSFER_GAS_USED,\n  SA_NATIVE_TRANSFER_GAS_USED\n} from '../../consts/signAccountOp/gas'\nimport { Account } from '../../interfaces/account'\nimport { ExternalSignerControllers, Key } from '../../interfaces/keystore'\nimport { Network } from '../../interfaces/network'\nimport { Warning, TraceCallDiscoveryStatus } from '../../interfaces/signAccountOp'\nimport { isAmbireV1LinkedAccount, isSmartAccount } from '../../libs/account/account'\nimport { AccountOp, GasFeePayment, getSignableCalls } from '../../libs/accountOp/accountOp'\nimport { SubmittedAccountOp } from '../../libs/accountOp/submittedAccountOp'\nimport { PaymasterErrorReponse, PaymasterSuccessReponse, Sponsor } from '../../libs/erc7677/types'\nimport { getHumanReadableBroadcastError } from '../../libs/errorHumanizer'\nimport { Erc4337GasLimits, EstimateResult, FeePaymentOption } from '../../libs/estimate/interfaces'\nimport {\n  Gas1559Recommendation,\n  GasPriceRecommendation,\n  GasRecommendation,\n  getProbableCallData\n} from '../../libs/gasPrice/gasPrice'\nimport { hasRelayerSupport } from '../../libs/networks/networks'\nimport { Price, TokenResult } from '../../libs/portfolio'\nimport { getExecuteSignature, getTypedData, wrapStandard } from '../../libs/signMessage/signMessage'\nimport { getGasUsed } from '../../libs/singleton/singleton'\nimport {\n  getActivatorCall,\n  getOneTimeNonce,\n  getUserOperation,\n  getUserOpHash,\n  isErc4337Broadcast,\n  shouldIncludeActivatorCall,\n  shouldUseOneTimeNonce\n} from '../../libs/userOperation/userOperation'\nimport { BundlerSwitcher } from '../../services/bundlers/bundlerSwitcher'\nimport { GasSpeeds } from '../../services/bundlers/types'\n/* eslint-disable no-restricted-syntax */\nimport { AccountsController } from '../accounts/accounts'\nimport { AccountOpAction } from '../actions/actions'\nimport EventEmitter from '../eventEmitter/eventEmitter'\nimport { KeystoreController } from '../keystore/keystore'\nimport { PortfolioController } from '../portfolio/portfolio'\nimport {\n  getFeeSpeedIdentifier,\n  getFeeTokenPriceUnavailableWarning,\n  getSignificantBalanceDecreaseWarning,\n  getTokenUsdAmount\n} from './helper'\n\nexport enum SigningStatus {\n  EstimationError = 'estimation-error',\n  UnableToSign = 'unable-to-sign',\n  ReadyToSign = 'ready-to-sign',\n  /**\n   * Used to prevent state updates while the user is resolving warnings, connecting a hardware wallet, etc.\n   * Signing is allowed in this state, but the state of the controller should not change.\n   */\n  UpdatesPaused = 'updates-paused',\n  InProgress = 'in-progress',\n  WaitingForPaymaster = 'waiting-for-paymaster-response',\n  Done = 'done'\n}\n\nexport type Status = {\n  // @TODO: get rid of the object and just use the type\n  type: SigningStatus\n}\n\nexport enum FeeSpeed {\n  Slow = 'slow',\n  Medium = 'medium',\n  Fast = 'fast',\n  Ape = 'ape'\n}\n\ntype SpeedCalc = {\n  type: FeeSpeed\n  amount: bigint\n  simulatedGasLimit: bigint\n  amountFormatted: string\n  amountUsd: string\n  gasPrice: bigint\n  maxPriorityFeePerGas?: bigint\n}\n\n// declare the statuses we don't want state updates on\nexport const noStateUpdateStatuses = [\n  SigningStatus.InProgress,\n  SigningStatus.Done,\n  SigningStatus.UpdatesPaused,\n  SigningStatus.WaitingForPaymaster\n]\n\nexport class SignAccountOpController extends EventEmitter {\n  #accounts: AccountsController\n\n  #keystore: KeystoreController\n\n  #portfolio: PortfolioController\n\n  #externalSignerControllers: ExternalSignerControllers\n\n  account: Account\n\n  #network: Network\n\n  #blockGasLimit: bigint | undefined = undefined\n\n  fromActionId: AccountOpAction['id']\n\n  accountOp: AccountOp\n\n  gasPrices: GasRecommendation[] | null = null\n\n  bundlerGasPrices: GasSpeeds | null = null\n\n  estimation: EstimateResult | null = null\n\n  feeSpeeds: {\n    [identifier: string]: SpeedCalc[]\n  } = {}\n\n  paidBy: string | null = null\n\n  feeTokenResult: TokenResult | null = null\n\n  selectedFeeSpeed: FeeSpeed = FeeSpeed.Fast\n\n  selectedOption: FeePaymentOption | undefined = undefined\n\n  status: Status | null = null\n\n  gasUsedTooHigh: boolean\n\n  gasUsedTooHighAgreed: boolean\n\n  #reEstimate: Function\n\n  #isSignRequestStillActive: Function\n\n  rbfAccountOps: { [key: string]: SubmittedAccountOp | null }\n\n  signedAccountOp: AccountOp | null\n\n  replacementFeeLow: boolean\n\n  warnings: Warning[] = []\n\n  // indicates whether the transaction gas is sponsored or not\n  isSponsored: boolean = false\n\n  // the sponsor data to be displayed, if any\n  sponsor: Sponsor | undefined = undefined\n\n  bundlerSwitcher: BundlerSwitcher\n\n  // We track the status of token discovery logic (main.traceCall)\n  // to ensure the \"SignificantBalanceDecrease\" banner is displayed correctly.\n  // The latest/pending portfolio balance is essential for calculating balance differences.\n  // However, during a SWAP, the user may receive a new token that isn't yet included (discovered) in the portfolio.\n  // If the discovery process is in-process, and we only rely on portfolio balance change,\n  // the banner may be incorrectly triggered due to the perceived balance drop.\n  // Once discovery completes and updates the portfolio, the banner will be hidden.\n  traceCallDiscoveryStatus: TraceCallDiscoveryStatus = TraceCallDiscoveryStatus.NotStarted\n\n  constructor(\n    accounts: AccountsController,\n    keystore: KeystoreController,\n    portfolio: PortfolioController,\n    externalSignerControllers: ExternalSignerControllers,\n    account: Account,\n    network: Network,\n    fromActionId: AccountOpAction['id'],\n    accountOp: AccountOp,\n    reEstimate: Function,\n    isSignRequestStillActive: Function\n  ) {\n    super()\n\n    this.#accounts = accounts\n    this.#keystore = keystore\n    this.#portfolio = portfolio\n    this.#externalSignerControllers = externalSignerControllers\n    this.account = account\n    this.#network = network\n    this.fromActionId = fromActionId\n    this.accountOp = structuredClone(accountOp)\n    this.#reEstimate = reEstimate\n    this.#isSignRequestStillActive = isSignRequestStillActive\n\n    this.gasUsedTooHigh = false\n    this.gasUsedTooHighAgreed = false\n    this.rbfAccountOps = {}\n    this.signedAccountOp = null\n    this.replacementFeeLow = false\n    this.bundlerSwitcher = new BundlerSwitcher(\n      network,\n      () => {\n        return this.status ? this.status.type : null\n      },\n      noStateUpdateStatuses\n    )\n  }\n\n  get isInitialized(): boolean {\n    return !!this.estimation\n  }\n\n  #setDefaults() {\n    // Set the first signer as the default one.\n    // If there are more available signers, the user will be able to select a different signer from the application.\n    // The main benefit of having a default signer\n    // is that it drastically simplifies the logic of determining whether the account is ready for signing.\n    // For example, in the `sign` method and on the application screen, we can simply rely on the `this.readyToSign` flag.\n    // Otherwise, if we don't have a default value, then `this.readyToSign` will always be false unless we set a signer.\n    // In that case, on the application, we want the \"Sign\" button to be clickable/enabled,\n    // and we have to check and expose the `SignAccountOp` controller's inner state to make this check possible.\n    if (\n      this.accountKeyStoreKeys.length &&\n      (!this.accountOp.signingKeyAddr || !this.accountOp.signingKeyType)\n    ) {\n      this.accountOp.signingKeyAddr = this.accountKeyStoreKeys[0].addr\n      this.accountOp.signingKeyType = this.accountKeyStoreKeys[0].type\n    }\n  }\n\n  #setGasFeePayment() {\n    if (this.isInitialized && this.paidBy && this.selectedFeeSpeed && this.feeTokenResult) {\n      this.accountOp.gasFeePayment = this.#getGasFeePayment()\n    }\n  }\n\n  // check if speeds are set for the given identifier\n  hasSpeeds(identifier: string) {\n    return this.feeSpeeds[identifier] !== undefined && this.feeSpeeds[identifier].length\n  }\n\n  getCallDataAdditionalByNetwork(): bigint {\n    // no additional call data is required for arbitrum as the bytes are already\n    // added in the calculation for the L1 fee\n    if (this.#network.id === 'arbitrum' || !isSmartAccount(this.account)) return 0n\n\n    const estimationCallData = getProbableCallData(\n      this.account,\n      this.accountOp,\n      this.#accounts.accountStates[this.accountOp.accountAddr][this.accountOp.networkId],\n      this.#network\n    )\n    const FIXED_OVERHEAD = 21000n\n    const bytes = Buffer.from(estimationCallData.substring(2))\n    const nonZeroBytes = BigInt(bytes.filter((b) => b).length)\n    const zeroBytes = BigInt(BigInt(bytes.length) - nonZeroBytes)\n    const txDataGas = zeroBytes * 4n + nonZeroBytes * 16n\n    return txDataGas + FIXED_OVERHEAD\n  }\n\n  get errors(): string[] {\n    const errors: string[] = []\n\n    if (!this.isInitialized) return errors\n\n    const isAmbireV1 = isAmbireV1LinkedAccount(this.account?.creation?.factoryAddr)\n    const isAmbireV1AndNetworkNotSupported = isAmbireV1 && !hasRelayerSupport(this.#network)\n\n    // This must be the first error check!\n    if (isAmbireV1AndNetworkNotSupported) {\n      errors.push(\n        'Ambire v1 accounts are not supported on this network. To interact with this network, please use an Ambire v2 Smart Account or a Basic Account. You can still use v1 accounts on any network that is natively integrated with the Ambire web and mobile wallets.'\n      )\n\n      // Don't show any other errors\n      return errors\n    }\n\n    // if there's an estimation error, show it\n    if (this.estimation?.error) {\n      errors.push(this.estimation.error.message)\n    }\n\n    if (\n      this.estimation?.gasUsed &&\n      this.#blockGasLimit &&\n      this.estimation?.gasUsed > this.#blockGasLimit\n    ) {\n      errors.push('Transaction reverted with estimation too high: above block limit')\n    }\n\n    if (\n      this.#network.predefined &&\n      this.estimation?.gasUsed &&\n      this.estimation?.gasUsed > 500000000n\n    ) {\n      errors.push('Unreasonably high estimation. This transaction will probably fail')\n    }\n\n    // this error should never happen as availableFeeOptions should always have the native option\n    if (!this.isSponsored && !this.availableFeeOptions.length)\n      errors.push(ERRORS.eoaInsufficientFunds)\n\n    // This error should not happen, as in the update method we are always setting a default signer.\n    // It may occur, only if there are no available signer.\n    if (!this.accountOp.signingKeyType || !this.accountOp.signingKeyAddr)\n      errors.push('Please select a signer to sign the transaction.')\n\n    const currentPortfolio = this.#portfolio.getLatestPortfolioState(this.accountOp.accountAddr)\n    const currentPortfolioNetwork = currentPortfolio[this.accountOp.networkId]\n\n    const currentPortfolioNetworkNative = currentPortfolioNetwork?.result?.tokens.find(\n      (token) => token.address === '0x0000000000000000000000000000000000000000'\n    )\n    if (!this.isSponsored && !currentPortfolioNetworkNative)\n      errors.push(\n        'Unable to estimate the transaction fee as fetching the latest price update for the network native token failed. Please try again later.'\n      )\n\n    // if there's no gasFeePayment calculate but there is: 1) feeTokenResult\n    // 2) selectedOption and 3) gasSpeeds for selectedOption => return an error\n    if (\n      !this.isSponsored &&\n      !this.accountOp.gasFeePayment &&\n      this.feeTokenResult &&\n      this.selectedOption\n    ) {\n      const identifier = getFeeSpeedIdentifier(\n        this.selectedOption,\n        this.accountOp.accountAddr,\n        this.rbfAccountOps[this.selectedOption.paidBy]\n      )\n      if (this.hasSpeeds(identifier))\n        errors.push('Please select a token and an account for paying the gas fee.')\n    }\n\n    if (\n      !this.isSponsored &&\n      this.selectedOption &&\n      this.accountOp.gasFeePayment &&\n      this.selectedOption.availableAmount < this.accountOp.gasFeePayment.amount\n    ) {\n      const speedCoverage = []\n      const identifier = getFeeSpeedIdentifier(\n        this.selectedOption,\n        this.accountOp.accountAddr,\n        this.rbfAccountOps[this.selectedOption.paidBy]\n      )\n\n      if (this.feeSpeeds[identifier]) {\n        this.feeSpeeds[identifier].forEach((speed) => {\n          if (this.selectedOption && this.selectedOption.availableAmount >= speed.amount)\n            speedCoverage.push(speed.type)\n        })\n      }\n\n      if (speedCoverage.length === 0) {\n        const isSA = isSmartAccount(this.account)\n        const isUnableToCoverWithAllOtherTokens = this.availableFeeOptions.every((option) => {\n          if (option === this.selectedOption) return true\n          const optionIdentifier = getFeeSpeedIdentifier(\n            option,\n            this.accountOp.accountAddr,\n            this.rbfAccountOps[option.paidBy]\n          )\n\n          const speedsThatCanCover = this.feeSpeeds[optionIdentifier]?.filter(\n            (speed) => speed.amount <= option.availableAmount\n          )\n\n          return !speedsThatCanCover?.length\n        })\n        if (isUnableToCoverWithAllOtherTokens) {\n          let skippedTokensCount = 0\n          const gasTokenNames = gasTankFeeTokens\n            .filter(({ networkId, hiddenOnError }) => {\n              if (networkId !== this.accountOp.networkId) return false\n\n              if (hiddenOnError) {\n                skippedTokensCount++\n                return false\n              }\n\n              return true\n            })\n            .map(({ symbol }) => symbol.toUpperCase())\n            .join(', ')\n\n          errors.push(\n            `${ERRORS.eoaInsufficientFunds}${\n              isSA\n                ? ` Available fee options: USDC in Gas Tank, ${gasTokenNames}${\n                    skippedTokensCount ? ' and others' : ''\n                  }`\n                : ''\n            }`\n          )\n        } else {\n          errors.push(\n            isSA\n              ? \"Signing is not possible with the selected account's token as it doesn't have sufficient funds to cover the gas payment fee.\"\n              : ERRORS.eoaInsufficientFunds\n          )\n        }\n      } else {\n        errors.push(\n          'The selected speed is not available due to insufficient funds. Please select a slower speed.'\n        )\n      }\n    }\n\n    // The signing might fail, tell the user why but allow the user to retry signing,\n    // @ts-ignore fix TODO: type mismatch\n    if (this.status?.type === SigningStatus.ReadyToSign && !!this.status.error) {\n      // @ts-ignore typescript complains, but the error being present gets checked above\n      errors.push(this.status.error)\n    }\n\n    if (!this.isSponsored && !this.#feeSpeedsLoading && this.selectedOption) {\n      const identifier = getFeeSpeedIdentifier(\n        this.selectedOption,\n        this.accountOp.accountAddr,\n        this.rbfAccountOps[this.selectedOption.paidBy]\n      )\n      if (!this.hasSpeeds(identifier)) {\n        if (!this.feeTokenResult?.priceIn.length) {\n          errors.push(\n            `Currently, ${this.feeTokenResult?.symbol} is unavailable as a fee token as we're experiencing troubles fetching its price. Please select another or contact support`\n          )\n        } else {\n          errors.push(\n            'Unable to estimate the transaction fee. Please try changing the fee token or contact support.'\n          )\n        }\n      }\n    }\n\n    // if the gasFeePayment is gas tank but the user doesn't have funds, disable it\n    let balance = 0\n    Object.keys(currentPortfolio).forEach((networkName) => {\n      const networkPortfolio = currentPortfolio[networkName]\n      if (!networkPortfolio?.result?.total?.usd) return\n\n      balance += networkPortfolio.result.total.usd\n    })\n    if (balance < 10 && this.accountOp.gasFeePayment && this.accountOp.gasFeePayment.isGasTank) {\n      errors.push(\n        'Your account must have a minimum overall balance of $10 to pay for gas via the Gas Tank. Please add funds to your account or choose another fee payment option.'\n      )\n    }\n\n    return errors\n  }\n\n  get readyToSign() {\n    return (\n      !!this.status &&\n      (this.status?.type === SigningStatus.ReadyToSign ||\n        this.status?.type === SigningStatus.UpdatesPaused)\n    )\n  }\n\n  calculateWarnings() {\n    const warnings: Warning[] = []\n\n    const latestState = this.#portfolio.getLatestPortfolioState(this.accountOp.accountAddr)\n    const pendingState = this.#portfolio.getPendingPortfolioState(this.accountOp.accountAddr)\n\n    const significantBalanceDecreaseWarning = getSignificantBalanceDecreaseWarning(\n      latestState,\n      pendingState,\n      this.accountOp.networkId,\n      this.traceCallDiscoveryStatus\n    )\n\n    if (this.selectedOption) {\n      const identifier = getFeeSpeedIdentifier(\n        this.selectedOption,\n        this.accountOp.accountAddr,\n        this.rbfAccountOps[this.selectedOption.paidBy]\n      )\n      const feeTokenHasPrice = this.feeSpeeds[identifier]?.every((speed) => !!speed.amountUsd)\n      const feeTokenPriceUnavailableWarning = getFeeTokenPriceUnavailableWarning(\n        !!this.hasSpeeds(identifier),\n        feeTokenHasPrice\n      )\n\n      // push the warning only if the txn is not sponsored\n      if (!this.isSponsored && feeTokenPriceUnavailableWarning)\n        warnings.push(feeTokenPriceUnavailableWarning)\n    }\n\n    if (significantBalanceDecreaseWarning) warnings.push(significantBalanceDecreaseWarning)\n\n    this.warnings = warnings\n\n    this.emitUpdate()\n  }\n\n  update({\n    gasPrices,\n    estimation,\n    feeToken,\n    paidBy,\n    speed,\n    signingKeyAddr,\n    signingKeyType,\n    calls,\n    gasUsedTooHighAgreed,\n    rbfAccountOps,\n    bundlerGasPrices,\n    blockGasLimit\n  }: {\n    gasPrices?: GasRecommendation[]\n    estimation?: EstimateResult | null\n    feeToken?: TokenResult\n    paidBy?: string\n    speed?: FeeSpeed\n    signingKeyAddr?: Key['addr']\n    signingKeyType?: Key['type']\n    calls?: AccountOp['calls']\n    gasUsedTooHighAgreed?: boolean\n    rbfAccountOps?: { [key: string]: SubmittedAccountOp | null }\n    bundlerGasPrices?: { speeds: GasSpeeds; bundler: BUNDLER }\n    blockGasLimit?: bigint\n  }) {\n    // once the user commits to the things he sees on his screen,\n    // we need to be sure nothing changes afterwards.\n    // For example, signing can be slow if it's done by a hardware wallet.\n    // The estimation gets refreshed on the other hand each 12 seconds (6 on optimism)\n    // If we allow the estimation to affect the controller state during sign,\n    // there could be discrepancy between what the user has agreed upon and what\n    // we broadcast in the end\n    if (this.status?.type && noStateUpdateStatuses.indexOf(this.status?.type) !== -1) {\n      return\n    }\n\n    if (Array.isArray(calls)) this.accountOp.calls = calls\n\n    if (blockGasLimit) this.#blockGasLimit = blockGasLimit\n\n    if (gasPrices) this.gasPrices = gasPrices\n\n    if (estimation) {\n      this.gasUsedTooHigh = !!(this.#blockGasLimit && estimation.gasUsed > this.#blockGasLimit / 4n)\n      this.estimation = estimation\n      // on each estimation update, set the newest account nonce\n      this.accountOp.nonce = BigInt(estimation.currentAccountNonce)\n    }\n\n    // if estimation is undefined, do not clear the estimation.\n    // We do this only if strictly specified as null\n    if (estimation === null) this.estimation = null\n\n    if (feeToken && paidBy) {\n      this.paidBy = paidBy\n      this.feeTokenResult = feeToken\n    }\n\n    if (speed && this.isInitialized) {\n      this.selectedFeeSpeed = speed\n    }\n\n    if (signingKeyAddr && signingKeyType && this.isInitialized) {\n      this.accountOp.signingKeyAddr = signingKeyAddr\n      this.accountOp.signingKeyType = signingKeyType\n    }\n\n    if (gasUsedTooHighAgreed !== undefined) this.gasUsedTooHighAgreed = gasUsedTooHighAgreed\n\n    // set the rbf is != undefined\n    if (rbfAccountOps) this.rbfAccountOps = rbfAccountOps\n\n    // Set defaults, if some of the optional params are omitted\n    this.#setDefaults()\n\n    if (this.estimation && this.paidBy && this.feeTokenResult) {\n      this.selectedOption = this.availableFeeOptions.find(\n        (option) =>\n          option.paidBy === this.paidBy &&\n          option.token.address === this.feeTokenResult!.address &&\n          option.token.symbol.toLocaleLowerCase() ===\n            this.feeTokenResult!.symbol.toLocaleLowerCase() &&\n          option.token.flags.onGasTank === this.feeTokenResult!.flags.onGasTank\n      )\n    }\n\n    // update the bundler gas prices if the bundlers match\n    if (\n      this.estimation?.erc4337GasLimits &&\n      bundlerGasPrices &&\n      bundlerGasPrices.bundler === this.bundlerSwitcher.getBundler().getName()\n    ) {\n      this.estimation.erc4337GasLimits.gasPrice = bundlerGasPrices.speeds\n    }\n\n    if (\n      this.estimation &&\n      this.estimation.erc4337GasLimits &&\n      this.estimation.erc4337GasLimits.paymaster\n    ) {\n      // if it was sponsored but it no longer is (fallback case),\n      // reset the selectedOption option as we use native for the sponsorship\n      // but the user might not actually have any native\n      const isSponsorshipFallback =\n        this.isSponsored && !this.estimation.erc4337GasLimits.paymaster.isSponsored()\n\n      this.isSponsored = this.estimation.erc4337GasLimits.paymaster.isSponsored()\n      this.sponsor = this.estimation.erc4337GasLimits.paymaster.getEstimationData()?.sponsor\n\n      if (isSponsorshipFallback) {\n        this.selectedOption = this.availableFeeOptions.length\n          ? this.availableFeeOptions[0]\n          : undefined\n      }\n    }\n\n    // calculate the fee speeds if either there are no feeSpeeds\n    // or any of properties for update is requested\n    if (!Object.keys(this.feeSpeeds).length || Array.isArray(calls) || gasPrices || estimation) {\n      this.#updateFeeSpeeds()\n    }\n\n    // Here, we expect to have most of the fields set, so we can safely set GasFeePayment\n    this.#setGasFeePayment()\n    this.updateStatus()\n    this.calculateWarnings()\n  }\n\n  updateStatus(forceStatusChange?: SigningStatus, replacementFeeLow = false) {\n    // use this to go back to ReadyToSign when a broadcasting error is emitted\n    if (forceStatusChange) {\n      this.status = { type: forceStatusChange }\n      this.emitUpdate()\n      return\n    }\n\n    // no status updates on these two\n    const isInTheMiddleOfSigning =\n      this.status?.type === SigningStatus.InProgress ||\n      this.status?.type === SigningStatus.WaitingForPaymaster\n    const isDone = this.status?.type === SigningStatus.Done\n    if (isInTheMiddleOfSigning || isDone) return\n\n    // if we have an estimation error, set the state so and return\n    if (this.estimation?.error) {\n      this.status = { type: SigningStatus.EstimationError }\n      this.emitUpdate()\n      return\n    }\n\n    if (this.errors.length) {\n      this.status = { type: SigningStatus.UnableToSign }\n      this.emitUpdate()\n      return\n    }\n\n    if (\n      this.isInitialized &&\n      this.estimation &&\n      this.accountOp?.signingKeyAddr &&\n      this.accountOp?.signingKeyType &&\n      this.accountOp?.gasFeePayment &&\n      // if the gas used is too high, do not allow the user to sign\n      // until he explicitly agrees to the risks\n      (!this.gasUsedTooHigh || this.gasUsedTooHighAgreed)\n    ) {\n      this.status = { type: SigningStatus.ReadyToSign }\n\n      // do not reset this once triggered\n      if (replacementFeeLow) this.replacementFeeLow = replacementFeeLow\n      this.emitUpdate()\n      return\n    }\n\n    // reset the status if a valid state was not found\n    this.status = null\n    this.emitUpdate()\n  }\n\n  reset() {\n    this.gasPrices = null\n    this.estimation = null\n    this.selectedFeeSpeed = FeeSpeed.Fast\n    this.paidBy = null\n    this.feeTokenResult = null\n    this.status = null\n    this.emitUpdate()\n  }\n\n  resetStatus() {\n    this.status = null\n    this.emitUpdate()\n  }\n\n  /**\n   * Obtain the native token ratio in relation to a fee token.\n   *\n   * By knowing the USD value of the tokens in the portfolio,\n   * we can calculate the ratio between a native token and a fee token.\n   *\n   * For example, 1 ETH = 8 BNB (ratio: 8).\n   *\n   * We require the ratio to be in a BigInt format since all the application values,\n   * such as amount, gasLimit, etc., are also represented as BigInt numbers.\n   */\n  #getNativeToFeeTokenRatio(feeToken: TokenResult): bigint | null {\n    const native = this.#portfolio\n      .getLatestPortfolioState(this.accountOp.accountAddr)\n      [this.accountOp.networkId]?.result?.tokens.find(\n        (token) => token.address === '0x0000000000000000000000000000000000000000'\n      )\n    if (!native) return null\n\n    // In case the fee token is the native token we don't want to depend to priceIn, as it might not be available.\n    if (native.address === feeToken.address && native.networkId === feeToken.networkId)\n      return BigInt(1 * 1e18)\n\n    const isUsd = (price: Price) => price.baseCurrency === 'usd'\n\n    const nativePrice = native.priceIn.find(isUsd)?.price\n    const feeTokenPrice = feeToken.priceIn.find(isUsd)?.price\n\n    if (!nativePrice || !feeTokenPrice) return null\n\n    const ratio = nativePrice / feeTokenPrice\n\n    // Here we multiply it by 1e18, in order to keep the decimal precision.\n    // Otherwise, passing the ratio to the BigInt constructor, we will lose the numbers after the decimal point.\n    // Later, once we need to normalize this ratio, we should not forget to divide it by 1e18.\n    const ratio1e18 = ratio * 1e18\n    const toBigInt = ratio1e18 % 1 === 0 ? ratio1e18 : ratio1e18.toFixed(0)\n    return BigInt(toBigInt)\n  }\n\n  static getAmountAfterFeeTokenConvert(\n    simulatedGasLimit: bigint,\n    gasPrice: bigint,\n    nativeRatio: bigint,\n    feeTokenDecimals: number,\n    addedNative: bigint\n  ) {\n    const amountInWei = simulatedGasLimit * gasPrice + addedNative\n\n    // Let's break down the process of converting the amount into FeeToken:\n    // 1. Initially, we multiply the amount in wei by the native to fee token ratio.\n    // 2. Next, we address the decimal places:\n    // 2.1. First, we convert wei to native by dividing by 10^18 (representing the decimals).\n    // 2.2. Now, with the amount in the native token, we incorporate nativeRatio decimals into the calculation (18 + 18) to standardize the amount.\n    // 2.3. At this point, we precisely determine the number of fee tokens. For instance, if the amount is 3 USDC, we must convert it to a BigInt value, while also considering feeToken.decimals.\n    const extraDecimals = BigInt(10 ** 18)\n    const feeTokenExtraDecimals = BigInt(10 ** (18 - feeTokenDecimals))\n    const pow = extraDecimals * feeTokenExtraDecimals\n    return (amountInWei * nativeRatio) / pow\n  }\n\n  /**\n   * Increase the fee we send to the feeCollector according to the specified\n   * options in the network tab\n   */\n  #increaseFee(amount: bigint): bigint {\n    if (!this.#network.feeOptions.feeIncrease) {\n      return amount\n    }\n\n    return amount + (amount * this.#network.feeOptions.feeIncrease) / 100n\n  }\n\n  /**\n   * If the nonce of the current account op and the last account op are the same,\n   * do an RBF increase or otherwise the user cannot broadcast the txn\n   *\n   * calculatedGas: it should be either the whole gasPrice if the network doesn't\n   * support EIP-1559 OR it should the maxPriorityFeePerGas if the network\n   * supports EIP-1559\n   *\n   * gasPropertyName: pass gasPrice if no EIP-1559; otherwise: maxPriorityFeePerGas\n   */\n  #rbfIncrease(\n    accId: string,\n    calculatedGas: bigint,\n    gasPropertyName: 'gasPrice' | 'maxPriorityFeePerGas',\n    prevSpeed: SpeedCalc | null\n  ): bigint {\n    // ape speed gets 50% increase\n    const divider = prevSpeed && prevSpeed.type === FeeSpeed.Fast ? 2n : 8n\n\n    // when doing an RBF, make sure the min gas for the current speed\n    // is at least 12% bigger than the previous speed\n    const prevSpeedGas = prevSpeed ? prevSpeed[gasPropertyName] : undefined\n    const prevSpeedGasIncreased = prevSpeedGas ? prevSpeedGas + prevSpeedGas / divider : 0n\n    const min = prevSpeedGasIncreased > calculatedGas ? prevSpeedGasIncreased : calculatedGas\n\n    // if there was an error on the signed account op with a\n    // replacement fee too low, we increase by 13% the signed account op\n    // IF the new estimation is not actually higher\n    if (this.replacementFeeLow && this.signedAccountOp && this.signedAccountOp.gasFeePayment) {\n      const prevGas = this.signedAccountOp.gasFeePayment[gasPropertyName] ?? undefined\n      const bumpFees = prevGas ? prevGas + prevGas / divider + prevGas / 100n : 0n\n      return min > bumpFees ? min : bumpFees\n    }\n\n    // if no RBF option for this paidBy option, return the amount\n    const rbfOp = this.rbfAccountOps[accId]\n    if (!rbfOp || !rbfOp.gasFeePayment || !rbfOp.gasFeePayment[gasPropertyName])\n      return calculatedGas\n\n    // increase by a minimum of 13% the last broadcast txn and use that\n    // or use the current gas estimation if it's more\n    const rbfGas = rbfOp.gasFeePayment[gasPropertyName] ?? 0n\n    const lastTxnGasPriceIncreased = rbfGas + rbfGas / divider + rbfGas / 100n\n    return min > lastTxnGasPriceIncreased ? min : lastTxnGasPriceIncreased\n  }\n\n  get #feeSpeedsLoading() {\n    return !this.isInitialized || !this.gasPrices\n  }\n\n  #updateFeeSpeeds() {\n    if (this.#feeSpeedsLoading) return\n\n    // reset the fee speeds at the beginning to avoid duplications\n    this.feeSpeeds = {}\n\n    const gasUsed = this.estimation!.gasUsed\n\n    this.availableFeeOptions.forEach((option) => {\n      // if a calculation has been made, do not make it again\n      // EOA pays for SA is the most common case for this scenario\n      //\n      // addition: make sure there's no rbfAccountOps as well\n      const identifier = getFeeSpeedIdentifier(\n        option,\n        this.accountOp.accountAddr,\n        this.rbfAccountOps[option.paidBy]\n      )\n      if (this.hasSpeeds(identifier)) {\n        return\n      }\n\n      const nativeRatio = this.#getNativeToFeeTokenRatio(option.token)\n      if (!nativeRatio) {\n        this.feeSpeeds[identifier] = []\n        return\n      }\n\n      const erc4337GasLimits = this.estimation?.erc4337GasLimits\n      if (erc4337GasLimits) {\n        const speeds: SpeedCalc[] = []\n        const usesPaymaster = !!this.estimation?.erc4337GasLimits?.paymaster.isUsable()\n\n        for (const [speed, speedValue] of Object.entries(erc4337GasLimits.gasPrice)) {\n          const simulatedGasLimit =\n            BigInt(erc4337GasLimits.callGasLimit) +\n            BigInt(erc4337GasLimits.preVerificationGas) +\n            BigInt(option.gasUsed ?? 0)\n          const gasPrice = BigInt(speedValue.maxFeePerGas)\n          let amount = SignAccountOpController.getAmountAfterFeeTokenConvert(\n            simulatedGasLimit,\n            gasPrice,\n            nativeRatio,\n            option.token.decimals,\n            0n\n          )\n          if (usesPaymaster) amount = this.#increaseFee(amount)\n\n          speeds.push({\n            type: speed as FeeSpeed,\n            simulatedGasLimit,\n            amount,\n            amountFormatted: formatUnits(amount, Number(option.token.decimals)),\n            amountUsd: getTokenUsdAmount(option.token, amount),\n            gasPrice,\n            maxPriorityFeePerGas: BigInt(speedValue.maxPriorityFeePerGas)\n          })\n        }\n\n        if (this.feeSpeeds[identifier] === undefined) this.feeSpeeds[identifier] = []\n        this.feeSpeeds[identifier] = speeds\n        return\n      }\n\n      ;(this.gasPrices || []).forEach((gasRecommendation, i) => {\n        let amount\n        let simulatedGasLimit\n        const prevSpeed =\n          this.feeSpeeds[identifier] && this.feeSpeeds[identifier].length\n            ? this.feeSpeeds[identifier][i - 1]\n            : null\n\n        // gasRecommendation can come as GasPriceRecommendation or Gas1559Recommendation\n        // depending whether the network supports EIP-1559 and is it enabled on our side.\n        // To check, we use maxPriorityFeePerGas. If it's set => EIP-1559.\n        // After, we call #rbfIncrease on maxPriorityFeePerGas if set which either returns\n        // the maxPriorityFeePerGas without doing anything (most cases) or if there's a\n        // pending txn in the mempool, it bumps maxPriorityFeePerGas by 12.5% to enable RBF.\n        // Finally, we calculate the gasPrice:\n        // - EIP-1559: baseFeePerGas + maxPriorityFeePerGas\n        // - Normal: gasRecommendation.gasPrice #rbfIncreased (same logic as for maxPriorityFeePerGas RBF)\n        const maxPriorityFeePerGas =\n          'maxPriorityFeePerGas' in gasRecommendation\n            ? this.#rbfIncrease(\n                option.paidBy,\n                gasRecommendation.maxPriorityFeePerGas,\n                'maxPriorityFeePerGas',\n                prevSpeed\n              )\n            : undefined\n\n        const gasPrice =\n          'maxPriorityFeePerGas' in gasRecommendation\n            ? (gasRecommendation as Gas1559Recommendation).baseFeePerGas + maxPriorityFeePerGas!\n            : this.#rbfIncrease(\n                option.paidBy,\n                (gasRecommendation as GasPriceRecommendation).gasPrice,\n                'gasPrice',\n                prevSpeed\n              )\n\n        // EOA\n        if (!isSmartAccount(this.account)) {\n          simulatedGasLimit = gasUsed\n\n          if (this.accountOp.calls[0].to && getAddress(this.accountOp.calls[0].to) === SINGLETON) {\n            simulatedGasLimit = getGasUsed(simulatedGasLimit)\n          }\n\n          amount = simulatedGasLimit * gasPrice + option.addedNative\n        } else if (option.paidBy !== this.accountOp.accountAddr) {\n          // Smart account, but EOA pays the fee\n          simulatedGasLimit = gasUsed + this.getCallDataAdditionalByNetwork()\n          amount = simulatedGasLimit * gasPrice + option.addedNative\n        } else {\n          // Relayer\n          simulatedGasLimit = gasUsed + this.getCallDataAdditionalByNetwork() + option.gasUsed!\n          amount = SignAccountOpController.getAmountAfterFeeTokenConvert(\n            simulatedGasLimit,\n            gasPrice,\n            nativeRatio,\n            option.token.decimals,\n            option.addedNative\n          )\n          amount = this.#increaseFee(amount)\n        }\n\n        const feeSpeed: SpeedCalc = {\n          type: gasRecommendation.name as FeeSpeed,\n          simulatedGasLimit,\n          amount,\n          amountFormatted: formatUnits(amount, Number(option.token.decimals)),\n          amountUsd: getTokenUsdAmount(option.token, amount),\n          gasPrice,\n          maxPriorityFeePerGas\n        }\n        if (this.feeSpeeds[identifier] === undefined) this.feeSpeeds[identifier] = []\n        this.feeSpeeds[identifier].push(feeSpeed)\n      })\n    })\n  }\n\n  #getGasFeePayment(): GasFeePayment | null {\n    if (!this.isInitialized) {\n      this.emitError({\n        level: 'major',\n        message:\n          'Something went wrong while setting up the gas fee payment account and token. Please try again, selecting the account and token option. If the problem persists, contact support.',\n        error: new Error(\n          'SignAccountOpController: The controller is not initialized while we are trying to build GasFeePayment.'\n        )\n      })\n\n      return null\n    }\n    if (!this.paidBy) {\n      this.emitError({\n        level: 'silent',\n        message: '',\n        error: new Error('SignAccountOpController: paying account not selected')\n      })\n\n      return null\n    }\n    if (!this.feeTokenResult) {\n      this.emitError({\n        level: 'silent',\n        message: '',\n        error: new Error('SignAccountOpController: fee token not selected')\n      })\n\n      return null\n    }\n\n    // if there are no availableFeeOptions, we don't have a gasFee\n    // this is normal though as there are such cases:\n    // - EOA paying in native but doesn't have any native\n    // so no error should pop out because of this\n    if (!this.availableFeeOptions.length) {\n      return null\n    }\n\n    if (!this.selectedOption) {\n      this.emitError({\n        level: 'silent',\n        message: '',\n        error: new Error('SignAccountOpController: paying option not found')\n      })\n\n      return null\n    }\n\n    // if there are no fee speeds available for the option, it means\n    // the nativeRatio could not be calculated. In that case, we do not\n    // emit an error here but proceed and show an explanation to the user\n    // in get errors()\n    // check test: Signing [Relayer]: ... priceIn | native/Ratio\n    const identifier = getFeeSpeedIdentifier(\n      this.selectedOption,\n      this.accountOp.accountAddr,\n      this.rbfAccountOps[this.selectedOption.paidBy]\n    )\n    if (!this.feeSpeeds[identifier].length) {\n      return null\n    }\n\n    const chosenSpeed = this.feeSpeeds[identifier].find(\n      (speed) => speed.type === this.selectedFeeSpeed\n    )\n    if (!chosenSpeed) {\n      this.emitError({\n        level: 'silent',\n        message: '',\n        error: new Error('SignAccountOpController: fee speed not selected')\n      })\n\n      return null\n    }\n\n    const accountState =\n      this.#accounts.accountStates[this.accountOp.accountAddr][this.accountOp.networkId]\n    return {\n      paidBy: this.paidBy,\n      // we're allowing EOAs to broadcast on 4337 networks as well\n      // in that case, we don't do user operations\n      isERC4337:\n        this.paidBy === this.accountOp.accountAddr &&\n        isErc4337Broadcast(this.account, this.#network, accountState),\n      isGasTank: this.feeTokenResult.flags.onGasTank,\n      inToken: this.feeTokenResult.address,\n      feeTokenNetworkId: this.feeTokenResult.networkId,\n      amount: chosenSpeed.amount,\n      simulatedGasLimit: chosenSpeed.simulatedGasLimit,\n      gasPrice: chosenSpeed.gasPrice,\n      maxPriorityFeePerGas:\n        'maxPriorityFeePerGas' in chosenSpeed ? chosenSpeed.maxPriorityFeePerGas : undefined\n    }\n  }\n\n  get feeToken(): string | null {\n    return this.accountOp?.gasFeePayment?.inToken || null\n  }\n\n  get feePaidBy(): string | null {\n    return this.accountOp?.gasFeePayment?.paidBy || null\n  }\n\n  get availableFeeOptions(): EstimateResult['feePaymentOptions'] {\n    if (!this.estimation) return []\n\n    // if the txn is sponsored, return the native option only\n    // even if it's balance is 0\n    if (this.isSponsored) {\n      const native = this.estimation.feePaymentOptions.find(\n        (feeOption) => feeOption.token.address === ZeroAddress\n      )\n      return native ? [native] : []\n    }\n\n    // FeeOptions having amount\n    const withAmounts = this.estimation.feePaymentOptions.filter(\n      (feeOption) => feeOption.availableAmount\n    )\n    if (withAmounts.length) return withAmounts\n\n    // if there are no fee options with amounts, return the native option\n    const native = this.estimation.feePaymentOptions.find(\n      (feeOption) => feeOption.token.address === ZeroAddress\n    )\n    return native ? [native] : []\n  }\n\n  get accountKeyStoreKeys(): Key[] {\n    return this.#keystore.keys.filter((key) => this.account.associatedKeys.includes(key.addr))\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  get speedOptions() {\n    return Object.values(FeeSpeed) as string[]\n  }\n\n  get gasSavedUSD(): number | null {\n    if (!this.selectedOption?.token.flags.onGasTank) return null\n\n    const identifier = getFeeSpeedIdentifier(\n      this.selectedOption,\n      this.accountOp.accountAddr,\n      this.rbfAccountOps[this.selectedOption.paidBy]\n    )\n    const selectedFeeSpeedData = this.feeSpeeds[identifier].find(\n      (speed) => speed.type === this.selectedFeeSpeed\n    )\n    const gasPrice = selectedFeeSpeedData?.gasPrice\n    if (!gasPrice) return null\n\n    // get the native token from the portfolio to calculate prices\n    const native = this.#portfolio\n      .getLatestPortfolioState(this.accountOp.accountAddr)\n      [this.accountOp.networkId]?.result?.tokens.find(\n        (token) => token.address === '0x0000000000000000000000000000000000000000'\n      )\n    if (!native) return null\n    const nativePrice = native.priceIn.find((price) => price.baseCurrency === 'usd')?.price\n    if (!nativePrice) return null\n\n    // 4337 gasUsed is set to 0 in the estimation as we rely\n    // on the bundler for the estimation entirely => use hardcode value\n    const gasUsedSelectedOption =\n      this.selectedOption.gasUsed && this.selectedOption.gasUsed > 0n\n        ? this.selectedOption.gasUsed\n        : GAS_TANK_TRANSFER_GAS_USED\n    const isNativeSelected = this.selectedOption.token.address === ZeroAddress\n    const gasUsedNative =\n      this.availableFeeOptions.find(\n        (option) => option.token.address === ZeroAddress && !option.token.flags.onGasTank\n      )?.gasUsed || SA_NATIVE_TRANSFER_GAS_USED\n    const gasUsedERC20 =\n      this.availableFeeOptions.find(\n        (option) => option.token.address !== ZeroAddress && !option.token.flags.onGasTank\n      )?.gasUsed || SA_ERC20_TRANSFER_GAS_USED\n\n    const gasUsedWithoutGasTank = isNativeSelected ? gasUsedNative : gasUsedERC20\n    const gasSavedInNative = formatEther((gasUsedWithoutGasTank - gasUsedSelectedOption) * gasPrice)\n\n    return Number(gasSavedInNative) * nativePrice\n  }\n\n  #emitSigningErrorAndResetToReadyToSign(error: string) {\n    this.emitError({ level: 'major', message: error, error: new Error(error) })\n    this.status = { type: SigningStatus.ReadyToSign }\n\n    this.emitUpdate()\n  }\n\n  #addFeePayment() {\n    // In case of gas tank token fee payment, we need to include one more call to account op\n    const abiCoder = new AbiCoder()\n\n    if (this.isSponsored) {\n      this.accountOp.feeCall = {\n        to: FEE_COLLECTOR,\n        value: 0n,\n        data: abiCoder.encode(['string', 'uint256', 'string'], ['gasTank', 0n, 'USDC'])\n      }\n\n      return\n    }\n\n    if (this.accountOp.gasFeePayment!.isGasTank) {\n      this.accountOp.feeCall = {\n        to: FEE_COLLECTOR,\n        value: 0n,\n        data: abiCoder.encode(\n          ['string', 'uint256', 'string'],\n          ['gasTank', this.accountOp.gasFeePayment!.amount, this.feeTokenResult?.symbol]\n        )\n      }\n\n      return\n    }\n\n    if (this.accountOp.gasFeePayment!.inToken === '0x0000000000000000000000000000000000000000') {\n      // native payment\n      this.accountOp.feeCall = {\n        to: FEE_COLLECTOR,\n        value: this.accountOp.gasFeePayment!.amount,\n        data: '0x'\n      }\n    } else {\n      // token payment\n      const ERC20Interface = new Interface(ERC20.abi)\n      this.accountOp.feeCall = {\n        to: this.accountOp.gasFeePayment!.inToken,\n        value: 0n,\n        data: ERC20Interface.encodeFunctionData('transfer', [\n          FEE_COLLECTOR,\n          this.accountOp.gasFeePayment!.amount\n        ])\n      }\n    }\n  }\n\n  async sign() {\n    if (!this.readyToSign) {\n      const message = `Unable to sign the transaction. During the preparation step, the necessary transaction data was not received. ${RETRY_TO_INIT_ACCOUNT_OP_MSG}`\n      return this.#emitSigningErrorAndResetToReadyToSign(message)\n    }\n\n    // when signing begings, we stop immediatelly state updates on the controller\n    // by changing the status to InProgress. Check update() for more info\n    this.status = { type: SigningStatus.InProgress }\n\n    if (!this.accountOp?.signingKeyAddr || !this.accountOp?.signingKeyType) {\n      const message = `Unable to sign the transaction. During the preparation step, required signing key information was found missing. ${RETRY_TO_INIT_ACCOUNT_OP_MSG}`\n      return this.#emitSigningErrorAndResetToReadyToSign(message)\n    }\n\n    if (!this.accountOp?.gasFeePayment || !this.selectedOption) {\n      const message = `Unable to sign the transaction. During the preparation step, required information about paying the gas fee was found missing. ${RETRY_TO_INIT_ACCOUNT_OP_MSG}`\n      return this.#emitSigningErrorAndResetToReadyToSign(message)\n    }\n\n    const signer = await this.#keystore.getSigner(\n      this.accountOp.signingKeyAddr,\n      this.accountOp.signingKeyType\n    )\n    if (!signer) {\n      const message = `Unable to sign the transaction. During the preparation step, required account key information was found missing. ${RETRY_TO_INIT_ACCOUNT_OP_MSG}`\n      return this.#emitSigningErrorAndResetToReadyToSign(message)\n    }\n\n    const accountState =\n      this.#accounts.accountStates[this.accountOp.accountAddr][this.accountOp.networkId]\n    const isUsingPaymaster = !!this.estimation?.erc4337GasLimits?.paymaster.isUsable()\n    const usesOneTimeNonce = shouldUseOneTimeNonce(accountState)\n    if (this.accountOp.gasFeePayment.isERC4337 && isUsingPaymaster && !usesOneTimeNonce) {\n      this.status = { type: SigningStatus.WaitingForPaymaster }\n    } else {\n      this.status = { type: SigningStatus.InProgress }\n    }\n\n    // we update the FE with the changed status (in progress) only after the checks\n    // above confirm everything is okay to prevent two different state updates\n    this.emitUpdate()\n\n    const gasFeePayment = this.accountOp.gasFeePayment\n\n    if (signer.init) signer.init(this.#externalSignerControllers[this.accountOp.signingKeyType])\n\n    // just in-case: before signing begins, we delete the feeCall;\n    // if there's a need for it, it will be added later on in the code.\n    // We need this precaution because this could happen:\n    // - try to broadcast with the relayer\n    // - the feel call gets added\n    // - the relayer broadcast fails\n    // - the user does another broadcast, this time with EOA pays for SA\n    // - the fee call stays, causing a low gas limit revert\n    delete this.accountOp.feeCall\n\n    // delete the activatorCall as a precaution that it won't be added twice\n    delete this.accountOp.activatorCall\n\n    // @EntryPoint activation\n    // if we broadcast by an EOA, this is the only way to include\n    // the entry point as a signer\n    if (\n      shouldIncludeActivatorCall(\n        this.#network,\n        this.account,\n        accountState,\n        this.accountOp.gasFeePayment.isERC4337\n      )\n    ) {\n      this.accountOp.activatorCall = getActivatorCall(this.accountOp.accountAddr)\n    }\n\n    try {\n      // In case of EOA account\n      if (!isSmartAccount(this.account)) {\n        if (this.accountOp.calls.length !== 1) {\n          const callCount = this.accountOp.calls.length > 1 ? 'multiple' : 'zero'\n          const message = `Unable to sign the transaction because it has ${callCount} calls. ${RETRY_TO_INIT_ACCOUNT_OP_MSG}`\n          return this.#emitSigningErrorAndResetToReadyToSign(message)\n        }\n\n        // In legacy mode, we sign the transaction directly.\n        // that means the signing will happen on broadcast and here\n        // checking whether the call is 1 and 1 only is enough\n        this.accountOp.signature = '0x'\n      } else if (this.accountOp.gasFeePayment.paidBy !== this.account.addr) {\n        // Smart account, but EOA pays the fee\n        // EOA pays for execute() - relayerless\n\n        this.accountOp.signature = await getExecuteSignature(\n          this.#network,\n          this.accountOp,\n          accountState,\n          signer\n        )\n      } else if (this.accountOp.gasFeePayment.isERC4337) {\n        // if there's no entryPointAuthorization, the txn will fail\n        if (\n          !accountState.isDeployed &&\n          (!this.accountOp.meta || !this.accountOp.meta.entryPointAuthorization)\n        )\n          return this.#emitSigningErrorAndResetToReadyToSign(\n            `Unable to sign the transaction because entry point privileges were not granted. ${RETRY_TO_INIT_ACCOUNT_OP_MSG}`\n          )\n\n        const erc4337Estimation = this.estimation!.erc4337GasLimits as Erc4337GasLimits\n\n        const userOperation = getUserOperation(\n          this.account,\n          accountState,\n          this.accountOp,\n          this.bundlerSwitcher.getBundler().getName(),\n          !accountState.isDeployed ? this.accountOp.meta!.entryPointAuthorization : undefined\n        )\n        userOperation.preVerificationGas = erc4337Estimation.preVerificationGas\n        userOperation.callGasLimit = toBeHex(\n          BigInt(erc4337Estimation.callGasLimit) + (this.selectedOption.gasUsed ?? 0n)\n        )\n        userOperation.verificationGasLimit = erc4337Estimation.verificationGasLimit\n        userOperation.paymasterVerificationGasLimit =\n          erc4337Estimation.paymasterVerificationGasLimit\n        userOperation.paymasterPostOpGasLimit = erc4337Estimation.paymasterPostOpGasLimit\n        userOperation.maxFeePerGas = toBeHex(gasFeePayment.gasPrice)\n        userOperation.maxPriorityFeePerGas = toBeHex(gasFeePayment.maxPriorityFeePerGas!)\n\n        const paymaster = erc4337Estimation.paymaster\n        if (paymaster.shouldIncludePayment()) this.#addFeePayment()\n\n        const ambireAccount = new Interface(AmbireAccount.abi)\n        if (usesOneTimeNonce) {\n          const signature = await getExecuteSignature(\n            this.#network,\n            this.accountOp,\n            accountState,\n            signer\n          )\n\n          // after signing has completed, we wait for the paymaster response\n          // so we tell the user\n          this.status = { type: SigningStatus.WaitingForPaymaster }\n          this.emitUpdate()\n\n          userOperation.callData = ambireAccount.encodeFunctionData('executeMultiple', [\n            [[getSignableCalls(this.accountOp), signature]]\n          ])\n          this.accountOp.signature = signature\n        } else {\n          userOperation.callData = ambireAccount.encodeFunctionData('executeBySender', [\n            getSignableCalls(this.accountOp)\n          ])\n        }\n\n        if (paymaster.isUsable()) {\n          const response = await paymaster.call(\n            this.account,\n            this.accountOp,\n            userOperation,\n            this.#network\n          )\n\n          if (response.success) {\n            const paymasterData = response as PaymasterSuccessReponse\n            this.status = { type: SigningStatus.InProgress }\n            this.emitUpdate()\n\n            userOperation.paymaster = paymasterData.paymaster\n            userOperation.paymasterData = paymasterData.paymasterData\n            if (usesOneTimeNonce) userOperation.nonce = getOneTimeNonce(userOperation)\n            this.accountOp.gasFeePayment.isSponsored = paymaster.isSponsored()\n          } else {\n            const errorResponse = response as PaymasterErrorReponse\n            this.emitError({\n              level: 'major',\n              message: errorResponse.message,\n              error: errorResponse.error\n            })\n            this.status = { type: SigningStatus.ReadyToSign }\n            this.emitUpdate()\n            this.#reEstimate()\n            return\n          }\n        }\n\n        // query the application state from memory to understand if the user\n        // hasn't actually rejected the request while waiting for the\n        // paymaster to respond\n        if (!this.#isSignRequestStillActive()) return\n\n        if (userOperation.requestType === 'standard') {\n          const typedData = getTypedData(\n            this.#network.chainId,\n            this.accountOp.accountAddr,\n            getUserOpHash(userOperation, this.#network.chainId)\n          )\n          const signature = wrapStandard(await signer.signTypedData(typedData))\n          userOperation.signature = signature\n          this.accountOp.signature = signature\n        }\n        this.accountOp.asUserOperation = userOperation\n      } else {\n        // Relayer\n        this.#addFeePayment()\n\n        this.accountOp.signature = await getExecuteSignature(\n          this.#network,\n          this.accountOp,\n          accountState,\n          signer\n        )\n      }\n\n      this.status = { type: SigningStatus.Done }\n      this.signedAccountOp = structuredClone(this.accountOp)\n      this.emitUpdate()\n      return this.signedAccountOp\n    } catch (error: any) {\n      const { message } = getHumanReadableBroadcastError(error)\n\n      this.#emitSigningErrorAndResetToReadyToSign(message)\n    }\n  }\n\n  toJSON() {\n    return {\n      ...this,\n      isInitialized: this.isInitialized,\n      readyToSign: this.readyToSign,\n      availableFeeOptions: this.availableFeeOptions,\n      accountKeyStoreKeys: this.accountKeyStoreKeys,\n      feeToken: this.feeToken,\n      feePaidBy: this.feePaidBy,\n      speedOptions: this.speedOptions,\n      selectedOption: this.selectedOption,\n      account: this.account,\n      errors: this.errors,\n      gasSavedUSD: this.gasSavedUSD\n    }\n  }\n}\n"]}