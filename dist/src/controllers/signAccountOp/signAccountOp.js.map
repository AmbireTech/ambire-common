{"version":3,"file":"signAccountOp.js","sourceRoot":"","sources":["../../../../src/controllers/signAccountOp/signAccountOp.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-floating-promises */\nimport {\n  AbiCoder,\n  formatEther,\n  formatUnits,\n  getAddress,\n  Interface,\n  isAddress,\n  toBeHex,\n  ZeroAddress\n} from 'ethers'\n\nimport AmbireAccount from '../../../contracts/compiled/AmbireAccount.json'\nimport ERC20 from '../../../contracts/compiled/IERC20.json'\nimport { EIP7702Auth } from '../../consts/7702'\nimport { FEE_COLLECTOR } from '../../consts/addresses'\nimport { BUNDLER } from '../../consts/bundlers'\nimport { EIP_7702_AMBIRE_ACCOUNT, SINGLETON } from '../../consts/deploy'\nimport gasTankFeeTokens from '../../consts/gasTankFeeTokens'\nimport { Hex } from '../../interfaces/hex'\n/* eslint-disable no-restricted-syntax */\nimport {\n  ERRORS,\n  RETRY_TO_INIT_ACCOUNT_OP_MSG,\n  WARNINGS\n} from '../../consts/signAccountOp/errorHandling'\nimport {\n  GAS_TANK_TRANSFER_GAS_USED,\n  SA_ERC20_TRANSFER_GAS_USED,\n  SA_NATIVE_TRANSFER_GAS_USED\n} from '../../consts/signAccountOp/gas'\nimport { Account } from '../../interfaces/account'\nimport { Price } from '../../interfaces/assets'\nimport { ExternalKey, ExternalSignerControllers, InternalKey, Key } from '../../interfaces/keystore'\nimport { Network } from '../../interfaces/network'\nimport { RPCProvider } from '../../interfaces/provider'\nimport {\n  SignAccountOpError,\n  TraceCallDiscoveryStatus,\n  Warning\n} from '../../interfaces/signAccountOp'\nimport { getContractImplementation } from '../../libs/7702/7702'\nimport { isAmbireV1LinkedAccount, isSmartAccount } from '../../libs/account/account'\n/* eslint-disable no-restricted-syntax */\nimport { BaseAccount } from '../../libs/account/BaseAccount'\nimport { getBaseAccount } from '../../libs/account/getBaseAccount'\nimport { AccountOp, GasFeePayment, getSignableCalls } from '../../libs/accountOp/accountOp'\nimport { SubmittedAccountOp } from '../../libs/accountOp/submittedAccountOp'\nimport { BROADCAST_OPTIONS } from '../../libs/broadcast/broadcast'\nimport { PaymasterErrorReponse, PaymasterSuccessReponse, Sponsor } from '../../libs/erc7677/types'\nimport { getHumanReadableBroadcastError } from '../../libs/errorHumanizer'\nimport { bundlerEstimate } from '../../libs/estimate/estimateBundler'\nimport {\n  Erc4337GasLimits,\n  FeePaymentOption,\n  FullEstimationSummary\n} from '../../libs/estimate/interfaces'\nimport {\n  Gas1559Recommendation,\n  GasPriceRecommendation,\n  GasRecommendation\n} from '../../libs/gasPrice/gasPrice'\nimport { humanizeAccountOp } from '../../libs/humanizer'\nimport { hasRelayerSupport } from '../../libs/networks/networks'\nimport { AbstractPaymaster } from '../../libs/paymaster/abstractPaymaster'\nimport { GetOptions, TokenResult } from '../../libs/portfolio'\nimport {\n  adjustEntryPointAuthorization,\n  get7702Sig,\n  get7702UserOpTypedData,\n  getAuthorizationHash,\n  getEIP712Signature,\n  getEntryPointAuthorization,\n  getExecuteSignature,\n  getTypedData,\n  wrapStandard,\n  wrapUnprotected\n} from '../../libs/signMessage/signMessage'\nimport { getGasUsed } from '../../libs/singleton/singleton'\nimport { UserOperation } from '../../libs/userOperation/types'\nimport {\n  getActivatorCall,\n  getPackedUserOp,\n  getUserOperation,\n  getUserOpHash\n} from '../../libs/userOperation/userOperation'\nimport { BundlerSwitcher } from '../../services/bundlers/bundlerSwitcher'\nimport { GasSpeeds } from '../../services/bundlers/types'\nimport { AccountsController } from '../accounts/accounts'\nimport { AccountOpAction } from '../actions/actions'\nimport { EstimationController } from '../estimation/estimation'\nimport { EstimationStatus } from '../estimation/types'\nimport EventEmitter, { ErrorRef } from '../eventEmitter/eventEmitter'\nimport { GasPriceController } from '../gasPrice/gasPrice'\nimport { KeystoreController } from '../keystore/keystore'\nimport { NetworksController } from '../networks/networks'\nimport { PortfolioController } from '../portfolio/portfolio'\nimport {\n  getFeeSpeedIdentifier,\n  getFeeTokenPriceUnavailableWarning,\n  getSignificantBalanceDecreaseWarning,\n  getTokenUsdAmount\n} from './helper'\n\nexport enum SigningStatus {\n  EstimationError = 'estimation-error',\n  UnableToSign = 'unable-to-sign',\n  ReadyToSign = 'ready-to-sign',\n  /**\n   * Used to prevent state updates while the user is resolving warnings, connecting a hardware wallet, etc.\n   * Signing is allowed in this state, but the state of the controller should not change.\n   */\n  UpdatesPaused = 'updates-paused',\n  InProgress = 'in-progress',\n  WaitingForPaymaster = 'waiting-for-paymaster-response',\n  Done = 'done'\n}\n\nexport type Status = {\n  // @TODO: get rid of the object and just use the type\n  type: SigningStatus\n}\n\nexport enum FeeSpeed {\n  Slow = 'slow',\n  Medium = 'medium',\n  Fast = 'fast',\n  Ape = 'ape'\n}\n\nexport type SpeedCalc = {\n  type: FeeSpeed\n  amount: bigint\n  simulatedGasLimit: bigint\n  amountFormatted: string\n  amountUsd: string\n  gasPrice: bigint\n  disabled: boolean\n  maxPriorityFeePerGas?: bigint\n}\n\n// declare the statuses we don't want state updates on\nexport const noStateUpdateStatuses = [\n  SigningStatus.InProgress,\n  SigningStatus.Done,\n  SigningStatus.UpdatesPaused,\n  SigningStatus.WaitingForPaymaster\n]\n\nexport class SignAccountOpController extends EventEmitter {\n  #accounts: AccountsController\n\n  #keystore: KeystoreController\n\n  #portfolio: PortfolioController\n\n  #externalSignerControllers: ExternalSignerControllers\n\n  account: Account\n\n  baseAccount: BaseAccount\n\n  #network: Network\n\n  #blockGasLimit: bigint | undefined = undefined\n\n  // this is not used in the controller directly but it's being read outside\n  fromActionId: AccountOpAction['id']\n\n  accountOp: AccountOp\n\n  gasPrices?: GasRecommendation[] | null\n\n  bundlerGasPrices: GasSpeeds | null = null\n\n  feeSpeeds: {\n    [identifier: string]: SpeedCalc[]\n  } = {}\n\n  paidBy: string | null = null\n\n  feeTokenResult: TokenResult | null = null\n\n  selectedFeeSpeed: FeeSpeed | null = FeeSpeed.Fast\n\n  selectedOption: FeePaymentOption | undefined = undefined\n\n  status: Status | null = null\n\n  #isSignRequestStillActive: Function\n\n  rbfAccountOps: { [key: string]: SubmittedAccountOp | null }\n\n  signedAccountOp: AccountOp | null\n\n  replacementFeeLow: boolean\n\n  warnings: Warning[] = []\n\n  // indicates whether the transaction gas is sponsored or not\n  isSponsored: boolean = false\n\n  // the sponsor data to be displayed, if any\n  sponsor: Sponsor | undefined = undefined\n\n  bundlerSwitcher: BundlerSwitcher\n\n  signedTransactionsCount: number | null = null\n\n  // We track the status of token discovery logic (main.traceCall)\n  // to ensure the \"SignificantBalanceDecrease\" banner is displayed correctly.\n  // The latest/pending portfolio balance is essential for calculating balance differences.\n  // However, during a SWAP, the user may receive a new token that isn't yet included (discovered) in the portfolio.\n  // If the discovery process is in-process, and we only rely on portfolio balance change,\n  // the banner may be incorrectly triggered due to the perceived balance drop.\n  // Once discovery completes and updates the portfolio, the banner will be hidden.\n  traceCallDiscoveryStatus: TraceCallDiscoveryStatus = TraceCallDiscoveryStatus.NotStarted\n\n  // the calculated gas used for the transaction estimation\n  // it now depends on a variety of options and hence the need to move it\n  // as its own property\n  gasUsed: bigint = 0n\n\n  provider: RPCProvider\n\n  estimation: EstimationController\n\n  gasPrice: GasPriceController\n\n  #traceCall: Function\n\n  shouldSignAuth: {\n    type: 'V2Deploy' | '7702'\n    text: string\n  } | null = null\n\n  /**\n   * Should this signAccountOp instance simulate the accountOp it's\n   * preparing as well as estimate. Simulaton is required in the\n   * original signAccountOp but should be avoided in swap&bridge\n   */\n  #shouldSimulate: boolean\n\n  constructor(\n    accounts: AccountsController,\n    networks: NetworksController,\n    keystore: KeystoreController,\n    portfolio: PortfolioController,\n    externalSignerControllers: ExternalSignerControllers,\n    account: Account,\n    network: Network,\n    provider: RPCProvider,\n    fromActionId: AccountOpAction['id'],\n    accountOp: AccountOp,\n    isSignRequestStillActive: Function,\n    shouldSimulate: boolean,\n    traceCall?: Function\n  ) {\n    super()\n\n    this.#accounts = accounts\n    this.#keystore = keystore\n    this.#portfolio = portfolio\n    this.#externalSignerControllers = externalSignerControllers\n    this.account = account\n    this.baseAccount = getBaseAccount(\n      account,\n      accounts.accountStates[account.addr][network.chainId.toString()],\n      keystore.keys.filter((key) => account.associatedKeys.includes(key.addr)),\n      network\n    )\n    this.#network = network\n    this.fromActionId = fromActionId\n    this.accountOp = structuredClone(accountOp)\n    this.#isSignRequestStillActive = isSignRequestStillActive\n\n    this.rbfAccountOps = {}\n    this.signedAccountOp = null\n    this.replacementFeeLow = false\n    this.bundlerSwitcher = new BundlerSwitcher(network, () => {\n      return this.status ? noStateUpdateStatuses.indexOf(this.status.type) : false\n    })\n    this.provider = provider\n    this.estimation = new EstimationController(\n      keystore,\n      accounts,\n      networks,\n      provider,\n      portfolio,\n      this.bundlerSwitcher\n    )\n    const emptyFunc = () => {}\n    this.#traceCall = traceCall ?? emptyFunc\n    this.gasPrice = new GasPriceController(network, provider, this.bundlerSwitcher, () => ({\n      estimation: this.estimation,\n      readyToSign: this.readyToSign,\n      isSignRequestStillActive\n    }))\n    this.#shouldSimulate = shouldSimulate\n\n    this.#load(shouldSimulate)\n  }\n\n  #load(shouldSimulate: boolean) {\n    this.learnTokensFromCalls()\n\n    this.estimation.onUpdate(() => {\n      this.update({ hasNewEstimation: true })\n    })\n    this.gasPrice.onUpdate(() => {\n      this.update({\n        gasPrices: this.gasPrice.gasPrices[this.#network.chainId.toString()] || null,\n        bundlerGasPrices: this.gasPrice.bundlerGasPrices[this.#network.chainId.toString()],\n        blockGasLimit: this.gasPrice.blockGasLimit\n      })\n    })\n    this.gasPrice.onError((error: ErrorRef) => {\n      this.emitError(error)\n    })\n\n    shouldSimulate ? this.simulate(true) : this.estimate()\n    this.gasPrice.fetch()\n  }\n\n  learnTokensFromCalls() {\n    const humanization = humanizeAccountOp(this.accountOp, {})\n    const additionalHints: GetOptions['additionalErc20Hints'] = humanization\n      .map((call: any) =>\n        !call.fullVisualization\n          ? []\n          : call.fullVisualization.map((vis: any) =>\n              vis.address && isAddress(vis.address) ? getAddress(vis.address) : ''\n            )\n      )\n      .flat()\n      .filter((x: any) => isAddress(x))\n    this.#portfolio.addTokensToBeLearned(additionalHints, this.#network.chainId)\n  }\n\n  get isInitialized(): boolean {\n    return this.estimation.isInitialized()\n  }\n\n  #setDefaults() {\n    // Set the first signer as the default one.\n    // If there are more available signers, the user will be able to select a different signer from the application.\n    // The main benefit of having a default signer\n    // is that it drastically simplifies the logic of determining whether the account is ready for signing.\n    // For example, in the `sign` method and on the application screen, we can simply rely on the `this.readyToSign` flag.\n    // Otherwise, if we don't have a default value, then `this.readyToSign` will always be false unless we set a signer.\n    // In that case, on the application, we want the \"Sign\" button to be clickable/enabled,\n    // and we have to check and expose the `SignAccountOp` controller's inner state to make this check possible.\n    if (\n      this.accountKeyStoreKeys.length &&\n      (!this.accountOp.signingKeyAddr || !this.accountOp.signingKeyType)\n    ) {\n      this.accountOp.signingKeyAddr = this.accountKeyStoreKeys[0].addr\n      this.accountOp.signingKeyType = this.accountKeyStoreKeys[0].type\n    }\n\n    // we can set a default paidBy and feeToken here if they aren't any set\n  }\n\n  #setGasFeePayment() {\n    if (this.isInitialized && this.paidBy && this.selectedFeeSpeed && this.feeTokenResult) {\n      this.accountOp.gasFeePayment = this.#getGasFeePayment()\n    }\n  }\n\n  // check if speeds are set for the given identifier\n  hasSpeeds(identifier: string) {\n    return this.feeSpeeds[identifier] !== undefined && this.feeSpeeds[identifier].length\n  }\n\n  get errors(): SignAccountOpError[] {\n    const errors: SignAccountOpError[] = []\n\n    const estimationErrors = this.estimation.errors\n    if (estimationErrors.length) return estimationErrors\n\n    const isAmbireV1 = isAmbireV1LinkedAccount(this.account?.creation?.factoryAddr)\n    const isAmbireV1AndNetworkNotSupported = isAmbireV1 && !hasRelayerSupport(this.#network)\n\n    // This must be the first error check!\n    if (isAmbireV1AndNetworkNotSupported) {\n      errors.push({\n        title:\n          'Ambire v1 accounts are not supported on this network. To interact with this network, please use an Ambire Smart Account or an EOA account. You can still use v1 accounts on any network that is natively integrated with the Ambire web and mobile wallets.'\n      })\n\n      // Don't show any other errors\n      return errors\n    }\n\n    /**\n     * A big block for logic separation\n     * The above errors (estimation & ambireV1) are okay to be shown\n     * even if isInitialized hasn't completed. Otherwise, do not load\n     * any errors\n     */\n    if (!this.isInitialized) return []\n\n    const areGasPricesLoading = typeof this.gasPrices === 'undefined'\n\n    if (!areGasPricesLoading && !this.gasPrices?.length) {\n      errors.push({\n        title:\n          'Gas price information is currently unavailable. This may be due to network congestion or connectivity issues. Please try again in a few moments or check your internet connection.'\n      })\n    }\n\n    if (\n      this.#blockGasLimit &&\n      this.selectedOption &&\n      this.selectedOption.gasUsed > this.#blockGasLimit\n    ) {\n      errors.push({\n        title: 'The transaction gas limit exceeds the network block gas limit.'\n      })\n    }\n\n    if (\n      this.#network.predefined &&\n      this.selectedOption &&\n      this.selectedOption.gasUsed > 500000000n\n    ) {\n      errors.push({\n        title: 'Unreasonably high estimation. This transaction will probably fail'\n      })\n    }\n\n    // this error should never happen as availableFeeOptions should always have the native option\n    if (!this.isSponsored && !this.estimation.availableFeeOptions.length)\n      errors.push({\n        title: 'Insufficient funds to cover the fee.'\n      })\n\n    // This error should not happen, as in the update method we are always setting a default signer.\n    // It may occur, only if there are no available signer.\n    if (!this.accountOp.signingKeyType || !this.accountOp.signingKeyAddr)\n      errors.push({\n        title: 'No signer available'\n      })\n\n    const currentPortfolio = this.#portfolio.getLatestPortfolioState(this.accountOp.accountAddr)\n    const currentPortfolioNetwork = currentPortfolio[this.accountOp.chainId.toString()]\n\n    const currentPortfolioNetworkNative = currentPortfolioNetwork?.result?.tokens.find(\n      (token) => token.address === '0x0000000000000000000000000000000000000000'\n    )\n    if (!this.isSponsored && !currentPortfolioNetworkNative)\n      errors.push({\n        title:\n          'Unable to estimate the transaction fee as fetching the latest price update for the network native token failed. Please try again later.'\n      })\n\n    // if there's no gasFeePayment calculate but there is: 1) feeTokenResult\n    // 2) selectedOption and 3) gasSpeeds for selectedOption => return an error\n    if (\n      !this.isSponsored &&\n      !this.accountOp.gasFeePayment &&\n      this.feeTokenResult &&\n      this.selectedOption\n    ) {\n      const identifier = getFeeSpeedIdentifier(\n        this.selectedOption,\n        this.accountOp.accountAddr,\n        this.rbfAccountOps[this.selectedOption.paidBy]\n      )\n      if (this.hasSpeeds(identifier))\n        errors.push({\n          title: 'Please select a token and an account for paying the gas fee.'\n        })\n    }\n\n    if (\n      !this.isSponsored &&\n      this.selectedOption &&\n      this.accountOp.gasFeePayment &&\n      this.selectedOption.availableAmount < this.accountOp.gasFeePayment.amount\n    ) {\n      const speedCoverage = []\n      const identifier = getFeeSpeedIdentifier(\n        this.selectedOption,\n        this.accountOp.accountAddr,\n        this.rbfAccountOps[this.selectedOption.paidBy]\n      )\n\n      if (this.feeSpeeds[identifier]) {\n        this.feeSpeeds[identifier].forEach((speed) => {\n          if (this.selectedOption && this.selectedOption.availableAmount >= speed.amount)\n            speedCoverage.push(speed.type)\n        })\n      }\n\n      if (speedCoverage.length === 0) {\n        const isSA = isSmartAccount(this.account)\n        const isUnableToCoverWithAllOtherTokens = this.estimation.availableFeeOptions.every(\n          (option) => {\n            if (option === this.selectedOption) return true\n            const optionIdentifier = getFeeSpeedIdentifier(\n              option,\n              this.accountOp.accountAddr,\n              this.rbfAccountOps[option.paidBy]\n            )\n\n            const speedsThatCanCover = this.feeSpeeds[optionIdentifier]?.filter(\n              (speed) => speed.amount <= option.availableAmount\n            )\n\n            return !speedsThatCanCover?.length\n          }\n        )\n        if (isUnableToCoverWithAllOtherTokens) {\n          let skippedTokensCount = 0\n          const gasTokenNames = gasTankFeeTokens\n            .filter(({ chainId, hiddenOnError }) => {\n              if (chainId !== this.accountOp.chainId) return false\n\n              if (hiddenOnError) {\n                skippedTokensCount++\n                return false\n              }\n\n              return true\n            })\n            .map(({ symbol }) => symbol.toUpperCase())\n            .join(', ')\n\n          errors.push({\n            title: `${ERRORS.eoaInsufficientFunds}${\n              isSA\n                ? ` Available fee options: USDC in Gas Tank, ${gasTokenNames}${\n                    skippedTokensCount ? ' and others' : ''\n                  }`\n                : ''\n            }`\n          })\n        } else {\n          errors.push({\n            title: isSA\n              ? \"Signing is not possible with the selected account's token as it doesn't have sufficient funds to cover the gas payment fee.\"\n              : ERRORS.eoaInsufficientFunds\n          })\n        }\n      } else {\n        errors.push({\n          title:\n            'The selected speed is not available due to insufficient funds. Please select a slower speed.'\n        })\n      }\n    }\n\n    // The signing might fail, tell the user why but allow the user to retry signing,\n    // @ts-ignore fix TODO: type mismatch\n    if (this.status?.type === SigningStatus.ReadyToSign && !!this.status.error) {\n      // @ts-ignore typescript complains, but the error being present gets checked above\n      errors.push(this.status.error)\n    }\n\n    if (!this.isSponsored && !this.#feeSpeedsLoading && this.selectedOption) {\n      const identifier = getFeeSpeedIdentifier(\n        this.selectedOption,\n        this.accountOp.accountAddr,\n        this.rbfAccountOps[this.selectedOption.paidBy]\n      )\n      if (!this.hasSpeeds(identifier)) {\n        if (!this.feeTokenResult?.priceIn.length) {\n          errors.push({\n            title: `Currently, ${this.feeTokenResult?.symbol} is unavailable as a fee token as we're experiencing troubles fetching its price. Please select another or contact support`\n          })\n        } else {\n          errors.push({\n            title:\n              'Unable to estimate the transaction fee. Please try changing the fee token or contact support.'\n          })\n        }\n      }\n    }\n\n    return errors\n  }\n\n  get readyToSign() {\n    return (\n      !!this.status &&\n      (this.status?.type === SigningStatus.ReadyToSign ||\n        this.status?.type === SigningStatus.UpdatesPaused)\n    )\n  }\n\n  calculateWarnings() {\n    const warnings: Warning[] = []\n\n    const latestState = this.#portfolio.getLatestPortfolioState(this.accountOp.accountAddr)\n    const pendingState = this.#portfolio.getPendingPortfolioState(this.accountOp.accountAddr)\n\n    const significantBalanceDecreaseWarning = getSignificantBalanceDecreaseWarning(\n      latestState,\n      pendingState,\n      this.accountOp.chainId,\n      this.traceCallDiscoveryStatus\n    )\n\n    if (this.selectedOption) {\n      const identifier = getFeeSpeedIdentifier(\n        this.selectedOption,\n        this.accountOp.accountAddr,\n        this.rbfAccountOps[this.selectedOption.paidBy]\n      )\n      const feeTokenHasPrice = this.feeSpeeds[identifier]?.every((speed) => !!speed.amountUsd)\n      const feeTokenPriceUnavailableWarning = getFeeTokenPriceUnavailableWarning(\n        !!this.hasSpeeds(identifier),\n        feeTokenHasPrice\n      )\n\n      // push the warning only if the txn is not sponsored\n      if (!this.isSponsored && feeTokenPriceUnavailableWarning)\n        warnings.push(feeTokenPriceUnavailableWarning)\n    }\n\n    if (significantBalanceDecreaseWarning) warnings.push(significantBalanceDecreaseWarning)\n\n    // if 7702 EOA that is not ambire\n    // and another delegation is there, show the warning\n    const broadcastOption = this.selectedOption\n      ? this.baseAccount.getBroadcastOption(this.selectedOption, {\n          op: this.accountOp,\n          isSponsored: this.isSponsored\n        })\n      : null\n    if (\n      'is7702' in this.baseAccount &&\n      this.baseAccount.is7702 &&\n      this.delegatedContract &&\n      this.delegatedContract !== ZeroAddress &&\n      this.delegatedContract?.toLowerCase() !== EIP_7702_AMBIRE_ACCOUNT.toLowerCase() &&\n      (!this.accountOp.meta || this.accountOp.meta.setDelegation === undefined) &&\n      broadcastOption === BROADCAST_OPTIONS.byBundler\n    ) {\n      warnings.push(WARNINGS.delegationDetected)\n    }\n\n    const estimationWarnings = this.estimation.calculateWarnings()\n\n    this.warnings = warnings.concat(estimationWarnings)\n\n    this.emitUpdate()\n  }\n\n  async simulate(shouldTraceCall: boolean = false) {\n    // no simulation / estimation if we're in a signing state\n    if (!this.canUpdate()) return\n\n    if (shouldTraceCall) this.#traceCall(this)\n\n    await Promise.all([\n      this.#portfolio.simulateAccountOp(this.accountOp),\n      this.estimation.estimate(this.accountOp).catch((e) => e)\n    ])\n\n    // calculate the warnings after the portfolio is fetched\n    this.calculateWarnings()\n\n    const estimation = this.estimation.estimation\n\n    // estimation.flags.hasNonceDiscrepancy is a signal from the estimation\n    // that we should update the portfolio to get a correct simulation\n    if (estimation && estimation.ambireEstimation && estimation.flags.hasNonceDiscrepancy) {\n      this.accountOp.nonce = BigInt(estimation.ambireEstimation.ambireAccountNonce)\n      await this.#portfolio.simulateAccountOp(this.accountOp)\n    }\n\n    // if the portfolio detects a nonce discrepancy and the estimation is a Success,\n    // refetch the account state, resimulate and put the correct nonce in accountOp\n    const portfolioState = this.#portfolio.getPendingPortfolioState(this.accountOp.accountAddr)\n    const pendingPortfolioState = portfolioState\n      ? portfolioState[this.accountOp.chainId.toString()]\n      : null\n    if (\n      this.estimation.status === EstimationStatus.Success &&\n      pendingPortfolioState &&\n      pendingPortfolioState.criticalError?.simulationErrorMsg &&\n      pendingPortfolioState.criticalError?.simulationErrorMsg.indexOf('nonce did not increment') !==\n        -1\n    ) {\n      const pendingAccountState = await this.#accounts.forceFetchPendingState(\n        this.accountOp.accountAddr,\n        this.accountOp.chainId\n      )\n      this.accountOp.nonce = pendingAccountState.nonce\n      await this.#portfolio.simulateAccountOp(this.accountOp)\n    }\n\n    // if there's an estimation error, override the pending results\n    if (this.estimation.status === EstimationStatus.Error) {\n      this.#portfolio.overridePendingResults(this.accountOp)\n    }\n  }\n\n  async estimate() {\n    await this.estimation.estimate(this.accountOp)\n  }\n\n  async simulateSwapOrBridge() {\n    await this.#portfolio.simulateAccountOp(this.accountOp)\n  }\n\n  update({\n    gasPrices,\n    feeToken,\n    paidBy,\n    speed,\n    signingKeyAddr,\n    signingKeyType,\n    calls,\n    rbfAccountOps,\n    bundlerGasPrices,\n    blockGasLimit,\n    signedTransactionsCount,\n    hasNewEstimation\n  }: {\n    gasPrices?: GasRecommendation[] | null\n    feeToken?: TokenResult\n    paidBy?: string\n    speed?: FeeSpeed\n    signingKeyAddr?: Key['addr']\n    signingKeyType?: InternalKey['type'] | ExternalKey['type']\n    calls?: AccountOp['calls']\n    rbfAccountOps?: { [key: string]: SubmittedAccountOp | null }\n    bundlerGasPrices?: { speeds: GasSpeeds; bundler: BUNDLER }\n    blockGasLimit?: bigint\n    signedTransactionsCount?: number | null\n    hasNewEstimation?: boolean\n  }) {\n    try {\n      // This must be at the top, otherwise it won't be updated because\n      // most updates are frozen during the signing process\n      if (typeof signedTransactionsCount !== 'undefined') {\n        this.signedTransactionsCount = signedTransactionsCount\n        // If we add other exclusions we should figure out a way to emitUpdate only once\n        this.emitUpdate()\n        return\n      }\n\n      // once the user commits to the things he sees on his screen,\n      // we need to be sure nothing changes afterwards.\n      // For example, signing can be slow if it's done by a hardware wallet.\n      // The estimation gets refreshed on the other hand each 12 seconds (6 on optimism)\n      // If we allow the estimation to affect the controller state during sign,\n      // there could be discrepancy between what the user has agreed upon and what\n      // we broadcast in the end\n      if (this.status?.type && noStateUpdateStatuses.indexOf(this.status?.type) !== -1) {\n        return\n      }\n\n      if (this.estimation.status === EstimationStatus.Success) {\n        const estimation = this.estimation.estimation as FullEstimationSummary\n        if (estimation.ambireEstimation) {\n          this.accountOp.nonce = BigInt(estimation.ambireEstimation.ambireAccountNonce)\n        }\n        if (estimation.bundlerEstimation) {\n          this.bundlerGasPrices = estimation.bundlerEstimation.gasPrice\n        }\n      }\n\n      if (Array.isArray(calls)) {\n        const hasNewCalls = this.accountOp.calls.length < calls.length\n        this.accountOp.calls = calls\n\n        if (hasNewCalls) this.learnTokensFromCalls()\n        this.#shouldSimulate ? this.simulate(hasNewCalls) : this.estimate()\n      }\n\n      if (blockGasLimit) this.#blockGasLimit = blockGasLimit\n\n      if (gasPrices) this.gasPrices = gasPrices\n\n      if (feeToken && paidBy) {\n        this.paidBy = paidBy\n        this.feeTokenResult = feeToken\n      }\n\n      if (speed && this.isInitialized) {\n        this.selectedFeeSpeed = speed\n      }\n\n      if (signingKeyAddr && signingKeyType && this.isInitialized) {\n        this.accountOp.signingKeyAddr = signingKeyAddr\n        this.accountOp.signingKeyType = signingKeyType\n      }\n\n      // set the rbf is != undefined\n      if (rbfAccountOps) this.rbfAccountOps = rbfAccountOps\n\n      // Set defaults, if some of the optional params are omitted\n      this.#setDefaults()\n\n      if (\n        this.estimation.status === EstimationStatus.Success &&\n        this.paidBy &&\n        this.feeTokenResult\n      ) {\n        const selectedOption = this.estimation.availableFeeOptions.find(\n          (option) =>\n            option.paidBy === this.paidBy &&\n            option.token.address === this.feeTokenResult!.address &&\n            option.token.symbol.toLocaleLowerCase() ===\n              this.feeTokenResult!.symbol.toLocaleLowerCase() &&\n            option.token.flags.onGasTank === this.feeTokenResult!.flags.onGasTank\n        )\n        // <Bobby>: trigger setting the real default speed just before\n        // setting the first selectedOption. This way we know all the\n        // necessary information like available amount for the selected\n        // option so we could calculate the fee speed if he doesn't have\n        // enough for fast but has enough for slow/medium\n        if (selectedOption) this.#setDefaultFeeSpeed(selectedOption)\n        this.selectedOption = selectedOption\n      }\n\n      if (\n        bundlerGasPrices &&\n        bundlerGasPrices.bundler === this.bundlerSwitcher.getBundler().getName()\n      ) {\n        this.bundlerGasPrices = bundlerGasPrices.speeds\n      }\n\n      if (\n        this.estimation.estimation &&\n        this.estimation.estimation.bundlerEstimation &&\n        this.estimation.estimation.bundlerEstimation.paymaster\n      ) {\n        // if it was sponsored but it no longer is (fallback case),\n        // reset the selectedOption option as we use native for the sponsorship\n        // but the user might not actually have any native\n        const isSponsorshipFallback =\n          this.isSponsored && !this.estimation.estimation.bundlerEstimation.paymaster.isSponsored()\n\n        this.isSponsored = this.estimation.estimation.bundlerEstimation.paymaster.isSponsored()\n        this.sponsor =\n          this.estimation.estimation.bundlerEstimation.paymaster.getEstimationData()?.sponsor\n\n        if (isSponsorshipFallback) {\n          this.selectedOption = this.estimation.availableFeeOptions.length\n            ? this.estimation.availableFeeOptions[0]\n            : undefined\n        }\n      }\n\n      // calculate the fee speeds if either there are no feeSpeeds\n      // or any of properties for update is requested\n      if (\n        !Object.keys(this.feeSpeeds).length ||\n        Array.isArray(calls) ||\n        gasPrices ||\n        this.paidBy ||\n        this.feeTokenResult ||\n        hasNewEstimation ||\n        bundlerGasPrices\n      ) {\n        this.#updateFeeSpeeds()\n      }\n\n      // Here, we expect to have most of the fields set, so we can safely set GasFeePayment\n      this.#setGasFeePayment()\n      this.updateStatus()\n      this.calculateWarnings()\n    } catch (e: any) {\n      this.emitError({\n        message: 'Error updating the SignAccountOpController',\n        error: e,\n        level: 'silent'\n      })\n    }\n  }\n\n  updateStatus(forceStatusChange?: SigningStatus, replacementFeeLow = false) {\n    // use this to go back to ReadyToSign when a broadcasting error is emitted\n    if (forceStatusChange) {\n      this.status = { type: forceStatusChange }\n      this.emitUpdate()\n      return\n    }\n\n    // no status updates on these two\n    const isInTheMiddleOfSigning =\n      this.status?.type === SigningStatus.InProgress ||\n      this.status?.type === SigningStatus.WaitingForPaymaster\n    const isDone = this.status?.type === SigningStatus.Done\n    if (isInTheMiddleOfSigning || isDone) return\n\n    // if we have an estimation error, set the state so and return\n    if (this.estimation.error) {\n      this.status = { type: SigningStatus.EstimationError }\n      this.emitUpdate()\n      return\n    }\n\n    if (this.errors.length) {\n      this.status = { type: SigningStatus.UnableToSign }\n      this.emitUpdate()\n      return\n    }\n\n    if (\n      this.isInitialized &&\n      this.accountOp.signingKeyAddr &&\n      this.accountOp.signingKeyType &&\n      this.accountOp.gasFeePayment\n    ) {\n      this.status = { type: SigningStatus.ReadyToSign }\n\n      // do not reset this once triggered\n      if (replacementFeeLow) this.replacementFeeLow = replacementFeeLow\n      this.emitUpdate()\n      return\n    }\n\n    // reset the status if a valid state was not found\n    this.status = null\n    this.emitUpdate()\n  }\n\n  reset() {\n    this.estimation.reset()\n    this.gasPrice.reset()\n    this.gasPrices = undefined\n    this.selectedFeeSpeed = FeeSpeed.Fast\n    this.paidBy = null\n    this.feeTokenResult = null\n    this.status = null\n    this.signedTransactionsCount = null\n    this.emitUpdate()\n  }\n\n  resetStatus() {\n    this.status = null\n    this.emitUpdate()\n  }\n\n  /**\n   * Obtain the native token ratio in relation to a fee token.\n   *\n   * By knowing the USD value of the tokens in the portfolio,\n   * we can calculate the ratio between a native token and a fee token.\n   *\n   * For example, 1 ETH = 8 BNB (ratio: 8).\n   *\n   * We require the ratio to be in a BigInt format since all the application values,\n   * such as amount, gasLimit, etc., are also represented as BigInt numbers.\n   */\n  #getNativeToFeeTokenRatio(feeToken: TokenResult): bigint | null {\n    const native = this.#portfolio\n      .getLatestPortfolioState(this.accountOp.accountAddr)\n      [this.accountOp.chainId.toString()]?.result?.tokens.find(\n        (token) => token.address === '0x0000000000000000000000000000000000000000'\n      )\n    if (!native) return null\n\n    // In case the fee token is the native token we don't want to depend to priceIn, as it might not be available.\n    if (native.address === feeToken.address && native.chainId === feeToken.chainId)\n      return BigInt(1 * 1e18)\n\n    const isUsd = (price: Price) => price.baseCurrency === 'usd'\n\n    const nativePrice = native.priceIn.find(isUsd)?.price\n    const feeTokenPrice = feeToken.priceIn.find(isUsd)?.price\n\n    if (!nativePrice || !feeTokenPrice) return null\n\n    const ratio = nativePrice / feeTokenPrice\n\n    // Here we multiply it by 1e18, in order to keep the decimal precision.\n    // Otherwise, passing the ratio to the BigInt constructor, we will lose the numbers after the decimal point.\n    // Later, once we need to normalize this ratio, we should not forget to divide it by 1e18.\n    const ratio1e18 = ratio * 1e18\n    const toBigInt = ratio1e18 % 1 === 0 ? ratio1e18 : ratio1e18.toFixed(0)\n    return BigInt(toBigInt)\n  }\n\n  static getAmountAfterFeeTokenConvert(\n    simulatedGasLimit: bigint,\n    gasPrice: bigint,\n    nativeRatio: bigint,\n    feeTokenDecimals: number,\n    addedNative: bigint\n  ) {\n    const amountInWei = simulatedGasLimit * gasPrice + addedNative\n\n    // Let's break down the process of converting the amount into FeeToken:\n    // 1. Initially, we multiply the amount in wei by the native to fee token ratio.\n    // 2. Next, we address the decimal places:\n    // 2.1. First, we convert wei to native by dividing by 10^18 (representing the decimals).\n    // 2.2. Now, with the amount in the native token, we incorporate nativeRatio decimals into the calculation (18 + 18) to standardize the amount.\n    // 2.3. At this point, we precisely determine the number of fee tokens. For instance, if the amount is 3 USDC, we must convert it to a BigInt value, while also considering feeToken.decimals.\n    const extraDecimals = BigInt(10 ** 18)\n    const feeTokenExtraDecimals = BigInt(10 ** (18 - feeTokenDecimals))\n    const pow = extraDecimals * feeTokenExtraDecimals\n    const result = (amountInWei * nativeRatio) / pow\n\n    // Fixes the edge case where the fee in wei is not zero\n    // but the decimals of the token we are converting to\n    // cannot represent the amount in wei. Example: 0.(6zeros)1 USDC\n    // We are returning 1n which is the smallest possible amount\n    // to be represented in USDC\n    if (result === 0n && amountInWei !== 0n) {\n      return 1n\n    }\n\n    return result\n  }\n\n  /**\n   * Increase the fee we send to the feeCollector according to the specified\n   * options in the network tab\n   */\n  #increaseFee(amount: bigint): bigint {\n    if (!this.#network.feeOptions.feeIncrease) {\n      return amount\n    }\n\n    return amount + (amount * this.#network.feeOptions.feeIncrease) / 100n\n  }\n\n  get #feeSpeedsLoading() {\n    return !this.isInitialized || !this.gasPrices\n  }\n\n  #setDefaultFeeSpeed(feePaymentOption: FeePaymentOption) {\n    // don't update if an option is already set\n    if (this.selectedOption) return\n\n    const identifier = getFeeSpeedIdentifier(\n      feePaymentOption,\n      this.account.addr,\n      this.rbfAccountOps[feePaymentOption.paidBy]\n    )\n    const speeds = this.feeSpeeds[identifier]\n    if (!speeds) return\n\n    // set fast if available\n    if (speeds.find(({ type, disabled }) => type === FeeSpeed.Fast && !disabled)) {\n      this.selectedFeeSpeed = FeeSpeed.Fast\n      return\n    }\n\n    // set at least slow\n    const fastestEnabledSpeed = [...speeds].reverse().find(({ disabled }) => !disabled)\n    this.selectedFeeSpeed = fastestEnabledSpeed?.type || FeeSpeed.Slow\n  }\n\n  #updateFeeSpeeds() {\n    if (this.estimation.status !== EstimationStatus.Success || !this.gasPrices) return\n\n    const estimation = this.estimation.estimation as FullEstimationSummary\n\n    // reset the fee speeds at the beginning to avoid duplications\n    this.feeSpeeds = {}\n\n    this.estimation.availableFeeOptions.forEach((option) => {\n      // if a calculation has been made, do not make it again\n      // EOA pays for SA is the most common case for this scenario\n      //\n      // addition: make sure there's no rbfAccountOps as well\n      const identifier = getFeeSpeedIdentifier(\n        option,\n        this.accountOp.accountAddr,\n        this.rbfAccountOps[option.paidBy]\n      )\n      if (this.hasSpeeds(identifier)) {\n        return\n      }\n\n      const nativeRatio = this.#getNativeToFeeTokenRatio(option.token)\n      if (!nativeRatio) {\n        this.feeSpeeds[identifier] = []\n        return\n      }\n\n      // get the gas used for each payment option\n      const gasUsed = this.baseAccount.getGasUsed(estimation, {\n        feeToken: option.token,\n        op: this.accountOp\n      })\n\n      // each available fee option should declare it's estimation method\n      const broadcastOption = this.baseAccount.getBroadcastOption(option, {\n        op: this.accountOp,\n        isSponsored: this.isSponsored\n      })\n      if (broadcastOption === BROADCAST_OPTIONS.byBundler) {\n        if (!estimation.bundlerEstimation || !this.bundlerGasPrices) return\n\n        const speeds: SpeedCalc[] = []\n        const usesPaymaster = estimation.bundlerEstimation?.paymaster.isUsable()\n\n        for (const [speed, speedValue] of Object.entries(this.bundlerGasPrices as GasSpeeds)) {\n          const simulatedGasLimit =\n            BigInt(gasUsed) +\n            BigInt(estimation.bundlerEstimation.preVerificationGas) +\n            BigInt(option.gasUsed)\n          const gasPrice = BigInt(speedValue.maxFeePerGas)\n          let amount = SignAccountOpController.getAmountAfterFeeTokenConvert(\n            simulatedGasLimit,\n            gasPrice,\n            nativeRatio,\n            option.token.decimals,\n            0n\n          )\n          if (usesPaymaster) amount = this.#increaseFee(amount)\n\n          speeds.push({\n            type: speed as FeeSpeed,\n            simulatedGasLimit,\n            amount,\n            amountFormatted: formatUnits(amount, Number(option.token.decimals)),\n            amountUsd: getTokenUsdAmount(option.token, amount),\n            gasPrice,\n            maxPriorityFeePerGas: BigInt(speedValue.maxPriorityFeePerGas),\n            disabled: (option.availableAmount || 0n) < amount\n          })\n        }\n\n        if (this.feeSpeeds[identifier] === undefined) this.feeSpeeds[identifier] = []\n        this.feeSpeeds[identifier] = speeds\n        return\n      }\n\n      ;(this.gasPrices || []).forEach((gasRecommendation) => {\n        let amount\n        let simulatedGasLimit: bigint\n\n        // get the calculate fees by our script\n        let maxPriorityFeePerGas =\n          'maxPriorityFeePerGas' in gasRecommendation\n            ? gasRecommendation.maxPriorityFeePerGas\n            : undefined\n        let gasPrice = maxPriorityFeePerGas\n          ? (gasRecommendation as Gas1559Recommendation).baseFeePerGas + maxPriorityFeePerGas\n          : (gasRecommendation as GasPriceRecommendation).gasPrice\n\n        // the bundler does a better job than us for gas price estimations\n        // so we prioritize their estimation over ours if there's any\n        if (this.bundlerGasPrices) {\n          const name = gasRecommendation.name as keyof GasSpeeds\n          maxPriorityFeePerGas = BigInt(this.bundlerGasPrices[name].maxPriorityFeePerGas)\n          gasPrice = BigInt(this.bundlerGasPrices[name].maxFeePerGas)\n        }\n\n        // EOA OR 7702: pays with native by itself\n        if (\n          broadcastOption === BROADCAST_OPTIONS.bySelf ||\n          broadcastOption === BROADCAST_OPTIONS.bySelf7702\n        ) {\n          simulatedGasLimit = gasUsed\n\n          this.accountOp.calls.forEach((call) => {\n            if (call.to && getAddress(call.to) === SINGLETON) {\n              simulatedGasLimit = getGasUsed(simulatedGasLimit)\n            }\n          })\n\n          amount = simulatedGasLimit * gasPrice + option.addedNative\n        } else if (broadcastOption === BROADCAST_OPTIONS.byOtherEOA) {\n          // Smart account, but EOA pays the fee\n          // 7702, and it pays for the fee by itself\n          simulatedGasLimit = gasUsed\n          amount = simulatedGasLimit * gasPrice + option.addedNative\n        } else {\n          // Relayer\n          simulatedGasLimit = gasUsed + option.gasUsed\n          amount = SignAccountOpController.getAmountAfterFeeTokenConvert(\n            simulatedGasLimit,\n            gasPrice,\n            nativeRatio,\n            option.token.decimals,\n            option.addedNative\n          )\n          amount = this.#increaseFee(amount)\n        }\n\n        const feeSpeed: SpeedCalc = {\n          type: gasRecommendation.name as FeeSpeed,\n          simulatedGasLimit,\n          amount,\n          amountFormatted: formatUnits(amount, Number(option.token.decimals)),\n          amountUsd: getTokenUsdAmount(option.token, amount),\n          gasPrice,\n          maxPriorityFeePerGas,\n          disabled: option.availableAmount < amount\n        }\n        if (this.feeSpeeds[identifier] === undefined) this.feeSpeeds[identifier] = []\n        this.feeSpeeds[identifier].push(feeSpeed)\n      })\n    })\n  }\n\n  #getGasFeePayment(): GasFeePayment | null {\n    if (!this.isInitialized) {\n      this.emitError({\n        level: 'major',\n        message:\n          'Something went wrong while setting up the gas fee payment account and token. Please try again, selecting the account and token option. If the problem persists, contact support.',\n        error: new Error(\n          'SignAccountOpController: The controller is not initialized while we are trying to build GasFeePayment.'\n        )\n      })\n\n      return null\n    }\n    if (!this.paidBy) {\n      this.emitError({\n        level: 'silent',\n        message: '',\n        error: new Error('SignAccountOpController: paying account not selected')\n      })\n\n      return null\n    }\n    if (!this.feeTokenResult) {\n      this.emitError({\n        level: 'silent',\n        message: '',\n        error: new Error('SignAccountOpController: fee token not selected')\n      })\n\n      return null\n    }\n\n    // if there are no availableFeeOptions, we don't have a gasFee\n    // this is normal though as there are such cases:\n    // - EOA paying in native but doesn't have any native\n    // so no error should pop out because of this\n    if (!this.estimation.availableFeeOptions.length) {\n      return null\n    }\n\n    if (!this.selectedOption) {\n      this.emitError({\n        level: 'silent',\n        message: '',\n        error: new Error('SignAccountOpController: paying option not found')\n      })\n\n      return null\n    }\n\n    // if there are no fee speeds available for the option, it means\n    // the nativeRatio could not be calculated. In that case, we do not\n    // emit an error here but proceed and show an explanation to the user\n    // in get errors()\n    // check test: Signing [Relayer]: ... priceIn | native/Ratio\n    const identifier = getFeeSpeedIdentifier(\n      this.selectedOption,\n      this.accountOp.accountAddr,\n      this.rbfAccountOps[this.selectedOption.paidBy]\n    )\n    if (!this.feeSpeeds[identifier].length) {\n      return null\n    }\n\n    const chosenSpeed = this.feeSpeeds[identifier].find(\n      (speed) => speed.type === this.selectedFeeSpeed\n    )\n    if (!chosenSpeed) {\n      this.emitError({\n        level: 'silent',\n        message: '',\n        error: new Error('SignAccountOpController: fee speed not selected')\n      })\n\n      return null\n    }\n\n    return {\n      paidBy: this.paidBy,\n      isGasTank: this.feeTokenResult.flags.onGasTank,\n      inToken: this.feeTokenResult.address,\n      feeTokenChainId: this.feeTokenResult.chainId,\n      amount: chosenSpeed.amount,\n      simulatedGasLimit: chosenSpeed.simulatedGasLimit,\n      gasPrice: chosenSpeed.gasPrice,\n      maxPriorityFeePerGas:\n        'maxPriorityFeePerGas' in chosenSpeed ? chosenSpeed.maxPriorityFeePerGas : undefined,\n      broadcastOption: this.baseAccount.getBroadcastOption(this.selectedOption, {\n        op: this.accountOp,\n        isSponsored: this.isSponsored\n      })\n    }\n  }\n\n  get feeToken(): string | null {\n    return this.accountOp.gasFeePayment?.inToken || null\n  }\n\n  get feePaidBy(): string | null {\n    return this.accountOp.gasFeePayment?.paidBy || null\n  }\n\n  get accountKeyStoreKeys(): Key[] {\n    return this.#keystore.keys.filter((key) => this.account.associatedKeys.includes(key.addr))\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  get speedOptions() {\n    return Object.values(FeeSpeed) as string[]\n  }\n\n  get gasSavedUSD(): number | null {\n    if (!this.selectedOption?.token.flags.onGasTank) return null\n\n    const identifier = getFeeSpeedIdentifier(\n      this.selectedOption,\n      this.accountOp.accountAddr,\n      this.rbfAccountOps[this.selectedOption.paidBy]\n    )\n    const selectedFeeSpeedData = this.feeSpeeds[identifier].find(\n      (speed) => speed.type === this.selectedFeeSpeed\n    )\n    const gasPrice = selectedFeeSpeedData?.gasPrice\n    if (!gasPrice) return null\n\n    // get the native token from the portfolio to calculate prices\n    const native = this.#portfolio\n      .getLatestPortfolioState(this.accountOp.accountAddr)\n      [this.accountOp.chainId.toString()]?.result?.tokens.find(\n        (token) => token.address === '0x0000000000000000000000000000000000000000'\n      )\n    if (!native) return null\n    const nativePrice = native.priceIn.find((price) => price.baseCurrency === 'usd')?.price\n    if (!nativePrice) return null\n\n    // 4337 gasUsed is set to 0 in the estimation as we rely\n    // on the bundler for the estimation entirely => use hardcode value\n    const gasUsedSelectedOption =\n      this.selectedOption.gasUsed > 0n ? this.selectedOption.gasUsed : GAS_TANK_TRANSFER_GAS_USED\n    const isNativeSelected = this.selectedOption.token.address === ZeroAddress\n    const gasUsedNative =\n      this.estimation.availableFeeOptions.find(\n        (option) => option.token.address === ZeroAddress && !option.token.flags.onGasTank\n      )?.gasUsed || SA_NATIVE_TRANSFER_GAS_USED\n    const gasUsedERC20 =\n      this.estimation.availableFeeOptions.find(\n        (option) => option.token.address !== ZeroAddress && !option.token.flags.onGasTank\n      )?.gasUsed || SA_ERC20_TRANSFER_GAS_USED\n\n    const gasUsedWithoutGasTank = isNativeSelected ? gasUsedNative : gasUsedERC20\n    const gasSavedInNative = formatEther((gasUsedWithoutGasTank - gasUsedSelectedOption) * gasPrice)\n\n    return Number(gasSavedInNative) * nativePrice\n  }\n\n  #emitSigningErrorAndResetToReadyToSign(error: string) {\n    this.emitError({ level: 'major', message: error, error: new Error(error) })\n    this.status = { type: SigningStatus.ReadyToSign }\n\n    this.emitUpdate()\n  }\n\n  #addFeePayment() {\n    // In case of gas tank token fee payment, we need to include one more call to account op\n    const abiCoder = new AbiCoder()\n\n    if (this.isSponsored) {\n      this.accountOp.feeCall = {\n        to: FEE_COLLECTOR,\n        value: 0n,\n        data: abiCoder.encode(['string', 'uint256', 'string'], ['gasTank', 0n, 'USDC'])\n      }\n\n      return\n    }\n\n    if (this.accountOp.gasFeePayment!.isGasTank) {\n      this.accountOp.feeCall = {\n        to: FEE_COLLECTOR,\n        value: 0n,\n        data: abiCoder.encode(\n          ['string', 'uint256', 'string'],\n          ['gasTank', this.accountOp.gasFeePayment!.amount, this.feeTokenResult?.symbol]\n        )\n      }\n\n      return\n    }\n\n    if (this.accountOp.gasFeePayment!.inToken === '0x0000000000000000000000000000000000000000') {\n      // native payment\n      this.accountOp.feeCall = {\n        to: FEE_COLLECTOR,\n        value: this.accountOp.gasFeePayment!.amount,\n        data: '0x'\n      }\n    } else {\n      // token payment\n      const ERC20Interface = new Interface(ERC20.abi)\n      this.accountOp.feeCall = {\n        to: this.accountOp.gasFeePayment!.inToken,\n        value: 0n,\n        data: ERC20Interface.encodeFunctionData('transfer', [\n          FEE_COLLECTOR,\n          this.accountOp.gasFeePayment!.amount\n        ])\n      }\n    }\n  }\n\n  async #getInitialUserOp(\n    shouldReestimate: boolean,\n    eip7702Auth?: EIP7702Auth\n  ): Promise<UserOperation> {\n    const gasFeePayment = this.accountOp.gasFeePayment!\n    let erc4337Estimation = this.estimation.estimation!.bundlerEstimation as Erc4337GasLimits\n    const accountState = await this.#accounts.getOrFetchAccountOnChainState(\n      this.accountOp.accountAddr,\n      this.accountOp.chainId\n    )\n\n    if (shouldReestimate) {\n      const newEstimate = await bundlerEstimate(\n        this.baseAccount,\n        accountState,\n        this.accountOp,\n        this.#network,\n        [this.selectedOption!.token],\n        this.provider,\n        this.bundlerSwitcher,\n        () => {},\n        eip7702Auth\n      )\n\n      if (!(newEstimate instanceof Error)) {\n        erc4337Estimation = newEstimate as Erc4337GasLimits\n        gasFeePayment.gasPrice = BigInt(\n          erc4337Estimation.gasPrice[this.selectedFeeSpeed!].maxFeePerGas\n        )\n        gasFeePayment.maxPriorityFeePerGas = BigInt(\n          erc4337Estimation.gasPrice[this.selectedFeeSpeed!].maxPriorityFeePerGas\n        )\n      }\n    }\n\n    const userOperation = getUserOperation(\n      this.account,\n      accountState,\n      this.accountOp,\n      this.bundlerSwitcher.getBundler().getName(),\n      this.accountOp.meta?.entryPointAuthorization,\n      eip7702Auth\n    )\n    userOperation.preVerificationGas = erc4337Estimation.preVerificationGas\n    userOperation.callGasLimit = toBeHex(\n      BigInt(erc4337Estimation.callGasLimit) + this.selectedOption!.gasUsed\n    )\n    userOperation.verificationGasLimit = erc4337Estimation.verificationGasLimit\n    userOperation.paymasterVerificationGasLimit = erc4337Estimation.paymasterVerificationGasLimit\n    userOperation.paymasterPostOpGasLimit = erc4337Estimation.paymasterPostOpGasLimit\n    userOperation.maxFeePerGas = toBeHex(gasFeePayment.gasPrice)\n    userOperation.maxPriorityFeePerGas = toBeHex(gasFeePayment.maxPriorityFeePerGas!)\n\n    const ambireAccount = new Interface(AmbireAccount.abi)\n    userOperation.callData = ambireAccount.encodeFunctionData('executeBySender', [\n      getSignableCalls(this.accountOp)\n    ])\n\n    return userOperation\n  }\n\n  async #getPaymasterUserOp(\n    originalUserOp: UserOperation,\n    paymaster: AbstractPaymaster,\n    eip7702Auth?: EIP7702Auth,\n    counter = 0\n  ): Promise<{\n    required: boolean\n    success?: boolean\n    userOp?: UserOperation\n    errorResponse?: PaymasterErrorReponse\n  }> {\n    if (!paymaster.isUsable()) return { required: false }\n\n    const localOp = { ...originalUserOp }\n\n    // persist the paymaster properties from the pm_stubData request if any\n    if (paymaster.isSponsored() && paymaster.sponsorDataEstimation) {\n      if (paymaster.sponsorDataEstimation.paymasterVerificationGasLimit) {\n        localOp.paymasterVerificationGasLimit =\n          paymaster.sponsorDataEstimation.paymasterVerificationGasLimit\n      }\n      if (paymaster.sponsorDataEstimation.paymasterPostOpGasLimit) {\n        localOp.paymasterPostOpGasLimit = paymaster.sponsorDataEstimation.paymasterPostOpGasLimit\n      }\n    }\n    const response = await paymaster.call(this.account, this.accountOp, localOp, this.#network)\n\n    if (response.success) {\n      const paymasterData = response as PaymasterSuccessReponse\n      localOp.paymaster = paymasterData.paymaster\n      localOp.paymasterData = paymasterData.paymasterData\n      return {\n        userOp: localOp,\n        required: true,\n        success: true\n      }\n    }\n\n    const errorResponse = response as PaymasterErrorReponse\n    if (errorResponse.message.indexOf('invalid account nonce') !== -1) {\n      // silenly continuing on error as this is an attempt for an UX improvement\n      await this.#accounts\n        .updateAccountState(this.accountOp.accountAddr, 'pending', [this.accountOp.chainId])\n        .catch((e) => e)\n    }\n\n    // auto-retry once if it was the ambire paymaster\n    if (paymaster.canAutoRetryOnFailure() && counter === 0) {\n      const reestimatedUserOp = await this.#getInitialUserOp(true, eip7702Auth)\n      return this.#getPaymasterUserOp(reestimatedUserOp, paymaster, eip7702Auth, counter + 1)\n    }\n\n    return {\n      required: true,\n      success: false,\n      errorResponse\n    }\n  }\n\n  async sign() {\n    if (!this.readyToSign) {\n      const message = `Unable to sign the transaction. During the preparation step, the necessary transaction data was not received. ${RETRY_TO_INIT_ACCOUNT_OP_MSG}`\n      return this.#emitSigningErrorAndResetToReadyToSign(message)\n    }\n\n    // when signing begings, we stop immediatelly state updates on the controller\n    // by changing the status to InProgress. Check update() for more info\n    this.status = { type: SigningStatus.InProgress }\n\n    if (!this.accountOp.signingKeyAddr || !this.accountOp.signingKeyType) {\n      const message = `Unable to sign the transaction. During the preparation step, required signing key information was found missing. ${RETRY_TO_INIT_ACCOUNT_OP_MSG}`\n      return this.#emitSigningErrorAndResetToReadyToSign(message)\n    }\n\n    if (!this.accountOp.gasFeePayment || !this.selectedOption) {\n      const message = `Unable to sign the transaction. During the preparation step, required information about paying the gas fee was found missing. ${RETRY_TO_INIT_ACCOUNT_OP_MSG}`\n      return this.#emitSigningErrorAndResetToReadyToSign(message)\n    }\n\n    const signer = await this.#keystore.getSigner(\n      this.accountOp.signingKeyAddr,\n      this.accountOp.signingKeyType\n    )\n    if (!signer) {\n      const message = `Unable to sign the transaction. During the preparation step, required account key information was found missing. ${RETRY_TO_INIT_ACCOUNT_OP_MSG}`\n      return this.#emitSigningErrorAndResetToReadyToSign(message)\n    }\n\n    if (!this.estimation.estimation) {\n      const message = `Unable to sign the transaction. During the preparation step, required account key information was found missing. ${RETRY_TO_INIT_ACCOUNT_OP_MSG}`\n      return this.#emitSigningErrorAndResetToReadyToSign(message)\n    }\n\n    const estimation = this.estimation.estimation as FullEstimationSummary\n    const broadcastOption = this.accountOp.gasFeePayment.broadcastOption\n    const isUsingPaymaster = !!estimation.bundlerEstimation?.paymaster.isUsable()\n    const shouldSignDeployAuth = this.baseAccount.shouldSignDeployAuth(broadcastOption)\n\n    // tell the FE where we are\n    if (shouldSignDeployAuth) {\n      this.shouldSignAuth = {\n        type: 'V2Deploy',\n        text: 'Step 1/2 preparing account'\n      }\n    }\n\n    if (\n      broadcastOption === BROADCAST_OPTIONS.byBundler &&\n      isUsingPaymaster &&\n      !shouldSignDeployAuth\n    ) {\n      this.status = { type: SigningStatus.WaitingForPaymaster }\n    } else {\n      this.status = { type: SigningStatus.InProgress }\n    }\n\n    // we update the FE with the changed status (in progress) only after the checks\n    // above confirm everything is okay to prevent two different state updates\n    this.emitUpdate()\n\n    if (signer.init) signer.init(this.#externalSignerControllers[this.accountOp.signingKeyType])\n\n    // just in-case: before signing begins, we delete the feeCall;\n    // if there's a need for it, it will be added later on in the code.\n    // We need this precaution because this could happen:\n    // - try to broadcast with the relayer\n    // - the feel call gets added\n    // - the relayer broadcast fails\n    // - the user does another broadcast, this time with EOA pays for SA\n    // - the fee call stays, causing a low gas limit revert\n    delete this.accountOp.feeCall\n\n    // delete the activatorCall as a precaution that it won't be added twice\n    delete this.accountOp.activatorCall\n\n    // @EntryPoint activation for SA\n    if (this.baseAccount.shouldIncludeActivatorCall(broadcastOption)) {\n      this.accountOp.activatorCall = getActivatorCall(this.accountOp.accountAddr)\n    }\n\n    const accountState = await this.#accounts.getOrFetchAccountOnChainState(\n      this.accountOp.accountAddr,\n      this.accountOp.chainId\n    )\n\n    try {\n      // plain EOA\n      if (\n        broadcastOption === BROADCAST_OPTIONS.bySelf ||\n        broadcastOption === BROADCAST_OPTIONS.bySelf7702\n      ) {\n        // rawTxn, No SA signatures\n        // or 7702, calling executeBySender(). No SA signatures\n        this.accountOp.signature = '0x'\n      } else if (broadcastOption === BROADCAST_OPTIONS.byOtherEOA) {\n        // SA, EOA pays fee. execute() needs a signature\n        this.accountOp.signature = await getExecuteSignature(\n          this.#network,\n          this.accountOp,\n          accountState,\n          signer\n        )\n      } else if (broadcastOption === BROADCAST_OPTIONS.delegation) {\n        // a delegation request has been made\n        if (!this.accountOp.meta) this.accountOp.meta = {}\n\n        const contract = this.accountOp.meta.setDelegation\n          ? getContractImplementation(this.#network.chainId)\n          : (ZeroAddress as Hex)\n        this.accountOp.meta.delegation = get7702Sig(\n          this.#network.chainId,\n          // because we're broadcasting by ourselves, we need to add 1 to the nonce\n          // as the sender nonce (the curr acc) gets incremented before the\n          // authrorization validation\n          accountState.eoaNonce! + 1n,\n          contract,\n          signer.sign7702(\n            getAuthorizationHash(this.#network.chainId, contract, accountState.eoaNonce! + 1n)\n          )\n        )\n      } else if (broadcastOption === BROADCAST_OPTIONS.byBundler) {\n        const erc4337Estimation = estimation.bundlerEstimation as Erc4337GasLimits\n\n        const paymaster = erc4337Estimation.paymaster\n        if (paymaster.shouldIncludePayment()) this.#addFeePayment()\n\n        // fix two problems:\n        // 1) when we do eip7702Auth, initial estimation is not enough\n        // 2) we estimate with the gas tank but if the user chooses\n        // native, it could result in low gas limit => txn price too low.\n        // In both cases, we re-estimate before broadcast\n        let shouldReestimate =\n          !!erc4337Estimation.feeCallType &&\n          paymaster.getFeeCallType([this.selectedOption.token]) !== erc4337Estimation.feeCallType\n\n        // sign the 7702 authorization if needed\n        let eip7702Auth\n        if (this.baseAccount.shouldSignAuthorization(BROADCAST_OPTIONS.byBundler)) {\n          const contract = getContractImplementation(this.#network.chainId)\n          eip7702Auth = get7702Sig(\n            this.#network.chainId,\n            accountState.nonce,\n            contract,\n            signer.sign7702(\n              getAuthorizationHash(this.#network.chainId, contract, accountState.nonce)\n            )\n          )\n\n          shouldReestimate = true\n        }\n\n        if (shouldSignDeployAuth) {\n          const epActivatorTypedData = await getEntryPointAuthorization(\n            this.account.addr,\n            this.#network.chainId,\n            accountState.nonce\n          )\n          const epSignature = await getEIP712Signature(\n            epActivatorTypedData,\n            this.account,\n            accountState,\n            signer,\n            this.#network\n          )\n          if (!this.accountOp.meta) this.accountOp.meta = {}\n          this.accountOp.meta.entryPointAuthorization = adjustEntryPointAuthorization(epSignature)\n\n          // after signing is complete, go to paymaster mode\n          if (isUsingPaymaster) {\n            this.shouldSignAuth = {\n              type: 'V2Deploy',\n              text: 'Step 2/2 signing transaction'\n            }\n            this.status = { type: SigningStatus.WaitingForPaymaster }\n            this.emitUpdate()\n          }\n\n          shouldReestimate = true\n        }\n\n        const initialUserOp = await this.#getInitialUserOp(shouldReestimate, eip7702Auth)\n        const paymasterInfo = await this.#getPaymasterUserOp(initialUserOp, paymaster, eip7702Auth)\n        if (paymasterInfo.required) {\n          if (paymasterInfo.success) {\n            this.accountOp.gasFeePayment.isSponsored = paymaster.isSponsored()\n            this.status = { type: SigningStatus.InProgress }\n            this.emitUpdate()\n          } else {\n            const errorResponse = paymasterInfo.errorResponse as PaymasterErrorReponse\n            this.emitError({\n              level: 'major',\n              message: errorResponse.message,\n              error: errorResponse.error\n            })\n            this.status = { type: SigningStatus.ReadyToSign }\n            this.emitUpdate()\n            this.estimate()\n            return\n          }\n        }\n\n        // query the application state from memory to understand if the user\n        // hasn't actually rejected the request while waiting for the\n        // paymaster to respond\n        if (!this.#isSignRequestStillActive()) return\n\n        const userOperation = paymasterInfo.required ? paymasterInfo.userOp! : initialUserOp\n        if (userOperation.requestType === 'standard') {\n          const typedData = getTypedData(\n            this.#network.chainId,\n            this.accountOp.accountAddr,\n            getUserOpHash(userOperation, this.#network.chainId)\n          )\n          const signature = wrapStandard(await signer.signTypedData(typedData))\n          userOperation.signature = signature\n          this.accountOp.signature = signature\n        }\n        if (userOperation.requestType === '7702') {\n          const typedData = get7702UserOpTypedData(\n            this.#network.chainId,\n            getSignableCalls(this.accountOp),\n            getPackedUserOp(userOperation),\n            getUserOpHash(userOperation, this.#network.chainId)\n          )\n          const signature = wrapUnprotected(await signer.signTypedData(typedData))\n          userOperation.signature = signature\n          this.accountOp.signature = signature\n        }\n        this.accountOp.asUserOperation = userOperation\n      } else {\n        // Relayer\n        this.#addFeePayment()\n\n        this.accountOp.signature = await getExecuteSignature(\n          this.#network,\n          this.accountOp,\n          accountState,\n          signer\n        )\n      }\n\n      this.status = { type: SigningStatus.Done }\n      this.signedAccountOp = structuredClone(this.accountOp)\n      this.emitUpdate()\n      return this.signedAccountOp\n    } catch (error: any) {\n      const { message } = getHumanReadableBroadcastError(error)\n\n      this.#emitSigningErrorAndResetToReadyToSign(message)\n    }\n  }\n\n  canUpdate(): boolean {\n    return !this.status || noStateUpdateStatuses.indexOf(this.status.type) === -1\n  }\n\n  setDiscoveryStatus(status: TraceCallDiscoveryStatus) {\n    this.traceCallDiscoveryStatus = status\n  }\n\n  get delegatedContract(): Hex | null {\n    if (!this.#accounts.accountStates[this.account.addr]) return null\n    if (!this.#accounts.accountStates[this.account.addr][this.#network.chainId.toString()])\n      return null\n    return this.#accounts.accountStates[this.account.addr][this.#network.chainId.toString()]\n      .delegatedContract\n  }\n\n  toJSON() {\n    return {\n      ...this,\n      isInitialized: this.isInitialized,\n      readyToSign: this.readyToSign,\n      accountKeyStoreKeys: this.accountKeyStoreKeys,\n      feeToken: this.feeToken,\n      feePaidBy: this.feePaidBy,\n      speedOptions: this.speedOptions,\n      selectedOption: this.selectedOption,\n      account: this.account,\n      errors: this.errors,\n      gasSavedUSD: this.gasSavedUSD,\n      delegatedContract: this.delegatedContract\n    }\n  }\n}\n"]}