{"version":3,"file":"estimation.js","sourceRoot":"","sources":["../../../../src/controllers/estimation/estimation.ts"],"names":[],"mappings":"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","sourcesContent":["import { ZeroAddress } from 'ethers'\n\n/* eslint-disable class-methods-use-this */\nimport ErrorHumanizerError from '../../classes/ErrorHumanizerError'\nimport { RPCProvider } from '../../interfaces/provider'\nimport { SignAccountOpError, Warning } from '../../interfaces/signAccountOp'\nimport { BaseAccount } from '../../libs/account/BaseAccount'\nimport { getBaseAccount } from '../../libs/account/getBaseAccount'\nimport { AccountOp } from '../../libs/accountOp/accountOp'\nimport { getEstimation, getEstimationSummary } from '../../libs/estimate/estimate'\nimport { FeePaymentOption, FullEstimationSummary } from '../../libs/estimate/interfaces'\nimport { isPortfolioGasTankResult } from '../../libs/portfolio/helpers'\nimport { BundlerSwitcher } from '../../services/bundlers/bundlerSwitcher'\nimport { getIsViewOnly } from '../../utils/accounts'\nimport { AccountsController } from '../accounts/accounts'\nimport EventEmitter, { ErrorRef } from '../eventEmitter/eventEmitter'\nimport { KeystoreController } from '../keystore/keystore'\nimport { NetworksController } from '../networks/networks'\nimport { PortfolioController } from '../portfolio/portfolio'\nimport { EstimationStatus } from './types'\n\nexport class EstimationController extends EventEmitter {\n  #keystore: KeystoreController\n\n  #accounts: AccountsController\n\n  #networks: NetworksController\n\n  #provider: RPCProvider\n\n  #portfolio: PortfolioController\n\n  status: EstimationStatus = EstimationStatus.Initial\n\n  estimation: FullEstimationSummary | null = null\n\n  error: Error | null = null\n\n  /**\n   * a boolean to understand if the estimation has been performed\n   * at least one indicating clearly that all other are re-estimates\n   */\n  hasEstimated: boolean = false\n\n  estimationRetryError: ErrorRef | null = null\n\n  availableFeeOptions: FeePaymentOption[] = []\n\n  #bundlerSwitcher: BundlerSwitcher\n\n  constructor(\n    keystore: KeystoreController,\n    accounts: AccountsController,\n    networks: NetworksController,\n    provider: RPCProvider,\n    portfolio: PortfolioController,\n    bundlerSwitcher: BundlerSwitcher\n  ) {\n    super()\n    this.#keystore = keystore\n    this.#accounts = accounts\n    this.#networks = networks\n    this.#provider = provider\n    this.#portfolio = portfolio\n    this.#bundlerSwitcher = bundlerSwitcher\n  }\n\n  #getAvailableFeeOptions(baseAcc: BaseAccount, op: AccountOp): FeePaymentOption[] {\n    const estimation = this.estimation as FullEstimationSummary\n    const isSponsored = !!estimation.bundlerEstimation?.paymaster.isSponsored()\n\n    if (isSponsored) {\n      // if there's no ambireEstimation, it means there's an error\n      if (!estimation.ambireEstimation) return []\n\n      // if the txn is sponsored, return the native option only\n      const native = estimation.ambireEstimation.feePaymentOptions.find(\n        (feeOption) => feeOption.token.address === ZeroAddress\n      )\n      return native ? [native] : []\n    }\n\n    return baseAcc.getAvailableFeeOptions(\n      estimation,\n      // eslint-disable-next-line no-nested-ternary\n      estimation.ambireEstimation\n        ? estimation.ambireEstimation.feePaymentOptions\n        : estimation.providerEstimation\n        ? estimation.providerEstimation.feePaymentOptions\n        : [],\n      op\n    )\n  }\n\n  async estimate(op: AccountOp) {\n    this.status = EstimationStatus.Loading\n    this.emitUpdate()\n\n    const account = this.#accounts.accounts.find((acc) => acc.addr === op.accountAddr)!\n    const network = this.#networks.networks.find((net) => net.chainId === op.chainId)!\n    const accountState = await this.#accounts.getOrFetchAccountOnChainState(\n      op.accountAddr,\n      op.chainId\n    )\n    const baseAcc = getBaseAccount(\n      account,\n      accountState,\n      this.#keystore.getAccountKeys(account),\n      network\n    )\n\n    // Take the fee tokens from two places: the user's tokens and his gasTank\n    // The gasTank tokens participate on each network as they belong everywhere\n    // NOTE: at some point we should check all the \"?\" signs below and if\n    // an error pops out, we should notify the user about it\n    let networkFeeTokens =\n      this.#portfolio.getLatestPortfolioState(op.accountAddr)?.[op.chainId.toString()]?.result\n        ?.feeTokens ?? []\n\n    // This could happen only in a race when a NOT currently selected account is\n    // requested, switched to and immediately fired a txn request for. In that situation,\n    // the portfolio would not be fetched and the estimation would be fired without tokens,\n    // resulting in a \"nothing to pay the fee with\" error which is absolutely wrong\n    if (networkFeeTokens.length === 0) {\n      await this.#portfolio.updateSelectedAccount(op.accountAddr, network, undefined, {\n        forceUpdate: true\n      })\n      networkFeeTokens =\n        this.#portfolio.getLatestPortfolioState(op.accountAddr)?.[op.chainId.toString()]?.result\n          ?.feeTokens ?? []\n    }\n\n    const gasTankResult = this.#portfolio.getLatestPortfolioState(op.accountAddr)?.gasTank?.result\n    const gasTankFeeTokens = isPortfolioGasTankResult(gasTankResult)\n      ? gasTankResult.gasTankTokens\n      : []\n    const feeTokens =\n      [...networkFeeTokens, ...gasTankFeeTokens].filter((t) => t.flags.isFeeToken) || []\n\n    // Here, we list EOA accounts for which you can also obtain an estimation of the AccountOp payment.\n    // In the case of operating with a smart account (an account with creation code), all other EOAs can pay the fee.\n    //\n    // If the current account is an EOA, only this account can pay the fee,\n    // and there's no need for checking other EOA accounts native balances.\n    // This is already handled and estimated as a fee option in the estimate library, which is why we pass an empty array here.\n    //\n    // we're excluding the view only accounts from the natives to check\n    // in all cases EXCEPT the case where we're making an estimation for\n    // the view only account itself. In all other, view only accounts options\n    // should not be present as the user cannot pay the fee with them (no key)\n    const nativeToCheck = account.creation\n      ? this.#accounts.accounts\n          .filter(\n            (acc) =>\n              !acc.creation &&\n              (acc.addr === op.accountAddr ||\n                !getIsViewOnly(this.#keystore.keys, acc.associatedKeys))\n          )\n          .map((acc) => acc.addr)\n      : []\n\n    const estimation = await getEstimation(\n      baseAcc,\n      accountState,\n      op,\n      network,\n      this.#provider,\n      feeTokens,\n      nativeToCheck,\n      this.#bundlerSwitcher,\n      (e: ErrorRef) => {\n        if (!this) return\n        this.estimationRetryError = e\n        this.emitUpdate()\n      }\n    ).catch((e) => e)\n\n    const isSuccess = !(estimation instanceof Error)\n    if (isSuccess) {\n      this.estimation = getEstimationSummary(estimation)\n      this.error = null\n      this.status = EstimationStatus.Success\n      this.estimationRetryError = null\n      this.availableFeeOptions = this.#getAvailableFeeOptions(baseAcc, op)\n    } else {\n      this.estimation = null\n      this.error = estimation\n      this.status = EstimationStatus.Error\n      this.availableFeeOptions = []\n    }\n\n    // estimation.flags.hasNonceDiscrepancy is a signal from the estimation\n    // that the account state is not the latest and needs to be updated\n    if (\n      this.estimation &&\n      (this.estimation.flags.hasNonceDiscrepancy || this.estimation.flags.has4337NonceDiscrepancy)\n    )\n      // silenly continuing on error here as the flags are more like app helpers\n      this.#accounts.updateAccountState(op.accountAddr, 'pending', [op.chainId]).catch((e) => e)\n\n    this.hasEstimated = true\n    this.emitUpdate()\n  }\n\n  /**\n   * it's initialized if it has estimated at least once\n   */\n  isInitialized() {\n    return this.hasEstimated\n  }\n\n  /**\n   * has it estimated at least once without a failure\n   */\n  isLoadingOrFailed(): boolean {\n    return this.status === EstimationStatus.Loading || this.error instanceof Error\n  }\n\n  calculateWarnings() {\n    const warnings: Warning[] = []\n\n    if (this.estimationRetryError && this.status === EstimationStatus.Success) {\n      warnings.push({\n        id: 'estimation-retry',\n        title: this.estimationRetryError.message,\n        text: 'You can try to broadcast this transaction with the last successful estimation or wait for a new one. Retrying...'\n      })\n    }\n\n    if (\n      this.estimation?.bundlerEstimation?.nonFatalErrors?.find(\n        (err) => err.cause === '4337_ESTIMATION'\n      )\n    ) {\n      warnings.push({\n        id: 'bundler-failure',\n        title:\n          'Smart account fee options are temporarily unavailable. You can pay fee with an EOA account or try again later'\n      })\n    }\n\n    return warnings\n  }\n\n  get errors(): SignAccountOpError[] {\n    const errors: SignAccountOpError[] = []\n\n    if (this.isLoadingOrFailed() && this.estimationRetryError) {\n      // If there is a successful estimation we should show this as a warning\n      // as the user can use the old estimation to broadcast\n      errors.push({\n        title: `${this.estimationRetryError.message} ${\n          this.error\n            ? 'We will continue retrying, but please check your internet connection.'\n            : 'Automatically retrying in a few seconds. Please wait...'\n        }`\n      })\n\n      return errors\n    }\n\n    if (!this.isInitialized()) return []\n\n    if (this.error) {\n      let code = ''\n\n      if (this.error instanceof ErrorHumanizerError && this.error.isFallbackMessage) {\n        code =\n          typeof this.error.cause === 'string' && !!this.error.cause\n            ? this.error.cause\n            : 'ESTIMATION_ERROR'\n      }\n\n      errors.push({\n        title: this.error.message,\n        code\n      })\n    }\n\n    return errors\n  }\n\n  reset() {\n    this.estimation = null\n    this.error = null\n    this.hasEstimated = false\n    this.status = EstimationStatus.Initial\n    this.estimationRetryError = null\n    this.availableFeeOptions = []\n  }\n}\n"]}