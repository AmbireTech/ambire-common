{"version":3,"file":"api.js","sourceRoot":"","sources":["../../../../src/services/socket/api.ts"],"names":[],"mappings":"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","sourcesContent":["import { getAddress } from 'ethers'\n\nimport SwapAndBridgeProviderApiError from '../../classes/SwapAndBridgeProviderApiError'\nimport { InviteController } from '../../controllers/invite/invite'\nimport { CustomResponse, Fetch, RequestInitWithCustomHeaders } from '../../interfaces/fetch'\nimport {\n  SocketAPIActiveRoutes,\n  SocketAPIQuote,\n  SocketAPIResponse,\n  SocketAPISendTransactionRequest,\n  SocketAPISupportedChain,\n  SocketAPIToken,\n  SocketRouteStatus\n} from '../../interfaces/swapAndBridge'\nimport {\n  AMBIRE_FEE_TAKER_ADDRESSES,\n  AMBIRE_WALLET_TOKEN_ON_BASE,\n  AMBIRE_WALLET_TOKEN_ON_ETHEREUM,\n  ETH_ON_OPTIMISM_LEGACY_ADDRESS,\n  FEE_PERCENT,\n  NULL_ADDRESS,\n  ZERO_ADDRESS\n} from './constants'\n\nconst convertZeroAddressToNullAddressIfNeeded = (addr: string) =>\n  addr === ZERO_ADDRESS ? NULL_ADDRESS : addr\n\nconst convertNullAddressToZeroAddressIfNeeded = (addr: string) =>\n  addr === NULL_ADDRESS ? ZERO_ADDRESS : addr\n\nconst normalizeIncomingSocketTokenAddress = (address: string) =>\n  // incoming token addresses from Socket are all lowercased\n  getAddress(\n    // native token addresses come as null address instead of the zero address\n    convertNullAddressToZeroAddressIfNeeded(address)\n  )\nexport const normalizeIncomingSocketToken = (token: SocketAPIToken) => ({\n  ...token,\n  address: normalizeIncomingSocketTokenAddress(token.address)\n})\n\nconst normalizeOutgoingSocketTokenAddress = (address: string) =>\n  // Socket expects to receive null address instead of the zero address for native tokens.\n  convertZeroAddressToNullAddressIfNeeded(\n    // Socket works only with all lowercased token addresses, otherwise, bad request\n    address.toLocaleLowerCase()\n  )\nconst normalizeOutgoingSocketToken = (token: SocketAPIToken) => ({\n  ...token,\n  address: normalizeOutgoingSocketTokenAddress(token.address)\n})\n\nexport class SocketAPI {\n  #fetch: Fetch\n\n  #baseUrl = 'https://api.socket.tech/v2'\n\n  #headers: RequestInitWithCustomHeaders['headers']\n\n  isHealthy: boolean | null = null\n\n  constructor({ fetch, apiKey }: { fetch: Fetch; apiKey: string }) {\n    this.#fetch = fetch\n\n    this.#headers = {\n      'API-KEY': apiKey,\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    }\n  }\n\n  async getHealth() {\n    try {\n      const response = await this.#fetch(`${this.#baseUrl}/health`, { headers: this.#headers })\n      if (!response.ok) return false\n\n      const body = await response.json()\n      return !!body.ok\n    } catch {\n      return false\n    }\n  }\n\n  async updateHealth() {\n    this.isHealthy = await this.getHealth()\n  }\n\n  async updateHealthIfNeeded() {\n    // Update health status only if previously unhealthy\n    if (this.isHealthy) return\n\n    await this.updateHealth()\n  }\n\n  resetHealth() {\n    this.isHealthy = null\n  }\n\n  /**\n   * Processes Socket API responses and throws custom errors for various\n   * failures, including handling the API's unique response structure.\n   */\n  async #handleResponse<T>({\n    fetchPromise,\n    errorPrefix\n  }: {\n    fetchPromise: Promise<CustomResponse>\n    errorPrefix: string\n  }): Promise<T> {\n    let response: CustomResponse\n\n    try {\n      response = await fetchPromise\n    } catch (e: any) {\n      const message = e?.message || 'no message'\n      const status = e?.status ? `, status: <${e.status}>` : ''\n      const error = `${errorPrefix} Upstream error: <${message}>${status}`\n      throw new SwapAndBridgeProviderApiError(error)\n    }\n\n    if (response.status === 429) {\n      const error = `Our service provider received too many requests, temporarily preventing your request from being processed. ${errorPrefix}`\n      throw new SwapAndBridgeProviderApiError(error)\n    }\n\n    let responseBody: SocketAPIResponse<T>\n    try {\n      responseBody = await response.json()\n    } catch (e: any) {\n      const message = e?.message || 'no message'\n      const error = `${errorPrefix} Error details: <Unexpected non-JSON response from our service provider>, message: <${message}>`\n      throw new SwapAndBridgeProviderApiError(error)\n    }\n\n    // Socket API returns 500 status code with a message in the body, even\n    // in case of a bad request. Not necessarily an internal server error.\n    if (!response.ok || !responseBody?.success) {\n      // API returns 2 types of errors, a generic one, on the top level:\n      const genericErrorMessage = responseBody?.message?.error || 'no message'\n      // ... and a detailed one, nested in the `details` object:\n      const specificError = responseBody?.message?.details?.error?.message\n      const specificErrorMessage = specificError ? `, details: <${specificError}>` : ''\n      const specificErrorCode = responseBody?.message?.details?.error?.code\n      const specificErrorCodeMessage = specificErrorCode ? `, code: <${specificErrorCode}>` : ''\n      const error = `${errorPrefix} Our service provider upstream error: <${genericErrorMessage}>${specificErrorMessage}${specificErrorCodeMessage}`\n      throw new SwapAndBridgeProviderApiError(error)\n    }\n\n    // Always attempt to update health status (if needed) when a response was\n    // successful, in case the API was previously unhealthy (to recover).\n    // Do not wait on purpose, to not block or delay the response\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.updateHealthIfNeeded()\n\n    return responseBody.result\n  }\n\n  async getSupportedChains(): Promise<SocketAPISupportedChain[]> {\n    const url = `${this.#baseUrl}/supported/chains`\n\n    const response = await this.#handleResponse<SocketAPISupportedChain[]>({\n      fetchPromise: this.#fetch(url, { headers: this.#headers }),\n      errorPrefix:\n        'Unable to retrieve the list of supported Swap & Bridge chains from our service provider.'\n    })\n\n    return response\n  }\n\n  /**\n   * Since v4.41.0 we request the shortlist from Socket, which does not include\n   * the Ambire $WALLET token. So adding it manually on the supported chains.\n   */\n  static addCustomTokens({ chainId, tokens }: { chainId: number; tokens: SocketAPIToken[] }) {\n    const newTokens = [...tokens]\n\n    if (chainId === 1) newTokens.unshift(AMBIRE_WALLET_TOKEN_ON_ETHEREUM)\n    if (chainId === 8453) newTokens.unshift(AMBIRE_WALLET_TOKEN_ON_BASE)\n\n    return newTokens\n  }\n\n  async getToTokenList({\n    fromChainId,\n    toChainId\n  }: {\n    fromChainId: number\n    toChainId: number\n  }): Promise<SocketAPIToken[]> {\n    const params = new URLSearchParams({\n      fromChainId: fromChainId.toString(),\n      toChainId: toChainId.toString(),\n      // The long list for some networks is HUGE (e.g. Ethereum has 10,000+ tokens),\n      // which makes serialization and deserialization of this controller computationally expensive.\n      isShortList: 'true'\n    })\n    const url = `${this.#baseUrl}/token-lists/to-token-list?${params.toString()}`\n\n    let response = await this.#handleResponse<SocketAPIToken[]>({\n      fetchPromise: this.#fetch(url, { headers: this.#headers }),\n      errorPrefix:\n        'Unable to retrieve the list of supported receive tokens. Please reload to try again.'\n    })\n\n    // Exception for Optimism, strip out the legacy ETH address\n    // TODO: Remove when Socket removes the legacy ETH address from their response\n    if (toChainId === 10)\n      response = response.filter(\n        (token: SocketAPIToken) => token.address !== ETH_ON_OPTIMISM_LEGACY_ADDRESS\n      )\n\n    // Exception for Ethereum, duplicate ETH tokens are incoming from the API.\n    // One is with the `ZERO_ADDRESS` and one with `NULL_ADDRESS`, both for ETH.\n    // Strip out the one with the `ZERO_ADDRESS` to be consistent with the rest.\n    if (toChainId === 1)\n      response = response.filter((token: SocketAPIToken) => token.address !== ZERO_ADDRESS)\n\n    response = SocketAPI.addCustomTokens({ chainId: toChainId, tokens: response })\n\n    return response.map(normalizeIncomingSocketToken)\n  }\n\n  async getToken({\n    address,\n    chainId\n  }: {\n    address: string\n    chainId: number\n  }): Promise<SocketAPIToken | null> {\n    const params = new URLSearchParams({\n      address: address.toString(),\n      chainId: chainId.toString()\n    })\n    const url = `${this.#baseUrl}/supported/token-support?${params.toString()}`\n\n    const response = await this.#handleResponse<{ isSupported: boolean; token: SocketAPIToken }>({\n      fetchPromise: this.#fetch(url, { headers: this.#headers }),\n      errorPrefix: 'Unable to retrieve token information by address.'\n    })\n\n    if (!response.isSupported || !response.token) return null\n\n    return normalizeIncomingSocketToken(response.token)\n  }\n\n  async quote({\n    fromChainId,\n    fromTokenAddress,\n    toChainId,\n    toTokenAddress,\n    fromAmount,\n    userAddress,\n    isSmartAccount,\n    sort,\n    isOG\n  }: {\n    fromChainId: number\n    fromTokenAddress: string\n    toChainId: number\n    toTokenAddress: string\n    fromAmount: bigint\n    userAddress: string\n    isSmartAccount: boolean\n    sort: 'time' | 'output'\n    isOG: InviteController['isOG']\n  }): Promise<SocketAPIQuote> {\n    const params = new URLSearchParams({\n      fromChainId: fromChainId.toString(),\n      fromTokenAddress: normalizeOutgoingSocketTokenAddress(fromTokenAddress),\n      toChainId: toChainId.toString(),\n      toTokenAddress: normalizeOutgoingSocketTokenAddress(toTokenAddress),\n      fromAmount: fromAmount.toString(),\n      userAddress,\n      isContractCall: isSmartAccount.toString(), // only get quotes with that are compatible with contracts\n      sort,\n      singleTxOnly: 'false',\n      defaultSwapSlippage: '1',\n      uniqueRoutesPerBridge: 'true'\n    })\n    const feeTakerAddress = AMBIRE_FEE_TAKER_ADDRESSES[fromChainId]\n    const shouldIncludeConvenienceFee = !!feeTakerAddress && !isOG\n    if (shouldIncludeConvenienceFee) {\n      params.append('feeTakerAddress', feeTakerAddress)\n      params.append('feePercent', FEE_PERCENT.toString())\n    }\n    // TODO: Temporarily exclude Mayan bridge when fetching quotes for SA, as\n    // batching is currently not not supported by Mayan (and funds get lost).\n    if (isSmartAccount) params.append('excludeBridges', ['mayan'].join(','))\n\n    const url = `${this.#baseUrl}/quote?${params.toString()}`\n\n    const response = await this.#handleResponse<SocketAPIQuote>({\n      fetchPromise: this.#fetch(url, { headers: this.#headers }),\n      errorPrefix: 'Unable to fetch the quote.'\n    })\n\n    return {\n      ...response,\n      fromAsset: normalizeIncomingSocketToken(response.fromAsset),\n      toAsset: normalizeIncomingSocketToken(response.toAsset),\n      routes: response.routes.map((route) => ({\n        ...route,\n        userTxs: route.userTxs.map((userTx) => ({\n          ...userTx,\n          ...('fromAsset' in userTx && {\n            fromAsset: normalizeIncomingSocketToken(userTx.fromAsset)\n          }),\n          toAsset: normalizeIncomingSocketToken(userTx.toAsset),\n          ...('steps' in userTx && {\n            steps: userTx.steps.map((step) => ({\n              ...step,\n              fromAsset: normalizeIncomingSocketToken(step.fromAsset),\n              toAsset: normalizeIncomingSocketToken(step.toAsset)\n            }))\n          })\n        }))\n      }))\n    }\n  }\n\n  async startRoute({\n    fromChainId,\n    toChainId,\n    fromAssetAddress,\n    toAssetAddress,\n    route\n  }: {\n    fromChainId: number\n    toChainId: number\n    fromAssetAddress: string\n    toAssetAddress: string\n    route: SocketAPIQuote['selectedRoute']\n  }) {\n    const params = {\n      fromChainId,\n      toChainId,\n      fromAssetAddress: normalizeOutgoingSocketTokenAddress(fromAssetAddress),\n      toAssetAddress: normalizeOutgoingSocketTokenAddress(toAssetAddress),\n      includeFirstTxDetails: true,\n      route: {\n        ...route,\n        userTxs: route.userTxs.map((userTx) => ({\n          ...userTx,\n          // @ts-ignore fromAsset exists on one of the two userTx sub-types\n          fromAsset: userTx?.fromAsset ? normalizeOutgoingSocketToken(userTx.fromAsset) : undefined,\n          toAsset: {\n            ...userTx.toAsset,\n            address: normalizeOutgoingSocketTokenAddress(userTx.toAsset.address)\n          },\n          // @ts-ignore fromAsset exists on one of the two userTx sub-types\n          steps: userTx.steps\n            ? // @ts-ignore fromAsset exists on one of the two userTx sub-types\n              userTx.steps.map((step) => ({\n                ...step,\n                fromAsset: normalizeOutgoingSocketToken(step.fromAsset),\n                toAsset: normalizeOutgoingSocketToken(step.toAsset)\n              }))\n            : undefined\n        }))\n      }\n    }\n\n    const response = await this.#handleResponse<SocketAPISendTransactionRequest>({\n      fetchPromise: this.#fetch(`${this.#baseUrl}/route/start`, {\n        method: 'POST',\n        headers: this.#headers,\n        body: JSON.stringify(params)\n      }),\n      errorPrefix: 'Unable to start the route.'\n    })\n\n    return response\n  }\n\n  async getRouteStatus({\n    activeRouteId,\n    userTxIndex,\n    txHash\n  }: {\n    activeRouteId: SocketAPISendTransactionRequest['activeRouteId']\n    userTxIndex: SocketAPISendTransactionRequest['userTxIndex']\n    txHash: string\n  }) {\n    const params = new URLSearchParams({\n      activeRouteId: activeRouteId.toString(),\n      userTxIndex: userTxIndex.toString(),\n      txHash\n    })\n    const url = `${this.#baseUrl}/route/prepare?${params.toString()}`\n\n    const response = await this.#handleResponse<SocketRouteStatus>({\n      fetchPromise: this.#fetch(url, { headers: this.#headers }),\n      errorPrefix: 'Unable to get the route status. Please check back later to proceed.'\n    })\n\n    return response\n  }\n\n  async updateActiveRoute(\n    activeRouteId: SocketAPISendTransactionRequest['activeRouteId']\n  ): Promise<SocketAPIActiveRoutes> {\n    const params = new URLSearchParams({ activeRouteId: activeRouteId.toString() })\n    const url = `${this.#baseUrl}/route/active-routes?${params.toString()}`\n\n    const response = await this.#handleResponse<SocketAPIActiveRoutes>({\n      fetchPromise: this.#fetch(url, { headers: this.#headers }),\n      errorPrefix: 'Unable to update the active route.'\n    })\n\n    return {\n      ...response,\n      fromAsset: normalizeIncomingSocketToken(response.fromAsset),\n      fromAssetAddress: normalizeIncomingSocketTokenAddress(response.fromAssetAddress),\n      toAsset: normalizeIncomingSocketToken(response.toAsset),\n      toAssetAddress: normalizeIncomingSocketTokenAddress(response.toAssetAddress),\n      userTxs: (response.userTxs as SocketAPIActiveRoutes['userTxs']).map((userTx) => ({\n        ...userTx,\n        ...('fromAsset' in userTx && { fromAsset: normalizeIncomingSocketToken(userTx.fromAsset) }),\n        toAsset: normalizeIncomingSocketToken(userTx.toAsset),\n        ...('steps' in userTx && {\n          steps: userTx.steps.map((step) => ({\n            ...step,\n            fromAsset: normalizeIncomingSocketToken(step.fromAsset),\n            toAsset: normalizeIncomingSocketToken(step.toAsset)\n          }))\n        })\n      }))\n    }\n  }\n\n  async getNextRouteUserTx(activeRouteId: SocketAPISendTransactionRequest['activeRouteId']) {\n    const params = new URLSearchParams({ activeRouteId: activeRouteId.toString() })\n    const url = `${this.#baseUrl}/route/build-next-tx?${params.toString()}`\n\n    const response = await this.#handleResponse<SocketAPISendTransactionRequest>({\n      fetchPromise: this.#fetch(url, { headers: this.#headers }),\n      errorPrefix: 'Unable to start the next step.'\n    })\n\n    return response\n  }\n}\n"]}