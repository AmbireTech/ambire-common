{"version":3,"file":"getRpcProvider.js","sourceRoot":"","sources":["../../../../src/services/provider/getRpcProvider.ts"],"names":[],"mappings":";;;AAAA,mCAAiD;AAQjD,MAAM,cAAc,GAAG,CACrB,OAAoC,EACpC,OAAyB,EACzB,cAAuB,EACvB,OAAyB,EACzB,EAAE;IACF,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;QACpB,MAAM,IAAI,KAAK,CAAC,mCAAmC,CAAC,CAAA;IACtD,CAAC;IAED,IAAI,MAAM,GAAG,OAAO,CAAC,CAAC,CAAC,CAAA;IAEvB,IAAI,cAAc,EAAE,CAAC;QACnB,MAAM,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,KAAK,cAAc,CAAC,CAAA;QACzD,IAAI,OAAO;YAAE,MAAM,GAAG,OAAO,CAAA;IAC/B,CAAC;IAED,IAAI,OAAO,EAAE,CAAC;QACZ,MAAM,aAAa,GAAG,gBAAO,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAA;QAEnD,IAAI,aAAa,EAAE,CAAC;YAClB,OAAO,IAAI,wBAAe,CAAC,MAAM,EAAE,aAAa,EAAE,EAAE,aAAa,EAAE,GAAG,OAAO,EAAE,CAAC,CAAA;QAClF,CAAC;IACH,CAAC;IAED,OAAO,IAAI,wBAAe,CAAC,MAAM,CAAC,CAAA;AACpC,CAAC,CAAA;AAEQ,wCAAc","sourcesContent":["import { JsonRpcProvider, Network } from 'ethers'\n\nimport { Network as NetworkInterface } from '../../interfaces/network'\n\ninterface ProviderOptions {\n  batchMaxCount: number\n}\n\nconst getRpcProvider = (\n  rpcUrls: NetworkInterface['rpcUrls'],\n  chainId?: bigint | number,\n  selectedRpcUrl?: string,\n  options?: ProviderOptions\n) => {\n  if (!rpcUrls.length) {\n    throw new Error('rpcUrls must be a non-empty array')\n  }\n\n  let rpcUrl = rpcUrls[0]\n\n  if (selectedRpcUrl) {\n    const prefUrl = rpcUrls.find((u) => u === selectedRpcUrl)\n    if (prefUrl) rpcUrl = prefUrl\n  }\n\n  if (chainId) {\n    const staticNetwork = Network.from(Number(chainId))\n\n    if (staticNetwork) {\n      return new JsonRpcProvider(rpcUrl, staticNetwork, { staticNetwork, ...options })\n    }\n  }\n\n  return new JsonRpcProvider(rpcUrl)\n}\n\nexport { getRpcProvider }\n"]}