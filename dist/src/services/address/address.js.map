{"version":3,"file":"address.js","sourceRoot":"","sources":["../../../../src/services/address/address.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,aAAa,EAAE,MAAM,wBAAwB,CAAA;AAEtD,MAAM,cAAc,GAAG,CAAC,OAAe,EAAE,EAAE,CAAC,qBAAqB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;AAE/E,MAAM,oCAAoC,GAAG,CAC3C,aAAgC,EAChC,QAAgB,EAChB,EAAE;IACF,MAAM,OAAO,GAAG,QAAQ,CAAC,WAAW,EAAE,CAAA,CAAC,2CAA2C;IAElF,8EAA8E;IAC9E,8EAA8E;IAC9E,kEAAkE;IAClE,IAAI,OAAO,KAAK,aAAa,CAAC,WAAW,EAAE;QAAE,OAAO,KAAK,CAAA;IAEzD,OAAO,CACL,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,kBAAkB;QACzE,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,2BAA2B;KAC/E,CAAA;AACH,CAAC,CAAA;AAED,OAAO,EAAE,cAAc,EAAE,oCAAoC,EAAE,CAAA","sourcesContent":["import { HumanizerInfoType } from '../../../v1/hooks/useConstants'\nimport { FEE_COLLECTOR } from '../../consts/addresses'\n\nconst isValidAddress = (address: string) => /^0x[a-fA-F0-9]{40}$/.test(address)\n\nconst isHumanizerKnownTokenOrSmartContract = (\n  humanizerInfo: HumanizerInfoType,\n  _address: string\n) => {\n  const address = _address.toLowerCase() // humanizer keys (addresses) are lowercase\n\n  // In order to humanize the fee collector as \"Gas Tank\", it is included in the\n  // \"names\" in the humanizer (all others are smart contract addresses). But the\n  // fee collector is not a smart contract (or token). It is an EOA.\n  if (address === FEE_COLLECTOR.toLowerCase()) return false\n\n  return (\n    Object.keys(humanizerInfo.tokens).includes(address) || // token addresses\n    Object.keys(humanizerInfo.names).includes(address) // smart contract addresses\n  )\n}\n\nexport { isValidAddress, isHumanizerKnownTokenOrSmartContract }\n"]}