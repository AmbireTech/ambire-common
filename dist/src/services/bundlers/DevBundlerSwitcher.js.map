{"version":3,"file":"DevBundlerSwitcher.js","sourceRoot":"","sources":["../../../../src/services/bundlers/DevBundlerSwitcher.ts"],"names":[],"mappings":";;;AAEA,uEAAmE;AACnE,uDAAmD;AAEnD;;;;GAIG;AACH,MAAa,kBAAmB,SAAQ,iCAAe;IACrD,YACE,OAAgB,EAChB,sBAAgC,EAChC,qBAA4B,EAC5B,YAAwB;QAExB,KAAK,CAAC,OAAO,EAAE,sBAAsB,EAAE,qBAAqB,CAAC,CAAA;QAC7D,IAAI,CAAC,OAAO,GAAG,IAAI,iDAAuB,EAAE,CAAA;QAC5C,IAAI,YAAY;YAAE,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,YAAY,CAAC,CAAA;IAC3D,CAAC;CACF;AAXD,gDAWC","sourcesContent":["import { BUNDLER } from '../../consts/bundlers'\nimport { Network } from '../../interfaces/network'\nimport { BrokenBiconomyBroadcast } from './brokenBiconomyBroadcast'\nimport { BundlerSwitcher } from './bundlerSwitcher'\n\n/**\n * DANGER\n * This class is made only for testing purposes where we forcefully\n * set a broken bundler as the main one to test if fallback is working\n */\nexport class DevBundlerSwitcher extends BundlerSwitcher {\n  constructor(\n    network: Network,\n    getSignAccountOpStatus: Function,\n    noStateUpdateStatuses: any[],\n    usedBundlers?: BUNDLER[]\n  ) {\n    super(network, getSignAccountOpStatus, noStateUpdateStatuses)\n    this.bundler = new BrokenBiconomyBroadcast()\n    if (usedBundlers) this.usedBundlers.push(...usedBundlers)\n  }\n}\n"]}