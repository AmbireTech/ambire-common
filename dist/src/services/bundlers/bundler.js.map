{"version":3,"file":"bundler.js","sourceRoot":"","sources":["../../../../src/services/bundlers/bundler.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable no-restricted-syntax */\n/* eslint-disable class-methods-use-this */\nimport { toBeHex } from 'ethers'\n\n/* eslint-disable import/no-extraneous-dependencies */\nimport { BUNDLER } from '../../consts/bundlers'\nimport { ENTRY_POINT_MARKER, ERC_4337_ENTRYPOINT } from '../../consts/deploy'\nimport { Fetch } from '../../interfaces/fetch'\nimport { Hex } from '../../interfaces/hex'\nimport { Network } from '../../interfaces/network'\nimport { RPCProvider } from '../../interfaces/provider'\nimport { decodeError } from '../../libs/errorDecoder'\nimport { BundlerError } from '../../libs/errorDecoder/customErrors'\nimport { DecodedError } from '../../libs/errorDecoder/types'\nimport { BundlerEstimateResult } from '../../libs/estimate/interfaces'\nimport { privSlot } from '../../libs/proxyDeploy/deploy'\nimport { UserOperation } from '../../libs/userOperation/types'\nimport { getCleanUserOp } from '../../libs/userOperation/userOperation'\nimport { getRpcProvider } from '../provider'\nimport { GasSpeeds, UserOpStatus } from './types'\n\nrequire('dotenv').config()\n\nfunction addExtra(gasInWei: bigint, percentageIncrease: bigint): Hex {\n  const percent = 100n / percentageIncrease\n  return toBeHex(gasInWei + gasInWei / percent) as Hex\n}\n\nexport abstract class Bundler {\n  /**\n   * The default pollWaitTime. This is used to determine\n   * how many milliseconds to wait until before another request to the\n   * bundler for the receipt is sent\n   */\n  public pollWaitTime = 1500\n\n  /**\n   * Define the bundler URL\n   */\n  protected abstract getUrl(network: Network): string\n\n  /**\n   * Each bundler has their own gas prices. Define and fetch them\n   */\n  protected abstract getGasPrice(network: Network): Promise<GasSpeeds>\n\n  /**\n   * Each bundler has it's own handler for giving information back\n   */\n  public abstract getStatus(network: Network, userOpHash: string): Promise<UserOpStatus>\n\n  /**\n   * Each bundler needs to return its own na,e\n   */\n  public abstract getName(): BUNDLER\n\n  /**\n   * Get the bundler RPC\n   *\n   * @param network\n   */\n  protected getProvider(network: Network): RPCProvider {\n    return getRpcProvider([this.getUrl(network)], network.chainId)\n  }\n\n  private async sendEstimateReq(\n    userOperation: UserOperation,\n    network: Network,\n    shouldStateOverride = false\n  ): Promise<BundlerEstimateResult> {\n    const provider = this.getProvider(network)\n\n    if (shouldStateOverride) {\n      return provider.send('eth_estimateUserOperationGas', [\n        getCleanUserOp(userOperation)[0],\n        ERC_4337_ENTRYPOINT,\n        {\n          [userOperation.sender]: {\n            stateDiff: {\n              // add privileges to the entry point\n              [privSlot(0, 'uint256', ERC_4337_ENTRYPOINT, 'uint256')]: ENTRY_POINT_MARKER\n            }\n          }\n        }\n      ])\n    }\n\n    return provider.send('eth_estimateUserOperationGas', [\n      getCleanUserOp(userOperation)[0],\n      ERC_4337_ENTRYPOINT\n    ])\n  }\n\n  async estimate(\n    userOperation: UserOperation,\n    network: Network,\n    shouldStateOverride = false\n  ): Promise<BundlerEstimateResult> {\n    const estimatiton = await this.sendEstimateReq(userOperation, network, shouldStateOverride)\n    return {\n      preVerificationGas: toBeHex(estimatiton.preVerificationGas) as Hex,\n      verificationGasLimit: toBeHex(estimatiton.verificationGasLimit) as Hex,\n      callGasLimit: toBeHex(estimatiton.callGasLimit) as Hex,\n      paymasterVerificationGasLimit: toBeHex(estimatiton.paymasterVerificationGasLimit) as Hex,\n      paymasterPostOpGasLimit: toBeHex(estimatiton.paymasterPostOpGasLimit) as Hex\n    }\n  }\n\n  /**\n   * Get the transaction receipt from the userOperationHash if ready\n   *\n   * @param userOperationHash\n   * @returns Receipt | null\n   */\n  async getReceipt(userOperationHash: string, network: Network) {\n    const provider = this.getProvider(network)\n    return provider.send('eth_getUserOperationReceipt', [userOperationHash])\n  }\n\n  /**\n   * Broadcast a userOperation to the specified bundler and get a userOperationHash in return\n   *\n   * @param UserOperation userOperation\n   * @returns userOperationHash\n   */\n  async broadcast(userOperation: UserOperation, network: Network): Promise<string> {\n    const provider = this.getProvider(network)\n    return provider.send('eth_sendUserOperation', [\n      getCleanUserOp(userOperation)[0],\n      ERC_4337_ENTRYPOINT\n    ])\n  }\n\n  // use this request to check if the bundler supports the network\n  static async isNetworkSupported(fetch: Fetch, chainId: bigint) {\n    const url = `https://api.pimlico.io/health?apikey=${process.env.REACT_APP_PIMLICO_API_KEY}&chain-id=${chainId}`\n    const result = await fetch(url)\n    return result.status === 200\n  }\n\n  async fetchGasPrices(\n    network: Network,\n    errorCallback: Function,\n    counter: number = 0\n  ): Promise<GasSpeeds> {\n    const hasFallback = network.erc4337.bundlers && network.erc4337.bundlers.length > 1\n    if (counter >= (hasFallback ? 2 : 5)) throw new Error(\"Couldn't fetch gas prices\")\n\n    let response\n\n    try {\n      response = await Promise.race([\n        this.getGasPrice(network),\n        new Promise((_resolve, reject) => {\n          setTimeout(\n            () => reject(new Error('fetching bundler gas prices failed, request too slow')),\n            hasFallback ? 4500 : 6000\n          )\n        })\n      ])\n    } catch (e: any) {\n      // report the error back only if there's no fallback\n      if (!hasFallback) {\n        errorCallback({\n          level: 'major',\n          message: 'Estimating gas prices from the bundler timed out. Retrying...',\n          error: new Error('Budler gas prices estimation timeout')\n        })\n      }\n\n      const increment = counter + 1\n      return this.fetchGasPrices(network, errorCallback, increment)\n    }\n\n    const results = response as GasSpeeds\n    return {\n      slow: {\n        maxFeePerGas: addExtra(BigInt(results.slow.maxFeePerGas), 5n),\n        maxPriorityFeePerGas: addExtra(BigInt(results.slow.maxPriorityFeePerGas), 5n)\n      },\n      medium: {\n        maxFeePerGas: addExtra(BigInt(results.medium.maxFeePerGas), 7n),\n        maxPriorityFeePerGas: addExtra(BigInt(results.medium.maxPriorityFeePerGas), 7n)\n      },\n      fast: {\n        maxFeePerGas: addExtra(BigInt(results.fast.maxFeePerGas), 10n),\n        maxPriorityFeePerGas: addExtra(BigInt(results.fast.maxPriorityFeePerGas), 10n)\n      },\n      ape: {\n        maxFeePerGas: addExtra(BigInt(results.ape.maxFeePerGas), 20n),\n        maxPriorityFeePerGas: addExtra(BigInt(results.ape.maxPriorityFeePerGas), 20n)\n      }\n    }\n  }\n\n  // used when catching errors from bundler requests\n  decodeBundlerError(e: Error): DecodedError {\n    const error = new BundlerError(e.message, this.getName())\n    return decodeError(error)\n  }\n}\n"]}