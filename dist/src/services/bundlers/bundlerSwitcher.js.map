{"version":3,"file":"bundlerSwitcher.js","sourceRoot":"","sources":["../../../../src/services/bundlers/bundlerSwitcher.ts"],"names":[],"mappings":"AAAA,2CAA2C;AAK3C,OAAO,EAAE,gBAAgB,EAAE,iBAAiB,EAAE,MAAM,cAAc,CAAA;AAElE,MAAM,OAAO,eAAe;IAChB,OAAO,CAAS;IAEhB,OAAO,CAAS;IAEhB,YAAY,GAAc,EAAE,CAAA;IAEtC,2DAA2D;IACjD,sBAAsB,CAAU;IAE1C,QAAQ;IACR,qEAAqE;IACrE,oEAAoE;IACpE,iDAAiD;IACvC,qBAAqB,GAAU,EAAE,CAAA;IAE3C,YAAY,OAAgB,EAAE,sBAAgC,EAAE,qBAA4B;QAC1F,IAAI,CAAC,OAAO,GAAG,OAAO,CAAA;QACtB,IAAI,CAAC,OAAO,GAAG,iBAAiB,CAAC,OAAO,CAAC,CAAA;QACzC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,CAAA;QAC9C,IAAI,CAAC,sBAAsB,GAAG,sBAAsB,CAAA;QACpD,IAAI,CAAC,qBAAqB,GAAG,qBAAqB,CAAA;IACpD,CAAC;IAES,WAAW;QACnB,MAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAA;QAC9C,OAAO,QAAQ,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAA;IACxC,CAAC;IAED,UAAU;QACR,OAAO,IAAI,CAAC,OAAO,CAAA;IACrB,CAAC;IAED,gBAAgB;QACd,OAAO,IAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAC,IAAI,CAAC,sBAAsB,EAAE,CAAC,CAAA;IAC3E,CAAC;IAED,SAAS,CAAC,YAA0B;QAClC,sEAAsE;QACtE,IAAI,IAAI,CAAC,gBAAgB,EAAE;YAAE,OAAO,KAAK,CAAA;QAEzC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;YAAE,OAAO,KAAK,CAAA;QAErC,MAAM,iBAAiB,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,QAAS,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,EAAE;YAC1E,OAAO,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAA;QAClD,CAAC,CAAC,CAAA;QAEF,IAAI,iBAAiB,CAAC,MAAM,KAAK,CAAC;YAAE,OAAO,KAAK,CAAA;QAEhD,OAAO,CACL,CAAC,YAAY;YACb,YAAY,CAAC,KAAK,KAAK,eAAe;YACtC,YAAY,CAAC,KAAK,KAAK,cAAc,CACtC,CAAA;IACH,CAAC;IAED,MAAM;QACJ,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE;YACvB,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAA;SACnD;QAED,MAAM,iBAAiB,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,QAAS,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,EAAE;YAC1E,OAAO,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAA;QAClD,CAAC,CAAC,CAAA;QACF,IAAI,CAAC,OAAO,GAAG,gBAAgB,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAA;QACrD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,CAAA;QAC9C,OAAO,IAAI,CAAC,OAAO,CAAA;IACrB,CAAC;CACF","sourcesContent":["/* eslint-disable class-methods-use-this */\n\nimport { BUNDLER } from '../../consts/bundlers'\nimport { Network } from '../../interfaces/network'\nimport { Bundler } from './bundler'\nimport { getBundlerByName, getDefaultBundler } from './getBundler'\n\nexport class BundlerSwitcher {\n  protected network: Network\n\n  protected bundler: Bundler\n\n  protected usedBundlers: BUNDLER[] = []\n\n  // a function to retrieve the current sign account op state\n  protected getSignAccountOpStatus: Function\n\n  // TODO:\n  // no typehints here as importing typehints from signAccountOp causes\n  // a dependancy cicle. Types should be removed from signAccountOp in\n  // a different file before proceeding to fix this\n  protected noStateUpdateStatuses: any[] = []\n\n  constructor(network: Network, getSignAccountOpStatus: Function, noStateUpdateStatuses: any[]) {\n    this.network = network\n    this.bundler = getDefaultBundler(network)\n    this.usedBundlers.push(this.bundler.getName())\n    this.getSignAccountOpStatus = getSignAccountOpStatus\n    this.noStateUpdateStatuses = noStateUpdateStatuses\n  }\n\n  protected hasBundlers() {\n    const bundlers = this.network.erc4337.bundlers\n    return bundlers && bundlers.length > 1\n  }\n\n  getBundler(): Bundler {\n    return this.bundler\n  }\n\n  userHasCommitted(): boolean {\n    return this.noStateUpdateStatuses.includes(this.getSignAccountOpStatus())\n  }\n\n  canSwitch(bundlerError: Error | null): boolean {\n    // don't switch the bundler if the account op is in a state of signing\n    if (this.userHasCommitted()) return false\n\n    if (!this.hasBundlers()) return false\n\n    const availableBundlers = this.network.erc4337.bundlers!.filter((bundler) => {\n      return this.usedBundlers.indexOf(bundler) === -1\n    })\n\n    if (availableBundlers.length === 0) return false\n\n    return (\n      !bundlerError ||\n      bundlerError.cause === 'biconomy: 400' ||\n      bundlerError.cause === 'pimlico: 500'\n    )\n  }\n\n  switch(): Bundler {\n    if (!this.hasBundlers()) {\n      throw new Error('no available bundlers to switch')\n    }\n\n    const availableBundlers = this.network.erc4337.bundlers!.filter((bundler) => {\n      return this.usedBundlers.indexOf(bundler) === -1\n    })\n    this.bundler = getBundlerByName(availableBundlers[0])\n    this.usedBundlers.push(this.bundler.getName())\n    return this.bundler\n  }\n}\n"]}