{"version":3,"file":"ensDomains.js","sourceRoot":"","sources":["../../../../src/services/ensDomains/ensDomains.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-ignore\nimport constants from 'bip44-constants'\nimport { isAddress } from 'ethers'\n\n// @ts-ignore\nimport { normalize } from '@ensdomains/eth-ens-namehash'\n\nimport { networks } from '../../consts/networks'\nimport { RPCProvider } from '../../interfaces/provider'\nimport { getRpcProvider } from '../provider'\n\nconst BIP44_BASE_VALUE = 2147483648\nconst ADDRESS_ZERO = '0x0000000000000000000000000000000000000000'\n\nconst normalizeDomain = (domain: string) => {\n  try {\n    return normalize(domain)\n  } catch (e) {\n    return null\n  }\n}\n\nfunction getNormalisedCoinType(bip44Item: number[][]) {\n  return bip44Item[0].length ? bip44Item[0][0] - BIP44_BASE_VALUE : null\n}\n\nasync function resolveForCoin(resolver: any, bip44Item?: number[][]) {\n  if (bip44Item && bip44Item.length === 1) {\n    const coinType = getNormalisedCoinType(bip44Item)\n    if (!coinType) return null\n    return resolver.getAddress(coinType)\n  }\n  return resolver.getAddress()\n}\n\nexport function isCorrectAddress(address: string) {\n  return !(ADDRESS_ZERO === address) && isAddress(address)\n}\n\n// @TODO: Get RPC provider url from settings controller\nasync function resolveENSDomain(domain: string, bip44Item?: number[][]): Promise<string> {\n  const normalizedDomainName = normalizeDomain(domain)\n  if (!normalizedDomainName) return ''\n  const ethereum = networks.find((x) => x.id === 'ethereum')!\n  const provider = getRpcProvider(ethereum.rpcUrls, ethereum.chainId)\n  const resolver = await provider.getResolver(normalizedDomainName)\n  if (!resolver) return ''\n  try {\n    const ethAddress = await resolver.getAddress()\n    const addressForCoin = await resolveForCoin(resolver, bip44Item).catch(() => null)\n    return isCorrectAddress(addressForCoin) ? addressForCoin : ethAddress\n  } catch (e: any) {\n    // If the error comes from an internal server error don't\n    // show it to the user, because it happens when a domain\n    // doesn't exist and we already show a message for that.\n    // https://dnssec-oracle.ens.domains/ 500 (ISE)\n    if (e.message?.includes('500_SERVER_ERROR')) return ''\n\n    throw e\n  } finally {\n    provider?.destroy()\n  }\n}\n\nfunction getBip44Items(coinTicker: string) {\n  if (!coinTicker) return null\n  return constants.filter((item: string[]) => item[1] === coinTicker)\n}\n\nasync function reverseLookupEns(address: string, provider: RPCProvider) {\n  return provider.lookupAddress(address)\n}\n\nexport { resolveENSDomain, getBip44Items, reverseLookupEns }\n"]}