{"version":3,"file":"validate.js","sourceRoot":"","sources":["../../../../src/services/validations/validate.ts"],"names":[],"mappings":"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","sourcesContent":["import { getAddress, parseUnits } from 'ethers'\nimport isEmail from 'validator/es/lib/isEmail'\n\nimport { TokenResult } from '../../libs/portfolio'\nimport { getTokenAmount } from '../../libs/portfolio/helpers'\nimport { getSanitizedAmount } from '../../libs/transfer/amount'\nimport { isValidAddress } from '../address'\n\ntype ValidateReturnType = {\n  success: boolean\n  message: string\n}\n\nconst validateAddress = (address: string): ValidateReturnType => {\n  if (!(address && address.length)) {\n    return {\n      success: false,\n      message: ''\n    }\n  }\n\n  if (!(address && isValidAddress(address))) {\n    return {\n      success: false,\n      message: 'Invalid address.'\n    }\n  }\n\n  try {\n    getAddress(address)\n  } catch {\n    return {\n      success: false,\n      message: 'Invalid checksum. Verify the address and try again.'\n    }\n  }\n\n  return { success: true, message: '' }\n}\n\nconst validateAddAuthSignerAddress = (address: string, selectedAcc: any): ValidateReturnType => {\n  const isValidAddr = validateAddress(address)\n  if (!isValidAddr.success) return isValidAddr\n\n  if (address && selectedAcc && address === selectedAcc) {\n    return {\n      success: false,\n      message: 'The entered address should be different than your own account address.'\n    }\n  }\n\n  return { success: true, message: '' }\n}\n\nconst validateSendTransferAddress = (\n  address: string,\n  selectedAcc: string,\n  addressConfirmed: any,\n  isRecipientAddressUnknown: boolean,\n  isRecipientHumanizerKnownTokenOrSmartContract: boolean,\n  isUDAddress: boolean,\n  isEnsAddress: boolean,\n  isRecipientDomainResolving: boolean,\n  isSWWarningVisible?: boolean,\n  isSWWarningAgreed?: boolean\n): ValidateReturnType => {\n  // Basic validation is handled in the AddressInput component and we don't want to overwrite it.\n  if (!isValidAddress(address) || isRecipientDomainResolving) {\n    return {\n      success: true,\n      message: ''\n    }\n  }\n\n  if (selectedAcc && address.toLowerCase() === selectedAcc.toLowerCase()) {\n    return {\n      success: false,\n      message: 'The entered address should be different than the your own account address.'\n    }\n  }\n\n  if (isRecipientHumanizerKnownTokenOrSmartContract) {\n    return {\n      success: false,\n      message: 'You are trying to send tokens to a smart contract. Doing so would burn them.'\n    }\n  }\n\n  if (\n    isRecipientAddressUnknown &&\n    !addressConfirmed &&\n    !isUDAddress &&\n    !isEnsAddress &&\n    !isRecipientDomainResolving\n  ) {\n    return {\n      success: false,\n      message:\n        \"You're trying to send to an unknown address. If you're really sure, confirm using the checkbox below.\"\n    }\n  }\n\n  if (\n    isRecipientAddressUnknown &&\n    !addressConfirmed &&\n    (isUDAddress || isEnsAddress) &&\n    !isRecipientDomainResolving\n  ) {\n    const name = isUDAddress ? 'Unstoppable domain' : 'Ethereum Name Service'\n    return {\n      success: false,\n      message: `You're trying to send to an unknown ${name}. If you really trust the person who gave it to you, confirm using the checkbox below.`\n    }\n  }\n\n  if (isRecipientAddressUnknown && addressConfirmed && isSWWarningVisible && !isSWWarningAgreed) {\n    return {\n      success: false,\n      message: 'Please confirm that the recipient address is not an exchange.'\n    }\n  }\n\n  return { success: true, message: '' }\n}\n\nconst validateSendTransferAmount = (\n  amount: string,\n  maxAmount: number,\n  maxAmountInFiat: number,\n  selectedAsset: TokenResult\n): ValidateReturnType => {\n  const sanitizedAmount = getSanitizedAmount(amount, selectedAsset.decimals)\n\n  if (!(sanitizedAmount && sanitizedAmount.length)) {\n    return {\n      success: false,\n      message: ''\n    }\n  }\n\n  if (!(sanitizedAmount && Number(sanitizedAmount) > 0)) {\n    return {\n      success: false,\n      message: 'The amount must be greater than 0.'\n    }\n  }\n\n  try {\n    if (sanitizedAmount && selectedAsset && selectedAsset.decimals) {\n      if (Number(sanitizedAmount) < 1 / 10 ** selectedAsset.decimals)\n        return {\n          success: false,\n          message: 'Token amount too low.'\n        }\n\n      const currentAmount: bigint = parseUnits(sanitizedAmount, selectedAsset.decimals)\n\n      if (currentAmount > getTokenAmount(selectedAsset)) {\n        return {\n          success: false,\n          message: `The amount is greater than the asset's balance: ${Number(maxAmount) || 0} ${\n            selectedAsset?.symbol\n          }${maxAmountInFiat ? `/ ${Number(maxAmountInFiat)} USD.` : ''}`\n        }\n      }\n    }\n  } catch (e) {\n    console.error(e)\n\n    return {\n      success: false,\n      message: 'Invalid amount.'\n    }\n  }\n\n  return { success: true, message: '' }\n}\n\nconst validateSendNftAddress = (\n  address: string,\n  selectedAcc: any,\n  addressConfirmed: any,\n  isRecipientAddressUnknown: boolean,\n  isRecipientHumanizerKnownTokenOrSmartContract: boolean,\n  metadata: any,\n  selectedNetwork: any,\n  network: any,\n  isUDAddress: boolean,\n  isEnsAddress: boolean,\n  isRecipientDomainResolving: boolean\n): ValidateReturnType => {\n  const isValidAddr = validateSendTransferAddress(\n    address,\n    selectedAcc,\n    addressConfirmed,\n    isRecipientAddressUnknown,\n    isRecipientHumanizerKnownTokenOrSmartContract,\n    isUDAddress,\n    isEnsAddress,\n    isRecipientDomainResolving\n  )\n  if (!isValidAddr.success) return isValidAddr\n\n  if (\n    metadata &&\n    selectedAcc &&\n    metadata.owner?.address.toLowerCase() !== selectedAcc.toLowerCase()\n  ) {\n    return {\n      success: false,\n      message: \"The NFT you're trying to send is not owned by you!\"\n    }\n  }\n\n  if (selectedNetwork && network && selectedNetwork.id !== network) {\n    return {\n      success: false,\n      message: 'The selected network is not the correct one.'\n    }\n  }\n\n  return { success: true, message: '' }\n}\n\nconst isValidCode = (code: string) => code.length === 6\n\nconst isValidPassword = (password: string) => password.length >= 8\n\nfunction isValidURL(url: string) {\n  const urlRegex =\n    /^(?:https?|ftp):\\/\\/(?:\\w+:{0,1}\\w*@)?(?:\\S+)(?::\\d+)?(?:\\/|\\/(?:[\\w#!:.?+=&%@!\\-\\/]))?$/\n\n  return urlRegex.test(url)\n}\n\nexport {\n  isEmail,\n  validateAddAuthSignerAddress,\n  validateSendTransferAddress,\n  validateSendTransferAmount,\n  validateSendNftAddress,\n  isValidCode,\n  isValidPassword,\n  isValidURL\n}\n"]}