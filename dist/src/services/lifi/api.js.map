{"version":3,"file":"api.js","sourceRoot":"","sources":["../../../../src/services/lifi/api.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  ExtendedChain as LiFiExtendedChain,\n  Step as LiFiIncludedStep,\n  Route as LiFiRoute,\n  RoutesResponse as LiFiRoutesResponse,\n  StatusResponse as LiFiRouteStatusResponse,\n  LiFiStep,\n  Token as LiFiToken,\n  TokensResponse as LiFiTokensResponse\n} from '@lifi/types'\n\nimport SwapAndBridgeProviderApiError from '../../classes/SwapAndBridgeProviderApiError'\nimport { InviteController } from '../../controllers/invite/invite'\nimport { getTokenUsdAmount } from '../../controllers/signAccountOp/helper'\nimport { CustomResponse, Fetch, RequestInitWithCustomHeaders } from '../../interfaces/fetch'\nimport {\n  SwapAndBridgeActiveRoute,\n  SwapAndBridgeQuote,\n  SwapAndBridgeRoute,\n  SwapAndBridgeRouteStatus,\n  SwapAndBridgeSendTxRequest,\n  SwapAndBridgeStep,\n  SwapAndBridgeSupportedChain,\n  SwapAndBridgeToToken,\n  SwapAndBridgeUserTx\n} from '../../interfaces/swapAndBridge'\nimport { TokenResult } from '../../libs/portfolio'\nimport {\n  addCustomTokensIfNeeded,\n  attemptToSortTokensByMarketCap,\n  convertPortfolioTokenToSwapAndBridgeToToken,\n  sortNativeTokenFirst\n} from '../../libs/swapAndBridge/swapAndBridge'\nimport { FEE_PERCENT, ZERO_ADDRESS } from '../socket/constants'\nimport { MAYAN_BRIDGE } from './consts'\n\nconst normalizeLiFiTokenToSwapAndBridgeToToken = (\n  token: LiFiToken,\n  toChainId: number\n): SwapAndBridgeToToken => {\n  const { name, address, decimals, symbol, logoURI: icon } = token\n\n  return { name, address, decimals, symbol, icon, chainId: toChainId }\n}\n\nconst normalizeLiFiStepToSwapAndBridgeStep = (parentStep: LiFiStep): SwapAndBridgeStep[] => {\n  const includedSteps = parentStep.includedSteps\n  const swapOrBridgeSteps = ['swap', 'cross']\n\n  const isSwapOrBridge = includedSteps.some((s) => swapOrBridgeSteps.includes(s.type))\n\n  return (\n    includedSteps\n      // Picks only steps that need to be visualized / displayed\n      .filter(({ type }) => {\n        // If it's swap or bridge we don't want to show protocol steps\n        // as they are not relevant for the user\n        if (isSwapOrBridge) {\n          return swapOrBridgeSteps.includes(type)\n        }\n\n        // If it's not swap or bridge we want to show protocol steps\n        // (Wrap / Unwrap)\n        return type === 'protocol'\n      })\n      .map((step: LiFiIncludedStep, index: number) => ({\n        chainId: step.action.fromChainId,\n        fromAmount: parentStep.action.fromAmount,\n        fromAsset: normalizeLiFiTokenToSwapAndBridgeToToken(\n          step.action.fromToken,\n          step.action.fromChainId\n        ),\n        gasFees: {\n          gasAmount: step.estimate.gasCosts?.[0]?.amount || '',\n          gasLimit: +(step.estimate.gasCosts?.[0]?.limit || 0),\n          feesInUsd: +(step.estimate.gasCosts?.[0]?.amountUSD || 0),\n          asset: step.estimate.gasCosts?.[0]?.token\n            ? normalizeLiFiTokenToSwapAndBridgeToToken(\n                step.estimate.gasCosts[0].token,\n                step.estimate.gasCosts[0].token.chainId\n              )\n            : undefined\n        },\n        serviceTime: parentStep.estimate.executionDuration,\n        minAmountOut: step.estimate.toAmountMin,\n        protocol: {\n          name: step.toolDetails.name,\n          displayName: step.toolDetails.name,\n          icon: step.toolDetails.logoURI\n        },\n        swapSlippage: step.action.slippage,\n        toAmount: step.estimate.toAmount,\n        toAsset: normalizeLiFiTokenToSwapAndBridgeToToken(\n          step.action.toToken,\n          step.action.toChainId\n        ),\n        type: step.type === 'swap' ? 'swap' : 'middleware',\n        userTxIndex: index\n      }))\n  )\n}\n\nconst normalizeLiFiStepToSwapAndBridgeUserTx = (parentStep: LiFiStep): SwapAndBridgeUserTx[] =>\n  parentStep.includedSteps\n    // Picks only steps that need to be visualized / displayed\n    .filter(({ type }) => ['swap', 'cross'].includes(type))\n    .map((step: LiFiIncludedStep, index: number) => ({\n      userTxType: step.type === 'swap' ? 'dex-swap' : 'fund-movr',\n      userTxIndex: index,\n      txType: step.type === 'swap' ? 'dex-swap' : 'fund-movr',\n      fromAsset: normalizeLiFiTokenToSwapAndBridgeToToken(\n        step.action.fromToken,\n        step.action.fromChainId\n      ),\n      toAsset: normalizeLiFiTokenToSwapAndBridgeToToken(step.action.toToken, step.action.toChainId),\n      chainId: step.action.fromChainId,\n      fromAmount: step.estimate.fromAmount,\n      toAmount: step.estimate.toAmount,\n      swapSlippage: step.action.slippage,\n      serviceTime: parentStep.estimate.executionDuration,\n      protocol: {\n        displayName: step.toolDetails.name,\n        icon: step.toolDetails.logoURI,\n        name: step.toolDetails.name\n      },\n      minAmountOut: step.estimate.toAmountMin,\n      gasFees: {\n        gasAmount: step.estimate.gasCosts?.[0]?.amount || '',\n        gasLimit: +(step.estimate.gasCosts?.[0]?.limit || 0),\n        feesInUsd: +(step.estimate.gasCosts?.[0]?.amountUSD || 0),\n        asset: step.estimate.gasCosts?.[0]?.token\n          ? normalizeLiFiTokenToSwapAndBridgeToToken(\n              step.estimate.gasCosts[0].token,\n              step.estimate.gasCosts[0].token.chainId\n            )\n          : undefined\n      }\n    }))\n\nconst normalizeLiFiRouteToSwapAndBridgeRoute = (\n  route: LiFiRoute,\n  userAddress: string\n): SwapAndBridgeRoute => ({\n  routeId: route.id,\n  fromChainId: route.fromChainId,\n  toChainId: route.toChainId,\n  userAddress,\n  isOnlySwapRoute: !route.containsSwitchChain,\n  fromAmount: route.fromAmount,\n  toAmount: route.toAmount,\n  currentUserTxIndex: 0,\n  ...(route.steps[0].includedSteps.some((s) => s.type === 'cross')\n    ? { usedBridgeNames: [route.steps[0].toolDetails.key] }\n    : { usedDexName: route.steps[0].toolDetails.name }),\n  totalGasFeesInUsd: +(route.gasCostUSD || 0),\n  userTxs: route.steps.flatMap(normalizeLiFiStepToSwapAndBridgeUserTx),\n  steps: route.steps.flatMap(normalizeLiFiStepToSwapAndBridgeStep),\n  receivedValueInUsd: +route.toAmountUSD,\n  inputValueInUsd: +route.fromAmountUSD,\n  outputValueInUsd: +route.toAmountUSD,\n  serviceTime: route.steps[0].estimate.executionDuration,\n  // errorMessage: undefined\n  rawRoute: route,\n  sender: route.fromAddress,\n  toToken: route.toToken\n})\n\nconst normalizeLiFiStepToSwapAndBridgeSendTxRequest = (\n  parentStep: LiFiStep\n): SwapAndBridgeSendTxRequest => {\n  if (\n    !parentStep.transactionRequest ||\n    typeof parentStep.transactionRequest.data !== 'string' ||\n    typeof parentStep.transactionRequest.to !== 'string' ||\n    typeof parentStep.transactionRequest.value !== 'string'\n  ) {\n    throw new SwapAndBridgeProviderApiError(\n      'Unable to start the route. Error details: <missing transaction request data>'\n    )\n  }\n\n  return {\n    // Route ID is the string before the colon, then it's the step index\n    activeRouteId: parentStep.id.split(':')[0],\n    approvalData:\n      parentStep.action.fromToken.address === ZERO_ADDRESS\n        ? null // No approval needed fo native tokens\n        : {\n            allowanceTarget: parentStep.estimate.approvalAddress,\n            approvalTokenAddress: parentStep.action.fromToken.address,\n            minimumApprovalAmount: parentStep.estimate.fromAmount,\n            owner: ''\n          },\n    chainId: parentStep.action.fromChainId,\n    txData: parentStep.transactionRequest.data,\n    txTarget: parentStep.transactionRequest.to,\n    txType: 'eth_sendTransaction',\n    userTxIndex: 0,\n    userTxType: parentStep.includedSteps.some((s) => s.type === 'cross') ? 'fund-movr' : 'dex-swap',\n    value: parentStep.transactionRequest.value\n  }\n}\n\nexport class LiFiAPI {\n  id: 'lifi' = 'lifi'\n\n  #fetch: Fetch\n\n  #baseUrl = 'https://li.quest/v1'\n\n  #headers: RequestInitWithCustomHeaders['headers']\n\n  isHealthy: boolean | null = null\n\n  constructor({ apiKey, fetch }: { apiKey?: string; fetch: Fetch }) {\n    this.#fetch = fetch\n\n    this.#headers = {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    }\n\n    // add the apiKey if specified only. Li Fi can function without an apiKey,\n    // it will just put a custom user rate limit\n    if (apiKey) {\n      this.#headers['x-lifi-api-key'] = apiKey\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  async getHealth() {\n    // Li.Fi's v1 API doesn't have a dedicated health endpoint\n    return true\n  }\n\n  async updateHealth() {\n    this.isHealthy = await this.getHealth()\n  }\n\n  async updateHealthIfNeeded() {\n    // Update health status only if previously unhealthy\n    if (this.isHealthy) return\n\n    await this.updateHealth()\n  }\n\n  resetHealth() {\n    this.isHealthy = null\n  }\n\n  /**\n   * Processes LiFi API responses and throws custom errors for various failures\n   */\n  // eslint-disable-next-line class-methods-use-this\n  async #handleResponse<T>({\n    fetchPromise,\n    errorPrefix\n  }: {\n    fetchPromise: Promise<CustomResponse>\n    errorPrefix: string\n  }): Promise<T> {\n    let response: CustomResponse\n\n    try {\n      response = await fetchPromise\n    } catch (e: any) {\n      const message = e?.message || 'no message'\n      const status = e?.status ? `, status: <${e.status}>` : ''\n      const error = `${errorPrefix} Upstream error: <${message}>${status}`\n      throw new SwapAndBridgeProviderApiError(error)\n    }\n\n    if (response.status === 429) {\n      const error = `Our service provider received too many requests, temporarily preventing your request from being processed. ${errorPrefix}`\n      throw new SwapAndBridgeProviderApiError(error)\n    }\n\n    let responseBody: T\n    try {\n      responseBody = await response.json()\n    } catch (e: any) {\n      const message = e?.message || 'no message'\n      const error = `${errorPrefix} Error details: <Unexpected non-JSON response from our service provider>, message: <${message}>`\n      throw new SwapAndBridgeProviderApiError(error)\n    }\n\n    if (!response.ok) {\n      const message = JSON.stringify(responseBody)\n      const error = `${errorPrefix} Our service provider upstream error: <${message}>`\n      throw new SwapAndBridgeProviderApiError(error)\n    }\n\n    return responseBody\n  }\n\n  async getSupportedChains(): Promise<SwapAndBridgeSupportedChain[]> {\n    const url = `${this.#baseUrl}/chains?chainTypes=EVM`\n\n    const response = await this.#handleResponse<{ chains: LiFiExtendedChain[] }>({\n      fetchPromise: this.#fetch(url, { headers: this.#headers }),\n      errorPrefix:\n        'Unable to retrieve the list of supported Swap & Bridge chains from our service provider.'\n    })\n\n    return response.chains.map((c) => ({ chainId: c.id }))\n  }\n\n  async getToTokenList({\n    toChainId\n  }: {\n    fromChainId: number\n    toChainId: number\n  }): Promise<SwapAndBridgeToToken[]> {\n    const params = new URLSearchParams({\n      chains: toChainId.toString(),\n      chainTypes: 'EVM'\n    })\n    const url = `${this.#baseUrl}/tokens?${params.toString()}`\n\n    const response = await this.#handleResponse<LiFiTokensResponse>({\n      fetchPromise: this.#fetch(url, { headers: this.#headers }),\n      errorPrefix:\n        'Unable to retrieve the list of supported receive tokens. Please reload to try again.'\n    })\n\n    const tokens: SwapAndBridgeToToken[] = response.tokens[toChainId].map((t: LiFiToken) =>\n      normalizeLiFiTokenToSwapAndBridgeToToken(t, toChainId)\n    )\n\n    const sortedTokens = await attemptToSortTokensByMarketCap({\n      fetch: this.#fetch,\n      chainId: toChainId,\n      tokens\n    })\n\n    const withCustomTokens = addCustomTokensIfNeeded({ chainId: toChainId, tokens: sortedTokens })\n\n    return sortNativeTokenFirst(withCustomTokens)\n  }\n\n  async getToken({\n    address: token,\n    chainId\n  }: {\n    address: string\n    chainId: number\n  }): Promise<SwapAndBridgeToToken | null> {\n    const params = new URLSearchParams({\n      token: token.toString(),\n      chain: chainId.toString()\n    })\n    const url = `${this.#baseUrl}/token?${params.toString()}`\n\n    const response = await this.#handleResponse<LiFiToken>({\n      fetchPromise: this.#fetch(url, { headers: this.#headers }),\n      errorPrefix: 'Unable to retrieve token information by address.'\n    })\n\n    if (!response) return null\n\n    return normalizeLiFiTokenToSwapAndBridgeToToken(response, chainId)\n  }\n\n  async quote({\n    fromAsset,\n    fromChainId,\n    fromTokenAddress,\n    toAsset,\n    toChainId,\n    toTokenAddress,\n    fromAmount,\n    userAddress,\n    sort,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isOG\n  }: {\n    fromAsset: TokenResult | null\n    fromChainId: number\n    fromTokenAddress: string\n    toAsset: SwapAndBridgeToToken | null\n    toChainId: number\n    toTokenAddress: string\n    fromAmount: bigint\n    userAddress: string\n    isSmartAccount: boolean\n    sort: 'time' | 'output'\n    isOG: InviteController['isOG']\n  }): Promise<SwapAndBridgeQuote> {\n    if (!fromAsset)\n      throw new SwapAndBridgeProviderApiError(\n        'Quote requested, but missing required params. Error details: <from token details are missing>'\n      )\n    if (!toAsset)\n      throw new SwapAndBridgeProviderApiError(\n        'Quote requested, but missing required params. Error details: <to token details are missing>'\n      )\n\n    const fromAmountInUsd = getTokenUsdAmount(fromAsset, fromAmount)\n    const slippage = Number(fromAmountInUsd) <= 400 ? '0.010' : '0.005'\n    const body = {\n      fromChainId: fromChainId.toString(),\n      fromAmount: fromAmount.toString(),\n      fromTokenAddress,\n      toChainId: toChainId.toString(),\n      toTokenAddress,\n      fromAddress: userAddress,\n      toAddress: userAddress,\n      options: {\n        slippage,\n        order: sort === 'time' ? 'FASTEST' : 'CHEAPEST',\n        integrator: 'ambire-extension-prod',\n        // These two flags ensure we have NO transaction on the destination chain\n        allowDestinationCall: 'false',\n        allowSwitchChain: 'false',\n        // LiFi fee is from 0 to 1, so normalize it by dividing by 100\n        fee: (FEE_PERCENT / 100).toString() as string | undefined\n      }\n    }\n\n    const shouldRemoveConvenienceFee = isOG\n    if (shouldRemoveConvenienceFee) delete body.options.fee\n\n    const url = `${this.#baseUrl}/advanced/routes`\n    const response = await this.#handleResponse<LiFiRoutesResponse>({\n      fetchPromise: this.#fetch(url, {\n        headers: this.#headers,\n        method: 'POST',\n        body: JSON.stringify(body)\n      }),\n      errorPrefix: 'Unable to fetch the quote.'\n    })\n\n    const routes = response.routes\n      .map((r: LiFiRoute) => normalizeLiFiRouteToSwapAndBridgeRoute(r, userAddress))\n      .filter((r: SwapAndBridgeRoute) => {\n        return !r.usedBridgeNames || r.usedBridgeNames.indexOf(MAYAN_BRIDGE) === -1\n      })\n\n    const selectedRoute = response.routes[0]\n      ? normalizeLiFiRouteToSwapAndBridgeRoute(response.routes[0], userAddress)\n      : undefined\n    const selectedRouteSteps: SwapAndBridgeStep[] = response.routes[0]\n      ? response.routes[0].steps.flatMap(normalizeLiFiStepToSwapAndBridgeStep)\n      : []\n\n    return {\n      fromAsset: convertPortfolioTokenToSwapAndBridgeToToken(fromAsset, fromChainId),\n      fromChainId,\n      toAsset,\n      toChainId,\n      selectedRoute,\n      selectedRouteSteps,\n      routes\n    }\n  }\n\n  async startRoute({\n    route\n  }: {\n    fromChainId?: number\n    toChainId?: number\n    fromAssetAddress?: string\n    toAssetAddress?: string\n    route?: SwapAndBridgeRoute\n  }): Promise<SwapAndBridgeSendTxRequest> {\n    const body = JSON.stringify((route?.rawRoute as LiFiRoute).steps[0])\n\n    const response = await this.#handleResponse<LiFiStep>({\n      fetchPromise: this.#fetch(`${this.#baseUrl}/advanced/stepTransaction`, {\n        method: 'POST',\n        headers: this.#headers,\n        body\n      }),\n      errorPrefix: 'Unable to start the route.'\n    })\n\n    return normalizeLiFiStepToSwapAndBridgeSendTxRequest(response)\n  }\n\n  async getRouteStatus({\n    txHash,\n    fromChainId,\n    toChainId,\n    bridge\n  }: {\n    activeRouteId: SwapAndBridgeActiveRoute['activeRouteId']\n    userTxIndex: SwapAndBridgeSendTxRequest['userTxIndex']\n    txHash: string\n    fromChainId: number\n    toChainId: number\n    bridge?: string\n  }) {\n    // TODO: Swaps have no status check\n    if (!bridge) return 'completed'\n\n    const params = new URLSearchParams({\n      txHash,\n      bridge,\n      fromChain: fromChainId.toString(),\n      toChain: toChainId.toString()\n    })\n    const url = `${this.#baseUrl}/status?${params.toString()}`\n\n    // no error handling on getRouteStatus. Swallow the error and always return\n    // a pending route result and try again. This is the best decision after\n    // discussing it with Li.Fi. as in our one-swap, one-bridge design the\n    // only errors that should be returned are once that will disappear after time\n    const response = await this.#handleResponse<LiFiRouteStatusResponse>({\n      fetchPromise: this.#fetch(url, { headers: this.#headers }),\n      errorPrefix: 'Unable to get the route status. Please check back later to proceed.'\n    }).catch((e) => e)\n\n    const statuses: { [key in LiFiRouteStatusResponse['status']]: SwapAndBridgeRouteStatus } = {\n      DONE: 'completed',\n      FAILED: null,\n      INVALID: null,\n      NOT_FOUND: null,\n      PENDING: null\n    }\n\n    if (response instanceof SwapAndBridgeProviderApiError) {\n      return statuses.PENDING\n    }\n\n    return statuses[response.status as LiFiRouteStatusResponse['status']]\n  }\n\n  /**\n   * NOT SUPPORTED: LiFi has no concept for retrieving active routes from the API.\n   * @deprecated\n   */\n  // eslint-disable-next-line class-methods-use-this\n  getActiveRoute() {\n    return Promise.resolve(null)\n  }\n\n  async getNextRouteUserTx({\n    route\n  }: {\n    activeRouteId: SwapAndBridgeSendTxRequest['activeRouteId']\n    route: SwapAndBridgeRoute\n  }) {\n    // LiFi has no concept for retrieving next route user tx from the API, since\n    // we're using their single tx flow anyways. So re-use starting route.\n    return this.startRoute({ route })\n  }\n}\n"]}