{"version":3,"file":"unstoppableDomains.js","sourceRoot":"","sources":["../../../../src/services/unstoppableDomains/unstoppableDomains.ts"],"names":[],"mappings":"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","sourcesContent":["import { Resolution } from '@unstoppabledomains/resolution'\n\nimport { networks } from '../../consts/networks'\n\n// @TODO: Get RPC urls from settings controller\nconst resolution = new Resolution({\n  sourceConfig: {\n    uns: {\n      locations: {\n        Layer1: {\n          url: networks.find((x) => x.id === 'ethereum')?.rpcUrls?.[0] || '',\n          network: 'mainnet'\n        },\n        Layer2: {\n          url: networks.find((x) => x.id === 'polygon')?.rpcUrls?.[0] || '',\n          network: 'polygon-mainnet'\n        }\n      }\n    }\n  }\n})\n\nfunction getMessage(e?: string) {\n  if (e === 'UnregisteredDomain') return 'Domain is not registered'\n  if (e === 'RecordNotFound') return 'Crypto record is not found (or empty)'\n  if (e === 'UnspecifiedResolver') return 'Domain is not configured (empty resolver)'\n  if (e === 'UnsupportedDomain') return 'Domain is not supported'\n  return 'Domain is not registered'\n}\n\nasync function resolveAddress(domain: string) {\n  return resolution\n    .addr(domain, 'ETH')\n    .then((addr) => ({ success: true, address: addr }))\n    .catch((e) => ({ success: false, code: e.code, message: getMessage(e.code) }))\n}\n\nasync function resolveAddressMultiChain(domain: string, currency: string, chain: string) {\n  return resolution\n    .multiChainAddr(domain, currency, chain)\n    .then((addr) => ({ success: true, address: addr }))\n    .catch((e) => ({ success: false, code: e.code, message: getMessage(e.code) }))\n}\n\nasync function resolveUDomain(domain: string, currency?: any, chain?: any): Promise<string> {\n  const [nativeUDAddress, customUDAddress] = await Promise.all([\n    resolveAddress(domain),\n    resolveAddressMultiChain(domain, currency, chain)\n  ])\n\n  if (customUDAddress.success && 'address' in customUDAddress && customUDAddress.address) {\n    return customUDAddress.address\n  }\n\n  if (nativeUDAddress.success && 'address' in nativeUDAddress && nativeUDAddress.address) {\n    return nativeUDAddress.address\n  }\n\n  return ''\n}\n\nasync function reverseLookupUD(address: string): Promise<string | null> {\n  return resolution.reverse(address)\n}\n\nexport { resolveUDomain, reverseLookupUD }\n"]}