{"version":3,"file":"PaymasterFactory.js","sourceRoot":"","sources":["../../../../src/services/paymaster/PaymasterFactory.ts"],"names":[],"mappings":";;;AAMA,8DAA0D;AAE1D,yDAAqD;AAErD,2CAA2C;AAC3C,qEAAqE;AACrE,qDAAqD;AACrD,oEAAoE;AACpE,kCAAkC;AAClC,MAAa,gBAAgB;IAC3B,UAAU,CAAoB;IAE9B,KAAK,CAAmB;IAExB,aAAa,GAAyB,SAAS,CAAA;IAE/C,IAAI,CAAC,UAAkB,EAAE,KAAY,EAAE,aAAuB;QAC5D,IAAI,CAAC,UAAU,GAAG,UAAU,CAAA;QAC5B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAA;QAClB,IAAI,CAAC,aAAa,GAAG,aAAa,CAAA;IACpC,CAAC;IAED,KAAK,CAAC,MAAM,CACV,EAAa,EACb,MAAqB,EACrB,OAAgB,EAChB,OAAgB,EAChB,QAAqB;QAErB,IACE,IAAI,CAAC,UAAU,KAAK,SAAS;YAC7B,IAAI,CAAC,KAAK,KAAK,SAAS;YACxB,IAAI,CAAC,aAAa,KAAK,SAAS;YAEhC,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAA;QAEpC,0DAA0D;QAC1D,wDAAwD;QACxD,MAAM,OAAO,GAAG,EAAE,GAAG,EAAE,EAAE,CAAA;QACzB,MAAM,kBAAkB,GAAG,EAAE,CAAC,IAAI,EAAE,gBAAgB,EAAE,EAAE,CAAA;QACxD,IAAI,kBAAkB,IAAI,mCAAgB,CAAC,oBAAoB,CAAC,kBAAkB,CAAC,EAAE,CAAC;YACpF,IAAI,OAAO,CAAC,IAAI,IAAI,OAAO,CAAC,IAAI,CAAC,gBAAgB;gBAAE,OAAO,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,GAAG,IAAI,CAAA;QAChG,CAAC;QAED,MAAM,SAAS,GAAG,IAAI,qBAAS,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,aAAa,CAAC,CAAA;QAChF,MAAM,SAAS,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAA;QACjE,OAAO,SAAS,CAAA;IAClB,CAAC;CACF;AAvCD,4CAuCC","sourcesContent":["import { Account } from '../../interfaces/account'\nimport { Fetch } from '../../interfaces/fetch'\nimport { Network } from '../../interfaces/network'\nimport { RPCProvider } from '../../interfaces/provider'\nimport { AccountOp } from '../../libs/accountOp/accountOp'\nimport { AbstractPaymaster } from '../../libs/paymaster/abstractPaymaster'\nimport { Paymaster } from '../../libs/paymaster/paymaster'\nimport { UserOperation } from '../../libs/userOperation/types'\nimport { failedPaymasters } from './FailedPaymasters'\n\n// a factory for creating paymaster objects\n// this is needed as we'd like to create paymasters at will with easy\n// access to app properties like relayerUrl and Fetch\n// so we init the PaymasterFactory in the main controller and use it\n// throught the app as a singleton\nexport class PaymasterFactory {\n  relayerUrl: string | undefined\n\n  fetch: Fetch | undefined\n\n  errorCallback: Function | undefined = undefined\n\n  init(relayerUrl: string, fetch: Fetch, errorCallback: Function) {\n    this.relayerUrl = relayerUrl\n    this.fetch = fetch\n    this.errorCallback = errorCallback\n  }\n\n  async create(\n    op: AccountOp,\n    userOp: UserOperation,\n    account: Account,\n    network: Network,\n    provider: RPCProvider\n  ): Promise<AbstractPaymaster> {\n    if (\n      this.relayerUrl === undefined ||\n      this.fetch === undefined ||\n      this.errorCallback === undefined\n    )\n      throw new Error('call init first')\n\n    // check whether the sponsorship has failed and if it has,\n    // mark it like so in the meta for the paymaster to know\n    const localOp = { ...op }\n    const paymasterServiceId = op.meta?.paymasterService?.id\n    if (paymasterServiceId && failedPaymasters.hasFailedSponsorship(paymasterServiceId)) {\n      if (localOp.meta && localOp.meta.paymasterService) localOp.meta.paymasterService.failed = true\n    }\n\n    const paymaster = new Paymaster(this.relayerUrl, this.fetch, this.errorCallback)\n    await paymaster.init(localOp, userOp, account, network, provider)\n    return paymaster\n  }\n}\n"]}