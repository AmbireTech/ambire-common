{"version":3,"file":"FailedPaymasters.js","sourceRoot":"","sources":["../../../../src/services/paymaster/FailedPaymasters.ts"],"names":[],"mappings":";AAAA,+BAA+B;;;;AAE/B;;GAEG;AACH,mCAAiC;AAEjC,0GAAuE;AACvE,gDAA2E;AAI3E,yEAAyE;AACzE,MAAa,gBAAgB;IAC3B,oBAAoB,GAAa,EAAE,CAAA;IAEnC,yBAAyB,GAIrB,EAAE,CAAA;IAEN,oBAAoB,CAAC,EAAU;QAC7B,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;IACpC,CAAC;IAED,oBAAoB,CAAC,EAAU;QAC7B,OAAO,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAA;IAC/C,CAAC;IAED,KAAK,CAAC,oBAAoB,CAAC,QAAqB,EAAE,OAAgB;QAChE,IAAI,gBAAgB,GAAG,EAAE,CAAA;QACzB,IAAI,CAAC;YACH,MAAM,EAAE,GAAG,IAAI,iBAAQ,CAAC,4BAAmB,EAAE,yBAAa,EAAE,QAAQ,CAAC,CAAA;YACrE,gBAAgB,GAAG,MAAM,EAAE,CAAC,SAAS,CAAC,yBAAgB,CAAC,CAAA;QACzD,CAAC;QAAC,OAAO,CAAC,EAAE,CAAC;YACX,OAAO,CAAC,GAAG,CAAC,iDAAiD,CAAC,CAAA;YAC9D,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;QAClB,CAAC;QAED,IAAI,CAAC,yBAAyB,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,GAAG;YACxD,eAAe,EAAE,gBAAgB;SAClC,CAAA;IACH,CAAC;IAED,oBAAoB,CAAC,OAAgB;QACnC,OAAO,CAAC,CAAC,IAAI,CAAC,yBAAyB,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAA;IAClE,CAAC;IAED,uBAAuB,CAAC,OAAgB;QACtC,OAAO,IAAI,CAAC,yBAAyB,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAA;IAChE,CAAC;CACF;AAvCD,4CAuCC;AAEY,QAAA,gBAAgB,GAAG,IAAI,gBAAgB,EAAE,CAAA","sourcesContent":["/* eslint-disable no-console */\n\n/*\n * a singleton for recording failed paymaster requests\n */\nimport { Contract } from 'ethers'\n\nimport entryPointAbi from '../../../contracts/compiled/EntryPoint.json'\nimport { AMBIRE_PAYMASTER, ERC_4337_ENTRYPOINT } from '../../consts/deploy'\nimport { Network } from '../../interfaces/network'\nimport { RPCProvider } from '../../interfaces/provider'\n\n// so the app can fallback to a standard Paymaster if a sponsorship fails\nexport class FailedPaymasters {\n  failedSponsorshipIds: number[] = []\n\n  insufficientFundsNetworks: {\n    [chainId: number]: {\n      lastSeenBalance: bigint\n    }\n  } = {}\n\n  addFailedSponsorship(id: number) {\n    this.failedSponsorshipIds.push(id)\n  }\n\n  hasFailedSponsorship(id: number): boolean {\n    return this.failedSponsorshipIds.includes(id)\n  }\n\n  async addInsufficientFunds(provider: RPCProvider, network: Network) {\n    let paymasterBalance = 0n\n    try {\n      const ep = new Contract(ERC_4337_ENTRYPOINT, entryPointAbi, provider)\n      paymasterBalance = await ep.balanceOf(AMBIRE_PAYMASTER)\n    } catch (e) {\n      console.log('failed to retrieve the balance of the paymaster')\n      console.error(e)\n    }\n\n    this.insufficientFundsNetworks[Number(network.chainId)] = {\n      lastSeenBalance: paymasterBalance\n    }\n  }\n\n  hasInsufficientFunds(network: Network) {\n    return !!this.insufficientFundsNetworks[Number(network.chainId)]\n  }\n\n  removeInsufficientFunds(network: Network) {\n    delete this.insufficientFundsNetworks[Number(network.chainId)]\n  }\n}\n\nexport const failedPaymasters = new FailedPaymasters()\n"]}