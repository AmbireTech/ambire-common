{"version":3,"file":"main.js","sourceRoot":"","sources":["../../../../src/libs/main/main.ts"],"names":[],"mappings":"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","sourcesContent":["import { AccountOpAction, Action } from '../../controllers/actions/actions'\nimport { Account, AccountId } from '../../interfaces/account'\nimport { DappProviderRequest } from '../../interfaces/dapp'\nimport { Network, NetworkId } from '../../interfaces/network'\nimport { Calls, DappUserRequest, SignUserRequest, UserRequest } from '../../interfaces/userRequest'\nimport generateSpoofSig from '../../utils/generateSpoofSig'\nimport { isSmartAccount } from '../account/account'\nimport { AccountOp } from '../accountOp/accountOp'\nimport { Call } from '../accountOp/types'\nimport { getAccountOpsByNetwork } from '../actions/actions'\nimport { adjustEntryPointAuthorization } from '../signMessage/signMessage'\n\nexport const batchCallsFromUserRequests = ({\n  accountAddr,\n  networkId,\n  userRequests\n}: {\n  accountAddr: AccountId\n  networkId: NetworkId\n  userRequests: UserRequest[]\n}): Call[] => {\n  return (userRequests.filter((r) => r.action.kind === 'calls') as SignUserRequest[]).reduce(\n    (uCalls: Call[], req) => {\n      if (req.meta.networkId === networkId && req.meta.accountAddr === accountAddr) {\n        const { calls } = req.action as Calls\n        calls.forEach((call) => uCalls.push({ ...call, fromUserRequestId: req.id }))\n      }\n      return uCalls\n    },\n    []\n  )\n}\n\nexport const ACCOUNT_SWITCH_USER_REQUEST = 'ACCOUNT_SWITCH_USER_REQUEST'\n\nexport const buildSwitchAccountUserRequest = ({\n  nextUserRequest,\n  selectedAccountAddr,\n  networkId,\n  session,\n  dappPromise\n}: {\n  nextUserRequest: UserRequest\n  selectedAccountAddr: string\n  networkId: Network['id']\n  session: DappProviderRequest['session']\n  dappPromise: DappUserRequest['dappPromise']\n}): UserRequest => {\n  return {\n    id: ACCOUNT_SWITCH_USER_REQUEST,\n    action: {\n      kind: 'switchAccount',\n      params: {\n        accountAddr: selectedAccountAddr,\n        switchToAccountAddr: nextUserRequest.meta.accountAddr,\n        nextRequestType: nextUserRequest.action.kind,\n        networkId\n      }\n    },\n    session,\n    meta: {\n      isSignAction: false\n    },\n    dappPromise: {\n      ...dappPromise,\n      resolve: () => {}\n    }\n  }\n}\n\nexport const makeSmartAccountOpAction = ({\n  account,\n  networkId,\n  nonce,\n  actionsQueue,\n  userRequests,\n  entryPointAuthorizationSignature\n}: {\n  account: Account\n  networkId: string\n  nonce: bigint | null\n  actionsQueue: Action[]\n  userRequests: UserRequest[]\n  entryPointAuthorizationSignature?: string\n}): AccountOpAction => {\n  const accountOpAction = actionsQueue.find(\n    (a) => a.type === 'accountOp' && a.id === `${account.addr}-${networkId}`\n  ) as AccountOpAction | undefined\n\n  if (accountOpAction) {\n    accountOpAction.accountOp.calls = batchCallsFromUserRequests({\n      accountAddr: account.addr,\n      networkId,\n      userRequests\n    })\n    // the nonce might have changed during estimation because of\n    // a nonce discrepancy issue. This makes sure we're with the\n    // latest nonce should the user decide to batch\n    accountOpAction.accountOp.nonce = nonce\n    return accountOpAction\n  }\n\n  // find the user request with a paymaster service\n  const userReqWithPaymasterService = userRequests.find(\n    (req) =>\n      req.meta.accountAddr === account.addr &&\n      req.meta.networkId === networkId &&\n      req.meta.paymasterService\n  )\n  const paymasterService = userReqWithPaymasterService\n    ? userReqWithPaymasterService.meta.paymasterService\n    : undefined\n\n  const accountOp: AccountOpAction['accountOp'] = {\n    accountAddr: account.addr,\n    networkId,\n    signingKeyAddr: null,\n    signingKeyType: null,\n    gasLimit: null,\n    gasFeePayment: null,\n    nonce,\n    signature: account.associatedKeys[0] ? generateSpoofSig(account.associatedKeys[0]) : null,\n    accountOpToExecuteBefore: null, // @TODO from pending recoveries\n    calls: batchCallsFromUserRequests({\n      accountAddr: account.addr,\n      networkId,\n      userRequests\n    }),\n    meta: {\n      entryPointAuthorization: entryPointAuthorizationSignature\n        ? adjustEntryPointAuthorization(entryPointAuthorizationSignature)\n        : undefined,\n      paymasterService\n    }\n  }\n\n  return {\n    id: `${account.addr}-${networkId}`, // SA accountOpAction id\n    type: 'accountOp',\n    accountOp\n  }\n}\n\nexport const makeBasicAccountOpAction = ({\n  account,\n  networkId,\n  nonce,\n  userRequest\n}: {\n  account: Account\n  networkId: string\n  nonce: bigint | null\n  userRequest: UserRequest\n}): AccountOpAction => {\n  const { calls } = userRequest.action as Calls\n  const accountOp = {\n    accountAddr: account.addr,\n    networkId,\n    signingKeyAddr: null,\n    signingKeyType: null,\n    gasLimit: null,\n    gasFeePayment: null,\n    nonce,\n    signature: account.associatedKeys[0] ? generateSpoofSig(account.associatedKeys[0]) : null,\n    accountOpToExecuteBefore: null, // @TODO from pending recoveries\n    calls: calls.map((call) => ({ ...call, fromUserRequestId: userRequest.id }))\n  }\n\n  return {\n    // BA accountOpAction id same as the userRequest's id because for each call we have an action\n    id: userRequest.id,\n    type: 'accountOp',\n    accountOp\n  }\n}\n\nexport const getAccountOpsForSimulation = (\n  account: Account,\n  visibleActionsQueue: Action[],\n  network?: Network,\n  op?: AccountOp | null\n): {\n  [key: string]: AccountOp[]\n} => {\n  const isSmart = isSmartAccount(account)\n\n  // if there's an op and the account is either smart or the network supports\n  // state override, we pass it along. We do not support simulation for\n  // EOAs on networks without state override (but it works for SA)\n  if (op && (isSmart || (network && !network.rpcNoStateOverride))) return { [op.networkId]: [op] }\n\n  if (isSmart) return getAccountOpsByNetwork(account.addr, visibleActionsQueue) || {}\n\n  return {}\n}\n"]}