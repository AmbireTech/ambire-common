{"version":3,"file":"main.js","sourceRoot":"","sources":["../../../../src/libs/main/main.ts"],"names":[],"mappings":"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","sourcesContent":["import { AccountOpAction, Action } from '../../controllers/actions/actions'\nimport { Account, AccountId } from '../../interfaces/account'\nimport { DappProviderRequest } from '../../interfaces/dapp'\nimport { Network } from '../../interfaces/network'\nimport { Calls, DappUserRequest, SignUserRequest, UserRequest } from '../../interfaces/userRequest'\nimport generateSpoofSig from '../../utils/generateSpoofSig'\nimport { isSmartAccount } from '../account/account'\nimport { AccountOp } from '../accountOp/accountOp'\nimport { Call } from '../accountOp/types'\n\nexport const batchCallsFromUserRequests = ({\n  accountAddr,\n  chainId,\n  userRequests\n}: {\n  accountAddr: AccountId\n  chainId: bigint\n  userRequests: UserRequest[]\n}): Call[] => {\n  return (userRequests.filter((r) => r.action.kind === 'calls') as SignUserRequest[]).reduce(\n    (uCalls: Call[], req) => {\n      if (req.meta.chainId === chainId && req.meta.accountAddr === accountAddr) {\n        const { calls } = req.action as Calls\n        calls.forEach((call) => uCalls.push({ ...call, fromUserRequestId: req.id }))\n      }\n      return uCalls\n    },\n    []\n  )\n}\n\nexport const ACCOUNT_SWITCH_USER_REQUEST = 'ACCOUNT_SWITCH_USER_REQUEST'\n\nexport const buildSwitchAccountUserRequest = ({\n  nextUserRequest,\n  selectedAccountAddr,\n  session,\n  dappPromise\n}: {\n  nextUserRequest: UserRequest\n  selectedAccountAddr: string\n  session?: DappProviderRequest['session']\n  dappPromise?: DappUserRequest['dappPromise']\n}): UserRequest => {\n  return {\n    id: ACCOUNT_SWITCH_USER_REQUEST,\n    action: {\n      kind: 'switchAccount',\n      params: {\n        accountAddr: selectedAccountAddr,\n        switchToAccountAddr: nextUserRequest.meta.accountAddr,\n        nextRequestType: nextUserRequest.action.kind\n      }\n    },\n    session,\n    meta: {\n      isSignAction: false,\n      accountAddr: selectedAccountAddr,\n      switchToAccountAddr: nextUserRequest.meta.accountAddr,\n      nextRequestType: nextUserRequest.action.kind\n    },\n    dappPromise: dappPromise\n      ? {\n          ...dappPromise,\n          resolve: () => {}\n        }\n      : undefined\n  } as any\n}\n\nexport const makeAccountOpAction = ({\n  account,\n  chainId,\n  nonce,\n  actionsQueue,\n  userRequests\n}: {\n  account: Account\n  chainId: bigint\n  nonce: bigint | null\n  actionsQueue: Action[]\n  userRequests: UserRequest[]\n}): AccountOpAction => {\n  const accountOpAction = actionsQueue.find(\n    (a) => a.type === 'accountOp' && a.id === `${account.addr}-${chainId}`\n  ) as AccountOpAction | undefined\n\n  if (accountOpAction) {\n    accountOpAction.accountOp.calls = batchCallsFromUserRequests({\n      accountAddr: account.addr,\n      chainId,\n      userRequests\n    })\n    // the nonce might have changed during estimation because of\n    // a nonce discrepancy issue. This makes sure we're with the\n    // latest nonce should the user decide to batch\n    accountOpAction.accountOp.nonce = nonce\n    return accountOpAction\n  }\n\n  // find the user request with a paymaster service\n  const userReqWithPaymasterService = userRequests.find(\n    (req) =>\n      req.meta.accountAddr === account.addr &&\n      req.meta.chainId === chainId &&\n      req.meta.paymasterService\n  )\n  const paymasterService = userReqWithPaymasterService\n    ? userReqWithPaymasterService.meta.paymasterService\n    : undefined\n\n  // find the user request with a wallet send calls version if any\n  const userReqWithWalletSendCallsVersion = userRequests.find(\n    (req) =>\n      req.meta.accountAddr === account.addr &&\n      req.meta.chainId === chainId &&\n      req.meta.walletSendCallsVersion\n  )\n  const walletSendCallsVersion = userReqWithWalletSendCallsVersion\n    ? userReqWithWalletSendCallsVersion.meta.walletSendCallsVersion\n    : undefined\n\n  // find the user request with a setDelegation meta property if any\n  const userReqWithDelegation = userRequests.find(\n    (req) =>\n      req.meta.accountAddr === account.addr &&\n      req.meta.chainId === chainId &&\n      'setDelegation' in req.meta\n  )\n  const setDelegation = userReqWithDelegation ? userReqWithDelegation.meta.setDelegation : undefined\n\n  const accountOp: AccountOpAction['accountOp'] = {\n    accountAddr: account.addr,\n    chainId,\n    signingKeyAddr: null,\n    signingKeyType: null,\n    gasLimit: null,\n    gasFeePayment: null,\n    nonce,\n    signature: account.associatedKeys[0] ? generateSpoofSig(account.associatedKeys[0]) : null,\n    accountOpToExecuteBefore: null, // @TODO from pending recoveries\n    calls: batchCallsFromUserRequests({\n      accountAddr: account.addr,\n      chainId,\n      userRequests\n    }),\n    meta: {\n      paymasterService,\n      walletSendCallsVersion,\n      setDelegation\n    }\n  }\n\n  return {\n    id: `${account.addr}-${chainId}`, // SA accountOpAction id\n    type: 'accountOp',\n    accountOp\n  }\n}\n\nexport const getAccountOpsForSimulation = (\n  account: Account,\n  visibleActionsQueue: Action[],\n  networks: Network[]\n): { [key: string]: AccountOp[] } | undefined => {\n  const isSmart = isSmartAccount(account)\n  const accountOps = (\n    visibleActionsQueue.filter((a) => a.type === 'accountOp') as AccountOpAction[]\n  )\n    .map((a) => a.accountOp)\n    .filter((op) => {\n      if (op.accountAddr !== account.addr) return false\n\n      const networkData = networks.find((n) => n.chainId === op.chainId)\n\n      // We cannot simulate if the account isn't smart and the network's RPC doesn't support\n      // state override\n      return isSmart || (networkData && !networkData.rpcNoStateOverride)\n    })\n\n  if (!accountOps.length) return undefined\n\n  return accountOps.reduce((acc: any, accountOp) => {\n    const { chainId } = accountOp\n\n    if (!acc[chainId.toString()]) acc[chainId.toString()] = []\n\n    acc[chainId.toString()].push(accountOp)\n    return acc\n  }, {})\n}\n"]}