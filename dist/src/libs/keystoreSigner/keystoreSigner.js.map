{"version":3,"file":"keystoreSigner.js","sourceRoot":"","sources":["../../../../src/libs/keystoreSigner/keystoreSigner.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable new-cap */\nimport {\n  concat,\n  encodeRlp,\n  getBytes,\n  hexlify,\n  isHexString,\n  keccak256,\n  toBeHex,\n  TransactionRequest,\n  Wallet\n} from 'ethers'\nimport { ecdsaSign } from 'secp256k1'\n\nimport { EIP7702Auth } from '../../consts/7702'\nimport { Hex } from '../../interfaces/hex'\nimport { Key, KeystoreSignerInterface, TxnRequest } from '../../interfaces/keystore'\nimport { EIP7702Signature } from '../../interfaces/signatures'\nimport { TypedMessage } from '../../interfaces/userRequest'\n\nexport class KeystoreSigner implements KeystoreSignerInterface {\n  key: Key\n\n  #signer: Wallet\n\n  // use this key only for sign7702\n  #authorizationPrivkey?: Hex\n\n  constructor(_key: Key, _privKey?: string) {\n    if (!_key) throw new Error('keystoreSigner: no key provided in constructor')\n    if (!_privKey)\n      throw new Error('keystoreSigner: no decrypted private key provided in constructor')\n\n    this.key = _key\n    this.#signer = new Wallet(_privKey)\n\n    if (_privKey) {\n      this.#authorizationPrivkey = isHexString(_privKey) ? _privKey : `0x${_privKey}`\n    }\n  }\n\n  async signRawTransaction(params: TransactionRequest) {\n    const sig = await this.#signer.signTransaction(params)\n\n    return sig\n  }\n\n  async signTypedData(typedMessage: TypedMessage) {\n    // remove EIP712Domain because otherwise signTypedData throws: ambiguous primary types or unused types\n    if (typedMessage.types.EIP712Domain) {\n      // eslint-disable-next-line no-param-reassign\n      delete typedMessage.types.EIP712Domain\n    }\n    // @ts-ignore\n    const sig = await this.#signer.signTypedData(\n      typedMessage.domain,\n      typedMessage.types,\n      typedMessage.message\n    )\n\n    return sig\n  }\n\n  async signMessage(hex: string): Promise<string> {\n    // interface implementation expects a hex number\n    // if something different is passed, we have two options:\n    // * throw an error\n    // * convert to hex\n    // converting to hex is not so straightforward, though\n    // you might do ethers.toUtf8Bytes() if it's a string\n    // or you might do ethers.toBeHex() for a number with a specific length\n    // or you might do ethers.hexlify() if you don't care\n    // therefore, it's the job of the client to think what he wants\n    // to pass. Throwing an error here might save debuging hours\n    if (!isHexString(hex)) {\n      throw new Error('Keystore signer, signMessage: passed value is not a hex')\n    }\n\n    return this.#signer.signMessage(getBytes(hex))\n  }\n\n  async sendTransaction(transaction: TransactionRequest) {\n    const transactionRes = await this.#signer.sendTransaction(transaction)\n\n    return transactionRes\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  sign7702(hex: string): EIP7702Signature {\n    if (!this.#authorizationPrivkey) throw new Error('no key to perform sign')\n\n    const data = ecdsaSign(getBytes(hex), getBytes(this.#authorizationPrivkey))\n    const signature = hexlify(data.signature)\n    return {\n      yParity: toBeHex(data.recid, 1) as Hex,\n      r: signature.substring(0, 66) as Hex,\n      s: `0x${signature.substring(66)}`\n    }\n  }\n\n  signTransactionTypeFour(txnRequest: TxnRequest, eip7702Auth: EIP7702Auth): Hex {\n    if (!this.#authorizationPrivkey) throw new Error('no key to perform sign')\n\n    const maxPriorityFeePerGas = txnRequest.maxPriorityFeePerGas ?? txnRequest.gasPrice\n    const maxFeePerGas = txnRequest.maxFeePerGas ?? txnRequest.gasPrice\n\n    const txnTypeFourHash = keccak256(\n      concat([\n        '0x04',\n        encodeRlp([\n          toBeHex(txnRequest.chainId),\n          txnRequest.nonce !== 0 ? toBeHex(txnRequest.nonce) : '0x',\n          maxPriorityFeePerGas ? toBeHex(maxPriorityFeePerGas) : '0x',\n          maxFeePerGas ? toBeHex(maxFeePerGas) : '0x',\n          txnRequest.gasLimit ? toBeHex(txnRequest.gasLimit) : '0x',\n          txnRequest.to,\n          txnRequest.value ? toBeHex(txnRequest.value) : '0x',\n          txnRequest.data,\n          [],\n          [\n            [\n              eip7702Auth.chainId,\n              eip7702Auth.address,\n              eip7702Auth.nonce === '0x00' ? '0x' : eip7702Auth.nonce,\n              eip7702Auth.yParity === '0x00' ? '0x' : eip7702Auth.yParity,\n              // strip leading zeros\n              toBeHex(BigInt(eip7702Auth.r)),\n              toBeHex(BigInt(eip7702Auth.s))\n            ]\n          ]\n        ])\n      ])\n    ) as Hex\n    const data = ecdsaSign(getBytes(txnTypeFourHash), getBytes(this.#authorizationPrivkey))\n    const signature = hexlify(data.signature)\n    const txnTypeFourSignature = {\n      yParity: toBeHex(data.recid, 1) as Hex,\n      r: signature.substring(0, 66) as Hex,\n      s: `0x${signature.substring(66)}`\n    }\n\n    return concat([\n      '0x04',\n      encodeRlp([\n        toBeHex(txnRequest.chainId),\n        txnRequest.nonce !== 0 ? toBeHex(txnRequest.nonce) : '0x',\n        maxPriorityFeePerGas ? toBeHex(maxPriorityFeePerGas) : '0x',\n        maxFeePerGas ? toBeHex(maxFeePerGas) : '0x',\n        txnRequest.gasLimit ? toBeHex(txnRequest.gasLimit) : '0x',\n        txnRequest.to,\n        txnRequest.value ? toBeHex(txnRequest.value) : '0x',\n        txnRequest.data,\n        [],\n        [\n          [\n            eip7702Auth.chainId,\n            eip7702Auth.address,\n            eip7702Auth.nonce === '0x00' ? '0x' : eip7702Auth.nonce,\n            eip7702Auth.yParity === '0x00' ? '0x' : eip7702Auth.yParity,\n            // strip leading zeros\n            toBeHex(BigInt(eip7702Auth.r)),\n            toBeHex(BigInt(eip7702Auth.s))\n          ]\n        ],\n        txnTypeFourSignature.yParity === '0x00' ? '0x' : txnTypeFourSignature.yParity,\n        // strip leading zeros\n        toBeHex(BigInt(txnTypeFourSignature.r)),\n        toBeHex(BigInt(txnTypeFourSignature.s))\n      ])\n    ]) as Hex\n  }\n}\n"]}