{"version":3,"file":"emailVault.js","sourceRoot":"","sources":["../../../../src/libs/emailVault/emailVault.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  EmailVaultData,\n  EmailVaultOperation,\n  EmailVaultSecret,\n  RecoveryKey\n} from '../../interfaces/emailVault'\nimport { Fetch } from '../../interfaces/fetch'\nimport { relayerCall } from '../relayerCall/relayerCall'\n\nexport interface Secret {\n  key: String\n  type: String\n}\n\n// NOTE: its a quick fix. Will be updated in other branch\nexport interface EmailVaultInfo {\n  email: String\n  recoveryKey: String\n  availableSecrets: Secret[]\n  availableAccounts: any\n}\n\nexport class EmailVault {\n  private callRelayer: Function\n\n  constructor(fetch: Fetch, relayerUrl: string) {\n    this.callRelayer = relayerCall.bind({ url: relayerUrl, fetch })\n  }\n\n  async getRecoveryKeyAddress(email: String, authKey: String): Promise<RecoveryKey> {\n    return (await this.callRelayer(`/email-vault/get-recovery-key/${email}/${authKey}`)).data\n  }\n\n  async getSessionKey(email: String, authKey: String): Promise<string> {\n    return (await this.callRelayer(`/email-vault/get-session-key/${email}/${authKey}`))?.data\n      ?.sessionKey\n  }\n\n  async getEmailVaultInfo(email: String, authKey: String): Promise<EmailVaultData | null> {\n    const result = await this.callRelayer(`/email-vault/email-vault-info/${email}/${authKey}`).then(\n      (res: any) => res.data\n    )\n\n    return {\n      ...result,\n      availableAccounts: Object.fromEntries(\n        result.availableAccounts.map((acc: any) => [acc.addr, acc])\n      ),\n      availableSecrets: Object.fromEntries(\n        result.availableSecrets.map((secret: any) => [secret.key, secret])\n      )\n    }\n  }\n\n  async operations(\n    email: String,\n    authKey: String,\n    operations: EmailVaultOperation[]\n  ): Promise<EmailVaultOperation[] | null> {\n    return (\n      await this.callRelayer(`/email-vault/post-operations/${email}/${authKey}`, 'POST', {\n        operations\n      })\n    ).data\n  }\n\n  async getOperations(\n    email: String,\n    authKey: String,\n    operations: EmailVaultOperation[]\n  ): Promise<EmailVaultOperation[] | null> {\n    return (\n      await this.callRelayer(`/email-vault/get-operations/${email}/${authKey}`, 'POST', {\n        operations\n      })\n    ).data\n  }\n\n  async addKeyStoreSecret(\n    email: String,\n    authKey: String,\n    keyStoreUid: String,\n    secret: String\n  ): Promise<Boolean> {\n    return (\n      await this.callRelayer(`/email-vault/add-key-store-secret/${email}/${authKey}`, 'POST', {\n        secret,\n        uid: keyStoreUid\n      })\n    ).success\n  }\n\n  async retrieveKeyStoreSecret(\n    email: String,\n    authKey: String,\n    keyStoreUid: String\n  ): Promise<EmailVaultSecret> {\n    return (\n      await this.callRelayer(\n        `/email-vault/retrieve-key-store-secret/${email}/${keyStoreUid}/${authKey}`\n      )\n    ).data\n  }\n\n  async addKeyBackup(\n    email: String,\n    authKey: String,\n    keyAddress: String,\n    privateKeyEncryptedJSON: String\n  ): Promise<Boolean> {\n    return (\n      await this.callRelayer(`/email-vault/add-key-backup/${email}/${authKey}`, 'POST', {\n        keyAddress,\n        encryptedBackup: privateKeyEncryptedJSON\n      })\n    ).success\n  }\n\n  async retrieveKeyBackup(\n    email: String,\n    authKey: String,\n    keyAddress: String\n  ): Promise<EmailVaultSecret> {\n    return (\n      await this.callRelayer(`/email-vault/retrieve-key-backup/${email}/${keyAddress}/${authKey}`)\n    ).data\n  }\n\n  async getInfo(email: String, authKey: String): Promise<EmailVaultInfo> {\n    return (await this.callRelayer(`/email-vault/email-vault-info/${email}/${authKey}`)).data\n  }\n}\n"]}