{"version":3,"file":"getPublicKey.js","sourceRoot":"","sources":["../../../../src/libs/dkim/getPublicKey.ts"],"names":[],"mappings":";;;AAAA;;EAEE;AACF,MAAM,EAAE,SAAS,EAAE,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AACtC,MAAM,MAAM,GAAG,SAAS,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC,CAAC;AAEtD,SAAwB,YAAY,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAO;IAC5D,OAAO,MAAM,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAC,GAAQ,EAAE,EAAE;QAChD,MAAM,SAAS,GACb,8BAA8B;YAC9B,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC;YAC1B,4BAA4B,CAAC;QAE/B,OAAO;YACL,MAAM;YACN,QAAQ;YACR,SAAS;SACV,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC;AAbD,+BAaC;AAAA,CAAC;AAEF;;;;;;GAMG;AACI,KAAK,UAAU,iBAAiB,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAO;IAC/D,IAAI;QACF,MAAM,OAAO,GAAG,MAAM,YAAY,CAAC,EAAC,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAC,CAAC,CAAA;QAChE,OAAO,OAAO,CAAA;KACf;IAAC,OAAO,CAAC,EAAE;QACV,OAAO,IAAI,CAAA;KACZ;AACH,CAAC;AAPD,8CAOC","sourcesContent":["/*\n  fetch domainkey record (nodejs)\n*/\nconst { promisify } = require(\"util\");\nconst getKey = promisify(require(\"dkim/lib/get-key\"));\n\nexport default function getPublicKey({ domain, selector }: any) {\n  return getKey(domain, selector).then((key: any) => {\n    const publicKey =\n      \"-----BEGIN PUBLIC KEY-----\\n\" +\n      key.key.toString(\"base64\") +\n      \"\\n-----END PUBLIC KEY-----\";\n\n    return {\n      domain,\n      selector,\n      publicKey\n    };\n  });\n};\n\n/**\n * A wrapper to help getPublicKey reverts when a pub key is not found.\n * We don't want that\n *\n * @param {domain: string, selector: string}\n * @returns base64encoded | null\n */\nexport async function getPublicKeyIfAny({ domain, selector }: any) {\n  try {\n    const dkimKey = await getPublicKey({domain, selector: selector})\n    return dkimKey\n  } catch (e) {\n    return null\n  }\n}"]}