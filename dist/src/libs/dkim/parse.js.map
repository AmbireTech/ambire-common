{"version":3,"file":"parse.js","sourceRoot":"","sources":["../../../../src/libs/dkim/parse.ts"],"names":[],"mappings":"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","sourcesContent":["import isDKIM from \"./isDKIM\";\n\n/*\n  parse email\n  (cross-platform)\n*/\nconst Signature = require(\"dkim-signature\");\nconst processHeader = require(\"dkim/lib/process-header\");\nconst processBody = require(\"dkim/lib/process-body\");\n\nconst emailToHeaderAndBody = (email: any) => {\n  const boundary = email.indexOf(\"\\r\\n\\r\\n\");\n  if (boundary === -1) {\n    throw Error(\"no header boundary found\");\n  }\n\n  const header = email.slice(0, boundary);\n  const body = email.slice(boundary + 4);\n\n  return {\n    boundary,\n    header,\n    body\n  };\n};\n\nconst getDkimEntry = (dkim: any) => {\n  const [name, ...rest] = dkim.split(\":\");\n\n  return {\n    name,\n    value: rest.join(\":\").slice(1)\n  };\n};\n\nconst getDkims = (header: any) => {\n  return header\n    .split(/\\r\\n(?=[^\\x20\\x09]|$)/g)\n    .map((h: any, i: any, allHeaders: any) => {\n      if (isDKIM(h)) {\n        // remove DKIM headers\n        const headers = allHeaders.filter((v: any) => !isDKIM(v));\n        // add one DKIM header\n        headers.unshift(h);\n\n        return {\n          entry: getDkimEntry(h),\n          headers\n        };\n      }\n\n      return undefined;\n    })\n    .filter((v: any) => !!v);\n};\n\nexport function parse(email: any) {\n  const { header, body } = emailToHeaderAndBody(email);\n\n  const dkims = getDkims(header).map((dkim: any) => {\n    // a new field called dara has been introduced to DKIM signature\n    // standarts. We add it manually as the lib does not support it\n    if (dkim.entry.value.indexOf('dara') !== -1) {\n      Signature.fields.push('dara')\n      Signature.keys.push('dara')\n    }\n\n    const signature = Signature.parse(dkim.entry.value);\n\n    const sigBody =\n      signature.length != null ? body.slice(0, signature.length) : body;\n\n    const processedBody = processBody(\n      sigBody,\n      signature.canonical.split(\"/\").pop()\n    );\n\n    const processedHeader = processHeader(\n      dkim.headers,\n      signature.headers,\n      signature.canonical.split(\"/\").shift()\n    );\n\n    const algorithm = signature.algorithm.toUpperCase();\n\n    return {\n      ...dkim,\n      signature,\n      processedBody,\n      processedHeader,\n      algorithm\n    };\n  });\n\n  return {\n    header,\n    body,\n    dkims\n  };\n};"]}