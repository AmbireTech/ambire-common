{"version":3,"file":"recovery.js","sourceRoot":"","sources":["../../../../src/libs/dkim/recovery.ts"],"names":[],"mappings":";;;AAuCA,oCAKC;AA5CD,mCAAwD;AAExD,iDAAiD;AACpC,QAAA,mBAAmB,GAAG,4CAA4C,CAAA;AAElE,QAAA,iBAAiB,GAAG;IAC/B,OAAO,EAAE,qBAAqB;IAC9B,sBAAsB,EAAE,IAAI;IAC5B,oBAAoB,EAAE,OAAO,EAAE,SAAS;IACxC,sBAAsB,EAAE,OAAO,EAAE,SAAS;IAC1C,kBAAkB,EAAE,IAAI;IACxB,oBAAoB,EAAE,IAAI;IAC1B,kBAAkB,EAAE,OAAO,CAAC,SAAS;CACtC,CAAA;AAEY,QAAA,cAAc,GAAG;IAC5B,WAAW,EAAE,UAAU;CACxB,CAAA;AAEY,QAAA,uBAAuB,GAAG;IACrC,QAAQ;IACR,WAAW;IACX,WAAW;IACX,eAAe;IACf,eAAe;IACf,SAAS;IACT,IAAI;IACJ,SAAS;IACT,MAAM;CACP,CAAA;AAED;;;;;;;GAOG;AACH,SAAgB,YAAY,CAAC,aAAqB,EAAE,aAAkB;IACpE,MAAM,QAAQ,GAAG,IAAI,iBAAQ,EAAE,CAAA;IAC/B,MAAM,IAAI,GAAG,IAAA,kBAAS,EAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,SAAS,EAAE,OAAO,CAAC,EAAE,CAAC,aAAa,EAAE,aAAa,CAAC,CAAC,CAAC,CAAA;IAC7F,MAAM,SAAS,GAAG,IAAA,mBAAU,EAAC,KAAK,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,GAAG,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAA;IAC9E,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,CAAA;AAC5B,CAAC","sourcesContent":["import { AbiCoder, getAddress, keccak256 } from 'ethers'\n\n// TODO: change to original address once deployed\nexport const DKIM_VALIDATOR_ADDR = '0x0000000000000000000000000000000000000000'\n\nexport const RECOVERY_DEFAULTS = {\n  emailTo: 'recovery@ambire.com',\n  acceptUnknownSelectors: true,\n  waitUntilAcceptAdded: 138240n, // 4 days\n  waitUntilAcceptRemoved: 138240n, // 4 days\n  acceptEmptyDKIMSig: true,\n  acceptEmptySecondSig: true,\n  onlyOneSigTimelock: 259200n // 3 days\n}\n\nexport const knownSelectors = {\n  'gmail.com': '20230601'\n}\n\nexport const frequentlyUsedSelectors = [\n  'Google',\n  'selector1',\n  'selector2',\n  'everlytickey1',\n  'everlytickey2',\n  'eversrv',\n  'k1',\n  'mxvault',\n  'dkim'\n]\n\n/**\n * Get the signerKey that goes as the address in privileges\n * and its accompanying priv hash for the email recovery\n *\n * @param validatorAddr string\n * @param validatorData BytesLike\n * @returns {Address, bytes32}\n */\nexport function getSignerKey(validatorAddr: string, validatorData: any) {\n  const abiCoder = new AbiCoder()\n  const hash = keccak256(abiCoder.encode(['address', 'bytes'], [validatorAddr, validatorData]))\n  const signerKey = getAddress(`0x${hash.slice(hash.length - 40, hash.length)}`)\n  return { signerKey, hash }\n}\n"]}