{"version":3,"file":"debugTraceCall.js","sourceRoot":"","sources":["../../../../src/libs/tracer/debugTraceCall.ts"],"names":[],"mappings":"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","sourcesContent":["import { getAddress, Interface, JsonRpcProvider, toQuantity } from 'ethers'\n\nimport AmbireAccount from '../../../contracts/compiled/AmbireAccount.json'\nimport AmbireFactory from '../../../contracts/compiled/AmbireFactory.json'\nimport BalanceGetter from '../../../contracts/compiled/BalanceGetter.json'\nimport NFTGetter from '../../../contracts/compiled/NFTGetter.json'\nimport { DEPLOYLESS_SIMULATION_FROM } from '../../consts/deploy'\nimport { EOA_SIMULATION_NONCE } from '../../consts/deployless'\nimport { Account, AccountOnchainState } from '../../interfaces/account'\nimport { getAccountDeployParams, getSpoof, isSmartAccount } from '../account/account'\nimport { AccountOp, callToTuple, getSignableCalls } from '../accountOp/accountOp'\nimport { DeploylessMode, fromDescriptor } from '../deployless/deployless'\nimport { GasRecommendation } from '../gasPrice/gasPrice'\nimport { getDeploylessOpts } from '../portfolio/getOnchainBalances'\n\nconst NFT_COLLECTION_LIMIT = 100\n// if using EOA, use the first and only call of the account op\n// if it's SA, make the data execute or deployAndExecute,\n// set the spoof+addr and pass all the calls\nfunction getFunctionParams(account: Account, op: AccountOp, accountState: AccountOnchainState) {\n  if (!account.creation) {\n    const call = op.calls[0]\n    return {\n      to: call.to,\n      value: toQuantity(call.value.toString()),\n      data: call.data,\n      from: op.accountAddr\n    }\n  }\n\n  const saAbi = new Interface(AmbireAccount.abi)\n  const factoryAbi = new Interface(AmbireFactory.abi)\n  const callData = accountState.isDeployed\n    ? saAbi.encodeFunctionData('execute', [getSignableCalls(op), getSpoof(account)])\n    : factoryAbi.encodeFunctionData('deployAndExecute', [\n        account.creation.bytecode,\n        account.creation.salt,\n        getSignableCalls(op),\n        getSpoof(account)\n      ])\n\n  return {\n    from: DEPLOYLESS_SIMULATION_FROM,\n    to: accountState.isDeployed ? account.addr : account.creation.factoryAddr,\n    value: 0,\n    data: callData\n  }\n}\n\nexport async function debugTraceCall(\n  account: Account,\n  op: AccountOp,\n  provider: JsonRpcProvider,\n  accountState: AccountOnchainState,\n  gasUsed: bigint,\n  gasPrices: GasRecommendation[],\n  supportsStateOverride: boolean,\n  overrideData?: any\n): Promise<{ tokens: string[]; nfts: [string, bigint[]][] }> {\n  const opts = {\n    blockTag: 'latest',\n    from: DEPLOYLESS_SIMULATION_FROM,\n    mode: DeploylessMode.ProxyContract,\n    isEOA: !isSmartAccount(account)\n  }\n  const deploylessOpts = getDeploylessOpts(account.addr, supportsStateOverride, opts)\n  const [factory, factoryCalldata] = getAccountDeployParams(account)\n  const simulationOps = [\n    [isSmartAccount(account) ? op.nonce : BigInt(EOA_SIMULATION_NONCE), op.calls.map(callToTuple)]\n  ]\n  const fast = gasPrices.find((gas: any) => gas.name === 'fast')\n  if (!fast) return { tokens: [], nfts: [] }\n\n  const gasPrice =\n    'gasPrice' in fast ? fast.gasPrice : fast.baseFeePerGas + fast.maxPriorityFeePerGas\n\n  const params = getFunctionParams(account, op, accountState)\n  const results: ({ erc: 20; address: string } | { erc: 721; address: string; tokenId: string })[] =\n    await provider.send('debug_traceCall', [\n      {\n        to: params.to,\n        value: toQuantity(params.value.toString()),\n        data: params.data,\n        from: params.from,\n        gasPrice: toQuantity(gasPrice.toString()),\n        gas: toQuantity(gasUsed.toString())\n      },\n      'latest',\n      {\n        tracer: `{\n          discovered: [],\n          fault: function (log) {},\n          step: function (log) {\n            const found = this.discovered.map(ob => ob.address)\n            if (log.contract && log.contract.getAddress() && found.indexOf(toHex(log.contract.getAddress())) === -1) {\n              this.discovered.push({\n                erc: 20,\n                address: toHex(log.contract.getAddress())\n              })\n            }\n            if (log.op.toString() === 'LOG4') {\n              this.discovered.push({\n                erc: 721,\n                address: toHex(log.contract.getAddress()),\n                tokenId: '0x' + log.stack.peek(5).toString(16)\n              })\n            }\n          },\n          result: function () {\n            return this.discovered\n          }\n        }`,\n\n        enableMemory: false,\n        enableReturnData: true,\n        disableStorage: true,\n        stateOverrides: supportsStateOverride\n          ? {\n              [params.from]: {\n                balance: '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n              },\n              ...overrideData\n            }\n          : {}\n      }\n    ])\n\n  const foundTokens = [\n    ...new Set(results.filter((i) => i?.erc === 20).map((i) => getAddress(i.address)))\n  ]\n  const foundNftTransfersObject = results\n    .filter((i) => i?.erc === 721)\n    .reduce((res: { [address: string]: Set<bigint> }, i: any) => {\n      if (!res[i?.address]) res[i?.address] = new Set()\n      res[i.address].add(i.tokenId)\n      return res\n    }, {})\n  const foundNftTransfers: [string, bigint[]][] = Object.entries(foundNftTransfersObject).map(\n    ([address, id]) => [getAddress(address), Array.from(id).map((i) => BigInt(i))]\n  )\n\n  // we set the 3rd param to \"true\" as we don't need state override\n  const deploylessTokens = fromDescriptor(provider, BalanceGetter, true)\n  const deploylessNfts = fromDescriptor(provider, NFTGetter, true)\n\n  const getNftsPromise = deploylessNfts.call(\n    'simulateAndGetAllNFTs',\n    [\n      op.accountAddr,\n      account.associatedKeys,\n      foundNftTransfers.map(([address]) => address),\n      foundNftTransfers.map(([, x]) => x),\n      NFT_COLLECTION_LIMIT,\n      factory,\n      factoryCalldata,\n      simulationOps\n    ],\n    deploylessOpts\n  )\n\n  const [[tokensWithErr], [before, after, , , , deltaAddressesMapping]] = await Promise.all([\n    deploylessTokens.call('getBalances', [op.accountAddr, foundTokens], opts),\n    getNftsPromise\n  ])\n\n  const beforeNftCollections = before[0]\n  const afterNftCollections = after[0]\n  return {\n    tokens: foundTokens.filter((addr, i) => tokensWithErr[i].error === '0x'),\n    nfts: foundNftTransfers.filter((nft, i) => {\n      if (beforeNftCollections[i][3] === '0x') return true\n      const foundAfterToken = afterNftCollections.find(\n        (t: any, j: number) =>\n          deltaAddressesMapping[j].toLowerCase() === foundNftTransfers[i][0].toLowerCase()\n      )\n      if (!foundAfterToken || !foundAfterToken[0]) return false\n\n      return foundAfterToken[0][3] === '0x'\n    })\n  }\n}\n"]}