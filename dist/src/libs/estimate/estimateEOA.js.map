{"version":3,"file":"estimateEOA.js","sourceRoot":"","sources":["../../../../src/libs/estimate/estimateEOA.ts"],"names":[],"mappings":"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","sourcesContent":["import { AbiCoder, JsonRpcProvider, Provider, ZeroAddress } from 'ethers'\n\nimport Estimation from '../../../contracts/compiled/Estimation.json'\nimport { FEE_COLLECTOR } from '../../consts/addresses'\nimport { OPTIMISTIC_ORACLE } from '../../consts/deploy'\nimport { EOA_SIMULATION_NONCE } from '../../consts/deployless'\nimport { Account, AccountStates } from '../../interfaces/account'\nimport { Network } from '../../interfaces/network'\nimport { getEoaSimulationStateOverride } from '../../utils/simulationStateOverride'\nimport { AccountOp, toSingletonCall } from '../accountOp/accountOp'\nimport { DeploylessMode, fromDescriptor } from '../deployless/deployless'\nimport { getHumanReadableEstimationError } from '../errorHumanizer'\nimport { TokenResult } from '../portfolio'\nimport { estimationErrorFormatted } from './errors'\nimport { estimateWithRetries } from './estimateWithRetries'\nimport { EstimateResult } from './interfaces'\n\nconst abiCoder = new AbiCoder()\n\nexport async function estimateEOA(\n  account: Account,\n  op: AccountOp,\n  accountStates: AccountStates,\n  network: Network,\n  provider: JsonRpcProvider | Provider,\n  feeTokens: TokenResult[],\n  blockFrom: string,\n  blockTag: string | number,\n  errorCallback: Function\n): Promise<EstimateResult> {\n  if (op.calls.length !== 1)\n    return estimationErrorFormatted(\n      new Error(\n        \"Trying to make multiple calls with an EOA account which shouldn't happen. Please try again or contact support.\"\n      )\n    )\n\n  const deploylessEstimator = fromDescriptor(provider, Estimation, !network.rpcNoStateOverride)\n  const optimisticOracle = network.isOptimistic ? OPTIMISTIC_ORACLE : ZeroAddress\n  const call = op.calls[0]\n  // TODO: try to remove this call\n  const nonce = await provider.getTransactionCount(account.addr)\n  const accountState = accountStates[op.accountAddr][op.chainId.toString()]\n  const encodedCallData = abiCoder.encode(\n    [\n      'bytes', // data\n      'address', // to\n      'address', // from\n      'uint256', // gasPrice\n      'uint256', // type\n      'uint256', // nonce\n      'uint256' // gasLimit\n    ],\n    [call.data, call.to ?? ZeroAddress, account.addr, 100000000, 2, nonce, 100000]\n  )\n  const initializeRequests = () => [\n    provider\n      .estimateGas({\n        from: account.addr,\n        to: call.to ?? undefined,\n        value: call.value,\n        data: call.data,\n        nonce\n      })\n      .catch(getHumanReadableEstimationError),\n    !network.rpcNoStateOverride\n      ? deploylessEstimator\n          .call(\n            'estimateEoa',\n            [\n              account.addr,\n              [account.addr, EOA_SIMULATION_NONCE, op.calls.map(toSingletonCall), '0x'],\n              encodedCallData,\n              [account.addr],\n              FEE_COLLECTOR,\n              optimisticOracle\n            ],\n            {\n              from: blockFrom,\n              blockTag,\n              mode: DeploylessMode.StateOverride,\n              stateToOverride: getEoaSimulationStateOverride(account.addr)\n            }\n          )\n          .catch((e) => {\n            console.log('error calling estimateEoa:', e)\n            return [[0n, [], {}]]\n          })\n      : deploylessEstimator\n          .call('getL1GasEstimation', [encodedCallData, FEE_COLLECTOR, optimisticOracle], {\n            from: blockFrom,\n            blockTag\n          })\n          .catch(getHumanReadableEstimationError)\n  ]\n  const result = await estimateWithRetries(initializeRequests, 'estimation-eoa', errorCallback)\n  const feePaymentOptions = [\n    {\n      paidBy: account.addr,\n      availableAmount: accountState.balance,\n      addedNative: 0n,\n      token: feeTokens.find((token) => token.address === ZeroAddress && !token.flags.onGasTank)!,\n      gasUsed: 21000n\n    }\n  ]\n  if (result instanceof Error) return estimationErrorFormatted(result, { feePaymentOptions })\n  const foundError = Array.isArray(result) ? result.find((res) => res instanceof Error) : null\n  if (foundError instanceof Error)\n    return estimationErrorFormatted(foundError, { feePaymentOptions })\n\n  let gasUsed = 0n\n  if (!network.rpcNoStateOverride) {\n    const [gasUsedEstimateGas, [[gasUsedEstimationSol, feeTokenOutcomes, l1GasEstimation]]] =\n      result as any\n    if (feeTokenOutcomes.length && feeTokenOutcomes[0].length) {\n      feePaymentOptions[0].availableAmount = feeTokenOutcomes[0][1]\n    }\n    if (l1GasEstimation && l1GasEstimation.fee) {\n      feePaymentOptions[0].addedNative = l1GasEstimation.fee\n    }\n\n    // if it's a simple transfer, trust estimateGas as it should be 21K\n    // if it's a contract call, trust whichever is higher\n    if (call.data === '0x') gasUsed = gasUsedEstimateGas\n    else\n      gasUsed =\n        gasUsedEstimateGas > gasUsedEstimationSol ? gasUsedEstimateGas : gasUsedEstimationSol\n  } else {\n    const [gasUsedEstimateGas, [l1GasEstimation]] = result as any\n    feePaymentOptions[0].addedNative = l1GasEstimation.fee\n    gasUsed = gasUsedEstimateGas\n  }\n\n  return {\n    gasUsed,\n    currentAccountNonce: nonce,\n    feePaymentOptions,\n    error: result instanceof Error ? result : null\n  }\n}\n"]}