{"version":3,"file":"estimateBundler.js","sourceRoot":"","sources":["../../../../src/libs/estimate/estimateBundler.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable no-await-in-loop */\n/* eslint-disable no-continue */\n/* eslint-disable no-constant-condition */\n\nimport { Contract, Interface, toBeHex } from 'ethers'\n\nimport AmbireAccount from '../../../contracts/compiled/AmbireAccount.json'\nimport entryPointAbi from '../../../contracts/compiled/EntryPoint.json'\nimport { EIP7702Auth } from '../../consts/7702'\nimport { ERC_4337_ENTRYPOINT } from '../../consts/deploy'\nimport { AccountOnchainState } from '../../interfaces/account'\nimport { Network } from '../../interfaces/network'\nimport { RPCProvider } from '../../interfaces/provider'\nimport { Bundler } from '../../services/bundlers/bundler'\nimport { BundlerSwitcher } from '../../services/bundlers/bundlerSwitcher'\nimport { GasSpeeds } from '../../services/bundlers/types'\nimport { paymasterFactory } from '../../services/paymaster'\nimport { BaseAccount } from '../account/BaseAccount'\nimport { AccountOp, getSignableCalls } from '../accountOp/accountOp'\nimport { PaymasterEstimationData } from '../erc7677/types'\nimport { getHumanReadableEstimationError } from '../errorHumanizer'\nimport { TokenResult } from '../portfolio'\nimport { UserOperation } from '../userOperation/types'\nimport { getSigForCalculations, getUserOperation } from '../userOperation/userOperation'\nimport { estimateWithRetries } from './estimateWithRetries'\nimport { Erc4337GasLimits, EstimationFlags } from './interfaces'\n\nasync function estimate(\n  baseAcc: BaseAccount,\n  bundler: Bundler,\n  network: Network,\n  userOp: UserOperation,\n  errorCallback: Function\n): Promise<{\n  gasPrice: GasSpeeds | Error\n  estimation: any\n  nonFatalErrors: Error[]\n}> {\n  const gasPrice = await bundler.fetchGasPrices(network, errorCallback).catch(() => {\n    return new Error('Could not fetch gas prices, retrying...')\n  })\n\n  // if the gasPrice fetch fails, we will switch the bundler and try again\n  if (gasPrice instanceof Error) {\n    const decodedError = bundler.decodeBundlerError(new Error('internal error'))\n    return {\n      gasPrice,\n      // if gas prices couldn't be fetched, it means there's an internal error\n      estimation: getHumanReadableEstimationError(decodedError),\n      nonFatalErrors: []\n    }\n  }\n\n  // add the maxFeePerGas and maxPriorityFeePerGas only if the network\n  // is optimistic as the bundler uses these values to determine the\n  // preVerificationGas.\n  const localUserOp = { ...userOp }\n  if (network.isOptimistic) {\n    // use medium for the gas limit estimation\n    localUserOp.maxPriorityFeePerGas = gasPrice.medium.maxPriorityFeePerGas\n    localUserOp.maxFeePerGas = gasPrice.medium.maxFeePerGas\n  }\n\n  const nonFatalErrors: Error[] = []\n  const estimateErrorCallback = (e: Error) => {\n    const decodedError = bundler.decodeBundlerError(e)\n\n    // if the bundler estimation fails, add a nonFatalError so we can react to\n    // it on the FE. The BE at a later stage decides if this error is actually\n    // fatal (at estimate.ts -> estimate4337)\n    nonFatalErrors.push(new Error('Bundler estimation failed', { cause: '4337_ESTIMATION' }))\n\n    if (decodedError.reason && decodedError.reason.indexOf('invalid account nonce') !== -1) {\n      nonFatalErrors.push(new Error('4337 invalid account nonce', { cause: '4337_INVALID_NONCE' }))\n    }\n\n    return getHumanReadableEstimationError(decodedError)\n  }\n\n  const stateOverride = baseAcc.getBundlerStateOverride(localUserOp)\n  const initializeRequests = () => [\n    bundler.estimate(userOp, network, stateOverride).catch(estimateErrorCallback)\n  ]\n\n  const estimation = await estimateWithRetries(\n    initializeRequests,\n    'estimation-bundler',\n    errorCallback\n  )\n  const foundError = Array.isArray(estimation)\n    ? estimation.find((res) => res instanceof Error)\n    : null\n  return {\n    gasPrice,\n    estimation: foundError ?? estimation,\n    nonFatalErrors\n  }\n}\n\nexport async function bundlerEstimate(\n  baseAcc: BaseAccount,\n  accountState: AccountOnchainState,\n  op: AccountOp,\n  network: Network,\n  feeTokens: TokenResult[],\n  provider: RPCProvider,\n  switcher: BundlerSwitcher,\n  errorCallback: Function,\n  eip7702Auth?: EIP7702Auth\n): Promise<Erc4337GasLimits | Error | null> {\n  if (!baseAcc.supportsBundlerEstimation()) return null\n\n  const account = baseAcc.getAccount()\n  const localOp = { ...op }\n  const initialBundler = switcher.getBundler()\n  const userOp = getUserOperation(\n    account,\n    accountState,\n    localOp,\n    initialBundler.getName(),\n    op.meta?.entryPointAuthorization,\n    eip7702Auth\n  )\n  // set the callData\n  if (userOp.activatorCall) localOp.activatorCall = userOp.activatorCall\n\n  const ambireAccount = new Interface(AmbireAccount.abi)\n  userOp.signature = getSigForCalculations()\n\n  userOp.callData = ambireAccount.encodeFunctionData('executeBySender', [getSignableCalls(localOp)])\n  const paymaster = await paymasterFactory.create(op, userOp, account, network, provider)\n  localOp.feeCall = paymaster.getFeeCallForEstimation(feeTokens)\n  userOp.callData = ambireAccount.encodeFunctionData('executeBySender', [getSignableCalls(localOp)])\n  const feeCallType = paymaster.getFeeCallType(feeTokens)\n\n  if (paymaster.isUsable()) {\n    const paymasterEstimationData = paymaster.getEstimationData() as PaymasterEstimationData\n    userOp.paymaster = paymasterEstimationData.paymaster\n    userOp.paymasterData = paymasterEstimationData.paymasterData\n\n    if (paymasterEstimationData.paymasterPostOpGasLimit)\n      userOp.paymasterPostOpGasLimit = paymasterEstimationData.paymasterPostOpGasLimit\n\n    if (paymasterEstimationData.paymasterVerificationGasLimit)\n      userOp.paymasterVerificationGasLimit = paymasterEstimationData.paymasterVerificationGasLimit\n  }\n\n  const flags: EstimationFlags = {}\n  while (true) {\n    // estimate\n    const bundler = switcher.getBundler()\n    const estimations = await estimate(baseAcc, bundler, network, userOp, errorCallback)\n\n    // if no errors, return the results and get on with life\n    if (!(estimations.estimation instanceof Error)) {\n      const gasData = estimations.estimation[0]\n      return {\n        preVerificationGas: gasData.preVerificationGas,\n        verificationGasLimit: gasData.verificationGasLimit,\n        callGasLimit: gasData.callGasLimit,\n        paymasterVerificationGasLimit: gasData.paymasterVerificationGasLimit,\n        paymasterPostOpGasLimit: gasData.paymasterPostOpGasLimit,\n        gasPrice: estimations.gasPrice as GasSpeeds,\n        paymaster,\n        flags,\n        feeCallType\n      }\n    }\n\n    // try again if the error is 4337_INVALID_NONCE\n    if (\n      estimations.nonFatalErrors.length &&\n      estimations.nonFatalErrors.find((err) => err.cause === '4337_INVALID_NONCE')\n    ) {\n      const ep = new Contract(ERC_4337_ENTRYPOINT, entryPointAbi, provider)\n      let accountNonce = null\n      // infinite loading is fine here as this is how 4337_INVALID_NONCE error\n      // was handled in previous cases and worked pretty well: retry until fix\n      while (!accountNonce) {\n        accountNonce = await ep.getNonce(account.addr, 0, { blockTag: 'pending' }).catch(() => null)\n      }\n      userOp.nonce = toBeHex(accountNonce)\n      flags.has4337NonceDiscrepancy = true\n      continue\n    }\n\n    // if there's an error but we can't switch, return the error\n    if (!switcher.canSwitch(account, estimations.estimation)) return estimations.estimation\n\n    // try again\n    switcher.switch()\n  }\n}\n"]}