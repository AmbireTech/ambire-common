{"version":3,"file":"estimateBundler.js","sourceRoot":"","sources":["../../../../src/libs/estimate/estimateBundler.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable no-await-in-loop */\n/* eslint-disable no-continue */\n/* eslint-disable no-constant-condition */\n\nimport { Interface } from 'ethers'\n\nimport AmbireAccount from '../../../contracts/compiled/AmbireAccount.json'\nimport { Account, AccountStates } from '../../interfaces/account'\nimport { Network } from '../../interfaces/network'\nimport { RPCProvider } from '../../interfaces/provider'\nimport { Bundler } from '../../services/bundlers/bundler'\nimport { BundlerSwitcher } from '../../services/bundlers/bundlerSwitcher'\nimport { GasSpeeds } from '../../services/bundlers/types'\nimport { paymasterFactory } from '../../services/paymaster'\nimport { AccountOp, getSignableCallsForBundlerEstimate } from '../accountOp/accountOp'\nimport { PaymasterEstimationData } from '../erc7677/types'\nimport { getHumanReadableEstimationError } from '../errorHumanizer'\nimport { TokenResult } from '../portfolio'\nimport { UserOperation } from '../userOperation/types'\nimport { getSigForCalculations, getUserOperation } from '../userOperation/userOperation'\nimport { estimationErrorFormatted } from './errors'\nimport { estimateWithRetries } from './estimateWithRetries'\nimport { EstimateResult, FeePaymentOption } from './interfaces'\n\nasync function estimate(\n  bundler: Bundler,\n  network: Network,\n  userOp: UserOperation,\n  isEdgeCase: boolean,\n  errorCallback: Function\n): Promise<{\n  gasPrice: GasSpeeds | Error\n  estimation: any\n  nonFatalErrors: Error[]\n}> {\n  const gasPrice = await bundler.fetchGasPrices(network, errorCallback).catch(() => {\n    return new Error('Could not fetch gas prices, retrying...')\n  })\n\n  // if the gasPrice fetch fails, we will switch the bundler and try again\n  if (gasPrice instanceof Error) {\n    const decodedError = bundler.decodeBundlerError(new Error('internal error'))\n    return {\n      gasPrice,\n      // if gas prices couldn't be fetched, it means there's an internal error\n      estimation: getHumanReadableEstimationError(decodedError),\n      nonFatalErrors: []\n    }\n  }\n\n  // add the maxFeePerGas and maxPriorityFeePerGas only if the network\n  // is optimistic as the bundler uses these values to determine the\n  // preVerificationGas.\n  const localUserOp = { ...userOp }\n  if (network.isOptimistic) {\n    // use medium for the gas limit estimation\n    localUserOp.maxPriorityFeePerGas = gasPrice.medium.maxPriorityFeePerGas\n    localUserOp.maxFeePerGas = gasPrice.medium.maxFeePerGas\n  }\n\n  const nonFatalErrors: Error[] = []\n  const initializeRequests = () => [\n    bundler.estimate(userOp, network, isEdgeCase).catch((e: Error) => {\n      const decodedError = bundler.decodeBundlerError(e)\n\n      // if the bundler estimation fails, add a nonFatalError so we can react to\n      // it on the FE. The BE at a later stage decides if this error is actually\n      // fatal (at estimate.ts -> estimate4337)\n      nonFatalErrors.push(new Error('Bundler estimation failed', { cause: '4337_ESTIMATION' }))\n\n      if (decodedError.reason && decodedError.reason.indexOf('invalid account nonce') !== -1) {\n        nonFatalErrors.push(\n          new Error('4337 invalid account nonce', { cause: '4337_INVALID_NONCE' })\n        )\n      }\n\n      return getHumanReadableEstimationError(decodedError)\n    })\n  ]\n\n  const estimation = await estimateWithRetries(\n    initializeRequests,\n    'estimation-bundler',\n    errorCallback\n  )\n  return {\n    gasPrice,\n    estimation,\n    nonFatalErrors\n  }\n}\n\nexport async function bundlerEstimate(\n  account: Account,\n  accountStates: AccountStates,\n  op: AccountOp,\n  network: Network,\n  feeTokens: TokenResult[],\n  provider: RPCProvider,\n  switcher: BundlerSwitcher,\n  errorCallback: Function\n): Promise<EstimateResult> {\n  // we pass an empty array of feePaymentOptions as they are built\n  // in an upper level using the balances from Estimation.sol.\n  // balances from Estimation.sol reflect the balances after pending txn exec\n  const feePaymentOptions: FeePaymentOption[] = []\n\n  const localOp = { ...op }\n  const accountState = accountStates[localOp.accountAddr][localOp.networkId]\n  // if there's no entryPointAuthorization, we cannot do the estimation on deploy\n  if (!accountState.isDeployed && (!op.meta || !op.meta.entryPointAuthorization))\n    return estimationErrorFormatted(\n      new Error('Entry point privileges not granted. Please contact support'),\n      { feePaymentOptions }\n    )\n\n  const initialBundler = switcher.getBundler()\n  const userOp = getUserOperation(\n    account,\n    accountState,\n    localOp,\n    initialBundler.getName(),\n    !accountState.isDeployed ? op.meta!.entryPointAuthorization : undefined\n  )\n  // set the callData\n  if (userOp.activatorCall) localOp.activatorCall = userOp.activatorCall\n\n  const ambireAccount = new Interface(AmbireAccount.abi)\n  const isEdgeCase = !accountState.isErc4337Enabled && accountState.isDeployed\n  userOp.signature = getSigForCalculations()\n\n  const paymaster = await paymasterFactory.create(op, userOp, network, provider)\n  localOp.feeCall = paymaster.getFeeCallForEstimation(feeTokens)\n  userOp.callData = ambireAccount.encodeFunctionData('executeBySender', [\n    getSignableCallsForBundlerEstimate(localOp)\n  ])\n\n  if (paymaster.isUsable()) {\n    const paymasterEstimationData = paymaster.getEstimationData() as PaymasterEstimationData\n    userOp.paymaster = paymasterEstimationData.paymaster\n    userOp.paymasterData = paymasterEstimationData.paymasterData\n\n    if (paymasterEstimationData.paymasterPostOpGasLimit)\n      userOp.paymasterPostOpGasLimit = paymasterEstimationData.paymasterPostOpGasLimit\n\n    if (paymasterEstimationData.paymasterVerificationGasLimit)\n      userOp.paymasterVerificationGasLimit = paymasterEstimationData.paymasterVerificationGasLimit\n  }\n\n  while (true) {\n    // estimate\n    const bundler = switcher.getBundler()\n    const estimations = await estimate(bundler, network, userOp, isEdgeCase, errorCallback)\n\n    // if no errors, return the results and get on with life\n    if (!(estimations.estimation instanceof Error)) {\n      const gasData = estimations.estimation[0]\n      return {\n        gasUsed: BigInt(gasData.callGasLimit),\n        currentAccountNonce: Number(op.nonce),\n        feePaymentOptions,\n        erc4337GasLimits: {\n          preVerificationGas: gasData.preVerificationGas,\n          verificationGasLimit: gasData.verificationGasLimit,\n          callGasLimit: gasData.callGasLimit,\n          paymasterVerificationGasLimit: gasData.paymasterVerificationGasLimit,\n          paymasterPostOpGasLimit: gasData.paymasterPostOpGasLimit,\n          gasPrice: estimations.gasPrice as GasSpeeds,\n          paymaster\n        },\n        error: null\n      }\n    }\n\n    // if there's an error but we can't switch, return the error\n    if (!switcher.canSwitch(estimations.estimation)) {\n      return estimationErrorFormatted(estimations.estimation as Error, {\n        feePaymentOptions,\n        nonFatalErrors: estimations.nonFatalErrors\n      })\n    }\n\n    // try again\n    switcher.switch()\n  }\n}\n"]}