{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../../../src/libs/estimate/interfaces.ts"],"names":[],"mappings":"","sourcesContent":["import { Hex } from '../../interfaces/hex'\nimport { GasSpeeds } from '../../services/bundlers/types'\nimport { AbstractPaymaster } from '../paymaster/abstractPaymaster'\nimport { TokenResult } from '../portfolio'\n\nexport interface BundlerEstimateResult {\n  preVerificationGas: Hex\n  verificationGasLimit: Hex\n  callGasLimit: Hex\n  paymasterVerificationGasLimit: Hex\n  paymasterPostOpGasLimit: Hex\n}\n\nexport interface Erc4337GasLimits {\n  preVerificationGas: string\n  verificationGasLimit: string\n  callGasLimit: string\n  paymasterVerificationGasLimit: string\n  paymasterPostOpGasLimit: string\n  gasPrice: GasSpeeds\n  paymaster: AbstractPaymaster\n}\n\nexport interface FeePaymentOption {\n  availableAmount: bigint\n  paidBy: string\n  gasUsed?: bigint\n  addedNative: bigint\n  token: TokenResult\n}\n\nexport interface EstimateResult {\n  gasUsed: bigint\n  // the nonce should always be the current value of account.nonce()\n  // even in ERC-4337 case, we might use the account.nonce() for\n  // signatures. We don't need the EntryPoint nonce\n  currentAccountNonce: number\n  feePaymentOptions: FeePaymentOption[]\n  erc4337GasLimits?: Erc4337GasLimits\n  error: Error | null\n  // put here errors that are not fatal to the signing process\n  // but reactable if known\n  // example: bundler simulation fails because of incorrect 4337 nonce.\n  // The user can still broadcast with EOA but we can also react\n  // to this error by setting the correct nonce and re-estimating\n  nonFatalErrors?: Error[]\n}\n"]}