{"version":3,"file":"estimateGas.js","sourceRoot":"","sources":["../../../../src/libs/estimate/estimateGas.ts"],"names":[],"mappings":";;;;AAAA,mCAA6D;AAE7D,gHAA0E;AAC1E,gHAA0E;AAC1E,gDAAgE;AAGhE,sDAAwD;AACxD,gDAA6C;AAC7C,sDAAoE;AAEpE,+CAA+C;AACxC,KAAK,UAAU,WAAW,CAC/B,OAAgB,EAChB,EAAa,EACb,QAAoC,EACpC,YAAiC,EACjC,OAAgB;IAEhB,IAAI,OAAO,CAAC,kBAAkB;QAAE,OAAO,EAAE,CAAA;IAEzC,IAAI,CAAC,OAAO,CAAC,QAAQ;QAAE,MAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAA;IAErF,MAAM,KAAK,GAAG,IAAI,kBAAS,CAAC,4BAAa,CAAC,GAAG,CAAC,CAAA;IAC9C,MAAM,UAAU,GAAG,IAAI,kBAAS,CAAC,4BAAa,CAAC,GAAG,CAAC,CAAA;IACnD,MAAM,QAAQ,GAAG,YAAY,CAAC,UAAU;QACtC,CAAC,CAAC,KAAK,CAAC,kBAAkB,CAAC,SAAS,EAAE,CAAC,IAAA,4BAAgB,EAAC,EAAE,CAAC,EAAE,IAAA,kBAAQ,EAAC,OAAO,CAAC,CAAC,CAAC;QAChF,CAAC,CAAC,UAAU,CAAC,kBAAkB,CAAC,kBAAkB,EAAE;YAChD,OAAO,CAAC,QAAQ,CAAC,QAAQ;YACzB,OAAO,CAAC,QAAQ,CAAC,IAAI;YACrB,IAAA,4BAAgB,EAAC,EAAE,CAAC;YACpB,IAAA,kBAAQ,EAAC,OAAO,CAAC;SAClB,CAAC,CAAA;IAEN,qEAAqE;IACrE,2EAA2E;IAC3E,OAAO,QAAQ;SACZ,WAAW,CAAC;QACX,IAAI,EAAE,mCAA0B;QAChC,EAAE,EAAE,YAAY,CAAC,UAAU,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,WAAW;QACzE,KAAK,EAAE,CAAC;QACR,IAAI,EAAE,QAAQ;QACd,KAAK,EAAE,CAAC;KACT,CAAC;SACD,KAAK,CAAC,KAAK,EAAE,CAAC,EAAE,EAAE;QACjB,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,oBAAoB,CAAC;YAAE,OAAO,EAAE,CAAA;QAExD,MAAM,gBAAgB,GAAG,IAAA,yBAAc,EACrC,OAAO,CAAC,OAAO,EACf,OAAO,CAAC,OAAO,EACf,OAAO,CAAC,cAAc,EACtB,EAAE,aAAa,EAAE,CAAC,EAAE,CACrB,CAAA;QACD,MAAM,aAAa,GAAG,MAAM,gBAAgB;aACzC,IAAI,CAAC,iBAAiB,EAAE;YACvB;gBACE,EAAE,EAAE,YAAY,CAAC,UAAU,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,QAAS,CAAC,WAAW;gBAC1E,KAAK,EAAE,KAAK;gBACZ,IAAI,EAAE,QAAQ;gBACd,IAAI,EAAE,mCAA0B;gBAChC,KAAK,EAAE,KAAK;aACb;YACD,QAAQ;YACR;gBACE,CAAC,mCAA0B,CAAC,EAAE;oBAC5B,OAAO,EAAE,oEAAoE;iBAC9E;aACF;SACF,CAAC;aACD,KAAK,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,CAAA;QAErB,gBAAgB,CAAC,OAAO,EAAE,CAAA;QAC1B,OAAO,MAAM,CAAC,aAAa,CAAC,CAAA;IAC9B,CAAC,CAAC,CAAA;AACN,CAAC;AA9DD,kCA8DC","sourcesContent":["import { Interface, JsonRpcProvider, Provider } from 'ethers'\n\nimport AmbireAccount from '../../../contracts/compiled/AmbireAccount.json'\nimport AmbireFactory from '../../../contracts/compiled/AmbireFactory.json'\nimport { DEPLOYLESS_SIMULATION_FROM } from '../../consts/deploy'\nimport { Account, AccountOnchainState } from '../../interfaces/account'\nimport { Network } from '../../interfaces/network'\nimport { getRpcProvider } from '../../services/provider'\nimport { getSpoof } from '../account/account'\nimport { AccountOp, getSignableCalls } from '../accountOp/accountOp'\n\n// Use this estimateGas only for SA estimations\nexport async function estimateGas(\n  account: Account,\n  op: AccountOp,\n  provider: Provider | JsonRpcProvider,\n  accountState: AccountOnchainState,\n  network: Network\n): Promise<bigint> {\n  if (network.disableEstimateGas) return 0n\n\n  if (!account.creation) throw new Error('Use this estimation only for smart accounts')\n\n  const saAbi = new Interface(AmbireAccount.abi)\n  const factoryAbi = new Interface(AmbireFactory.abi)\n  const callData = accountState.isDeployed\n    ? saAbi.encodeFunctionData('execute', [getSignableCalls(op), getSpoof(account)])\n    : factoryAbi.encodeFunctionData('deployAndExecute', [\n        account.creation.bytecode,\n        account.creation.salt,\n        getSignableCalls(op),\n        getSpoof(account)\n      ])\n\n  // try estimating the gas without state override. If an error of type\n  // insufficient funds is encountered, try re-estimating with state override\n  return provider\n    .estimateGas({\n      from: DEPLOYLESS_SIMULATION_FROM,\n      to: accountState.isDeployed ? account.addr : account.creation.factoryAddr,\n      value: 0,\n      data: callData,\n      nonce: 0\n    })\n    .catch(async (e) => {\n      if (!e.message.includes('insufficient funds')) return 0n\n\n      const isolatedProvider = getRpcProvider(\n        network.rpcUrls,\n        network.chainId,\n        network.selectedRpcUrl,\n        { batchMaxCount: 1 }\n      )\n      const withOverrides = await isolatedProvider\n        .send('eth_estimateGas', [\n          {\n            to: accountState.isDeployed ? account.addr : account.creation!.factoryAddr,\n            value: '0x0',\n            data: callData,\n            from: DEPLOYLESS_SIMULATION_FROM,\n            nonce: '0x0'\n          },\n          'latest',\n          {\n            [DEPLOYLESS_SIMULATION_FROM]: {\n              balance: '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n            }\n          }\n        ])\n        .catch(() => '0x0')\n\n      isolatedProvider.destroy()\n      return BigInt(withOverrides)\n    })\n}\n"]}