{"version":3,"file":"estimateWithRetries.js","sourceRoot":"","sources":["../../../../src/libs/estimate/estimateWithRetries.ts"],"names":[],"mappings":";;AAEA,kDA0FC;;AA5FD,oEAAmC;AAE5B,KAAK,UAAU,mBAAmB,CACvC,aAAmC,EACnC,WAAmB,EACnB,aAAuB,EACvB,gBAAwB,KAAK,EAC7B,UAAkB,CAAC;IAEnB,iCAAiC;IACjC,IAAI,OAAO,IAAI,CAAC;QACd,OAAO,IAAI,KAAK,CACd,wKAAwK,CACzK,CAAA;IAEH,MAAM,kBAAkB,GAAG,EAAE,CAAA;IAC7B,MAAM,iBAAiB,GAAG,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;QAChD,UAAU,CAAC,GAAG,EAAE;YACd,OAAO,CAAC,kBAAkB,CAAC,CAAA;QAC7B,CAAC,EAAE,aAAa,CAAC,CAAA;IACnB,CAAC,CAAC,CAAA;IAEF,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC,EAAE,iBAAiB,CAAC,CAAC,CAAA;IAEpF,qBAAqB;IACrB,IAAI,MAAM,KAAK,kBAAkB,EAAE,CAAC;QAClC,MAAM,WAAW,GAAG,OAAO,GAAG,CAAC,CAAA;QAE/B,gDAAgD;QAEhD,QAAQ,WAAW,EAAE,CAAC;YACpB,KAAK,uBAAuB;gBAC1B,aAAa,CAAC;oBACZ,KAAK,EAAE,OAAO;oBACd,OAAO,EAAE,+CAA+C;oBACxD,KAAK,EAAE,IAAI,KAAK,CAAC,mCAAmC,CAAC;iBACtD,CAAC,CAAA;gBACF,MAAK;YAEP,KAAK,oBAAoB;gBACvB,aAAa,CAAC;oBACZ,KAAK,EAAE,OAAO;oBACd,OAAO,EAAE,mDAAmD;oBAC5D,KAAK,EAAE,IAAI,KAAK,CAAC,qCAAqC,CAAC;iBACxD,CAAC,CAAA;gBACF,MAAK;YACP,KAAK,gBAAgB;gBACnB,aAAa,CAAC;oBACZ,KAAK,EAAE,OAAO;oBACd,OAAO,EAAE,+DAA+D;oBACxE,KAAK,EAAE,IAAI,KAAK,CAAC,qCAAqC,CAAC;iBACxD,CAAC,CAAA;gBACF,MAAK;YAEP;gBACE,MAAK;QACT,CAAC;QAED,OAAO,mBAAmB,CACxB,aAAa,EACb,WAAW,EACX,aAAa,EACb,aAAa,EACb,WAAW,CACZ,CAAA;IACH,CAAC;IAED,oFAAoF;IACpF,6BAA6B;IAC7B,MAAM,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,YAAY,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAA;IAEvF,IAAI,KAAK,EAAE,CAAC;QACV,IAAI,KAAK,CAAC,KAAK,KAAK,mBAAmB,EAAE,CAAC;YACxC,aAAa,CAAC;gBACZ,KAAK,EAAE,OAAO;gBACd,OAAO,EAAE,+DAA+D;gBACxE,KAAK;aACN,CAAC,CAAA;YAEF,MAAM,IAAA,cAAI,EAAC,IAAI,CAAC,CAAA;YAEhB,OAAO,mBAAmB,CACxB,aAAa,EACb,WAAW,EACX,aAAa,EACb,aAAa,EACb,OAAO,GAAG,CAAC,CACZ,CAAA;QACH,CAAC;IACH,CAAC;IAED,OAAO,MAAW,CAAA;AACpB,CAAC","sourcesContent":["import wait from '../../utils/wait'\n\nexport async function estimateWithRetries<T>(\n  fetchRequests: () => Promise<any>[],\n  timeoutType: string,\n  errorCallback: Function,\n  timeoutInMill: number = 10000,\n  counter: number = 0\n): Promise<T | Error> {\n  // stop the execution on 5 fails;\n  if (counter >= 5)\n    return new Error(\n      'Estimation failure, retrying in a couple of seconds. If this issue persists, please check your internet connection, change your RPC provider or contact Ambire support'\n    )\n\n  const santinelTimeoutErr = {}\n  const estimationTimeout = new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(santinelTimeoutErr)\n    }, timeoutInMill)\n  })\n\n  const result = await Promise.race([Promise.all(fetchRequests()), estimationTimeout])\n\n  // retry on a timeout\n  if (result === santinelTimeoutErr) {\n    const incremented = counter + 1\n\n    // display a timeout error only on the first try\n\n    switch (timeoutType) {\n      case 'estimation-deployless':\n        errorCallback({\n          level: 'major',\n          message: 'Estimating gas limits from the RPC timed out.',\n          error: new Error('Estimation.sol deployless timeout')\n        })\n        break\n\n      case 'estimation-bundler':\n        errorCallback({\n          level: 'major',\n          message: 'Estimating gas limits from the bundler timed out.',\n          error: new Error('Budler gas limit estimation timeout')\n        })\n        break\n      case 'estimation-eoa':\n        errorCallback({\n          level: 'major',\n          message: 'Estimating gas limits for EOA account from the RPC timed out.',\n          error: new Error('Budler gas limit estimation timeout')\n        })\n        break\n\n      default:\n        break\n    }\n\n    return estimateWithRetries(\n      fetchRequests,\n      timeoutType,\n      errorCallback,\n      timeoutInMill,\n      incremented\n    )\n  }\n\n  // if one of the calls returns an error and the error is a connectivity error, retry\n  // Otherwise return the error\n  const error = Array.isArray(result) ? result.find((res) => res instanceof Error) : null\n\n  if (error) {\n    if (error.cause === 'ConnectivityError') {\n      errorCallback({\n        level: 'major',\n        message: 'Estimating the transaction failed because of a network error.',\n        error\n      })\n\n      await wait(5000)\n\n      return estimateWithRetries(\n        fetchRequests,\n        timeoutType,\n        errorCallback,\n        timeoutInMill,\n        counter + 1\n      )\n    }\n  }\n\n  return result as T\n}\n"]}