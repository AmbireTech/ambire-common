{"version":3,"file":"estimate.js","sourceRoot":"","sources":["../../../../src/libs/estimate/estimate.ts"],"names":[],"mappings":"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","sourcesContent":["import { BaseAccount } from 'libs/account/BaseAccount'\n\nimport { AccountOnchainState } from '../../interfaces/account'\nimport { Network } from '../../interfaces/network'\nimport { RPCProvider } from '../../interfaces/provider'\nimport { BundlerSwitcher } from '../../services/bundlers/bundlerSwitcher'\nimport { AccountOp } from '../accountOp/accountOp'\nimport { TokenResult } from '../portfolio'\nimport { ambireEstimateGas } from './ambireEstimation'\nimport { bundlerEstimate } from './estimateBundler'\nimport { estimateWithRetries } from './estimateWithRetries'\nimport { FullEstimation, FullEstimationSummary } from './interfaces'\nimport { providerEstimateGas } from './providerEstimateGas'\n\n// get all possible estimation combinations and leave it to the implementation\n// to decide which one is relevant depending on the case.\n// there are 3 estimations:\n// estimateGas(): the rpc method for retrieving gas\n// estimateBundler(): ask the 4337 bundler for a gas price\n// Estimation.sol: our own implementation\n// each has an use case in diff scenarious:\n// - EOA: if payment is native, use estimateGas(); otherwise estimateBundler()\n// - SA: if ethereum, use Estimation.sol; otherwise estimateBundler()\nexport async function getEstimation(\n  baseAcc: BaseAccount,\n  accountState: AccountOnchainState,\n  op: AccountOp,\n  network: Network,\n  provider: RPCProvider,\n  feeTokens: TokenResult[],\n  nativeToCheck: string[],\n  switcher: BundlerSwitcher,\n  errorCallback: Function\n): Promise<FullEstimation | Error> {\n  const ambireEstimation = ambireEstimateGas(\n    baseAcc,\n    accountState,\n    op,\n    network,\n    provider,\n    feeTokens,\n    nativeToCheck\n  )\n  const bundlerEstimation = bundlerEstimate(\n    baseAcc,\n    accountState,\n    op,\n    network,\n    feeTokens,\n    provider,\n    switcher,\n    errorCallback\n  )\n  const providerEstimation = providerEstimateGas(\n    baseAcc.getAccount(),\n    op,\n    provider,\n    accountState,\n    network,\n    feeTokens\n  )\n\n  const estimations = await estimateWithRetries<\n    [FullEstimation['ambire'], FullEstimation['bundler'], FullEstimation['provider']]\n  >(\n    () => [ambireEstimation, bundlerEstimation, providerEstimation],\n    'estimation-deployless',\n    errorCallback,\n    12000\n  )\n\n  // this is only if we hit a timeout 5 consecutive times\n  if (estimations instanceof Error) return estimations\n\n  const ambireGas = estimations[0]\n  const bundlerGas = estimations[1]\n  const providerGas = estimations[2]\n  const fullEstimation: FullEstimation = {\n    provider: providerGas,\n    ambire: ambireGas,\n    bundler: bundlerGas,\n    flags: {}\n  }\n\n  const criticalError = baseAcc.getEstimationCriticalError(fullEstimation, op)\n  if (criticalError) return criticalError\n\n  // TODO: if the bundler is the preferred method of estimation, re-estimate\n  // we can switch it if there's no ambire gas error\n\n  let flags = {}\n  if (!(ambireGas instanceof Error) && ambireGas) flags = { ...ambireGas.flags }\n  if (!(bundlerGas instanceof Error) && bundlerGas) flags = { ...bundlerGas.flags }\n  fullEstimation.flags = flags\n  return fullEstimation\n}\n\nexport function getEstimationSummary(estimation: FullEstimation): FullEstimationSummary {\n  return {\n    providerEstimation:\n      estimation.provider && !(estimation.provider instanceof Error)\n        ? estimation.provider\n        : undefined,\n    ambireEstimation:\n      estimation.ambire && !(estimation.ambire instanceof Error) ? estimation.ambire : undefined,\n    bundlerEstimation:\n      estimation.bundler && !(estimation.bundler instanceof Error) ? estimation.bundler : undefined,\n    flags: estimation.flags\n  }\n}\n"]}