{"version":3,"file":"providerEstimateGas.js","sourceRoot":"","sources":["../../../../src/libs/estimate/providerEstimateGas.ts"],"names":[],"mappings":";;AAcA,kDAyBC;AAED,kDAgDC;;AAzFD,mCAAoE;AAEpE,gHAA0E;AAC1E,gDAAgE;AAKhE,gDAAmD;AACnD,sDAAoE;AACpE,sDAAmE;AAInE,SAAgB,mBAAmB,CACjC,EAAa,EACb,OAAgB,EAChB,YAAiC;IAEjC,IAAI,YAAY,CAAC,YAAY,EAAE,CAAC;QAC9B,MAAM,KAAK,GAAG,IAAI,kBAAS,CAAC,4BAAa,CAAC,GAAG,CAAC,CAAA;QAC9C,OAAO;YACL,IAAI,EAAE,OAAO,CAAC,IAAW;YACzB,EAAE,EAAE,OAAO,CAAC,IAAW;YACvB,KAAK,EAAE,MAAM;YACb,IAAI,EAAE,KAAK,CAAC,kBAAkB,CAAC,iBAAiB,EAAE,CAAC,IAAA,4BAAgB,EAAC,EAAE,CAAC,CAAC,CAAQ;YAChF,gBAAgB,EAAE,KAAK;SACxB,CAAA;IACH,CAAC;IAED,4BAA4B;IAC5B,MAAM,IAAI,GAAG,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;IACxB,OAAO;QACL,IAAI,EAAE,OAAO,CAAC,IAAW;QACzB,EAAE,EAAE,IAAI,CAAC,EAAS;QAClB,KAAK,EAAE,IAAA,gBAAO,EAAC,IAAI,CAAC,KAAK,CAAQ;QACjC,IAAI,EAAE,IAAI,CAAC,IAAW;QACtB,gBAAgB,EAAE,KAAK;KACxB,CAAA;AACH,CAAC;AAEM,KAAK,UAAU,mBAAmB,CACvC,OAAgB,EAChB,EAAa,EACb,QAAqB,EACrB,YAAiC,EACjC,OAAgB,EAChB,SAAwB;IAExB,+CAA+C;IAC/C,IAAI,IAAA,wBAAc,EAAC,OAAO,CAAC;QAAE,OAAO,IAAI,CAAA;IAExC,MAAM,iBAAiB,GAAG;QACxB;YACE,MAAM,EAAE,OAAO,CAAC,IAAI;YACpB,eAAe,EAAE,YAAY,CAAC,OAAO;YACrC,WAAW,EAAE,EAAE;YACf,KAAK,EAAE,SAAS,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,OAAO,KAAK,oBAAW,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,SAAS,CAAE;YAC1F,OAAO,EAAE,EAAE;SACZ;KACF,CAAA;IACD,MAAM,UAAU,GAAG,mBAAmB,CAAC,EAAE,EAAE,OAAO,EAAE,YAAY,CAAC,CAAA;IAEjE,MAAM,SAAS,GAAG;QAChB,IAAI,EAAE,UAAU,CAAC,IAAI;QACrB,EAAE,EAAE,UAAU,CAAC,EAAE;QACjB,KAAK,EAAE,IAAA,mBAAU,EAAC,UAAU,CAAC,KAAK,CAAC;QACnC,IAAI,EAAE,UAAU,CAAC,IAAI;QACrB,KAAK,EAAE,IAAA,mBAAU,EAAC,YAAY,CAAC,QAAkB,CAAC;KACnD,CAAA;IACD,MAAM,QAAQ,GAAG,SAAS,CAAA;IAC1B,MAAM,aAAa,GAAG;QACpB,CAAC,mCAA0B,CAAC,EAAE;YAC5B,OAAO,EAAE,oEAAoE;SAC9E;KACF,CAAA;IACD,MAAM,MAAM,GACV,UAAU,CAAC,gBAAgB,IAAI,CAAC,OAAO,CAAC,kBAAkB;QACxD,CAAC,CAAC,CAAC,SAAS,EAAE,QAAQ,EAAE,aAAa,CAAC;QACtC,CAAC,CAAC,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAA;IAE3B,MAAM,OAAO,GAAG,MAAM,QAAQ;SAC3B,IAAI,CAAC,iBAAiB,EAAE,MAAM,CAAC;SAC/B,KAAK,CAAC,gDAA+B,CAAC,CAAA;IACzC,IAAI,OAAO,YAAY,KAAK;QAAE,OAAO,OAAO,CAAA;IAC5C,OAAO;QACL,OAAO,EAAE,MAAM,CAAC,OAAO,CAAC;QACxB,iBAAiB;KAClB,CAAA;AACH,CAAC","sourcesContent":["import { Interface, toBeHex, toQuantity, ZeroAddress } from 'ethers'\n\nimport AmbireAccount from '../../../contracts/compiled/AmbireAccount.json'\nimport { DEPLOYLESS_SIMULATION_FROM } from '../../consts/deploy'\nimport { Account, AccountOnchainState } from '../../interfaces/account'\nimport { Hex } from '../../interfaces/hex'\nimport { Network } from '../../interfaces/network'\nimport { RPCProvider } from '../../interfaces/provider'\nimport { isSmartAccount } from '../account/account'\nimport { AccountOp, getSignableCalls } from '../accountOp/accountOp'\nimport { getHumanReadableEstimationError } from '../errorHumanizer'\nimport { TokenResult } from '../portfolio'\nimport { ProviderEstimation } from './interfaces'\n\nexport function getEstimateGasProps(\n  op: AccountOp,\n  account: Account,\n  accountState: AccountOnchainState\n): { from: Hex; to: Hex; value: Hex; data: Hex; useStateOverride: boolean } {\n  if (accountState.isSmarterEoa) {\n    const saAbi = new Interface(AmbireAccount.abi)\n    return {\n      from: account.addr as Hex,\n      to: account.addr as Hex,\n      value: '0x00',\n      data: saAbi.encodeFunctionData('executeBySender', [getSignableCalls(op)]) as Hex,\n      useStateOverride: false\n    }\n  }\n\n  // normal EOA: a single call\n  const call = op.calls[0]\n  return {\n    from: account.addr as Hex,\n    to: call.to as Hex,\n    value: toBeHex(call.value) as Hex,\n    data: call.data as Hex,\n    useStateOverride: false\n  }\n}\n\nexport async function providerEstimateGas(\n  account: Account,\n  op: AccountOp,\n  provider: RPCProvider,\n  accountState: AccountOnchainState,\n  network: Network,\n  feeTokens: TokenResult[]\n): Promise<ProviderEstimation | Error | null> {\n  // we don't do estimateGas() for smart accounts\n  if (isSmartAccount(account)) return null\n\n  const feePaymentOptions = [\n    {\n      paidBy: account.addr,\n      availableAmount: accountState.balance,\n      addedNative: 0n,\n      token: feeTokens.find((token) => token.address === ZeroAddress && !token.flags.onGasTank)!,\n      gasUsed: 0n\n    }\n  ]\n  const properties = getEstimateGasProps(op, account, accountState)\n\n  const txnParams = {\n    from: properties.from,\n    to: properties.to,\n    value: toQuantity(properties.value),\n    data: properties.data,\n    nonce: toQuantity(accountState.eoaNonce as bigint)\n  }\n  const blockTag = 'pending'\n  const stateOverride = {\n    [DEPLOYLESS_SIMULATION_FROM]: {\n      balance: '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n    }\n  }\n  const params =\n    properties.useStateOverride && !network.rpcNoStateOverride\n      ? [txnParams, blockTag, stateOverride]\n      : [txnParams, blockTag]\n\n  const gasUsed = await provider\n    .send('eth_estimateGas', params)\n    .catch(getHumanReadableEstimationError)\n  if (gasUsed instanceof Error) return gasUsed\n  return {\n    gasUsed: BigInt(gasUsed),\n    feePaymentOptions\n  }\n}\n"]}