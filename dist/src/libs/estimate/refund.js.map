{"version":3,"file":"refund.js","sourceRoot":"","sources":["../../../../src/libs/estimate/refund.ts"],"names":[],"mappings":";;;;AAAA,mCAA6D;AAE7D,gHAA0E;AAC1E,gHAA0E;AAInE,KAAK,UAAU,MAAM,CAC1B,OAAgB,EAChB,EAAa,EACb,QAAoC,EACpC,OAAe;IAEf,mEAAmE;IACnE,6CAA6C;IAC7C,MAAM,cAAc,GAAG,IAAI,kBAAS,CAAC,4BAAa,CAAC,GAAG,CAAC,CAAA;IACvD,MAAM,cAAc,GAAG,IAAI,kBAAS,CAAC,4BAAa,CAAC,GAAG,CAAC,CAAA;IAEvD,MAAM,eAAe,GAAG,EAAE,CAAC,wBAAwB;QACjD,CAAC,CAAC,cAAc,CAAC,kBAAkB,CAAC,iBAAiB,EAAE;YACnD;gBACE,CAAC,EAAE,CAAC,wBAAwB,CAAC,KAAK,EAAE,EAAE,CAAC,wBAAwB,CAAC,SAAS,CAAC;gBAC1E,CAAC,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,SAAS,CAAC;aACzB;SACF,CAAC;QACJ,CAAC,CAAC,cAAc,CAAC,kBAAkB,CAAC,SAAS,EAAE,CAAC,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,SAAS,CAAC,CAAC,CAAA;IAE1E,MAAM,eAAe,GAAG,cAAc,CAAC,kBAAkB,CAAC,kBAAkB,EAAE;QAC5E,OAAO,CAAC,QAAS,CAAC,QAAQ;QAC1B,OAAO,CAAC,QAAS,CAAC,IAAI;QACtB,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,EAAE,eAAe,CAAC,CAAC;QACpC,EAAE,CAAC,SAAS;KACb,CAAC,CAAA;IAEF,MAAM,YAAY,GAAG,MAAM,QAAQ,CAAC,WAAW,CAAC;QAC9C,IAAI,EAAE,4CAA4C;QAClD,EAAE,EAAE,OAAO,CAAC,QAAS,CAAC,WAAW;QACjC,IAAI,EAAE,eAAe;KACtB,CAAC,CAAA;IAEF,MAAM,eAAe,GAAG,OAAO,GAAG,YAAY,CAAA;IAE9C,6DAA6D;IAC7D,IAAI,eAAe,IAAI,OAAO,GAAG,EAAE,IAAI,eAAe,GAAG,EAAE;QAAE,OAAO,YAAY,CAAA;IAChF,OAAO,OAAO,CAAA;AAChB,CAAC;AAtCD,wBAsCC","sourcesContent":["import { Interface, JsonRpcProvider, Provider } from 'ethers'\n\nimport AmbireAccount from '../../../contracts/compiled/AmbireAccount.json'\nimport AmbireFactory from '../../../contracts/compiled/AmbireFactory.json'\nimport { Account } from '../../interfaces/account'\nimport { AccountOp } from '../accountOp/accountOp'\n\nexport async function refund(\n  account: Account,\n  op: AccountOp,\n  provider: JsonRpcProvider | Provider,\n  gasUsed: bigint\n): Promise<bigint> {\n  // WARNING: calculateRefund will 100% NOT work in all cases we have\n  // So a warning not to assume this is working\n  const IAmbireAccount = new Interface(AmbireAccount.abi)\n  const IAmbireFactory = new Interface(AmbireFactory.abi)\n\n  const accountCalldata = op.accountOpToExecuteBefore\n    ? IAmbireAccount.encodeFunctionData('executeMultiple', [\n        [\n          [op.accountOpToExecuteBefore.calls, op.accountOpToExecuteBefore.signature],\n          [op.calls, op.signature]\n        ]\n      ])\n    : IAmbireAccount.encodeFunctionData('execute', [op.calls, op.signature])\n\n  const factoryCalldata = IAmbireFactory.encodeFunctionData('deployAndExecute', [\n    account.creation!.bytecode,\n    account.creation!.salt,\n    [[account.addr, 0, accountCalldata]],\n    op.signature\n  ])\n\n  const estimatedGas = await provider.estimateGas({\n    from: '0x0000000000000000000000000000000000000001',\n    to: account.creation!.factoryAddr,\n    data: factoryCalldata\n  })\n\n  const estimatedRefund = gasUsed - estimatedGas\n\n  // As of EIP-3529, the max refund is 1/5th of the entire cost\n  if (estimatedRefund <= gasUsed / 5n && estimatedRefund > 0n) return estimatedGas\n  return gasUsed\n}\n"]}