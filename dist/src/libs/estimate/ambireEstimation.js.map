{"version":3,"file":"ambireEstimation.js","sourceRoot":"","sources":["../../../../src/libs/estimate/ambireEstimation.ts"],"names":[],"mappings":"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","sourcesContent":["import { ZeroAddress } from 'ethers'\n\nimport Estimation from '../../../contracts/compiled/Estimation.json'\nimport { FEE_COLLECTOR } from '../../consts/addresses'\nimport { DEPLOYLESS_SIMULATION_FROM, OPTIMISTIC_ORACLE } from '../../consts/deploy'\nimport { EOA_SIMULATION_NONCE } from '../../consts/deployless'\nimport { AccountOnchainState } from '../../interfaces/account'\nimport { Network } from '../../interfaces/network'\nimport { RPCProvider } from '../../interfaces/provider'\nimport { getEoaSimulationStateOverride } from '../../utils/simulationStateOverride'\nimport { getAccountDeployParams } from '../account/account'\nimport { BaseAccount } from '../account/BaseAccount'\nimport { AccountOp, toSingletonCall } from '../accountOp/accountOp'\nimport { Call } from '../accountOp/types'\nimport { DeploylessMode, fromDescriptor } from '../deployless/deployless'\nimport { InnerCallFailureError } from '../errorDecoder/customErrors'\nimport { getHumanReadableEstimationError } from '../errorHumanizer'\nimport { getProbableCallData } from '../gasPrice/gasPrice'\nimport { GasTankTokenResult, TokenResult } from '../portfolio'\nimport { getActivatorCall, shouldIncludeActivatorCall } from '../userOperation/userOperation'\nimport { AmbireEstimation, EstimationFlags, FeePaymentOption } from './interfaces'\n\nexport function getInnerCallFailure(\n  estimationOp: { success: boolean; err: string },\n  calls: Call[],\n  network: Network,\n  portfolioNativeValue?: bigint\n): Error | null {\n  if (estimationOp.success) return null\n\n  return getHumanReadableEstimationError(\n    new InnerCallFailureError(estimationOp.err, calls, network, portfolioNativeValue)\n  )\n}\n\n// the outcomeNonce should always be equal to the nonce in accountOp + 1\n// that's an indication of transaction success\nexport function getNonceDiscrepancyFailure(\n  estimationNonce: bigint,\n  outcomeNonce: number\n): Error | null {\n  if (estimationNonce + 1n === BigInt(outcomeNonce)) return null\n\n  return new Error(\"Nonce discrepancy, perhaps there's a pending transaction. Retrying...\", {\n    cause: 'NONCE_FAILURE'\n  })\n}\n\nexport async function ambireEstimateGas(\n  baseAcc: BaseAccount,\n  accountState: AccountOnchainState,\n  op: AccountOp,\n  network: Network,\n  provider: RPCProvider,\n  feeTokens: TokenResult[],\n  nativeToCheck: string[]\n): Promise<AmbireEstimation | Error> {\n  const account = baseAcc.getAccount()\n  const deploylessEstimator = fromDescriptor(provider, Estimation, !network.rpcNoStateOverride)\n\n  // only the activator call is added here as there are cases where it's needed\n  const calls = [...op.calls.map(toSingletonCall)]\n  if (shouldIncludeActivatorCall(network, account, accountState, true)) {\n    calls.push(getActivatorCall(op.accountAddr))\n  }\n\n  const isStillPureEoa = accountState.isEOA && !accountState.isSmarterEoa\n  const checkInnerCallsArgs = [\n    account.addr,\n    ...getAccountDeployParams(account),\n    [\n      account.addr,\n      op.accountOpToExecuteBefore?.nonce || 0,\n      op.accountOpToExecuteBefore?.calls || [],\n      op.accountOpToExecuteBefore?.signature || '0x'\n    ],\n    [account.addr, op.nonce || 1, calls, '0x'],\n    getProbableCallData(account, op, accountState, network),\n    account.associatedKeys,\n    feeTokens.map((feeToken) => feeToken.address),\n    FEE_COLLECTOR,\n    nativeToCheck,\n    network.isOptimistic ? OPTIMISTIC_ORACLE : ZeroAddress\n  ]\n  const ambireEstimation = await deploylessEstimator\n    .call('estimate', checkInnerCallsArgs, {\n      from: DEPLOYLESS_SIMULATION_FROM,\n      blockTag: 'pending', // there's no reason to do latest\n      mode: isStillPureEoa ? DeploylessMode.StateOverride : DeploylessMode.Detect,\n      stateToOverride: isStillPureEoa ? getEoaSimulationStateOverride(account.addr) : null\n    })\n    .catch(getHumanReadableEstimationError)\n\n  if (ambireEstimation instanceof Error) return ambireEstimation\n\n  const [\n    [\n      deployment,\n      accountOpToExecuteBefore,\n      accountOp,\n      outcomeNonce,\n      feeTokenOutcomes,\n      ,\n      nativeAssetBalances,\n      ,\n      l1GasEstimation\n    ]\n  ] = ambireEstimation\n\n  const ambireEstimationError = getInnerCallFailure(\n    accountOp,\n    calls,\n    network,\n    feeTokens.find((token) => token.address === ZeroAddress && !token.flags.onGasTank)?.amount\n  )\n\n  if (ambireEstimationError) return ambireEstimationError\n\n  // if there's a nonce discrepancy, it means the portfolio simulation\n  // will fail so we need to update the account state and the portfolio\n  const opNonce = isStillPureEoa ? BigInt(EOA_SIMULATION_NONCE) : op.nonce!\n  const nonceError = getNonceDiscrepancyFailure(opNonce, outcomeNonce)\n  const flags: EstimationFlags = {}\n  if (nonceError) {\n    flags.hasNonceDiscrepancy = true\n  }\n\n  const gasUsed = deployment.gasUsed + accountOpToExecuteBefore.gasUsed + accountOp.gasUsed\n\n  const feeTokenOptions: FeePaymentOption[] = feeTokens.map(\n    (token: TokenResult | GasTankTokenResult, key: number) => {\n      // We are using 'availableAmount' here, because it's possible the 'amount' to contains pending top up amount as well\n      let availableAmount =\n        token.flags.onGasTank && 'availableAmount' in token\n          ? token.availableAmount || token.amount\n          : feeTokenOutcomes[key].amount\n\n      // if the token is native and the account type cannot pay for the\n      // transaction with the receiving amount from the estimation,\n      // override the amount to the original, in-account amount.\n      //\n      // This isn't true when the amount is decreasing, though\n      // We should subtract the amount if it's less the one he\n      // currently owns as send all of native and paying in native\n      // is impossible\n      if (\n        !token.flags.onGasTank &&\n        token.address === ZeroAddress &&\n        !baseAcc.canUseReceivingNativeForFee(token.amount) &&\n        feeTokenOutcomes[key].amount > token.amount\n      )\n        availableAmount = token.amount\n\n      return {\n        paidBy: account.addr,\n        availableAmount,\n        // gasUsed for the gas tank tokens is smaller because of the commitment:\n        // ['gasTank', amount, symbol]\n        // and this commitment costs onchain:\n        // - 1535, if the broadcasting addr is the relayer\n        // - 4035, if the broadcasting addr is different\n        // currently, there are more than 1 relayer addresses and we cannot\n        // be sure which is the one that will broadcast this txn; also, ERC-4337\n        // broadcasts will always consume at least 4035.\n        // setting it to 5000n just be sure\n        gasUsed: token.flags.onGasTank ? 5000n : feeTokenOutcomes[key].gasUsed,\n        addedNative:\n          token.address === ZeroAddress\n            ? l1GasEstimation.feeWithNativePayment\n            : l1GasEstimation.feeWithTransferPayment,\n        token\n      }\n    }\n  )\n\n  // this is for EOAs paying for SA in native\n  const nativeToken = feeTokens.find(\n    (token) => token.address === ZeroAddress && !token.flags.onGasTank\n  )\n  const nativeTokenOptions: FeePaymentOption[] = nativeAssetBalances.map(\n    (balance: bigint, key: number) => ({\n      paidBy: nativeToCheck[key],\n      availableAmount: balance,\n      addedNative: l1GasEstimation.fee,\n      token: {\n        ...nativeToken,\n        amount: balance\n      }\n    })\n  )\n\n  return {\n    gasUsed,\n    deploymentGas: deployment.gasUsed,\n    feePaymentOptions: [...feeTokenOptions, ...nativeTokenOptions],\n    ambireAccountNonce: accountOp.success ? Number(outcomeNonce - 1n) : Number(outcomeNonce),\n    flags\n  }\n}\n"]}