{"version":3,"file":"erc7677.js","sourceRoot":"","sources":["../../../../src/libs/erc7677/erc7677.ts"],"names":[],"mappings":";;AAeA,kDAyBC;AAED,8DAUC;AAED,oDAYC;AAED,4CAYC;AAhFD,mCAA4C;AAE5C,gDAAyD;AAEzD,sDAAwD;AAGxD,kEAA+D;AAQ/D,SAAgB,mBAAmB,CACjC,OAAe,EACf,YAA8E;IAE9E,IAAI,CAAC,YAAY,IAAI,CAAC,YAAY,CAAC,gBAAgB;QAAE,OAAO,SAAS,CAAA;IAErE,qBAAqB;IACrB,IAAI,KAAK,IAAI,YAAY,CAAC,gBAAgB,EAAE,CAAC;QAC3C,MAAM,gBAAgB,GAAG,YAAY,CAAC,gBAAgB,CAAA;QACtD,gBAAgB,CAAC,EAAE,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAA;QAC1C,OAAO,gBAAgB,CAAA;IACzB,CAAC;IAED,4DAA4D;IAC5D,MAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,CAAA;IAC3D,MAAM,UAAU,GAAG,IAAA,gBAAO,EAAC,OAAO,CAAC,CAAC,WAAW,EAAmB,CAAA;IAClE,MAAM,eAAe,GAAG,IAAA,mBAAU,EAAC,OAAO,CAAC,CAAC,WAAW,EAAmB,CAAA;IAC1E,MAAM,YAAY,GAAQ,QAAQ,CAAC,IAAI,CACrC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,WAAW,EAAE,KAAK,UAAU,IAAI,EAAE,CAAC,WAAW,EAAE,KAAK,eAAe,CAChF,CAAA;IACD,IAAI,CAAC,YAAY;QAAE,OAAO,SAAS,CAAA;IAEnC,MAAM,gBAAgB,GAAG,YAAY,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAA;IACpE,gBAAgB,CAAC,EAAE,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAA;IAC1C,OAAO,gBAAgB,CAAA;AACzB,CAAC;AAED,SAAgB,yBAAyB,CACvC,OAAoB,EACpB,UAAkB;IAElB,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE;QAAE,OAAO,SAAS,CAAA;IAE9C,OAAO;QACL,GAAG,EAAE,GAAG,UAAU,iBAAiB;QACnC,EAAE,EAAE,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE;KACzB,CAAA;AACH,CAAC;AAED,SAAgB,oBAAoB,CAClC,OAAyB,EACzB,MAAqB,EACrB,OAAgB;IAEhB,MAAM,QAAQ,GAAG,IAAA,yBAAc,EAAC,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,OAAO,CAAC,OAAO,CAAC,CAAA;IAC/D,OAAO,QAAQ,CAAC,IAAI,CAAC,yBAAyB,EAAE;QAC9C,IAAA,8BAAc,EAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QACzB,4BAAmB;QACnB,IAAA,gBAAO,EAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;QACnC,OAAO,CAAC,OAAO;KAChB,CAAC,CAAA;AACJ,CAAC;AAEM,KAAK,UAAU,gBAAgB,CACpC,OAAyB,EACzB,MAAqB,EACrB,OAAgB;IAEhB,MAAM,QAAQ,GAAG,IAAA,yBAAc,EAAC,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,OAAO,CAAC,OAAO,CAAC,CAAA;IAC/D,OAAO,QAAQ,CAAC,IAAI,CAAC,qBAAqB,EAAE;QAC1C,IAAA,8BAAc,EAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QACzB,4BAAmB;QACnB,IAAA,gBAAO,EAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;QACnC,OAAO,CAAC,OAAO;KAChB,CAAC,CAAA;AACJ,CAAC","sourcesContent":["import { toBeHex, toQuantity } from 'ethers'\n\nimport { ERC_4337_ENTRYPOINT } from '../../consts/deploy'\nimport { Network } from '../../interfaces/network'\nimport { getRpcProvider } from '../../services/provider'\nimport { BaseAccount } from '../account/BaseAccount'\nimport { UserOperation } from '../userOperation/types'\nimport { getCleanUserOp } from '../userOperation/userOperation'\nimport {\n  PaymasterCapabilities,\n  PaymasterData,\n  PaymasterEstimationData,\n  PaymasterService\n} from './types'\n\nexport function getPaymasterService(\n  chainId: bigint,\n  capabilities?: { paymasterService?: PaymasterCapabilities | PaymasterService }\n): PaymasterService | undefined {\n  if (!capabilities || !capabilities.paymasterService) return undefined\n\n  // this means it's v2\n  if ('url' in capabilities.paymasterService) {\n    const paymasterService = capabilities.paymasterService\n    paymasterService.id = new Date().getTime()\n    return paymasterService\n  }\n\n  // hex may come with a leading zero or not. Prepare for both\n  const chainIds = Object.keys(capabilities.paymasterService)\n  const chainIdHex = toBeHex(chainId).toLowerCase() as `0x${string}`\n  const chainIdQuantity = toQuantity(chainId).toLowerCase() as `0x${string}`\n  const foundChainId: any = chainIds.find(\n    (id) => id.toLowerCase() === chainIdHex || id.toLowerCase() === chainIdQuantity\n  )\n  if (!foundChainId) return undefined\n\n  const paymasterService = capabilities.paymasterService[foundChainId]\n  paymasterService.id = new Date().getTime()\n  return paymasterService\n}\n\nexport function getAmbirePaymasterService(\n  baseAcc: BaseAccount,\n  relayerUrl: string\n): PaymasterService | undefined {\n  if (!baseAcc.isSponsorable()) return undefined\n\n  return {\n    url: `${relayerUrl}/v2/sponsorship`,\n    id: new Date().getTime()\n  }\n}\n\nexport function getPaymasterStubData(\n  service: PaymasterService,\n  userOp: UserOperation,\n  network: Network\n): Promise<PaymasterEstimationData> {\n  const provider = getRpcProvider([service.url], network.chainId)\n  return provider.send('pm_getPaymasterStubData', [\n    getCleanUserOp(userOp)[0],\n    ERC_4337_ENTRYPOINT,\n    toBeHex(network.chainId.toString()),\n    service.context\n  ])\n}\n\nexport async function getPaymasterData(\n  service: PaymasterService,\n  userOp: UserOperation,\n  network: Network\n): Promise<PaymasterData> {\n  const provider = getRpcProvider([service.url], network.chainId)\n  return provider.send('pm_getPaymasterData', [\n    getCleanUserOp(userOp)[0],\n    ERC_4337_ENTRYPOINT,\n    toBeHex(network.chainId.toString()),\n    service.context\n  ])\n}\n"]}