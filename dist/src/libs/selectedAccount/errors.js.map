{"version":3,"file":"errors.js","sourceRoot":"","sources":["../../../../src/libs/selectedAccount/errors.ts"],"names":[],"mappings":"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","sourcesContent":["import { Network, NetworkId } from '../../interfaces/network'\nimport { RPCProviders } from '../../interfaces/provider'\nimport { SelectedAccountPortfolioState } from '../../interfaces/selectedAccount'\nimport {\n  AccountState as DefiPositionsAccountState,\n  DeFiPositionsError,\n  NetworksWithPositions\n} from '../defiPositions/types'\nimport { getNetworksWithFailedRPC } from '../networks/networks'\nimport { AccountAssetsState } from '../portfolio/interfaces'\nimport { PORTFOLIO_LIB_ERROR_NAMES } from '../portfolio/portfolio'\n\nconst TEN_MINUTES = 10 * 60 * 1000\n\nexport type Action = {\n  label: 'Select'\n  actionName: 'select-rpc-url'\n  meta: { network: Network }\n}\n\nexport type SelectedAccountBalanceError = {\n  id: string\n  networkIds: NetworkId[]\n  type: 'error' | 'warning'\n  title: string\n  text?: string\n  actions?: Action[]\n}\n\nexport const getNetworksWithFailedRPCErrors = ({\n  providers,\n  networks,\n  networksWithAssets\n}: {\n  providers: RPCProviders\n  networks: Network[]\n  networksWithAssets: AccountAssetsState\n}): SelectedAccountBalanceError[] => {\n  const errors: SelectedAccountBalanceError[] = []\n  const networkIds = getNetworksWithFailedRPC({ providers }).filter(\n    (networkId) =>\n      (Object.keys(networksWithAssets).includes(networkId) &&\n        networksWithAssets[networkId] === true) ||\n      !Object.keys(networksWithAssets).includes(networkId)\n  )\n\n  const networksData = networkIds.map((id) => networks.find((n: Network) => n.id === id)!)\n\n  const allFailed = networksData.length === networks.length\n\n  const networksWithMultipleRpcUrls = allFailed\n    ? []\n    : networksData.filter((n) => n?.rpcUrls?.length > 1)\n\n  const networksToGroupInSingleBanner = allFailed\n    ? networksData\n    : networksData.filter((n) => n?.rpcUrls?.length <= 1)\n\n  if (!networksData.length) return errors\n\n  networksWithMultipleRpcUrls.forEach((n) => {\n    errors.push({\n      id: `custom-rpcs-down-${n.id}`,\n      networkIds: [n.id],\n      type: 'error',\n      title: `Failed to retrieve network data for ${n.name}. You can try selecting another RPC URL`,\n      text: 'Affected features: visible assets, DeFi positions, sign message/transaction, ENS/UD domain resolving, add account.',\n      actions: [\n        {\n          label: 'Select',\n          actionName: 'select-rpc-url',\n          meta: { network: n }\n        }\n      ]\n    })\n  })\n\n  if (!networksToGroupInSingleBanner.length) return errors\n\n  errors.push({\n    id: 'rpcs-down',\n    networkIds: networksToGroupInSingleBanner.map((n) => n.id),\n    type: 'error',\n    title: `Failed to retrieve network data for ${networksToGroupInSingleBanner\n      .map((n) => n.name)\n      .join(', ')} (RPC malfunction)`,\n    text: 'Affected features: visible assets, DeFi positions, sign message/transaction, ENS/UD domain resolving, add account.'\n  })\n\n  return errors\n}\n\nconst addPortfolioError = (\n  errors: SelectedAccountBalanceError[],\n  networkId: NetworkId,\n  newError: keyof typeof PORTFOLIO_LIB_ERROR_NAMES | 'portfolio-critical'\n) => {\n  const newErrors = [...errors]\n  const existingError = newErrors.find((error) => error.id === newError)\n\n  if (existingError) {\n    existingError.networkIds.push(networkId)\n  } else {\n    let title = ''\n    let text = ''\n    let type: 'error' | 'warning' = 'error'\n\n    switch (newError) {\n      case 'portfolio-critical':\n        title = 'Failed to retrieve the portfolio data'\n        text = 'Account balance and visible assets may be inaccurate.'\n        break\n      case PORTFOLIO_LIB_ERROR_NAMES.PriceFetchError:\n        title = 'Failed to retrieve prices'\n        text = 'Account balance and asset prices may be inaccurate.'\n        type = 'warning'\n        break\n      case PORTFOLIO_LIB_ERROR_NAMES.NoApiHintsError:\n        title = 'Automatic asset discovery is temporarily unavailable'\n        text =\n          'Your funds are safe, but your portfolio will be inaccurate. You can add assets manually or wait for the issue to be resolved.'\n        break\n      case PORTFOLIO_LIB_ERROR_NAMES.StaleApiHintsError:\n        title = 'Automatic asset discovery is temporarily unavailable'\n        text =\n          'New assets may not be visible in your portfolio. You can add assets manually or wait for the issue to be resolved.'\n        type = 'warning'\n        break\n      default:\n        break\n    }\n\n    if (!title) return newErrors\n\n    newErrors.push({\n      id: newError,\n      networkIds: [networkId],\n      type,\n      title,\n      text\n    })\n  }\n\n  return newErrors\n}\n\nexport const getNetworksWithPortfolioErrorErrors = ({\n  networks,\n  selectedAccountLatest,\n  providers\n}: {\n  networks: Network[]\n  selectedAccountLatest: SelectedAccountPortfolioState\n  providers: RPCProviders\n}): SelectedAccountBalanceError[] => {\n  let errors: SelectedAccountBalanceError[] = []\n\n  const portfolioLoading = Object.keys(selectedAccountLatest).some((network) => {\n    const portfolioForNetwork = selectedAccountLatest[network]\n\n    return portfolioForNetwork?.isLoading\n  })\n\n  // Otherwise networks are appended to the banner one by one, which looks weird\n  if (portfolioLoading) return []\n\n  if (!Object.keys(selectedAccountLatest).length) return []\n\n  Object.keys(selectedAccountLatest).forEach((network) => {\n    const portfolioForNetwork = selectedAccountLatest[network]\n    const criticalError = portfolioForNetwork?.criticalError\n    const lastSuccessfulUpdate = portfolioForNetwork?.result?.lastSuccessfulUpdate\n\n    // Don't display an error banner if the last successful update was less than 10 minutes ago\n    if (typeof lastSuccessfulUpdate === 'number' && Date.now() - lastSuccessfulUpdate < TEN_MINUTES)\n      return\n\n    if (!portfolioForNetwork || !network || portfolioForNetwork.isLoading) return\n    // Don't display an error banner if the RPC isn't working because an RPC error banner is already displayed.\n    // In case of additional networks don't check the RPC as there isn't one\n    if (\n      criticalError &&\n      (['gasTank', 'rewards'].includes(network) || providers[network]?.isWorking)\n    ) {\n      errors = addPortfolioError(errors, network, 'portfolio-critical')\n      return\n    }\n\n    portfolioForNetwork?.errors.forEach((err: any) => {\n      errors = addPortfolioError(errors, network, err.name)\n    })\n  })\n\n  return errors.map(({ title, networkIds, ...rest }) => {\n    const networkNames = networkIds.reduce((acc, id, index) => {\n      let networkName = networks.find((n) => n.id === id)?.name\n      const isLast = index === networkIds.length - 1\n      const isOnly = networkIds.length === 1\n\n      if (id === 'gasTank') networkName = 'Gas Tank'\n      else if (id === 'rewards') networkName = 'Rewards'\n\n      if (!networkName) return acc\n\n      return `${acc}${networkName}${isLast || isOnly ? '' : ', '}`\n    }, '')\n\n    return {\n      ...rest,\n      title: `${title} on ${networkNames}`,\n      networkIds\n    }\n  })\n}\n\nexport const getNetworksWithDeFiPositionsErrorErrors = ({\n  networks,\n  currentAccountState,\n  providers,\n  networksWithPositions\n}: {\n  networks: Network[]\n  currentAccountState: DefiPositionsAccountState\n  providers: RPCProviders\n  networksWithPositions: NetworksWithPositions\n}) => {\n  const isLoading = Object.keys(currentAccountState).some((networkId) => {\n    const networkState = currentAccountState[networkId]\n    return networkState.isLoading\n  })\n\n  if (isLoading) return []\n\n  const networkNamesWithUnknownCriticalError: string[] = []\n  const networkNamesWithAssetPriceCriticalError: string[] = []\n  const providersWithErrors: {\n    [providerName: string]: string[]\n  } = {}\n\n  Object.keys(currentAccountState).forEach((networkId) => {\n    const providersWithPositions = networksWithPositions[networkId]\n    // Ignore networks that don't have positions\n    // but ensure that we have a successful response stored (the network key is present)\n    if (providersWithPositions && !providersWithPositions.length) return\n\n    const networkState = currentAccountState[networkId]\n    const network = networks.find((n) => n.id === networkId)\n    const rpcProvider = providers[networkId]\n    const lastSuccessfulUpdate = networkState.updatedAt\n\n    if (\n      !network ||\n      !networkState ||\n      (typeof lastSuccessfulUpdate === 'number' &&\n        Date.now() - lastSuccessfulUpdate < TEN_MINUTES) ||\n      // Don't display an error banner if the RPC isn't working because an RPC error banner is already displayed.\n      (typeof rpcProvider.isWorking === 'boolean' && !rpcProvider.isWorking)\n    )\n      return\n\n    if (networkState.error) {\n      if (networkState.error === DeFiPositionsError.AssetPriceError) {\n        networkNamesWithAssetPriceCriticalError.push(network.name)\n      } else if (networkState.error === DeFiPositionsError.CriticalError) {\n        networkNamesWithUnknownCriticalError.push(network.name)\n      }\n    }\n\n    const providerNamesWithErrors =\n      networkState.providerErrors\n        ?.filter(({ providerName }) => {\n          // Display all errors if there hasn't been a successful update\n          // for the network.\n          if (!networksWithPositions[networkId]) return true\n          // Exclude providers without positions\n          return networksWithPositions[networkId].includes(providerName)\n        })\n        .map((e) => e.providerName) || []\n\n    if (providerNamesWithErrors.length) {\n      providerNamesWithErrors.forEach((providerName) => {\n        if (!providersWithErrors[providerName]) providersWithErrors[providerName] = []\n\n        providersWithErrors[providerName].push(network.name)\n      })\n    }\n  })\n\n  const providerErrors: SelectedAccountBalanceError[] = Object.entries(providersWithErrors).map(\n    ([providerName, networkNames]) => {\n      return {\n        id: `${providerName}-defi-positions-error`,\n        type: 'error',\n        networkIds: networkNames.map(\n          (n) => networks.find((network) => network.name === n)?.id as NetworkId\n        ),\n        title: `Failed to retrieve DeFi positions for ${providerName} on ${networkNames.join(', ')}`\n      }\n    }\n  )\n\n  const errors = providerErrors\n\n  if (networkNamesWithUnknownCriticalError.length) {\n    errors.push({\n      id: 'defi-critical',\n      type: 'error',\n      title: `Failed to retrieve DeFi positions on ${networkNamesWithUnknownCriticalError.join(\n        ', '\n      )}`,\n      networkIds: networkNamesWithUnknownCriticalError.map(\n        (n) => networks.find((network) => network.name === n)?.id as NetworkId\n      )\n    })\n  }\n  if (networkNamesWithAssetPriceCriticalError.length) {\n    errors.push({\n      id: 'defi-prices',\n      type: 'warning',\n      title: `Failed to retrieve asset prices for DeFi positions on ${networkNamesWithAssetPriceCriticalError.join(\n        ', '\n      )}`,\n      networkIds: networkNamesWithAssetPriceCriticalError.map(\n        (n) => networks.find((network) => network.name === n)?.id as NetworkId\n      )\n    })\n  }\n\n  return errors\n}\n"]}