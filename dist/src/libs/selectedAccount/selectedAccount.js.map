{"version":3,"file":"selectedAccount.js","sourceRoot":"","sources":["../../../../src/libs/selectedAccount/selectedAccount.ts"],"names":[],"mappings":"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","sourcesContent":["import { getAddress } from 'ethers'\n\nimport {\n  SelectedAccountPortfolio,\n  SelectedAccountPortfolioState,\n  SelectedAccountPortfolioTokenResult\n} from '../../interfaces/selectedAccount'\nimport { safeTokenAmountAndNumberMultiplication } from '../../utils/numbers/formatters'\nimport {\n  AccountState as DefiPositionsAccountState,\n  AssetType,\n  PositionsByProvider\n} from '../defiPositions/types'\nimport {\n  AccountState,\n  CollectionResult,\n  NetworkSimulatedAccountOp,\n  NetworkState,\n  TokenResult\n} from '../portfolio/interfaces'\n\nexport const updatePortfolioStateWithDefiPositions = (\n  portfolioAccountState: AccountState,\n  defiPositionsAccountState: DefiPositionsAccountState,\n  areDefiPositionsLoading: boolean\n) => {\n  if (!portfolioAccountState || !defiPositionsAccountState || areDefiPositionsLoading)\n    return portfolioAccountState\n\n  Object.keys(portfolioAccountState).forEach((networkId) => {\n    const networkState = portfolioAccountState[networkId]\n\n    if (!networkState?.result || defiPositionsAccountState[networkId]?.isLoading) return\n\n    let tokens = networkState.result.tokens || []\n    let networkBalance = networkState.result.total?.usd || 0\n\n    const positions = defiPositionsAccountState[networkId] || {}\n\n    positions.positionsByProvider?.forEach((posByProv: PositionsByProvider) => {\n      if (posByProv.type === 'liquidity-pool') {\n        networkBalance += posByProv.positionInUSD || 0\n        return\n      }\n\n      posByProv.positions.forEach((pos) => {\n        pos.assets\n          .filter((a) => a.type !== AssetType.Liquidity && a.protocolAsset)\n          .forEach((a) => {\n            const tokenInPortfolioIndex = tokens.findIndex((t) => {\n              return (\n                getAddress(t.address) === getAddress(a.protocolAsset!.address) &&\n                t.networkId === networkId\n              )\n            })\n\n            if (tokenInPortfolioIndex !== -1) {\n              const tokenInPortfolio = tokens[tokenInPortfolioIndex]\n              const priceUSD = tokenInPortfolio.priceIn.find(\n                ({ baseCurrency }: { baseCurrency: string }) => baseCurrency.toLowerCase() === 'usd'\n              )?.price\n              const tokenBalanceUSD = priceUSD\n                ? Number(\n                    safeTokenAmountAndNumberMultiplication(\n                      BigInt(tokenInPortfolio.amount),\n                      tokenInPortfolio.decimals,\n                      priceUSD\n                    )\n                  )\n                : undefined\n\n              networkBalance -= tokenBalanceUSD || 0 // deduct portfolio token balance\n              tokens = tokens.filter((_, index) => index !== tokenInPortfolioIndex)\n            }\n\n            // Add only the balance of the collateral tokens to the network balance\n            if (a.type === AssetType.Collateral) {\n              const protocolPriceUSD = a.priceIn.find(\n                ({ baseCurrency }: { baseCurrency: string }) => baseCurrency.toLowerCase() === 'usd'\n              )?.price\n\n              const protocolTokenBalanceUSD = protocolPriceUSD\n                ? Number(\n                    safeTokenAmountAndNumberMultiplication(\n                      BigInt(a.amount),\n                      Number(a.protocolAsset!.decimals),\n                      protocolPriceUSD\n                    )\n                  )\n                : undefined\n\n              networkBalance += protocolTokenBalanceUSD || 0\n            }\n            tokens.push({\n              amount: a.amount,\n              // Only list the borrowed asset with no price\n              priceIn: a.type === AssetType.Collateral ? a.priceIn : [],\n              decimals: Number(a.protocolAsset!.decimals),\n              address: a.protocolAsset!.address,\n              symbol: a.protocolAsset!.symbol,\n              networkId,\n              flags: {\n                canTopUpGasTank: false,\n                isFeeToken: false,\n                onGasTank: false,\n                rewardsType: null\n              }\n            })\n          })\n      })\n    })\n\n    // eslint-disable-next-line no-param-reassign\n    portfolioAccountState[networkId]!.result!.total.usd = networkBalance\n    // eslint-disable-next-line no-param-reassign\n    portfolioAccountState[networkId]!.result!.tokens = tokens\n  })\n\n  return portfolioAccountState\n}\n\nconst stripPortfolioState = (portfolioState: AccountState) => {\n  const strippedState: SelectedAccountPortfolioState = {}\n\n  Object.keys(portfolioState).forEach((networkId) => {\n    const networkState = portfolioState[networkId]\n    if (!networkState) return\n\n    if (!networkState.result) {\n      strippedState[networkId] = networkState\n      return\n    }\n\n    // A trick to exclude specific keys\n    const { tokens, collections, tokenErrors, priceCache, hintsFromExternalAPI, ...result } =\n      networkState.result\n\n    strippedState[networkId] = {\n      ...networkState,\n      result\n    }\n  })\n\n  return strippedState\n}\n\nexport const isNetworkReady = (networkData: NetworkState | undefined) => {\n  return (\n    networkData && (networkData.isReady || networkData?.criticalError) && !networkData.isLoading\n  )\n}\n\nconst calculateTokenArray = (\n  networkId: string,\n  latestTokens: TokenResult[],\n  pendingTokens: TokenResult[],\n  isPendingValid: boolean\n) => {\n  if (networkId === 'gasTank' || networkId === 'rewards') {\n    return latestTokens\n  }\n  // If the pending state is older or there are no pending tokens\n  // we shouldn't trust it to build the tokens array\n  if (isPendingValid && pendingTokens.length) {\n    return pendingTokens.map((pendingToken) => {\n      const latestToken = latestTokens.find((latest) => {\n        return latest.address === pendingToken.address\n      })\n\n      return {\n        ...pendingToken,\n        latestAmount: latestToken?.amount,\n        pendingAmount: pendingToken.amount\n      }\n    })\n  }\n\n  // Add only latestAmount to the tokens\n  return latestTokens.map((token) => {\n    return {\n      ...token,\n      latestAmount: token.amount\n    }\n  })\n}\n\nexport function calculateSelectedAccountPortfolio(\n  latestStateSelectedAccount: AccountState,\n  pendingStateSelectedAccount: AccountState,\n  accountPortfolio: SelectedAccountPortfolio | null,\n  hasSignAccountOp?: boolean\n) {\n  const collections: CollectionResult[] = []\n  const tokens: SelectedAccountPortfolioTokenResult[] = []\n\n  let newTotalBalance: number = 0\n\n  const hasLatest = latestStateSelectedAccount && Object.keys(latestStateSelectedAccount).length\n  let allReady = !!hasLatest\n\n  const hasPending = pendingStateSelectedAccount && Object.keys(pendingStateSelectedAccount).length\n  if (!hasLatest && !hasPending) {\n    return {\n      tokens: accountPortfolio?.tokens || [],\n      collections: accountPortfolio?.collections || [],\n      totalBalance: accountPortfolio?.totalBalance || 0,\n      isAllReady: false,\n      networkSimulatedAccountOp: accountPortfolio?.networkSimulatedAccountOp || {},\n      latest: latestStateSelectedAccount,\n      pending: pendingStateSelectedAccount\n    } as SelectedAccountPortfolio\n  }\n\n  let selectedAccountData = latestStateSelectedAccount\n\n  /**\n   * Replaces the latest state if the following conditions are true:\n   * - There is no critical error in the pending state.\n   * - The pending block number is newer than the latest OR we have a signed acc op (because of simulation).\n   */\n  const validSelectedAccountPendingState: AccountState = {}\n  const simulatedAccountOps: NetworkSimulatedAccountOp = {}\n\n  Object.keys(pendingStateSelectedAccount).forEach((network) => {\n    const pendingNetworkData = pendingStateSelectedAccount[network]\n    const latestNetworkData = latestStateSelectedAccount[network]\n\n    // Compare the block numbers to determine if the pending state is newer\n    if (latestNetworkData?.result?.blockNumber && pendingNetworkData?.result?.blockNumber) {\n      const isPendingNewer =\n        pendingNetworkData.result.blockNumber! >= latestNetworkData.result.blockNumber!\n\n      if (!pendingNetworkData.criticalError && (isPendingNewer || hasSignAccountOp)) {\n        validSelectedAccountPendingState[network] = pendingNetworkData\n      }\n    }\n\n    // Store the simulated account op\n    const accountOp = pendingNetworkData?.accountOps?.[0]\n\n    if (accountOp) {\n      simulatedAccountOps[network] = accountOp\n    }\n  })\n\n  if (hasPending && Object.keys(validSelectedAccountPendingState).length > 0) {\n    selectedAccountData = {\n      ...selectedAccountData,\n      ...validSelectedAccountPendingState\n    }\n  }\n\n  Object.keys(selectedAccountData).forEach((network: string) => {\n    const networkData = selectedAccountData[network]\n    const result = networkData?.result\n    if (networkData && isNetworkReady(networkData) && result) {\n      const networkTotal = Number(result?.total?.usd) || 0\n      newTotalBalance += networkTotal\n\n      const latestTokens = latestStateSelectedAccount[network]?.result?.tokens || []\n      const pendingTokens = pendingStateSelectedAccount[network]?.result?.tokens || []\n      const networkCollections = result?.collections || []\n\n      const tokensArray = calculateTokenArray(\n        network,\n        latestTokens,\n        pendingTokens,\n        !!validSelectedAccountPendingState[network]\n      )\n\n      tokens.push(...tokensArray)\n      collections.push(...networkCollections)\n    }\n\n    if (!isNetworkReady(networkData)) {\n      allReady = false\n    }\n  })\n\n  return {\n    totalBalance: newTotalBalance,\n    tokens,\n    collections,\n    isAllReady: allReady,\n    networkSimulatedAccountOp: simulatedAccountOps,\n    latest: stripPortfolioState(latestStateSelectedAccount),\n    pending: stripPortfolioState(pendingStateSelectedAccount)\n  } as SelectedAccountPortfolio\n}\n"]}