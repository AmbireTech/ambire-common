{"version":3,"file":"deploy.js","sourceRoot":"","sources":["../../../../src/libs/proxyDeploy/deploy.ts"],"names":[],"mappings":"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","sourcesContent":["const abi = require('ethereumjs-abi')\nconst keccak256 = require('js-sha3').keccak256\n\n// @TODO: fix the any\nfunction evmPush(data: any) {\n  if (data.length < 1) throw new Error('evmPush: no data')\n  if (data.length > 32) throw new Error('evmPush: data too long')\n  const opCode = data.length + 95\n  const opCodeBuf = Buffer.alloc(1)\n  opCodeBuf.writeUInt8(opCode, 0)\n  return Buffer.concat([opCodeBuf, data])\n}\n\n// @TODO: fix the any\nexport function privSlot(slotNumber: any, keyType: any, key: any, valueType: any) {\n  const buf = abi.rawEncode([keyType, valueType], [key, slotNumber])\n  return keccak256(buf)\n}\n\n// @TODO: fix the any\nfunction sstoreCode(slotNumber: any, keyType: any, key: any, valueType: any, valueBuf: any) {\n  // @TODO why are we using valueType for the slotNumber? this has to be a hardcoded uint256 and valueType is pointless\n  const slot = privSlot(slotNumber, keyType, key, valueType)\n  return Buffer.concat([\n    evmPush(typeof valueBuf === 'string' ? Buffer.from(valueBuf.slice(2), 'hex') : valueBuf),\n    evmPush(Buffer.from(slot, 'hex')),\n    Buffer.from('55', 'hex')\n  ])\n}\n\nexport interface PrivLevels {\n  addr: string\n  hash: string\n}\n\nexport function getProxyDeployBytecode(\n  masterContractAddr: string,\n  privLevels: PrivLevels[],\n  opts = { privSlot: 0 }\n) {\n  const slotNumber = opts.privSlot ?? 0\n  if (privLevels.length > 3) throw new Error('getProxyDeployBytecode: max 3 privLevels')\n  const storage = Buffer.concat(\n    privLevels.map(({ addr, hash }) => sstoreCode(slotNumber, 'address', addr, 'bytes32', hash))\n  )\n  const initial = Buffer.from('3d602d80', 'hex')\n  // NOTE: this means we can't support offset>256\n  // @TODO solve this case; this will remove the \"max 3 privLevels\" restriction\n  const offset = storage.length + initial.length + 6 // 6 more bytes including the push added later on\n  if (offset > 256) throw new Error('getProxyDeployBytecode: internal: offset>256')\n  const initialCode = Buffer.concat([storage, initial, evmPush(Buffer.from([offset]))])\n  const masterAddrBuf = Buffer.from(masterContractAddr.slice(2).replace(/^(00)+/, ''), 'hex')\n\n  // TO DO: check if masterAddrBuf.length actually makes sense\n  if (masterAddrBuf.length > 20) throw new Error('invalid address')\n  return `0x${initialCode.toString('hex')}3d3981f3363d3d373d3d3d363d${evmPush(\n    masterAddrBuf\n  ).toString('hex')}5af43d82803e903d91602b57fd5bf3`\n}\n\nexport function getStorageSlotsFromArtifact(buildInfo: any) {\n  if (!buildInfo) return { privSlot: 0 }\n  const ambireAccountArtifact = buildInfo.output.sources['contracts/AmbireAccount.sol']\n  if (!ambireAccountArtifact) return { privSlot: 0 }\n  const identityNode = ambireAccountArtifact.ast.nodes.find(\n    (el: any) => el.nodeType === 'ContractDefinition' && el.name === 'AmbireAccount'\n  )\n  const storageVariableNodes = identityNode.nodes.filter(\n    (n: any) => n.nodeType === 'VariableDeclaration' && !n.constant && n.stateVariable\n  )\n  const slotNumber = storageVariableNodes.findIndex((x: any) => x.name === 'privileges')\n\n  return { privSlot: slotNumber }\n}\n"]}