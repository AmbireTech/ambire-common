{"version":3,"file":"singleton.js","sourceRoot":"","sources":["../../../../src/libs/singleton/singleton.ts"],"names":[],"mappings":";;;AAAA,gDAAgD;AAChD,6DAA6D;AAC7D,gEAAgE;AAChE,kEAAkE;AAClE,0CAA0C;AAC1C,EAAE;AACF,sEAAsE;AACtE,kEAAkE;AAClE,mDAAmD;AACnD,EAAE;AACF,4EAA4E;AAC5E,2EAA2E;AAC3E,0EAA0E;AAC1E,0EAA0E;AAC1E,yBAAyB;AACzB,EAAE;AACF,uEAAuE;AACvE,4EAA4E;AAC5E,0EAA0E;AAC1E,SAAgB,UAAU,CAAC,OAAe;IACxC,IAAI,OAAO,GAAG,QAAQ;QAAE,OAAO,QAAQ,CAAA;IAEvC,IAAI,OAAO,GAAG,SAAS;QAAE,OAAO,OAAO,GAAG,EAAE,CAAA;IAE5C,OAAO,OAAO,CAAA;AAChB,CAAC;AAND,gCAMC","sourcesContent":["// Special exception for the singleton deployer:\n// Estimation on various networks depends entirely on the RPC\n// implementation of eth_estimateGas. On ethereum, the RPC tends\n// to return ~6kk for our deploy contracts call, which is great as\n// the txn will pass (it needs about 4kk).\n//\n// On polygon though, it returns ~600k, meaning the txn will fail with\n// out of gas without any warnings to the user. That's why we need\n// to manually up the gasUsed to at least 4500000n,\n//\n// Then come networks with wild gas estimations above 10m (Arbitrum, Mantle)\n// Because of the blob updates, networks fees on this networks have lowered\n// dramatically. But no RPC can estimate correctly how much gas is need to\n// correctly deploy on the network. That's why we do a multiplication by 5\n// and hope for the best.\n//\n// The backside to this is that txns to the singleton can overestimate.\n// Overestimation is now so bad, though. If the real gas is lower, the funds\n// will not be taken from the user. Underestimation is worse as txn fails.\nexport function getGasUsed(gasUsed: bigint): bigint {\n  if (gasUsed < 4500000n) return 4500000n\n\n  if (gasUsed > 10000000n) return gasUsed * 5n\n\n  return gasUsed\n}\n"]}