{"version":3,"file":"userOperation.js","sourceRoot":"","sources":["../../../../src/libs/userOperation/userOperation.ts"],"names":[],"mappings":"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","sourcesContent":["import { AbiCoder, concat, getAddress, hexlify, Interface, keccak256, Log, toBeHex } from 'ethers'\nimport { Network } from '../../interfaces/network'\n\nimport AmbireAccount from '../../../contracts/compiled/AmbireAccount.json'\nimport AmbireFactory from '../../../contracts/compiled/AmbireFactory.json'\nimport { BUNDLER } from '../../consts/bundlers'\nimport {\n  AMBIRE_ACCOUNT_FACTORY,\n  AMBIRE_PAYMASTER,\n  AMBIRE_PAYMASTER_SIGNER,\n  ENTRY_POINT_MARKER,\n  ERC_4337_ENTRYPOINT\n} from '../../consts/deploy'\nimport { SPOOF_SIGTYPE } from '../../consts/signatures'\nimport { Account, AccountId, AccountOnchainState } from '../../interfaces/account'\nimport { AccountOp, callToTuple } from '../accountOp/accountOp'\nimport { UserOperation, UserOperationEventData, UserOpRequestType } from './types'\n\nexport function calculateCallDataCost(callData: string): bigint {\n  if (callData === '0x') return 0n\n  const bytes = Buffer.from(callData.substring(2))\n  const nonZeroBytes = BigInt(bytes.filter((b) => b).length)\n  const zeroBytes = BigInt(BigInt(bytes.length) - nonZeroBytes)\n  return zeroBytes * 4n + nonZeroBytes * 16n\n}\n\nexport function getPaymasterSpoof() {\n  const abiCoder = new AbiCoder()\n  const spoofSig = abiCoder.encode(['address'], [AMBIRE_PAYMASTER_SIGNER]) + SPOOF_SIGTYPE\n  const simulationData = abiCoder.encode(['uint48', 'uint48', 'bytes'], [0, 0, spoofSig])\n  return hexlify(concat([AMBIRE_PAYMASTER, simulationData]))\n}\n\nexport function getSigForCalculations() {\n  return '0x0dc2d37f7b285a2243b2e1e6ba7195c578c72b395c0f76556f8961b0bca97ddc44e2d7a249598f56081a375837d2b82414c3c94940db3c1e64110108021161ca1c01'\n}\n\n// get the call to give privileges to the entry point\nexport function getActivatorCall(addr: AccountId) {\n  const saAbi = new Interface(AmbireAccount.abi)\n  const givePermsToEntryPointData = saAbi.encodeFunctionData('setAddrPrivilege', [\n    ERC_4337_ENTRYPOINT,\n    ENTRY_POINT_MARKER\n  ])\n  return {\n    to: addr,\n    value: 0n,\n    data: givePermsToEntryPointData\n  }\n}\n\n/**\n * When we use abi.encode or send the user operation to the bundler,\n * we need to strip it of the specific ambire-common properties that we use\n *\n * @param UserOperation userOp\n * @returns EntryPoint userOp\n */\nexport function getCleanUserOp(userOp: UserOperation) {\n  return [(({ requestType, activatorCall, bundler, ...o }) => o)(userOp)]\n}\n\n/**\n * Get the nonce we're expecting in validateUserOp\n * when we're going through the activation | recovery\n *\n * @param UserOperation userOperation\n * @returns hex string\n */\nexport function getOneTimeNonce(userOperation: UserOperation) {\n  if (\n    !userOperation.paymaster ||\n    !userOperation.paymasterVerificationGasLimit ||\n    !userOperation.paymasterPostOpGasLimit ||\n    !userOperation.paymasterData\n  ) {\n    throw new Error('One time nonce could not be encoded because paymaster data is missing')\n  }\n\n  const abiCoder = new AbiCoder()\n  return `0x${keccak256(\n    abiCoder.encode(\n      ['bytes', 'bytes', 'bytes32', 'uint256', 'bytes32', 'bytes'],\n      [\n        userOperation.factory && userOperation.factoryData\n          ? concat([userOperation.factory, userOperation.factoryData])\n          : '0x',\n        userOperation.callData,\n        concat([\n          toBeHex(userOperation.verificationGasLimit, 16),\n          toBeHex(userOperation.callGasLimit, 16)\n        ]),\n        userOperation.preVerificationGas,\n        concat([\n          toBeHex(userOperation.maxPriorityFeePerGas, 16),\n          toBeHex(userOperation.maxFeePerGas, 16)\n        ]),\n        concat([\n          userOperation.paymaster,\n          toBeHex(userOperation.paymasterVerificationGasLimit, 16),\n          toBeHex(userOperation.paymasterPostOpGasLimit, 16),\n          userOperation.paymasterData\n        ])\n      ]\n    )\n  ).substring(18)}${toBeHex(0, 8).substring(2)}`\n}\n\nexport function getRequestType(accountState: AccountOnchainState): UserOpRequestType {\n  return accountState.isDeployed && !accountState.isErc4337Enabled ? 'activator' : 'standard'\n}\n\nexport function shouldUseOneTimeNonce(accountState: AccountOnchainState): boolean {\n  return getRequestType(accountState) !== 'standard'\n}\n\nexport function getUserOperation(\n  account: Account,\n  accountState: AccountOnchainState,\n  accountOp: AccountOp,\n  bundler: BUNDLER,\n  entryPointSig?: string\n): UserOperation {\n  const userOp: UserOperation = {\n    sender: accountOp.accountAddr,\n    nonce: toBeHex(accountState.erc4337Nonce),\n    callData: '0x',\n    callGasLimit: toBeHex(0),\n    verificationGasLimit: toBeHex(0),\n    preVerificationGas: toBeHex(0),\n    maxFeePerGas: toBeHex(1),\n    maxPriorityFeePerGas: toBeHex(1),\n    signature: '0x',\n    requestType: getRequestType(accountState),\n    bundler\n  }\n\n  // if the account is not deployed, prepare the deploy in the initCode\n  if (!accountState.isDeployed) {\n    if (!account.creation) throw new Error('Account creation properties are missing')\n    if (!entryPointSig) throw new Error('No entry point authorization signature provided')\n\n    const factoryInterface = new Interface(AmbireFactory.abi)\n    userOp.factory = account.creation.factoryAddr\n    userOp.factoryData = factoryInterface.encodeFunctionData('deployAndExecute', [\n      account.creation.bytecode,\n      account.creation.salt,\n      [callToTuple(getActivatorCall(accountOp.accountAddr))],\n      entryPointSig\n    ])\n  }\n\n  // if the request type is activator, add the activator call\n  if (userOp.requestType === 'activator')\n    userOp.activatorCall = getActivatorCall(accountOp.accountAddr)\n\n  return userOp\n}\n\nexport function isErc4337Broadcast(\n  acc: Account,\n  network: Network,\n  accountState: AccountOnchainState\n): boolean {\n  // a special exception for gnosis which was a hardcoded chain but\n  // now it's not. The bundler doesn't support state override on gnosis\n  // so if the account IS deployed AND does NOT have 4337 privileges,\n  // it won't be able to use the edge case as the bundler will block\n  // the estimation. That's why we will use the relayer in this case\n  const canBroadcast4337 =\n    network.chainId !== 100n || accountState.isErc4337Enabled || !accountState.isDeployed\n\n  return (\n    canBroadcast4337 &&\n    network.erc4337.enabled &&\n    accountState.isV2 &&\n    !!acc.creation &&\n    getAddress(acc.creation.factoryAddr) === AMBIRE_ACCOUNT_FACTORY\n  )\n}\n\n// for special cases where we broadcast a 4337 operation with an EOA,\n// add the activator call so the use has the entry point attached\nexport function shouldIncludeActivatorCall(\n  network: Network,\n  account: Account,\n  accountState: AccountOnchainState,\n  is4337Broadcast = true\n) {\n  return (\n    account.creation &&\n    account.creation.factoryAddr === AMBIRE_ACCOUNT_FACTORY &&\n    accountState.isV2 &&\n    network.erc4337.enabled &&\n    !accountState.isErc4337Enabled &&\n    (accountState.isDeployed || !is4337Broadcast)\n  )\n}\n\n// if the account is v2 and the network is 4337 and the account hasn't\n// authorized the entry point, he should be asked to do so\n//\n// addition: if the account is the 0.7.0 one\nexport function shouldAskForEntryPointAuthorization(\n  network: Network,\n  account: Account,\n  accountState: AccountOnchainState,\n  alreadySigned: boolean\n) {\n  if (alreadySigned) return false\n\n  return (\n    account.creation &&\n    account.creation.factoryAddr === AMBIRE_ACCOUNT_FACTORY &&\n    accountState.isV2 &&\n    !accountState.isDeployed &&\n    network.erc4337.enabled &&\n    !accountState.isErc4337Enabled\n  )\n}\n\nexport const ENTRY_POINT_AUTHORIZATION_REQUEST_ID = 'ENTRY_POINT_AUTHORIZATION_REQUEST_ID'\n\nexport function getUserOpHash(userOp: UserOperation, chainId: bigint) {\n  const abiCoder = new AbiCoder()\n  const initCode = userOp.factory ? concat([userOp.factory, userOp.factoryData!]) : '0x'\n  const hashInitCode = keccak256(initCode)\n  const hashCallData = keccak256(userOp.callData)\n  const accountGasLimits = concat([\n    toBeHex(userOp.verificationGasLimit.toString(), 16),\n    toBeHex(userOp.callGasLimit.toString(), 16)\n  ])\n  const gasFees = concat([\n    toBeHex(userOp.maxPriorityFeePerGas.toString(), 16),\n    toBeHex(userOp.maxFeePerGas.toString(), 16)\n  ])\n  const paymasterAndData = userOp.paymaster\n    ? concat([\n        userOp.paymaster,\n        toBeHex(userOp.paymasterVerificationGasLimit!.toString(), 16),\n        toBeHex(userOp.paymasterPostOpGasLimit!.toString(), 16),\n        userOp.paymasterData!\n      ])\n    : '0x'\n  const hashPaymasterAndData = keccak256(paymasterAndData)\n  const packed = abiCoder.encode(\n    ['address', 'uint256', 'bytes32', 'bytes32', 'bytes32', 'uint256', 'bytes32', 'bytes32'],\n    [\n      userOp.sender,\n      userOp.nonce,\n      hashInitCode,\n      hashCallData,\n      accountGasLimits,\n      userOp.preVerificationGas,\n      gasFees,\n      hashPaymasterAndData\n    ]\n  )\n  const packedHash = keccak256(packed)\n  return keccak256(\n    abiCoder.encode(['bytes32', 'address', 'uint256'], [packedHash, ERC_4337_ENTRYPOINT, chainId])\n  )\n}\n\n// try to parse the UserOperationEvent to understand whether\n// the user op is a success or a failure\nexport const parseLogs = (\n  logs: readonly Log[],\n  userOpHash: string,\n  userOpsLength?: number // benzina only\n): UserOperationEventData | null => {\n  if (userOpHash === '' && userOpsLength !== 1) return null\n\n  let userOpLog = null\n  logs.forEach((log: Log) => {\n    try {\n      if (\n        log.topics.length === 4 &&\n        (log.topics[1].toLowerCase() === userOpHash.toLowerCase() || userOpsLength === 1)\n      ) {\n        // decode data for UserOperationEvent:\n        // 'event UserOperationEvent(bytes32 indexed userOpHash, address indexed sender, address indexed paymaster, uint256 nonce, bool success, uint256 actualGasCost, uint256 actualGasUsed)'\n        const coder = new AbiCoder()\n        userOpLog = coder.decode(['uint256', 'bool', 'uint256', 'uint256'], log.data)\n      }\n    } catch (e: any) {\n      /* silence is bitcoin */\n    }\n  })\n\n  if (!userOpLog) return null\n\n  return {\n    nonce: userOpLog[0],\n    success: userOpLog[1]\n  }\n}\n"]}