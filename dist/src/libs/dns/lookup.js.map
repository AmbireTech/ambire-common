{"version":3,"file":"lookup.js","sourceRoot":"","sources":["../../../../src/libs/dns/lookup.ts"],"names":[],"mappings":";;AAiBA,yBAWC;AA5BD,MAAM,EAAE,SAAS,EAAE,GAAG,OAAO,CAAC,wBAAwB,CAAC,CAAA;AAMvD;;;;;;;;;;GAUG;AACY,KAAK,UAAU,MAAM,CAAC,QAAgB,EAAE,MAAc,EAAE,MAAe,EAAE;IACtF,MAAM,QAAQ,GAAG,GAAG,CAAC,WAAW,IAAI,sCAAsC,CAAA;IAC1E,MAAM,UAAU,GAAG,GAAG,QAAQ,eAAe,MAAM,EAAE,CAAA;IACrD,MAAM,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAA;IACzC,IAAI,CAAC;QACH,MAAM,GAAG,GAAG,MAAM,MAAM,CAAC,cAAc,CAAC,KAAK,EAAE,UAAU,CAAC,CAAA;QAC1D,OAAO,GAAG,CAAA;IACZ,CAAC;IAAC,OAAO,KAAU,EAAE,CAAC;QACpB,IAAI,KAAK,CAAC,IAAI,IAAI,oBAAoB;YAAE,OAAO,IAAI,CAAA;QACnD,MAAM,IAAI,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAA;IAChC,CAAC;AACH,CAAC","sourcesContent":["const { DNSProver } = require('@ensdomains/dnsprovejs')\n\ninterface Options {\n  apiProvider?: string // cloudflare or another DNS api provider\n}\n\n/**\n * The method returns a SignedSet answer if found or throws an exception\n * if it could not verify it. So in the case of NoValidDnskeyError, we\n * silently return null to indicate that no SignedSet exists for this record.\n * If the error is of a different kind, we throw it.\n *\n * @param selector string \"20221208\" from example 20221208._domainkey.gmail.com\n * @param domain string \"gmail.com\" from example 20221208._domainkey.gmail.com\n * @param opt: Options\n * @returns {answer: SignedSet, proofs: [SignedSet,SignedSet,...]}\n */\nexport default async function lookup(selector: string, domain: string, opt: Options = {}): Promise<any> {\n  const provider = opt.apiProvider ?? 'https://cloudflare-dns.com/dns-query'\n  const textDomain = `${selector}._domainKey.${domain}`\n  const prover = DNSProver.create(provider)\n  try {\n    const res = await prover.queryWithProof('TXT', textDomain)\n    return res\n  } catch (error: any) {\n    if (error.name == 'NoValidDnskeyError') return null\n    throw new Error(error.message)\n  }\n}\n"]}