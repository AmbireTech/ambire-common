{"version":3,"file":"compile.js","sourceRoot":"","sources":["../../../../src/libs/deployless/compile.ts"],"names":[],"mappings":"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","sourcesContent":["import fs from 'fs'\nimport path from 'path'\n\n// solc js doesn't support typescript so we hack it\nlet _solc: any = null\nfunction getSolc(): any {\n  if (!_solc) {\n    _solc = require('solc')\n  }\n  return _solc\n}\n\ninterface Options {\n  fileName?: null | string\n  contractsFolder?: null | string\n}\n\n// a function that compiles a contract at run time as long\n// as that contract and all its includes are in the /contracts folder\n//\n// contractName - the name of the contract, not the file name\n// options\n//   - fileName - if the name of the file is different than the name\n// of the contract, it should be passed along as we cannot guess it\nexport function compile(contractName: string, options: Options = {}) {\n  const fileName = options.fileName ? options.fileName : `${contractName}.sol`\n  const contractsFolder = options.contractsFolder ? options.contractsFolder : 'contracts'\n\n  const contractPath = path.resolve(`${__dirname}../../../../`, contractsFolder, fileName)\n  const contractSource = fs.readFileSync(contractPath, { encoding: 'utf8' })\n\n  const input = {\n    language: 'Solidity',\n    sources: {\n      [contractName]: {\n        content: contractSource\n      }\n    },\n    settings: {\n      viaIR: true,\n      optimizer: {\n        enabled: true,\n        runs: 1000\n      },\n      outputSelection: {\n        '*': {\n          '*': ['*']\n        }\n      }\n    }\n  }\n\n  function findImports(libPath: string) {\n    let compileFolder = libPath.indexOf('node_modules') === -1\n      ? contractsFolder\n      : ''\n\n    if (libPath.indexOf('contracts/libs') !== -1) {\n      compileFolder = ''\n    }\n\n    return {\n      contents: fs.readFileSync(\n        path.resolve(`${__dirname}../../../../`, compileFolder, libPath),\n        {\n          encoding: 'utf8'\n        }\n      )\n    }\n  }\n\n  const output = JSON.parse(getSolc().compile(JSON.stringify(input), { import: findImports }))\n\n  if (output.errors) {\n    const error = output.errors.map((err: any) => `${err.formattedMessage} `)\n    throw new Error(error)\n  }\n\n  if (!output.contracts[contractName][contractName]) {\n    throw new Error(`unable to find contract named ${contractName} in output from file ${contractName}: perhaps the name of the file is different compared to the name of the contract?`)\n  }\n\n  return {\n    abi: output.contracts[contractName][contractName].abi,\n    bin: `0x${output.contracts[contractName][contractName].evm.bytecode.object}`, // bin\n    binRuntime: `0x${output.contracts[contractName][contractName].evm.deployedBytecode.object}` // binRuntime\n  }\n}\n"]}