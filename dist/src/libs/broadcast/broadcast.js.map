{"version":3,"file":"broadcast.js","sourceRoot":"","sources":["../../../../src/libs/broadcast/broadcast.ts"],"names":[],"mappings":"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","sourcesContent":["import { Interface, toQuantity } from 'ethers'\nimport AmbireAccount from '../../../contracts/compiled/AmbireAccount.json'\nimport AmbireFactory from '../../../contracts/compiled/AmbireFactory.json'\nimport ERC20 from '../../../contracts/compiled/IERC20.json'\nimport { Account, AccountOnchainState } from '../../interfaces/account'\nimport { Hex } from '../../interfaces/hex'\nimport { TxnRequest } from '../../interfaces/keystore'\nimport { Network } from '../../interfaces/network'\nimport { RPCProvider } from '../../interfaces/provider'\nimport wait from '../../utils/wait'\nimport { AccountOp, GasFeePayment, getSignableCalls } from '../accountOp/accountOp'\nimport { Call } from '../accountOp/types'\n\nconst erc20interface = new Interface(ERC20.abi)\n\nexport const BROADCAST_OPTIONS = {\n  bySelf: 'self', // standard txn\n  bySelf7702: 'self7702', // executeBySender\n  byBundler: 'bundler', // userOp\n  byRelayer: 'relayer', // execute\n  byOtherEOA: 'otherEOA', // execute + standard\n  delegation: 'delegation' // txn type 4\n}\n\nexport function getByOtherEOATxnData(\n  account: Account,\n  op: AccountOp,\n  accountState: AccountOnchainState\n): { to: Hex; value: bigint; data: Hex } {\n  if (accountState.isDeployed) {\n    const ambireAccount = new Interface(AmbireAccount.abi)\n    return {\n      to: op.accountAddr as Hex,\n      value: 0n,\n      data: ambireAccount.encodeFunctionData('execute', [getSignableCalls(op), op.signature]) as Hex\n    }\n  }\n\n  const ambireFactory = new Interface(AmbireFactory.abi)\n  return {\n    to: account.creation!.factoryAddr as Hex,\n    value: 0n,\n    data: ambireFactory.encodeFunctionData('deployAndExecute', [\n      account.creation!.bytecode,\n      account.creation!.salt,\n      getSignableCalls(op),\n      op.signature\n    ]) as Hex\n  }\n}\n\n// estimate the gas for the call\nasync function estimateGas(\n  provider: RPCProvider,\n  from: string,\n  call: Call,\n  nonce: number,\n  counter: number = 0\n): Promise<bigint> {\n  // this should happen only in the case of internet issues\n  if (counter > 10) throw new Error('Failed estimating gas from broadcast')\n\n  const callEstimateGas = provider\n    .send('eth_estimateGas', [\n      {\n        from,\n        to: call.to,\n        value: toQuantity(call.value),\n        data: call.data,\n        nonce: toQuantity(nonce)\n      },\n      'pending'\n    ])\n    .catch((e) => e)\n  const callGetNonce = provider.getTransactionCount(from).catch(() => null)\n  const [gasLimit, foundNonce] = await Promise.all([callEstimateGas, callGetNonce])\n\n  // imagine a batch with two swaps, 4 txns total. Both swaps have the same from token\n  // and from token amount. So #1 & #3 is an approval. #2 spends the approval.\n  // when it's time to estimate #3, if the RPC doesn't know about #2, it will return\n  // a lower gas for the transaction as the old state hasn't spent the approval =>\n  // no storage writing. This results in an out of gas error on the #3 txn broadacst.\n  // To fix this, we ensure there's no nonce discrepancy upon broadcast, meaning\n  // the RPC knows about the previous txn that spends the approval, hence returning\n  // the correct gasLimit for the call\n  let hasNonceDiscrepancyOnApproval = nonce !== foundNonce\n  if (hasNonceDiscrepancyOnApproval) {\n    try {\n      hasNonceDiscrepancyOnApproval =\n        call.data !== '0x' && !!erc20interface.decodeFunctionData('approve', call.data)\n    } catch (e) {\n      hasNonceDiscrepancyOnApproval = false\n    }\n  }\n\n  // if there's an error, wait a bit and retry\n  // the error is most likely because of an incorrect RPC pending state\n  if (gasLimit instanceof Error || hasNonceDiscrepancyOnApproval) {\n    await wait(1500)\n    return estimateGas(provider, from, call, nonce, counter + 1)\n  }\n\n  return gasLimit\n}\n\nexport async function getTxnData(\n  account: Account,\n  op: AccountOp,\n  accountState: AccountOnchainState,\n  provider: RPCProvider,\n  broadcastOption: string,\n  nonce: number,\n  call?: Call\n): Promise<{ to: Hex; value: bigint; data: Hex; gasLimit?: bigint }> {\n  // no need to estimate gas for delegation, it's already estimated\n  if (broadcastOption === BROADCAST_OPTIONS.delegation) {\n    if (!call) throw new Error('single txn broadcast misconfig')\n    return {\n      to: call.to as Hex,\n      value: call.value,\n      data: call.data as Hex,\n      gasLimit: (op.gasFeePayment as GasFeePayment).simulatedGasLimit\n    }\n  }\n\n  if (broadcastOption === BROADCAST_OPTIONS.bySelf) {\n    if (!call) throw new Error('single txn broadcast misconfig')\n\n    // if the accountOp has more than 1 calls, we have to calculate the gas\n    // for each one seperately\n    let gasLimit: bigint | undefined = (op.gasFeePayment as GasFeePayment).simulatedGasLimit\n    if (op.calls.length > 1) {\n      gasLimit = await estimateGas(provider, account.addr, call, nonce)\n    }\n\n    const singleCallTxn = {\n      to: call.to as Hex,\n      value: call.value,\n      data: call.data as Hex,\n      gasLimit\n    }\n\n    return singleCallTxn\n  }\n\n  if (broadcastOption === BROADCAST_OPTIONS.byOtherEOA) {\n    const otherEOACall = getByOtherEOATxnData(account, op, accountState)\n    const gasLimit = await estimateGas(provider, account.addr, otherEOACall, nonce)\n    return { ...otherEOACall, gasLimit }\n  }\n\n  // 7702 executeBySender\n  const ambireAccount = new Interface(AmbireAccount.abi)\n  return {\n    to: account.addr as Hex,\n    value: 0n,\n    data: ambireAccount.encodeFunctionData('executeBySender', [getSignableCalls(op)]) as Hex\n  }\n}\n\nexport async function buildRawTransaction(\n  account: Account,\n  op: AccountOp,\n  accountState: AccountOnchainState,\n  provider: RPCProvider,\n  network: Network,\n  nonce: number,\n  broadcastOption: string,\n  call?: Call\n): Promise<TxnRequest> {\n  const gasFeePayment = op.gasFeePayment as GasFeePayment\n\n  const txnData = await getTxnData(\n    account,\n    op,\n    accountState,\n    provider,\n    broadcastOption,\n    nonce,\n    call\n  )\n  const rawTxn: TxnRequest = {\n    chainId: network.chainId,\n    nonce,\n    gasLimit: gasFeePayment.simulatedGasLimit,\n    ...txnData\n  }\n\n  if (gasFeePayment.maxPriorityFeePerGas !== undefined) {\n    rawTxn.maxFeePerGas = gasFeePayment.gasPrice\n    rawTxn.maxPriorityFeePerGas = gasFeePayment.maxPriorityFeePerGas\n    rawTxn.type = 2\n  } else {\n    rawTxn.gasPrice = gasFeePayment.gasPrice\n    rawTxn.type = 0\n  }\n\n  return rawTxn\n}\n"]}