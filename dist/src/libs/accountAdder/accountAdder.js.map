{"version":3,"file":"accountAdder.js","sourceRoot":"","sources":["../../../../src/libs/accountAdder/accountAdder.ts"],"names":[],"mappings":";;;AAAA,sDAAwD;AAGjD,KAAK,UAAU,WAAW,CAAC,OAAe,EAAE,KAAY,EAAE,UAAkB;IACjF,yEAAyE;IACzE,gDAAgD;IAChD,MAAM,uBAAuB,GAAG,MAAM,IAAA,mBAAW,EAAC,KAAK,EAAE,GAAG,UAAU,gBAAgB,OAAO,EAAE,CAAC,CAAA;IAEhG,wEAAwE;IACxE,uEAAuE;IACvE,+CAA+C;IAC/C,IAAI,uBAAuB,EAAE,MAAM;QAAE,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,MAAM,CAAC,CAAA;IAEpF,MAAM,eAAe,GAAQ,uBAAuB,EAAE,IAAI,CAAA;IAC1D,IAAI,QAAQ,GAAG,IAAI,CAAA;IACnB,IAAI,cAAc,GAAG,CAAC,OAAO,CAAC,CAAA;IAC9B,IACE,OAAO,eAAe,KAAK,QAAQ;QACnC,eAAe,KAAK,IAAI;QACxB,qBAAqB,IAAI,eAAe;QACxC,OAAO,eAAe,CAAC,mBAAmB,KAAK,QAAQ;QACvD,UAAU,IAAI,eAAe;QAC7B,OAAO,eAAe,CAAC,QAAQ,KAAK,QAAQ;QAC5C,MAAM,IAAI,eAAe;QACzB,OAAO,eAAe,CAAC,IAAI,KAAK,QAAQ,EACxC;QACA,QAAQ,GAAG;YACT,WAAW,EAAE,eAAe,CAAC,mBAAmB;YAChD,QAAQ,EAAE,eAAe,CAAC,QAAQ;YAClC,IAAI,EAAE,eAAe,CAAC,IAAI;SAC3B,CAAA;KACF;IAED,IAAI,eAAe,EAAE,cAAc,EAAE;QACnC,cAAc,GAAG,MAAM,CAAC,IAAI,CAAC,eAAe,EAAE,cAAc,IAAI,EAAE,CAAC,CAAA;KACpE;IAED,MAAM,iBAAiB,GAAG,eAAe,EAAE,iBAAiB,IAAI,EAAE,CAAA;IAElE,OAAO;QACL,QAAQ;QACR,cAAc;QACd,iBAAiB;KAClB,CAAA;AACH,CAAC;AAzCD,kCAyCC","sourcesContent":["import { fetchCaught } from '../../../v1/services/fetch'\nimport { Fetch } from '../../interfaces/fetch'\n\nexport async function getIdentity(address: string, fetch: Fetch, relayerUrl: string) {\n  // Use `fetchCaught` because the endpoint could return 404 if the account\n  // is not found, which should not throw an error\n  const accountIdentityResponse = await fetchCaught(fetch, `${relayerUrl}/v2/identity/${address}`)\n\n  // Trick to determine if there is an error throw. When the request 404s,\n  // there is no error message incoming, which is enough to treat it as a\n  // no-error, 404 response is expected for EOAs.\n  if (accountIdentityResponse?.errMsg) throw new Error(accountIdentityResponse.errMsg)\n\n  const accountIdentity: any = accountIdentityResponse?.body\n  let creation = null\n  let associatedKeys = [address]\n  if (\n    typeof accountIdentity === 'object' &&\n    accountIdentity !== null &&\n    'identityFactoryAddr' in accountIdentity &&\n    typeof accountIdentity.identityFactoryAddr === 'string' &&\n    'bytecode' in accountIdentity &&\n    typeof accountIdentity.bytecode === 'string' &&\n    'salt' in accountIdentity &&\n    typeof accountIdentity.salt === 'string'\n  ) {\n    creation = {\n      factoryAddr: accountIdentity.identityFactoryAddr,\n      bytecode: accountIdentity.bytecode,\n      salt: accountIdentity.salt\n    }\n  }\n\n  if (accountIdentity?.associatedKeys) {\n    associatedKeys = Object.keys(accountIdentity?.associatedKeys || {})\n  }\n\n  const initialPrivileges = accountIdentity?.initialPrivileges || []\n\n  return {\n    creation,\n    associatedKeys,\n    initialPrivileges\n  }\n}\n"]}