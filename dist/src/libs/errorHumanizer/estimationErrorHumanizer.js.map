{"version":3,"file":"estimationErrorHumanizer.js","sourceRoot":"","sources":["../../../../src/libs/errorHumanizer/estimationErrorHumanizer.ts"],"names":[],"mappings":";;;AAmBA,0EAwCC;;AA3DD,0FAAyD;AACzD,oGAAmE;AACnE,oGAAmE;AACnE,kDAA6C;AAE7C,qCAA4C;AAC5C,uCAAmF;AACnF,+DAA0E;AAE7D,QAAA,cAAc,GAAG,oCAAoC,CAAA;AAElE,MAAM,yBAAyB,GAC7B,oHAAoH,CAAA;AAEtH,SAAS,SAAS,CAAC,MAAqB;IACtC,IAAI,CAAC,MAAM;QAAE,OAAO,sBAAc,CAAA;IAClC,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,sBAAc,CAAC,CAAC,CAAC,EAAE,CAAA;AAC/D,CAAC;AAED,SAAgB,+BAA+B,CAAC,CAAuB;IACrE,4CAA4C;IAC5C,qCAAqC;IACrC,IAAI,CAAC,YAAY,wBAAc,IAAI,CAAC,YAAY,6BAAmB,EAAE,CAAC;QACpE,OAAO,IAAI,6BAAmB,CAAC,CAAC,CAAC,OAAO,EAAE;YACxC,KAAK,EAAE,OAAO,CAAC,CAAC,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI;YACnD,iBAAiB,EAAE,KAAK;SACzB,CAAC,CAAA;IACJ,CAAC;IAED,IAAI,iBAAiB,GAAG,KAAK,CAAA;IAC7B,MAAM,YAAY,GAAG,CAAC,YAAY,KAAK,CAAC,CAAC,CAAC,IAAA,0BAAW,EAAC,CAAU,CAAC,CAAC,CAAC,CAAE,CAAkB,CAAA;IACvF,MAAM,WAAW,GAAG,IAAA,wDAAkC,EACpD,YAAY,CAAC,MAAM,EACnB,SAAS,CAAC,YAAY,CAAC,MAAM,CAAC,EAC9B,CAAC,CACF,CAAA;IACD,IAAI,YAAY,GAAG,IAAA,sCAA4B,EAC7C,WAAW,EACX,0BAAiB,EACjB,sBAAc,EACd,YAAY,CAAC,MAAM,EACnB,CAAC,CACF,CAAA;IAED,IAAI,CAAC,YAAY,EAAE,CAAC;QAClB,iBAAiB,GAAG,IAAI,CAAA;QACxB,YAAY,GAAG,IAAA,mCAAyB,EACtC,YAAY,CAAC,IAAI,EACjB,YAAY,CAAC,MAAM,EACnB,sBAAc,EACd,yBAAyB,EACzB,KAAK,CACN,CAAA;IACH,CAAC;IAED,OAAO,IAAI,6BAAmB,CAAC,YAAY,EAAE;QAC3C,KAAK,EAAE,YAAY,CAAC,MAAM;QAC1B,iBAAiB;KAClB,CAAC,CAAA;AACJ,CAAC","sourcesContent":["import EmittableError from '../../classes/EmittableError'\nimport ErrorHumanizerError from '../../classes/ErrorHumanizerError'\nimport ExternalSignerError from '../../classes/ExternalSignerError'\nimport { decodeError } from '../errorDecoder'\nimport { DecodedError } from '../errorDecoder/types'\nimport { ESTIMATION_ERRORS } from './errors'\nimport { getGenericMessageFromType, getHumanReadableErrorMessage } from './helpers'\nimport { humanizeEstimationOrBroadcastError } from './humanizeCommonCases'\n\nexport const MESSAGE_PREFIX = 'Transaction cannot be sent because'\n\nconst LAST_RESORT_ERROR_MESSAGE =\n  'Transaction cannot be sent because of an unknown error. Please try again or contact Ambire support for assistance.'\n\nfunction getPrefix(reason: string | null): string {\n  if (!reason) return MESSAGE_PREFIX\n  return !reason.includes('pimlico: 500') ? MESSAGE_PREFIX : ''\n}\n\nexport function getHumanReadableEstimationError(e: Error | DecodedError) {\n  // These errors should be thrown as they are\n  // as they are already human-readable\n  if (e instanceof EmittableError || e instanceof ExternalSignerError) {\n    return new ErrorHumanizerError(e.message, {\n      cause: typeof e.cause === 'string' ? e.cause : null,\n      isFallbackMessage: false\n    })\n  }\n\n  let isFallbackMessage = false\n  const decodedError = e instanceof Error ? decodeError(e as Error) : (e as DecodedError)\n  const commonError = humanizeEstimationOrBroadcastError(\n    decodedError.reason,\n    getPrefix(decodedError.reason),\n    e\n  )\n  let errorMessage = getHumanReadableErrorMessage(\n    commonError,\n    ESTIMATION_ERRORS,\n    MESSAGE_PREFIX,\n    decodedError.reason,\n    e\n  )\n\n  if (!errorMessage) {\n    isFallbackMessage = true\n    errorMessage = getGenericMessageFromType(\n      decodedError.type,\n      decodedError.reason,\n      MESSAGE_PREFIX,\n      LAST_RESORT_ERROR_MESSAGE,\n      false\n    )\n  }\n\n  return new ErrorHumanizerError(errorMessage, {\n    cause: decodedError.reason,\n    isFallbackMessage\n  })\n}\n"]}