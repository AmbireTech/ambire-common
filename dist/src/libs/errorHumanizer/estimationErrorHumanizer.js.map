{"version":3,"file":"estimationErrorHumanizer.js","sourceRoot":"","sources":["../../../../src/libs/errorHumanizer/estimationErrorHumanizer.ts"],"names":[],"mappings":"AAAA,OAAO,cAAc,MAAM,8BAA8B,CAAA;AACzD,OAAO,mBAAmB,MAAM,mCAAmC,CAAA;AACnE,OAAO,EAAE,WAAW,EAAE,MAAM,iBAAiB,CAAA;AAE7C,OAAO,EAAE,iBAAiB,EAAE,MAAM,UAAU,CAAA;AAC5C,OAAO,EAAE,yBAAyB,EAAE,4BAA4B,EAAE,MAAM,WAAW,CAAA;AACnF,OAAO,EAAE,kCAAkC,EAAE,MAAM,uBAAuB,CAAA;AAE1E,MAAM,CAAC,MAAM,cAAc,GAAG,mCAAmC,CAAA;AAEjE,MAAM,yBAAyB,GAC7B,wHAAwH,CAAA;AAE1H,SAAS,SAAS,CAAC,MAAqB;IACtC,IAAI,CAAC,MAAM;QAAE,OAAO,cAAc,CAAA;IAClC,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE,CAAA;AAC/D,CAAC;AAED,MAAM,UAAU,+BAA+B,CAAC,CAAuB;IACrE,4CAA4C;IAC5C,qCAAqC;IACrC,IAAI,CAAC,YAAY,cAAc,IAAI,CAAC,YAAY,mBAAmB,EAAE;QACnE,OAAO,CAAC,CAAA;KACT;IAED,MAAM,YAAY,GAAG,CAAC,YAAY,KAAK,CAAC,CAAC,CAAC,WAAW,CAAC,CAAU,CAAC,CAAC,CAAC,CAAE,CAAkB,CAAA;IACvF,MAAM,WAAW,GAAG,kCAAkC,CACpD,YAAY,CAAC,MAAM,EACnB,SAAS,CAAC,YAAY,CAAC,MAAM,CAAC,CAC/B,CAAA;IACD,IAAI,YAAY,GAAG,4BAA4B,CAC7C,WAAW,EACX,iBAAiB,EACjB,cAAc,EACd,YAAY,CAAC,MAAM,EACnB,CAAC,CACF,CAAA;IAED,IAAI,CAAC,YAAY,EAAE;QACjB,YAAY,GAAG,yBAAyB,CACtC,YAAY,CAAC,IAAI,EACjB,YAAY,CAAC,MAAM,EACnB,cAAc,EACd,yBAAyB,CAC1B,CAAA;KACF;IAED,OAAO,IAAI,KAAK,CAAC,YAAY,EAAE,EAAE,KAAK,EAAE,YAAY,CAAC,MAAM,EAAE,CAAC,CAAA;AAChE,CAAC","sourcesContent":["import EmittableError from '../../classes/EmittableError'\nimport ExternalSignerError from '../../classes/ExternalSignerError'\nimport { decodeError } from '../errorDecoder'\nimport { DecodedError } from '../errorDecoder/types'\nimport { ESTIMATION_ERRORS } from './errors'\nimport { getGenericMessageFromType, getHumanReadableErrorMessage } from './helpers'\nimport { humanizeEstimationOrBroadcastError } from './humanizeCommonCases'\n\nexport const MESSAGE_PREFIX = 'The transaction will fail because'\n\nconst LAST_RESORT_ERROR_MESSAGE =\n  'An unknown error occurred while estimating the transaction. Please try again or contact Ambire support for assistance.'\n\nfunction getPrefix(reason: string | null): string {\n  if (!reason) return MESSAGE_PREFIX\n  return !reason.includes('pimlico: 500') ? MESSAGE_PREFIX : ''\n}\n\nexport function getHumanReadableEstimationError(e: Error | DecodedError) {\n  // These errors should be thrown as they are\n  // as they are already human-readable\n  if (e instanceof EmittableError || e instanceof ExternalSignerError) {\n    return e\n  }\n\n  const decodedError = e instanceof Error ? decodeError(e as Error) : (e as DecodedError)\n  const commonError = humanizeEstimationOrBroadcastError(\n    decodedError.reason,\n    getPrefix(decodedError.reason)\n  )\n  let errorMessage = getHumanReadableErrorMessage(\n    commonError,\n    ESTIMATION_ERRORS,\n    MESSAGE_PREFIX,\n    decodedError.reason,\n    e\n  )\n\n  if (!errorMessage) {\n    errorMessage = getGenericMessageFromType(\n      decodedError.type,\n      decodedError.reason,\n      MESSAGE_PREFIX,\n      LAST_RESORT_ERROR_MESSAGE\n    )\n  }\n\n  return new Error(errorMessage, { cause: decodedError.reason })\n}\n"]}