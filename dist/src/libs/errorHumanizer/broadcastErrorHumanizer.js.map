{"version":3,"file":"broadcastErrorHumanizer.js","sourceRoot":"","sources":["../../../../src/libs/errorHumanizer/broadcastErrorHumanizer.ts"],"names":[],"mappings":"AAAA,OAAO,cAAc,MAAM,8BAA8B,CAAA;AACzD,OAAO,mBAAmB,MAAM,mCAAmC,CAAA;AACnE,OAAO,EAAE,WAAW,EAAE,MAAM,iBAAiB,CAAA;AAC7C,OAAO,EAAgB,SAAS,EAAE,MAAM,uBAAuB,CAAA;AAC/D,OAAO,EAAE,gBAAgB,EAAE,MAAM,UAAU,CAAA;AAC3C,OAAO,EAAE,yBAAyB,EAAE,4BAA4B,EAAE,MAAM,WAAW,CAAA;AACnF,OAAO,EAAE,kCAAkC,EAAE,MAAM,uBAAuB,CAAA;AAE1E,MAAM,yBAAyB,GAC7B,0HAA0H,CAAA;AAC5H,MAAM,cAAc,GAAG,6CAA6C,CAAA;AACpE,MAAM,CAAC,MAAM,sCAAsC,GACjD,iLAAiL,CAAA;AAEnL,SAAS,SAAS,CAAC,MAAqB;IACtC,IAAI,CAAC,MAAM;QAAE,OAAO,cAAc,CAAA;IAClC,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE,CAAA;AAC/D,CAAC;AAED,MAAM,UAAU,8BAA8B,CAAC,CAAuB;IACpE,IAAI,CAAC,YAAY,cAAc,IAAI,CAAC,YAAY,mBAAmB,EAAE;QACnE,OAAO,CAAC,CAAA;KACT;IAED,MAAM,YAAY,GAAG,CAAC,YAAY,KAAK,CAAC,CAAC,CAAC,WAAW,CAAC,CAAU,CAAC,CAAC,CAAC,CAAE,CAAkB,CAAA;IACvF,MAAM,WAAW,GAAG,kCAAkC,CACpD,YAAY,CAAC,MAAM,EACnB,SAAS,CAAC,YAAY,CAAC,MAAM,CAAC,CAC/B,CAAA;IACD,IAAI,YAAY,GAAG,4BAA4B,CAC7C,WAAW,EACX,gBAAgB,EAChB,cAAc,EACd,YAAY,CAAC,MAAM,EACnB,CAAC,CACF,CAAA;IAED,IAAI,CAAC,YAAY,EAAE;QACjB,IAAI,YAAY,CAAC,IAAI,KAAK,SAAS,CAAC,cAAc,EAAE;YAClD,YAAY,GAAG,sCAAsC,CAAA;SACtD;aAAM;YACL,YAAY,GAAG,yBAAyB,CACtC,YAAY,CAAC,IAAI,EACjB,YAAY,CAAC,MAAM,EACnB,cAAc,EACd,yBAAyB,CAC1B,CAAA;SACF;KACF;IAED,OAAO,IAAI,KAAK,CAAC,YAAY,EAAE,EAAE,KAAK,EAAE,YAAY,CAAC,MAAM,EAAE,CAAC,CAAA;AAChE,CAAC","sourcesContent":["import EmittableError from '../../classes/EmittableError'\nimport ExternalSignerError from '../../classes/ExternalSignerError'\nimport { decodeError } from '../errorDecoder'\nimport { DecodedError, ErrorType } from '../errorDecoder/types'\nimport { BROADCAST_ERRORS } from './errors'\nimport { getGenericMessageFromType, getHumanReadableErrorMessage } from './helpers'\nimport { humanizeEstimationOrBroadcastError } from './humanizeCommonCases'\n\nconst LAST_RESORT_ERROR_MESSAGE =\n  'An unknown error occurred while broadcasting the transaction. Please try again or contact Ambire support for assistance.'\nconst MESSAGE_PREFIX = 'The transaction cannot be broadcast because'\nexport const PAYMASTER_DOWN_BROADCAST_ERROR_MESSAGE =\n  'Currently, the paymaster seems to be down and your transaction cannot be broadcast. Please try again in a few moments or pay the fee with a Basic Account if the error persists'\n\nfunction getPrefix(reason: string | null): string {\n  if (!reason) return MESSAGE_PREFIX\n  return !reason.includes('pimlico: 500') ? MESSAGE_PREFIX : ''\n}\n\nexport function getHumanReadableBroadcastError(e: Error | DecodedError) {\n  if (e instanceof EmittableError || e instanceof ExternalSignerError) {\n    return e\n  }\n\n  const decodedError = e instanceof Error ? decodeError(e as Error) : (e as DecodedError)\n  const commonError = humanizeEstimationOrBroadcastError(\n    decodedError.reason,\n    getPrefix(decodedError.reason)\n  )\n  let errorMessage = getHumanReadableErrorMessage(\n    commonError,\n    BROADCAST_ERRORS,\n    MESSAGE_PREFIX,\n    decodedError.reason,\n    e\n  )\n\n  if (!errorMessage) {\n    if (decodedError.type === ErrorType.PaymasterError) {\n      errorMessage = PAYMASTER_DOWN_BROADCAST_ERROR_MESSAGE\n    } else {\n      errorMessage = getGenericMessageFromType(\n        decodedError.type,\n        decodedError.reason,\n        MESSAGE_PREFIX,\n        LAST_RESORT_ERROR_MESSAGE\n      )\n    }\n  }\n\n  return new Error(errorMessage, { cause: decodedError.reason })\n}\n"]}