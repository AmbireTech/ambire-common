{"version":3,"file":"broadcastErrorHumanizer.js","sourceRoot":"","sources":["../../../../src/libs/errorHumanizer/broadcastErrorHumanizer.ts"],"names":[],"mappings":";;;AAoBA,wEAiCC;;AArDD,0FAAyD;AACzD,oGAAmE;AACnE,kDAA6C;AAC7C,iDAA+D;AAC/D,qCAA2C;AAC3C,uCAAmF;AACnF,+DAA0E;AAE1E,MAAM,yBAAyB,GAC7B,0HAA0H,CAAA;AAC5H,MAAM,cAAc,GAAG,6CAA6C,CAAA;AACpE,mDAAmD;AACtC,QAAA,sCAAsC,GACjD,sDAAsD,CAAA;AAExD,SAAS,SAAS,CAAC,MAAqB;IACtC,IAAI,CAAC,MAAM;QAAE,OAAO,cAAc,CAAA;IAClC,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE,CAAA;AAC/D,CAAC;AAED,SAAgB,8BAA8B,CAAC,CAAuB;IACpE,IAAI,CAAC,YAAY,wBAAc,IAAI,CAAC,YAAY,6BAAmB,EAAE,CAAC;QACpE,OAAO,CAAC,CAAA;IACV,CAAC;IAED,MAAM,YAAY,GAAG,CAAC,YAAY,KAAK,CAAC,CAAC,CAAC,IAAA,0BAAW,EAAC,CAAU,CAAC,CAAC,CAAC,CAAE,CAAkB,CAAA;IACvF,MAAM,WAAW,GAAG,IAAA,wDAAkC,EACpD,YAAY,CAAC,MAAM,EACnB,SAAS,CAAC,YAAY,CAAC,MAAM,CAAC,EAC9B,CAAC,CACF,CAAA;IACD,IAAI,YAAY,GAAG,IAAA,sCAA4B,EAC7C,WAAW,EACX,yBAAgB,EAChB,cAAc,EACd,YAAY,CAAC,MAAM,EACnB,CAAC,CACF,CAAA;IAED,IAAI,CAAC,YAAY,EAAE,CAAC;QAClB,IAAI,YAAY,CAAC,IAAI,KAAK,iBAAS,CAAC,cAAc,EAAE,CAAC;YACnD,YAAY,GAAG,8CAAsC,CAAA;QACvD,CAAC;aAAM,CAAC;YACN,YAAY,GAAG,IAAA,mCAAyB,EACtC,YAAY,CAAC,IAAI,EACjB,YAAY,CAAC,MAAM,EACnB,cAAc,EACd,yBAAyB,CAC1B,CAAA;QACH,CAAC;IACH,CAAC;IAED,OAAO,IAAI,KAAK,CAAC,YAAY,EAAE,EAAE,KAAK,EAAE,YAAY,CAAC,MAAM,EAAE,CAAC,CAAA;AAChE,CAAC","sourcesContent":["import EmittableError from '../../classes/EmittableError'\nimport ExternalSignerError from '../../classes/ExternalSignerError'\nimport { decodeError } from '../errorDecoder'\nimport { DecodedError, ErrorType } from '../errorDecoder/types'\nimport { BROADCAST_ERRORS } from './errors'\nimport { getGenericMessageFromType, getHumanReadableErrorMessage } from './helpers'\nimport { humanizeEstimationOrBroadcastError } from './humanizeCommonCases'\n\nconst LAST_RESORT_ERROR_MESSAGE =\n  'An unknown error occurred while broadcasting the transaction. Please try again or contact Ambire support for assistance.'\nconst MESSAGE_PREFIX = 'The transaction cannot be broadcast because'\n/** The paymaster is down or the user is offline */\nexport const PAYMASTER_DOWN_BROADCAST_ERROR_MESSAGE =\n  'Unable to connect to the paymaster. Please try again'\n\nfunction getPrefix(reason: string | null): string {\n  if (!reason) return MESSAGE_PREFIX\n  return !reason.includes('pimlico: 500') ? MESSAGE_PREFIX : ''\n}\n\nexport function getHumanReadableBroadcastError(e: Error | DecodedError) {\n  if (e instanceof EmittableError || e instanceof ExternalSignerError) {\n    return e\n  }\n\n  const decodedError = e instanceof Error ? decodeError(e as Error) : (e as DecodedError)\n  const commonError = humanizeEstimationOrBroadcastError(\n    decodedError.reason,\n    getPrefix(decodedError.reason),\n    e\n  )\n  let errorMessage = getHumanReadableErrorMessage(\n    commonError,\n    BROADCAST_ERRORS,\n    MESSAGE_PREFIX,\n    decodedError.reason,\n    e\n  )\n\n  if (!errorMessage) {\n    if (decodedError.type === ErrorType.PaymasterError) {\n      errorMessage = PAYMASTER_DOWN_BROADCAST_ERROR_MESSAGE\n    } else {\n      errorMessage = getGenericMessageFromType(\n        decodedError.type,\n        decodedError.reason,\n        MESSAGE_PREFIX,\n        LAST_RESORT_ERROR_MESSAGE\n      )\n    }\n  }\n\n  return new Error(errorMessage, { cause: decodedError.reason })\n}\n"]}