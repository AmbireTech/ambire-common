{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/libs/humanizer/index.ts"],"names":[],"mappings":"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","sourcesContent":["import humanizerInfo from '../../consts/humanizer/humanizerInfo.json'\nimport { Message } from '../../interfaces/userRequest'\nimport { AccountOp } from '../accountOp/accountOp'\nimport { parse, stringify } from '../richJson/richJson'\nimport {\n  HumanizerCallModule,\n  HumanizerMeta,\n  HumanizerOptions,\n  IrCall,\n  IrMessage\n} from './interfaces'\nimport {\n  eip7702AuthorizationModule,\n  ensMessageModule,\n  entryPointModule,\n  erc20Module,\n  erc721Module,\n  legendsMessageModule,\n  openseaMessageModule,\n  permit2Module\n} from './messageModules'\nimport OneInchModule from './modules/1Inch'\nimport { aaveHumanizer } from './modules/Aave'\nimport AcrossModule from './modules/Across'\nimport { airdropsModule } from './modules/Airdrops'\nimport asciiModule from './modules/AsciiModule'\nimport curveModule from './modules/Curve'\nimport { deploymentModule } from './modules/Deployment'\nimport { embeddedAmbireOperationHumanizer } from './modules/embeddedAmbireOperationHumanizer'\nimport { ensModule } from './modules/ENS'\nimport fallbackHumanizer from './modules/FallbackHumanizer'\nimport gasTankModule from './modules/GasTankModule'\nimport GuildModule from './modules/Guild'\nimport KyberSwap from './modules/KyberSwap'\nimport legendsModule from './modules/Legends'\nimport { LidoModule } from './modules/Lido'\nimport { openSeaModule } from './modules/OpenSea'\nimport PancakeModule from './modules/Pancake'\nimport { postProcessing } from './modules/PostProcessing/postProcessModule'\nimport preProcessHumanizer from './modules/PreProcess'\nimport privilegeHumanizer from './modules/Privileges'\nimport singletonFactory from './modules/SingletonFactory'\nimport { SocketModule } from './modules/Socket'\nimport sushiSwapModule from './modules/Sushiswap'\nimport { genericErc20Humanizer, genericErc721Humanizer } from './modules/Tokens'\nimport traderJoeModule from './modules/TraderJoe'\nimport { uniswapHumanizer } from './modules/Uniswap'\nimport { WALLETModule } from './modules/WALLET'\nimport wrappingModule from './modules/Wrapping'\n\n// from most generic to least generic\n// the final humanization is the final triggered module\nexport const humanizerCallModules: HumanizerCallModule[] = [\n  preProcessHumanizer,\n  embeddedAmbireOperationHumanizer,\n  deploymentModule,\n  genericErc721Humanizer,\n  genericErc20Humanizer,\n  LidoModule,\n  gasTankModule,\n  airdropsModule,\n  uniswapHumanizer,\n  curveModule,\n  traderJoeModule,\n  KyberSwap,\n  SocketModule,\n  AcrossModule,\n  OneInchModule,\n  PancakeModule,\n  wrappingModule,\n  aaveHumanizer,\n  WALLETModule,\n  privilegeHumanizer,\n  sushiSwapModule,\n  legendsModule,\n  singletonFactory,\n  ensModule,\n  GuildModule,\n  openSeaModule,\n  asciiModule,\n  fallbackHumanizer,\n  postProcessing\n]\n\n// from least generic to most generic\n// the final visualization and warnings are from the first triggered module\nconst humanizerTMModules = [\n  erc20Module,\n  erc721Module,\n  permit2Module,\n  entryPointModule,\n  legendsMessageModule,\n  ensMessageModule,\n  openseaMessageModule,\n  eip7702AuthorizationModule\n]\n\nconst humanizeAccountOp = (_accountOp: AccountOp, options: HumanizerOptions): IrCall[] => {\n  const accountOp = parse(stringify(_accountOp))\n  const humanizerOptions: HumanizerOptions = {\n    ...options,\n    chainId: accountOp.chainId\n  }\n\n  let currentCalls: IrCall[] = accountOp.calls\n  humanizerCallModules.forEach((hm) => {\n    try {\n      currentCalls = hm(accountOp, currentCalls, humanizerInfo as HumanizerMeta, humanizerOptions)\n    } catch (error) {\n      console.error(error)\n      // No action is needed here; we only set `currentCalls` if the module successfully resolves the calls.\n    }\n  })\n  return currentCalls\n}\n\nconst humanizeMessage = (_message: Message): IrMessage => {\n  const message = parse(stringify(_message))\n\n  try {\n    // runs all modules and takes the first non empty array\n    const { fullVisualization, warnings } =\n      humanizerTMModules.map((m) => m(message)).filter((p) => p.fullVisualization?.length)[0] || {}\n\n    return { ...message, fullVisualization, warnings }\n  } catch (error) {\n    console.error(error)\n    return message\n  }\n}\n\nexport { humanizeAccountOp, humanizeMessage }\n"]}