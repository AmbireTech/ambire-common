{"version":3,"file":"testHelpers.js","sourceRoot":"","sources":["../../../../src/libs/humanizer/testHelpers.ts"],"names":[],"mappings":";;;AAEO,MAAM,8BAA8B,GAAG,CAC5C,MAAgB,EAChB,uBAAmD,EACnD,EAAE;IACF,MAAM,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;QAC/B,GAAG,CAAC;QACJ,iBAAiB,EAAE,CAAC,CAAC,iBAAiB,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC;KACzE,CAAC,CAAC,CAAA;IACH,MAAM,sBAAsB,GAAG,uBAAuB,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,CAChE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC,CACpC,CAAA;IACD,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAA;IACxD,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE;QACxB,MAAM,CAAC,IAAI,CAAC,iBAAiB,EAAE,MAAM,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAA;QAClF,MAAM,CAAC,IAAI,CAAC,iBAAiB,IAAI,EAAE,CAAC,CAAC,OAAO,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC,CAAA;IACzE,CAAC,CAAC,CAAA;AACJ,CAAC,CAAA;AAhBY,QAAA,8BAA8B,kCAgB1C;AAEM,MAAM,qBAAqB,GAAG,CACnC,EAA4B,EAC5B,EAA4B,EAC5B,EAAE;IACF,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,CAAA;IACjC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;QAClB,MAAM,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC,aAAa,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,CAAC,CAAA;IAClE,CAAC,CAAC,CAAA;AACJ,CAAC,CAAA;AARY,QAAA,qBAAqB,yBAQjC","sourcesContent":["import { HumanizerVisualization, IrCall } from './interfaces'\n\nexport const compareHumanizerVisualizations = (\n  _calls: IrCall[],\n  _expectedVisualizations: HumanizerVisualization[][]\n) => {\n  const calls = _calls.map((c) => ({\n    ...c,\n    fullVisualization: c.fullVisualization?.map((v) => ({ ...v, id: null }))\n  }))\n  const expectedVisualizations = _expectedVisualizations.map((vs) =>\n    vs.map((v) => ({ ...v, id: null }))\n  )\n  expect(calls.length).toBe(expectedVisualizations.length)\n  calls.forEach((call, i) => {\n    expect(call.fullVisualization?.length || 0).toBe(expectedVisualizations[i].length)\n    expect(call.fullVisualization || []).toEqual(expectedVisualizations[i])\n  })\n}\n\nexport const compareVisualizations = (\n  v1: HumanizerVisualization[],\n  v2: HumanizerVisualization[]\n) => {\n  expect(v1.length).toBe(v2.length)\n  v1.forEach((v, i) => {\n    expect({ ...v2[i], id: null }).toMatchObject({ ...v, id: null })\n  })\n}\n"]}