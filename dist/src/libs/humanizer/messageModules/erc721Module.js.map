{"version":3,"file":"erc721Module.js","sourceRoot":"","sources":["../../../../../src/libs/humanizer/messageModules/erc721Module.ts"],"names":[],"mappings":";;;AAEA,oCAA8F;AAE9F,MAAM,eAAe,GAAG,CACtB,OAAe,EACf,OAAe,EACf,QAAgB,EAChB,QAAgB,EACU,EAAE;IAC5B,MAAM,GAAG,GAAG;QACV,IAAA,iBAAS,EAAC,eAAe,CAAC;QAC1B,IAAA,gBAAQ,EAAC,QAAQ,EAAE,OAAO,CAAC;QAC3B,IAAA,gBAAQ,EAAC,IAAI,CAAC;QACd,IAAA,+BAAuB,EAAC,OAAO,CAAC;KACjC,CAAA;IACD,IAAI,IAAA,mBAAW,EAAC,QAAQ,CAAC;QAAE,GAAG,CAAC,IAAI,CAAC,IAAA,mBAAW,EAAC,QAAQ,CAA2B,CAAC,CAAA;IACpF,OAAO,GAAG,CAAA;AACZ,CAAC,CAAA;AACM,MAAM,YAAY,GAAgC,CAAC,OAAgB,EAAE,EAAE;IAC5E,IAAI,OAAO,CAAC,OAAO,CAAC,IAAI,KAAK,cAAc;QAAE,OAAO,EAAE,iBAAiB,EAAE,EAAE,EAAE,CAAA;IAC7E,MAAM,EAAE,GAAG,OAAO,CAAC,OAAO,CAAA;IAC1B,IACE,EAAE,CAAC,KAAK,CAAC,MAAM;QACf,EAAE,CAAC,WAAW,KAAK,QAAQ;QAC3B,EAAE,CAAC,OAAO,CAAC,OAAO;QAClB,EAAE,CAAC,OAAO,CAAC,OAAO;QAClB,EAAE,CAAC,OAAO,CAAC,KAAK;QAChB,EAAE,CAAC,OAAO,CAAC,QAAQ,EACnB,CAAC;QACD,OAAO;YACL,iBAAiB,EAAE,eAAe,CAChC,EAAE,CAAC,OAAO,CAAC,OAAO,EAClB,EAAE,CAAC,OAAO,CAAC,OAAO,EAClB,EAAE,CAAC,OAAO,CAAC,QAAQ,EACnB,EAAE,CAAC,MAAM,CAAC,iBAA2B,CACtC;SACF,CAAA;IACH,CAAC;IACD,OAAO,EAAE,iBAAiB,EAAE,EAAE,EAAE,CAAA;AAClC,CAAC,CAAA;AArBY,QAAA,YAAY,gBAqBxB","sourcesContent":["import { Message } from '../../../interfaces/userRequest'\nimport { HumanizerTypedMessageModule, HumanizerVisualization } from '../interfaces'\nimport { getAction, getAddressVisualization, getDeadline, getLabel, getToken } from '../utils'\n\nconst visualizePermit = (\n  spender: string,\n  tokenId: bigint,\n  deadline: bigint,\n  contract: string\n): HumanizerVisualization[] => {\n  const res = [\n    getAction('Permit use of'),\n    getToken(contract, tokenId),\n    getLabel('to'),\n    getAddressVisualization(spender)\n  ]\n  if (getDeadline(deadline)) res.push(getDeadline(deadline) as HumanizerVisualization)\n  return res\n}\nexport const erc721Module: HumanizerTypedMessageModule = (message: Message) => {\n  if (message.content.kind !== 'typedMessage') return { fullVisualization: [] }\n  const tm = message.content\n  if (\n    tm.types.Permit &&\n    tm.primaryType === 'Permit' &&\n    tm.message.spender &&\n    tm.message.tokenId &&\n    tm.message.nonce &&\n    tm.message.deadline\n  ) {\n    return {\n      fullVisualization: visualizePermit(\n        tm.message.spender,\n        tm.message.tokenId,\n        tm.message.deadline,\n        tm.domain.verifyingContract as string\n      )\n    }\n  }\n  return { fullVisualization: [] }\n}\n"]}