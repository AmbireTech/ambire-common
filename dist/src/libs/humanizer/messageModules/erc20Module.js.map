{"version":3,"file":"erc20Module.js","sourceRoot":"","sources":["../../../../../src/libs/humanizer/messageModules/erc20Module.ts"],"names":[],"mappings":";;;AAEA,oCAA8F;AAEvF,MAAM,WAAW,GAAgC,CAAC,OAAgB,EAAE,EAAE;IAC3E,IAAI,OAAO,CAAC,OAAO,CAAC,IAAI,KAAK,cAAc;QAAE,OAAO,EAAE,iBAAiB,EAAE,EAAE,EAAE,CAAA;IAC7E,MAAM,EAAE,GAAG,OAAO,CAAC,OAAO,CAAA;IAC1B,IACE,EAAE,CAAC,KAAK,CAAC,MAAM;QACf,EAAE,CAAC,WAAW,KAAK,QAAQ;QAC3B,EAAE,CAAC,OAAO;QACV,CAAC,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,OAAO,EAAE,UAAU,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC;QAChF,EAAE,CAAC,MAAM,CAAC,iBAAiB,EAC3B,CAAC;QACD,OAAO;YACL,iBAAiB,EAAE;gBACjB,IAAA,iBAAS,EAAC,gBAAgB,CAAC;gBAC3B,IAAA,gBAAQ,EAAC,KAAK,CAAC;gBACf,IAAA,gBAAQ,EAAC,EAAE,CAAC,MAAM,CAAC,iBAAkB,EAAE,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC;gBACxD,IAAA,gBAAQ,EAAC,IAAI,CAAC;gBACd,IAAA,+BAAuB,EAAC,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC;gBAC3C,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAA,mBAAW,EAAC,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI;aAC9D,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAA6B;SAC/C,CAAA;IACH,CAAC;IACD,OAAO,EAAE,iBAAiB,EAAE,EAAE,EAAE,CAAA;AAClC,CAAC,CAAA;AAtBY,QAAA,WAAW,eAsBvB","sourcesContent":["import { Message } from '../../../interfaces/userRequest'\nimport { HumanizerTypedMessageModule, HumanizerVisualization } from '../interfaces'\nimport { getAction, getAddressVisualization, getDeadline, getLabel, getToken } from '../utils'\n\nexport const erc20Module: HumanizerTypedMessageModule = (message: Message) => {\n  if (message.content.kind !== 'typedMessage') return { fullVisualization: [] }\n  const tm = message.content\n  if (\n    tm.types.Permit &&\n    tm.primaryType === 'Permit' &&\n    tm.message &&\n    ['owner', 'spender', 'value', 'nonce', 'deadline'].every((i) => i in tm.message) &&\n    tm.domain.verifyingContract\n  ) {\n    return {\n      fullVisualization: [\n        getAction('Grant approval'),\n        getLabel('for'),\n        getToken(tm.domain.verifyingContract!, tm.message.value),\n        getLabel('to'),\n        getAddressVisualization(tm.message.spender),\n        tm.message.deadline ? getDeadline(tm.message.deadline) : null\n      ].filter((x) => x) as HumanizerVisualization[]\n    }\n  }\n  return { fullVisualization: [] }\n}\n"]}