{"version":3,"file":"erc20Module.js","sourceRoot":"","sources":["../../../../../src/libs/humanizer/messageModules/erc20Module.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,SAAS,EAAE,uBAAuB,EAAE,WAAW,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,UAAU,CAAA;AAE9F,MAAM,CAAC,MAAM,WAAW,GAAgC,CAAC,OAAgB,EAAE,EAAE;IAC3E,IAAI,OAAO,CAAC,OAAO,CAAC,IAAI,KAAK,cAAc;QAAE,OAAO,EAAE,iBAAiB,EAAE,EAAE,EAAE,CAAA;IAC7E,MAAM,EAAE,GAAG,OAAO,CAAC,OAAO,CAAA;IAC1B,IACE,EAAE,CAAC,KAAK,CAAC,MAAM;QACf,EAAE,CAAC,WAAW,KAAK,QAAQ;QAC3B,EAAE,CAAC,OAAO;QACV,CAAC,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,OAAO,EAAE,UAAU,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC;QAChF,EAAE,CAAC,MAAM,CAAC,iBAAiB,EAC3B;QACA,OAAO;YACL,iBAAiB,EAAE;gBACjB,SAAS,CAAC,gBAAgB,CAAC;gBAC3B,QAAQ,CAAC,KAAK,CAAC;gBACf,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC,iBAAkB,EAAE,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC;gBACxD,QAAQ,CAAC,IAAI,CAAC;gBACd,uBAAuB,CAAC,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC;gBAC3C,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,WAAW,CAAC,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI;aAC9D,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAA6B;SAC/C,CAAA;KACF;IACD,IACE,EAAE,CAAC,KAAK,CAAC,YAAY;QACrB,EAAE,CAAC,WAAW,KAAK,cAAc;QACjC,EAAE,EAAE,OAAO,EAAE,OAAO;QACpB,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK;QAC3B,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM;QAC5B,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,UAAU,EAChC;QACA,OAAO;YACL,iBAAiB,EAAE;gBACjB,SAAS,CAAC,SAAS,CAAC;gBACpB,uBAAuB,CAAC,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC;gBAC3C,QAAQ,CAAC,QAAQ,CAAC;gBAClB,QAAQ,CAAC,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;gBACrE,WAAW,CAAC,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC;aAC3C;SACF,CAAA;KACF;IACD,OAAO,EAAE,iBAAiB,EAAE,EAAE,EAAE,CAAA;AAClC,CAAC,CAAA","sourcesContent":["import { Message } from '../../../interfaces/userRequest'\nimport { HumanizerTypedMessageModule, HumanizerVisualization } from '../interfaces'\nimport { getAction, getAddressVisualization, getDeadline, getLabel, getToken } from '../utils'\n\nexport const erc20Module: HumanizerTypedMessageModule = (message: Message) => {\n  if (message.content.kind !== 'typedMessage') return { fullVisualization: [] }\n  const tm = message.content\n  if (\n    tm.types.Permit &&\n    tm.primaryType === 'Permit' &&\n    tm.message &&\n    ['owner', 'spender', 'value', 'nonce', 'deadline'].every((i) => i in tm.message) &&\n    tm.domain.verifyingContract\n  ) {\n    return {\n      fullVisualization: [\n        getAction('Grant approval'),\n        getLabel('for'),\n        getToken(tm.domain.verifyingContract!, tm.message.value),\n        getLabel('to'),\n        getAddressVisualization(tm.message.spender),\n        tm.message.deadline ? getDeadline(tm.message.deadline) : null\n      ].filter((x) => x) as HumanizerVisualization[]\n    }\n  }\n  if (\n    tm.types.PermitSingle &&\n    tm.primaryType === 'PermitSingle' &&\n    tm?.message?.spender &&\n    tm?.message?.details?.token &&\n    tm?.message?.details?.amount &&\n    tm?.message?.details?.expiration\n  ) {\n    return {\n      fullVisualization: [\n        getAction('Approve'),\n        getAddressVisualization(tm.message.spender),\n        getLabel('to use'),\n        getToken(tm.message.details.token, BigInt(tm.message.details.amount)),\n        getDeadline(tm.message.details.expiration)\n      ]\n    }\n  }\n  return { fullVisualization: [] }\n}\n"]}