{"version":3,"file":"legendsModule.js","sourceRoot":"","sources":["../../../../../src/libs/humanizer/messageModules/legendsModule.ts"],"names":[],"mappings":";;;AAAA,mCAA+D;AAI/D,oCAAuE;AAEhE,MAAM,oBAAoB,GAAgC,CAAC,OAAgB,EAAE,EAAE;IACpF,IAAI,OAAO,CAAC,OAAO,CAAC,IAAI,KAAK,SAAS,IAAI,OAAO,OAAO,CAAC,OAAO,CAAC,OAAO,KAAK,QAAQ;QACnF,OAAO,EAAE,iBAAiB,EAAE,EAAE,EAAE,CAAA;IAClC,IAAI,aAAa,GAAG,OAAO,CAAC,OAAO,CAAC,OAAO,CAAA;IAC3C,IAAI,IAAA,oBAAW,EAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,KAAK,CAAC,EAAE;QACpF,aAAa,GAAG,IAAA,qBAAY,EAAC,IAAA,oBAAW,EAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAA;KACnE;IACD,MAAM,YAAY,GAAG,8DAA8D,CAAA;IACnF,MAAM,YAAY,GAAG,oBAAoB,CAAA;IACzC,IACE,aAAa,CAAC,KAAK,CAAC,YAAY,CAAC;QACjC,aAAa,CAAC,KAAK,CAAC,YAAY,CAAE,CAAC,CAAC,CAAC,KAAK,OAAO,CAAC,WAAW;QAE7D,OAAO;YACL,iBAAiB,EAAE;gBACjB,IAAA,iBAAS,EAAC,MAAM,CAAC;gBACjB,IAAA,+BAAuB,EAAC,aAAa,CAAC,KAAK,CAAC,YAAY,CAAE,CAAC,CAAC,CAAC,CAAC;gBAC9D,IAAA,gBAAQ,EAAC,IAAI,CAAC;gBACd,IAAA,+BAAuB,EAAC,aAAa,CAAC,KAAK,CAAC,YAAY,CAAE,CAAC,CAAC,CAAC,CAAC;gBAC9D,IAAA,gBAAQ,EAAC,oBAAoB,EAAE,IAAI,CAAC;aACrC;SACF,CAAA;IACH,OAAO,EAAE,iBAAiB,EAAE,EAAE,EAAE,CAAA;AAClC,CAAC,CAAA;AAvBY,QAAA,oBAAoB,wBAuBhC","sourcesContent":["import { isHexString, toUtf8Bytes, toUtf8String } from 'ethers'\n\nimport { Message } from '../../../interfaces/userRequest'\nimport { HumanizerTypedMessageModule } from '../interfaces'\nimport { getAction, getAddressVisualization, getLabel } from '../utils'\n\nexport const legendsMessageModule: HumanizerTypedMessageModule = (message: Message) => {\n  if (message.content.kind !== 'message' || typeof message.content.message !== 'string')\n    return { fullVisualization: [] }\n  let messageAsText = message.content.message\n  if (isHexString(message.content.message) && message.content.message.length % 2 === 0) {\n    messageAsText = toUtf8String(toUtf8Bytes(message.content.message))\n  }\n  const messageRegex = /Assign 0x[a-fA-F0-9]{40} to Ambire Legends 0x[a-fA-F0-9]{40}/\n  const addressRegex = /0x[a-fA-F0-9]{40}/g\n  if (\n    messageAsText.match(messageRegex) &&\n    messageAsText.match(addressRegex)![0] === message.accountAddr\n  )\n    return {\n      fullVisualization: [\n        getAction('Link'),\n        getAddressVisualization(messageAsText.match(addressRegex)![0]),\n        getLabel('to'),\n        getAddressVisualization(messageAsText.match(addressRegex)![1]),\n        getLabel('for Ambire Legends', true)\n      ]\n    }\n  return { fullVisualization: [] }\n}\n"]}