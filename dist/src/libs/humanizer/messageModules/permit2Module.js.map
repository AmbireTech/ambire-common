{"version":3,"file":"permit2Module.js","sourceRoot":"","sources":["../../../../../src/libs/humanizer/messageModules/permit2Module.ts"],"names":[],"mappings":";;;AAAA,yDAA2F;AAG3F,oCAA8F;AAyC9F,MAAM,aAAa,GAAG,CAAC,MAAqB,EAAc,EAAE;IAC1D,OAAO,EAAE,KAAK,EAAE,MAAM,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,CAAC,MAAM,EAAE,CAAA;AACvD,CAAC,CAAA;AAEM,MAAM,aAAa,GAAgC,CAAC,OAAgB,EAAE,EAAE;IAC7E,IAAI,OAAO,CAAC,OAAO,CAAC,IAAI,KAAK,cAAc;QAAE,OAAO,EAAE,iBAAiB,EAAE,EAAE,EAAE,CAAA;IAC7E,MAAM,EAAE,GAAG,OAAO,CAAC,OAAO,CAAA;IAC1B,IACE,EAAE,EAAE,MAAM,EAAE,iBAAiB;QAC7B,CAAC,4BAAgB,CAAC,WAAW,EAAE,EAAE,yCAA6B,CAAC,iBAAiB,EAAE,CAAC,CAAC,QAAQ,CAC1F,EAAE,CAAC,MAAM,CAAC,iBAAiB,CAAC,WAAW,EAAE,CAC1C,EACD,CAAC;QACD,MAAM,WAAW,GAAG,EAAE,EAAE,KAAK,EAAE,YAAY,EAAE,CAAC,CAAC,CAAC,EAAE,IAAI,IAAI,EAAE,EAAE,KAAK,EAAE,WAAW,EAAE,CAAC,CAAC,CAAC,EAAE,IAAI,CAAA;QAC3F,IAAI,CAAC,CAAC,eAAe,EAAE,iBAAiB,CAAC,CAAC,QAAQ,CAAC,WAAW,CAAC;YAC7D,OAAO,EAAE,iBAAiB,EAAE,EAAE,EAAE,CAAA;QAElC,MAAM,OAAO,GACX,WAAW,KAAK,eAAe;YAC7B,CAAC,CAAC,CAAC,aAAa,CAAC,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YACrC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,aAA4B,EAAE,EAAE,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC,CAAA;QAE5F,IAAI,CAAC,OAAO,CAAC,MAAM;YAAE,OAAO,EAAE,iBAAiB,EAAE,EAAE,EAAE,CAAA;QAErD,MAAM,oBAAoB,GAAG,OAAO;aACjC,GAAG,CAAC,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC;YAC1B,IAAA,+BAAuB,EAAC,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC;YAC3C,IAAA,gBAAQ,EAAC,QAAQ,CAAC;YAClB,IAAA,gBAAQ,EAAC,KAAK,EAAE,MAAM,CAAC;YACvB,IAAA,gBAAQ,EAAC,KAAK,CAAC;SAChB,CAAC;aACD,IAAI,EAAE;aACN,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAA;QAEf,OAAO;YACL,iBAAiB,EAAE;gBACjB,IAAA,iBAAS,EAAC,SAAS,CAAC;gBACpB,GAAG,oBAAoB;gBACvB,IAAA,mBAAW,EAAC,EAAE,CAAC,OAAO,CAAC,WAAW,CAA2B;aAC9D;SACF,CAAA;IACH,CAAC;IAED,OAAO,EAAE,iBAAiB,EAAE,EAAE,EAAE,CAAA;AAClC,CAAC,CAAA;AAxCY,QAAA,aAAa,iBAwCzB","sourcesContent":["import { PANCAKE_SWAP_PERMIT_2_ADDRESS, PERMIT_2_ADDRESS } from '../../../consts/addresses'\nimport { Message } from '../../../interfaces/userRequest'\nimport { HumanizerTypedMessageModule, HumanizerVisualization } from '../interfaces'\nimport { getAction, getAddressVisualization, getDeadline, getLabel, getToken } from '../utils'\n\n// interfaces\n// export interface PermitSingle {\n//     details: PermitDetails\n//     spender: string\n//     sigDeadline: BigNumberish\n//   }\n\n// interface PermitBatch {\n//   details: PermitDetails[]\n//   spender: string\n//   sigDeadline: BigNumberish\n// }\n\n// example\n// const permitSingle: PermitSingle = {\n//   details: {\n//     token: tokenAddress,\n//     amount: MaxAllowanceTransferAmount,\n//     // You may set your own deadline - we use 30 days.\n//     expiration: toDeadline(/* 30 days= */ 1000 * 60 * 60 * 24 * 30),\n//     nonce\n//   },\n//   spender: spenderAddress,\n//   // You may set your own deadline - we use 30 minutes.\n//   sigDeadline: toDeadline(/* 30 minutes= */ 1000 * 60 * 60 * 30)\n// }\n\ninterface PermitDetails {\n  token: string\n  amount: bigint\n  expiration: bigint\n  nonce: bigint\n}\n\ninterface PermitGist {\n  token: string\n  amount: bigint\n}\n\nconst getPermitData = (permit: PermitDetails): PermitGist => {\n  return { token: permit.token, amount: permit.amount }\n}\n\nexport const permit2Module: HumanizerTypedMessageModule = (message: Message) => {\n  if (message.content.kind !== 'typedMessage') return { fullVisualization: [] }\n  const tm = message.content\n  if (\n    tm?.domain?.verifyingContract &&\n    [PERMIT_2_ADDRESS.toLowerCase(), PANCAKE_SWAP_PERMIT_2_ADDRESS.toLocaleLowerCase()].includes(\n      tm.domain.verifyingContract.toLowerCase()\n    )\n  ) {\n    const messageType = tm?.types?.PermitSingle?.[0]?.type || tm?.types?.PermitBatch?.[0]?.type\n    if (!['PermitDetails', 'PermitDetails[]'].includes(messageType))\n      return { fullVisualization: [] }\n\n    const permits: PermitGist[] =\n      messageType === 'PermitDetails'\n        ? [getPermitData(tm.message.details)]\n        : tm.message.details.map((permitDetails: PermitDetails) => getPermitData(permitDetails))\n\n    if (!permits.length) return { fullVisualization: [] }\n\n    const permitVisualizations = permits\n      .map(({ token, amount }) => [\n        getAddressVisualization(tm.message.spender),\n        getLabel('to use'),\n        getToken(token, amount),\n        getLabel('and')\n      ])\n      .flat()\n      .slice(0, -1)\n\n    return {\n      fullVisualization: [\n        getAction('Approve'),\n        ...permitVisualizations,\n        getDeadline(tm.message.sigDeadline) as HumanizerVisualization\n      ]\n    }\n  }\n\n  return { fullVisualization: [] }\n}\n"]}