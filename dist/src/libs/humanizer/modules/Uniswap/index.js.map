{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../../src/libs/humanizer/modules/Uniswap/index.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,kBAAkB,EAAE,MAAM,sBAAsB,CAAA;AACzD,OAAO,EAAE,YAAY,EAAE,MAAM,SAAS,CAAA;AACtC,OAAO,EAAE,aAAa,EAAE,YAAY,EAAE,MAAM,SAAS,CAAA;AAErD,MAAM,CAAC,MAAM,gBAAgB,GAAwB,CACnD,SAAoB,EACpB,cAAwB,EACxB,EAAE;IACF,MAAM,eAAe,GAAG,YAAY,EAAE,CAAA;IACtC,MAAM,eAAe,GAAG,YAAY,EAAE,CAAA;IACtC,MAAM,gBAAgB,GAAG,aAAa,EAAE,CAAA;IACxC,MAAM,qBAAqB,GAAG,kBAAkB,EAAE,CAAA;IAElD,MAAM,OAAO,GAET;QACF,4CAA4C,EAAE,eAAe;QAC7D,4CAA4C,EAAE,eAAe;QAC7D,uDAAuD;QACvD,4CAA4C,EAAE,gBAAgB;QAC9D,kGAAkG;QAClG,4CAA4C,EAAE,gBAAgB;QAC9D,qCAAqC;QACrC,4CAA4C,EAAE,qBAAqB;QACnE,2HAA2H;QAC3H,4CAA4C,EAAE,qBAAqB;QACnE,WAAW;QACX,4CAA4C,EAAE,qBAAqB;QACnE,4CAA4C,EAAE,qBAAqB;QACnE,UAAU;QACV,4CAA4C,EAAE,qBAAqB;QACnE,4CAA4C,EAAE,qBAAqB;QACnE,YAAY;QACZ,4CAA4C,EAAE,qBAAqB;QACnE,WAAW;QACX,4CAA4C,EAAE,qBAAqB;KACpE,CAAA;IACD,MAAM,0BAA0B,GAAG,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAA;IAChG,MAAM,QAAQ,GAAa,EAAE,CAAA;IAC7B,cAAc,CAAC,OAAO,CAAC,CAAC,IAAY,EAAE,EAAE;QACtC,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,CAAA;QAE1C,MAAM,mBAAmB,GAAG,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,WAAW,EAAE,CAAC,CAAA;QAC1D,IAAI,mBAAmB,IAAI,mBAAmB,EAAE,CAAC,OAAO,CAAC,EAAE;YACzD,MAAM,iBAAiB,GAAG,mBAAmB,CAAC,OAAO,CAAC,CAAC,SAAS,EAAE,IAAI,CAAC,CAAA;YACvE,oCAAoC;YACpC,QAAQ,CAAC,IAAI,CAAC,EAAE,GAAG,IAAI,EAAE,iBAAiB,EAAE,CAAC,CAAA;YAE7C,wCAAwC;SACzC;aAAM,IAAI,0BAA0B,CAAC,OAAO,CAAC,EAAE;YAC9C,MAAM,iBAAiB,GAAG,0BAA0B,CAAC,OAAO,CAAC,CAAC,SAAS,EAAE,IAAI,CAAC,CAAA;YAC9E,QAAQ,CAAC,IAAI,CAAC,EAAE,GAAG,IAAI,EAAE,iBAAiB,EAAE,CAAC,CAAA;SAC9C;aAAM;YACL,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;SACpB;IACH,CAAC,CAAC,CAAA;IACF,OAAO,QAAQ,CAAA;AACjB,CAAC,CAAA","sourcesContent":["import { AccountOp } from '../../../accountOp/accountOp'\nimport { HumanizerCallModule, IrCall } from '../../interfaces'\nimport { HumanizerUniMatcher } from './interfaces'\nimport { uniUniversalRouter } from './uniUniversalRouter'\nimport { uniV2Mapping } from './uniV2'\nimport { uniV32Mapping, uniV3Mapping } from './uniV3'\n\nexport const uniswapHumanizer: HumanizerCallModule = (\n  accountOp: AccountOp,\n  currentIrCalls: IrCall[]\n) => {\n  const uniV2MappingObj = uniV2Mapping()\n  const uniV3MappingObj = uniV3Mapping()\n  const uniV32MappingObj = uniV32Mapping()\n  const uniUniversalRouterObj = uniUniversalRouter()\n\n  const matcher: {\n    [address: string]: HumanizerUniMatcher\n  } = {\n    '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D': uniV2MappingObj,\n    '0xe592427a0aece92de3edee1f18e0157c05861564': uniV3MappingObj,\n    // Mainnet, Goerli, Arbitrum, Optimism, Polygon Address\n    '0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45': uniV32MappingObj,\n    // same as above line but on on base (https://docs.uniswap.org/contracts/v3/reference/deployments)\n    '0x2626664c2603336e57b271c5c0b26f421741e481': uniV32MappingObj,\n    // empirical address from wallet txns\n    '0x4c60051384bd2d3c01bfc845cf5f4b44bcbe9de5': uniUniversalRouterObj,\n    // same as above but with address from official documentation (https://docs.uniswap.org/contracts/v3/reference/deployments)\n    '0x3fc91a3afd70395cd496c647d5a6cc9d4b2b7fad': uniUniversalRouterObj,\n    // optimism\n    '0xec8b0f7ffe3ae75d7ffab09429e3675bb63503e4': uniUniversalRouterObj,\n    '0xcb1355ff08ab38bbce60111f1bb2b784be25d7e8': uniUniversalRouterObj,\n    // polygon\n    '0x643770e279d5d0733f21d6dc03a8efbabf3255b4': uniUniversalRouterObj,\n    '0xec7be89e9d109e7e3fec59c222cf297125fefda2': uniUniversalRouterObj,\n    // avalanche\n    '0x82635af6146972cd6601161c4472ffe97237d292': uniUniversalRouterObj,\n    // arbitrum\n    '0x5e325eda8064b456f4781070c0738d849c824258': uniUniversalRouterObj\n  }\n  const fallbackFlatUniswapsMather = Object.values(matcher).reduce((a, b) => ({ ...a, ...b }), {})\n  const newCalls: IrCall[] = []\n  currentIrCalls.forEach((call: IrCall) => {\n    const sigHash = call.data.substring(0, 10)\n\n    const knownUniswapVersion = matcher[call.to.toLowerCase()]\n    if (knownUniswapVersion && knownUniswapVersion?.[sigHash]) {\n      const fullVisualization = knownUniswapVersion[sigHash](accountOp, call)\n      // @TODO add visualization squashing\n      newCalls.push({ ...call, fullVisualization })\n\n      // if unknown address, but known sighash\n    } else if (fallbackFlatUniswapsMather[sigHash]) {\n      const fullVisualization = fallbackFlatUniswapsMather[sigHash](accountOp, call)\n      newCalls.push({ ...call, fullVisualization })\n    } else {\n      newCalls.push(call)\n    }\n  })\n  return newCalls\n}\n"]}