{"version":3,"file":"uniV2.js","sourceRoot":"","sources":["../../../../../../src/libs/humanizer/modules/Uniswap/uniV2.ts"],"names":[],"mappings":"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","sourcesContent":["import { Interface, ZeroAddress } from 'ethers'\n\nimport { AccountOp } from '../../../accountOp/accountOp'\nimport { UniV2Router } from '../../const/abis'\nimport { IrCall } from '../../interfaces'\nimport { getAction, getDeadline, getLabel, getToken } from '../../utils'\nimport { HumanizerUniMatcher } from './interfaces'\nimport { getUniRecipientText } from './utils'\n\nconst uniV2Mapping = (): HumanizerUniMatcher => {\n  const iface = new Interface(UniV2Router)\n  return {\n    // ordered in the same order as the router\n    [iface.getFunction('swapExactTokensForTokens')?.selector!]: (\n      accountOp: AccountOp,\n      call: IrCall\n    ) => {\n      const [amountIn, amountOutMin, path, to, deadline] = iface.parseTransaction(call)?.args || []\n      const outputAsset = path[path.length - 1]\n      return [\n        getAction('Swap'),\n        getToken(path[0], amountIn),\n        getLabel('for at least'),\n        getToken(outputAsset, amountOutMin),\n        ...getUniRecipientText(accountOp.accountAddr, to),\n        getDeadline(deadline)\n      ]\n    },\n    [iface.getFunction('swapTokensForExactTokens')?.selector!]: (\n      accountOp: AccountOp,\n      call: IrCall\n    ) => {\n      const [amountOut, amountInMax, path, to, deadline] = iface.parseTransaction(call)?.args || []\n      const outputAsset = path[path.length - 1]\n      return [\n        getAction('Swap up to'),\n        getToken(path[0], amountInMax),\n        getLabel('for'),\n        getToken(outputAsset, amountOut),\n        ...getUniRecipientText(accountOp.accountAddr, to),\n        getDeadline(deadline)\n      ]\n    },\n    [iface.getFunction('swapExactETHForTokens')?.selector!]: (\n      accountOp: AccountOp,\n      call: IrCall\n    ) => {\n      const { args, value } = iface.parseTransaction(call) || { value: BigInt(0) }\n      const [amountOutMin, path, to, deadline] = args || []\n      const outputAsset = path[path.length - 1]\n      return [\n        getAction('Swap'),\n        getToken(ZeroAddress, value),\n        getLabel('for for at least'),\n        getToken(outputAsset, amountOutMin),\n        ...getUniRecipientText(accountOp.accountAddr, to),\n        getDeadline(deadline)\n      ]\n    },\n    [iface.getFunction('swapTokensForExactETH')?.selector!]: (\n      accountOp: AccountOp,\n      call: IrCall\n    ) => {\n      const [amountOut, amountInMax, path, to, deadline] = iface.parseTransaction(call)?.args || []\n      return [\n        getAction('Swap up to'),\n        getToken(path[0], amountInMax),\n        getLabel('for'),\n        getToken(ZeroAddress, amountOut),\n        ...getUniRecipientText(accountOp.accountAddr, to),\n        getDeadline(deadline)\n      ]\n    },\n    [iface.getFunction('swapExactTokensForETH')?.selector!]: (\n      accountOp: AccountOp,\n      call: IrCall\n    ) => {\n      const [amountIn, amountOutMin, path, to, deadline] = iface.parseTransaction(call)?.args || []\n      return [\n        getAction('Swap'),\n        getToken(path[0], amountIn),\n        getLabel('for at least'),\n        getToken(ZeroAddress, amountOutMin),\n        ...getUniRecipientText(accountOp.accountAddr, to),\n        getDeadline(deadline)\n      ]\n    },\n    [iface.getFunction('swapETHForExactTokens')?.selector!]: (\n      accountOp: AccountOp,\n      call: IrCall\n    ) => {\n      const { args, value } = iface.parseTransaction(call) || { value: BigInt(0) }\n      const [amountOut, path, to, deadline] = args || []\n      const outputAsset = path[path.length - 1]\n      return [\n        getAction('Swap up to'),\n        getToken(ZeroAddress, value),\n        getLabel('for'),\n        getToken(outputAsset, amountOut),\n        ...getUniRecipientText(accountOp.accountAddr, to),\n        getDeadline(deadline)\n      ]\n    },\n    // Liquidity\n    [iface.getFunction('addLiquidity')?.selector!]: (accountOp: AccountOp, call: IrCall) => {\n      const [\n        tokenA,\n        tokenB,\n        amountADesired,\n        amountBDesired /* amountAMin */ /* amountBMin */,\n        ,\n        ,\n        to,\n        deadline\n      ] = iface.parseTransaction(call)?.args || []\n      return [\n        getAction('Add liquidity'),\n        getToken(tokenA, amountADesired),\n        getLabel('and'),\n        getToken(tokenB, amountBDesired),\n        ...getUniRecipientText(accountOp.accountAddr, to),\n        getDeadline(deadline)\n      ]\n    },\n    [iface.getFunction('addLiquidityETH')?.selector!]: (accountOp: AccountOp, call: IrCall) => {\n      const { args, value } = iface.parseTransaction(call) || { args: [], value: BigInt(0) }\n      const [token, amountTokenDesired /* amountTokenMin */ /* amountETHMin */, , , to, deadline] =\n        args\n      return [\n        getAction('Add liquidity'),\n        getToken(token, amountTokenDesired),\n        getLabel('and'),\n        getToken(ZeroAddress, value),\n        ...getUniRecipientText(accountOp.accountAddr, to),\n        getDeadline(deadline)\n      ]\n    },\n    [iface.getFunction('removeLiquidity')?.selector!]: (accountOp: AccountOp, call: IrCall) => {\n      const [tokenA, tokenB /* liquidity */, , amountAMin, amountBMin, to, deadline] =\n        iface.parseTransaction(call)?.args || []\n      return [\n        getAction('Remove liquidity'),\n        getLabel('at least'),\n        getToken(tokenA, amountAMin),\n        getLabel('and'),\n        getToken(tokenB, amountBMin),\n        ...getUniRecipientText(accountOp.accountAddr, to),\n        getDeadline(deadline)\n      ]\n    },\n    [iface.getFunction('removeLiquidityETH')?.selector!]: (accountOp: AccountOp, call: IrCall) => {\n      const [token /* liquidity */, , amountTokenMin, amountETHMin, to, deadline] =\n        iface.parseTransaction(call)?.args || []\n      return [\n        getAction('Remove liquidity'),\n        getLabel('at least'),\n        getToken(token, amountTokenMin),\n        getLabel('and'),\n        getToken(ZeroAddress, amountETHMin),\n        ...getUniRecipientText(accountOp.accountAddr, to),\n        getDeadline(deadline)\n      ]\n    }\n    // NOTE: We currently do not support *WithPermit functions cause they require an ecrecover signature\n    // Uniswap will detect we don't support it cause it will fail on requesting eth_signTypedData_v4\n  }\n}\n\nexport { uniV2Mapping }\n"]}