{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../../../src/libs/humanizer/modules/Uniswap/utils.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable no-continue */\nimport { ZeroAddress } from 'ethers'\n\nimport { HumanizerVisualization } from '../../interfaces'\nimport { getLabel, getRecipientText } from '../../utils'\n\nexport function parsePath(pathBytes: any) {\n  // some decodePacked fun\n  // can we do this with Ethers AbiCoder? probably not\n  const path = []\n  // address, uint24\n  for (let i = 2; i < pathBytes.length; i += 46) {\n    path.push(`0x${pathBytes.substr(i, 40)}`)\n  }\n  return path\n}\n\nexport const getUniRecipientText = (accAddr: string, recAddr: string): HumanizerVisualization[] =>\n  ['0x0000000000000000000000000000000000000001', ZeroAddress].includes(recAddr)\n    ? []\n    : getRecipientText(accAddr, recAddr)\n\nexport const joinWithAndLabel = (\n  humanizations: HumanizerVisualization[][]\n): HumanizerVisualization[] => {\n  return humanizations.reduce((acc, arr) => [...acc, ...arr, getLabel('and')], []).slice(0, -1)\n}\n\nconst isSwap = (call: HumanizerVisualization[] | undefined) =>\n  call &&\n  call.length >= 4 &&\n  call[0].content?.includes('Swap') &&\n  call[1].type === 'token' &&\n  call[3].type === 'token'\n\nconst isTake = (call: HumanizerVisualization[] | undefined) =>\n  call &&\n  call.length === 3 &&\n  call[0].content?.includes('Take') &&\n  call[1].content === 'at least' &&\n  call[2].type === 'token'\n\nconst isWrap = (call: HumanizerVisualization[] | undefined) =>\n  call && call.length >= 2 && call[0].content?.includes('Wrap') && call[1].type === 'token'\n\nconst isUnwrap = (call: HumanizerVisualization[] | undefined) =>\n  call && call.length >= 2 && call[0].content?.includes('Unwrap') && call[1].type === 'token'\n\nconst isSend = (call: HumanizerVisualization[] | undefined) =>\n  call &&\n  call.length >= 4 &&\n  call[0].content?.includes('Send') &&\n  call[1].type === 'token' &&\n  call[2]?.content?.includes('to') &&\n  call[3].type === 'address'\nexport const uniReduce = (_calls: HumanizerVisualization[][]): HumanizerVisualization[] => {\n  const calls = _calls\n  const originalCallsLength = calls.length\n  for (let i = 0; i < calls.length; i++) {\n    for (let j = 0; j < calls.length; j++) {\n      // looks for wraps before the swap\n      if (\n        j < i &&\n        calls[i] &&\n        calls[j] &&\n        isSwap(calls[i]) &&\n        isWrap(calls[j]) &&\n        calls[j]![1].value === calls[i]![1].value\n      ) {\n        calls[i]![1].address = ZeroAddress\n        calls.splice(j, 1)\n      }\n      // looks for unwrap after the swap\n      if (\n        i < j &&\n        calls[i] &&\n        calls[j] &&\n        isSwap(calls[i]) &&\n        isUnwrap(calls[j]) &&\n        calls[j]![1].value === calls[i]![3].value\n      ) {\n        calls[i]![3].address = ZeroAddress\n        calls.splice(j, 1)\n      }\n\n      // looks for swaps to merge\n      if (\n        i !== j &&\n        calls[i] &&\n        calls[j] &&\n        isSwap(calls[i]!) &&\n        isSwap(calls[j]!) &&\n        calls[i]![1].address === calls[j]![1].address &&\n        calls[i]![3].address === calls[j]![3].address\n      ) {\n        calls[i]![1].value = calls[i]![1].value! + calls[j]![1].value!\n        calls[i]![3].value = calls[i]![3].value! + calls[j]![3].value!\n        calls.splice(j, 1)\n      }\n\n      // looks for fee payment to subtract\n      if (\n        i !== j &&\n        calls[i] &&\n        calls[j] &&\n        isSend(calls[j]) &&\n        isSwap(calls[i]!) &&\n        calls[i]![3].value! / 400n >= calls[j]![1].value!\n      ) {\n        calls[i]![3].value = calls[i]![3].value! - calls[j]![1].value!\n        calls.splice(j, 1)\n      }\n\n      // looks for take (sweep) action to infer the swap minimum by\n      if (\n        i !== j &&\n        calls[i] &&\n        calls[j] &&\n        isSwap(calls[i]!) &&\n        isTake(calls[j]!) &&\n        calls[i]![3].address === calls[j]![2].address\n      ) {\n        calls[i]![3].value =\n          calls[i]![3].value! > calls[j]![2].value! ? calls[i]![3].value : calls[j]![2].value\n        calls.splice(j, 1)\n      }\n    }\n  }\n  return originalCallsLength === calls.length ? joinWithAndLabel(calls) : uniReduce(calls)\n}\n"]}