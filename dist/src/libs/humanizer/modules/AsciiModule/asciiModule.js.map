{"version":3,"file":"asciiModule.js","sourceRoot":"","sources":["../../../../../../src/libs/humanizer/modules/AsciiModule/asciiModule.ts"],"names":[],"mappings":";;;AAAA,qCAAqC;AACrC,mCAAkD;AAIlD,uCAOoB;AAEb,MAAM,WAAW,GAAwB,CAC9C,SAAoB,EACpB,cAAwB,EACxB,EAAE;IACF,MAAM,QAAQ,GAAG,cAAc,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;QAC3C,IAAI,IAAI,CAAC,IAAI,KAAK,IAAI;YAAE,OAAO,IAAI,CAAA;QACnC,IAAI,IAAI,CAAC,iBAAiB,IAAI,CAAC,IAAA,4BAAoB,EAAC,IAAI,EAAE,iBAAiB,CAAC;YAAE,OAAO,IAAI,CAAA;QACzF,mFAAmF;QACnF,kCAAkC;QAClC,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,KAAK,YAAY,CAAC,MAAM;YAAE,OAAO,IAAI,CAAA;QACzD,IAAI,aAAa,CAAA;QACjB,IAAI,CAAC;YACH,aAAa,GAAG,IAAA,qBAAY,EAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QACzC,CAAC;QAAC,MAAM,CAAC;YACP,OAAO,IAAI,CAAA;QACb,CAAC;QACD,MAAM,sBAAsB,GAAG,IAAI,CAAC,KAAK;YACvC,CAAC,CAAC,CAAC,IAAA,gBAAQ,EAAC,KAAK,CAAC,EAAE,IAAA,iBAAS,EAAC,MAAM,CAAC,EAAE,IAAA,gBAAQ,EAAC,oBAAW,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;YACzE,CAAC,CAAC,EAAE,CAAA;QACN,OAAO;YACL,GAAG,IAAI;YACP,iBAAiB,EAAE;gBACjB,IAAA,iBAAS,EAAC,mBAAmB,CAAC;gBAC9B,IAAA,gBAAQ,EAAC,IAAI,CAAC;gBACd,IAAA,+BAAuB,EAAC,IAAI,CAAC,EAAE,CAAC;gBAChC,IAAA,eAAO,EAAC,aAAa,CAAC;gBACtB,GAAG,sBAAsB;aAC1B;SACF,CAAA;IACH,CAAC,CAAC,CAAA;IACF,OAAO,QAAQ,CAAA;AACjB,CAAC,CAAA;AA/BY,QAAA,WAAW,eA+BvB","sourcesContent":["/* eslint-disable no-await-in-loop */\nimport { toUtf8String, ZeroAddress } from 'ethers'\n\nimport { AccountOp } from '../../../accountOp/accountOp'\nimport { HumanizerCallModule, IrCall } from '../../interfaces'\nimport {\n  checkIfUnknownAction,\n  getAction,\n  getAddressVisualization,\n  getLabel,\n  getText,\n  getToken\n} from '../../utils'\n\nexport const asciiModule: HumanizerCallModule = (\n  accountOp: AccountOp,\n  currentIrCalls: IrCall[]\n) => {\n  const newCalls = currentIrCalls.map((call) => {\n    if (call.data === '0x') return call\n    if (call.fullVisualization && !checkIfUnknownAction(call?.fullVisualization)) return call\n    // assuming that if there are only 4 bytes it is probably just contract method call\n    // and further logic is irrelevant\n    if (call.data.length === '0x12345678'.length) return call\n    let messageAsText\n    try {\n      messageAsText = toUtf8String(call.data)\n    } catch {\n      return call\n    }\n    const sendNativeHumanization = call.value\n      ? [getLabel('and'), getAction('Send'), getToken(ZeroAddress, call.value)]\n      : []\n    return {\n      ...call,\n      fullVisualization: [\n        getAction('Send this message'),\n        getLabel('to'),\n        getAddressVisualization(call.to),\n        getText(messageAsText),\n        ...sendNativeHumanization\n      ]\n    }\n  })\n  return newCalls\n}\n"]}