{"version":3,"file":"wrapping.js","sourceRoot":"","sources":["../../../../../../src/libs/humanizer/modules/Wrapping/wrapping.ts"],"names":[],"mappings":";;;AAAA,mCAA+C;AAG/C,2CAAuC;AAEvC,uCAAiF;AAE1E,MAAM,cAAc,GAAwB,CACjD,CAAY,EACZ,OAAiB,EACjB,aAA4B,EAC5B,EAAE;IACF,MAAM,KAAK,GAAG,IAAI,kBAAS,CAAC,WAAI,CAAC,CAAA;IACjC,MAAM,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,IAAY,EAAE,EAAE;QAC5C,MAAM,gBAAgB,GAAG,aAAa,EAAE,cAAc,CAAC,IAAI,CAAC,EAAE,CAAC,WAAW,EAAE,CAAC,CAAA;QAC7E,IACE,gBAAgB,EAAE,IAAI,KAAK,aAAa;YACxC,gBAAgB,EAAE,IAAI,KAAK,MAAM;YACjC,gBAAgB,EAAE,KAAK,EAAE,MAAM,KAAK,MAAM;YAC1C,gBAAgB,EAAE,IAAI,KAAK,QAAQ;YACnC,gBAAgB,EAAE,KAAK,EAAE,MAAM,KAAK,QAAQ;YAC5C,gBAAgB,EAAE,KAAK,EAAE,MAAM,KAAK,OAAO,EAC3C;YACA,aAAa;YACb,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK,KAAK,CAAC,WAAW,CAAC,SAAS,CAAC,EAAE,QAAQ,EAAE;gBACrE,OAAO;oBACL,GAAG,IAAI;oBACP,iBAAiB,EAAE,IAAA,mBAAW,EAAC,oBAAW,EAAE,IAAI,CAAC,KAAK,CAAC;iBACxD,CAAA;aACF;YACD,aAAa;YACb,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK,KAAK,CAAC,WAAW,CAAC,UAAU,CAAC,EAAE,QAAQ,EAAE;gBACtE,MAAM,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC,gBAAgB,CAAC,IAAI,CAAC,EAAE,IAAI,IAAI,EAAE,CAAA;gBACzD,OAAO;oBACL,GAAG,IAAI;oBACP,iBAAiB,EAAE,IAAA,qBAAa,EAAC,oBAAW,EAAE,MAAM,CAAC;iBACtD,CAAA;aACF;YACD,IAAI,CAAC,IAAI,EAAE,iBAAiB;gBAC1B,OAAO;oBACL,GAAG,IAAI;oBACP,iBAAiB,EAAE,IAAA,+BAAuB,EAAC,SAAS,EAAE,IAAI,CAAC;iBAC5D,CAAA;SACJ;QACD,OAAO,IAAI,CAAA;IACb,CAAC,CAAC,CAAA;IACF,OAAO,QAAQ,CAAA;AACjB,CAAC,CAAA;AAxCY,QAAA,cAAc,kBAwC1B","sourcesContent":["import { Interface, ZeroAddress } from 'ethers'\n\nimport { AccountOp } from '../../../accountOp/accountOp'\nimport { WETH } from '../../const/abis'\nimport { HumanizerCallModule, HumanizerMeta, IrCall } from '../../interfaces'\nimport { getUnknownVisualization, getUnwrapping, getWrapping } from '../../utils'\n\nexport const wrappingModule: HumanizerCallModule = (\n  _: AccountOp,\n  irCalls: IrCall[],\n  humanizerMeta: HumanizerMeta\n) => {\n  const iface = new Interface(WETH)\n  const newCalls = irCalls.map((call: IrCall) => {\n    const knownAddressData = humanizerMeta?.knownAddresses[call.to.toLowerCase()]\n    if (\n      knownAddressData?.name === 'Wrapped ETH' ||\n      knownAddressData?.name === 'WETH' ||\n      knownAddressData?.token?.symbol === 'WETH' ||\n      knownAddressData?.name === 'WMATIC' ||\n      knownAddressData?.token?.symbol === 'WMATIC' ||\n      knownAddressData?.token?.symbol === 'WAVAX'\n    ) {\n      // 0xd0e30db0\n      if (call.data.slice(0, 10) === iface.getFunction('deposit')?.selector) {\n        return {\n          ...call,\n          fullVisualization: getWrapping(ZeroAddress, call.value)\n        }\n      }\n      // 0x2e1a7d4d\n      if (call.data.slice(0, 10) === iface.getFunction('withdraw')?.selector) {\n        const [amount] = iface.parseTransaction(call)?.args || []\n        return {\n          ...call,\n          fullVisualization: getUnwrapping(ZeroAddress, amount)\n        }\n      }\n      if (!call?.fullVisualization)\n        return {\n          ...call,\n          fullVisualization: getUnknownVisualization('wrapped', call)\n        }\n    }\n    return call\n  })\n  return newCalls\n}\n"]}