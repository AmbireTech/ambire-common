{"version":3,"file":"fallBackHumanizer.js","sourceRoot":"","sources":["../../../../../../src/libs/humanizer/modules/FallbackHumanizer/fallBackHumanizer.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable no-await-in-loop */\nimport { Interface, isAddress, ZeroAddress } from 'ethers'\n\nimport { AccountOp } from '../../../accountOp/accountOp'\nimport {\n  HumanizerCallModule,\n  HumanizerMeta,\n  HumanizerVisualization,\n  IrCall\n} from '../../interfaces'\nimport {\n  checkIfUnknownAction,\n  getAction,\n  getAddressVisualization,\n  getLabel,\n  getToken\n} from '../../utils'\n\nfunction extractAddresses(data: string, _selector: string): string[] {\n  const selector = _selector.startsWith('function') ? _selector : `function ${_selector}`\n  const iface = new Interface([selector])\n  const args = iface.decodeFunctionData(selector, data)\n  const deepSearchForAddress = (obj: { [prop: string]: any }): string[] => {\n    return (\n      Object.values(obj)\n        .map((o: any): string[] | undefined => {\n          if (typeof o === 'string' && isAddress(o)) return [o] as string[]\n          if (typeof o === 'object') return deepSearchForAddress(o).filter((x) => x) as string[]\n          return undefined\n        })\n        .filter((x) => x) as string[][]\n    ).flat() as string[]\n  }\n  return deepSearchForAddress(args)\n}\n\nexport const fallbackHumanizer: HumanizerCallModule = (\n  accountOp: AccountOp,\n  currentIrCalls: IrCall[],\n  humanizerMeta: HumanizerMeta\n) => {\n  const newCalls = currentIrCalls.map((call) => {\n    if (call.fullVisualization && !checkIfUnknownAction(call?.fullVisualization)) return call\n\n    const knownSigHashes: HumanizerMeta['abis']['NO_ABI'] = Object.values(\n      humanizerMeta.abis as HumanizerMeta['abis']\n    ).reduce((a, b) => ({ ...a, ...b }), {})\n\n    const visualization: Array<HumanizerVisualization> = []\n    if (call.data !== '0x') {\n      let extractedAddresses: string[] = []\n      if (knownSigHashes[call.data.slice(0, 10)]?.signature) {\n        try {\n          extractedAddresses = extractAddresses(\n            call.data,\n            knownSigHashes[call.data.slice(0, 10)].signature\n          )\n        } catch (e) {\n          console.error('Humanizer: fallback: Could not decode addresses from calldata')\n        }\n        visualization.push(\n          getAction(\n            `Call ${\n              //  from function asd(address asd) returns ... => asd(address asd)\n              knownSigHashes[call.data.slice(0, 10)].signature\n                .split('function ')\n                .filter((x) => x !== '')[0]\n                .split(' returns')\n                .filter((x) => x !== '')[0]\n            }`\n          ),\n          getLabel('from'),\n          getAddressVisualization(call.to),\n          ...extractedAddresses.map(\n            (a): HumanizerVisualization => ({ ...getToken(a, 0n), isHidden: true })\n          )\n        )\n      } else {\n        visualization.push(\n          getAction('Unknown action'),\n          getLabel('to'),\n          getAddressVisualization(call.to)\n        )\n      }\n    }\n    if (call.value) {\n      if (call.data !== '0x') visualization.push(getLabel('and'))\n      visualization.push(getAction('Send'), getToken(ZeroAddress, call.value))\n      if (call.data === '0x') visualization.push(getLabel('to'), getAddressVisualization(call.to))\n    }\n\n    return {\n      ...call,\n      fullVisualization: visualization.length\n        ? visualization\n        : [getAction('No data, no value, call to'), getAddressVisualization(call.to)]\n    }\n  })\n\n  return newCalls\n}\n"]}