{"version":3,"file":"gasTankModule.js","sourceRoot":"","sources":["../../../../../../src/libs/humanizer/modules/GasTankModule/gasTankModule.ts"],"names":[],"mappings":";;;AAAA,mCAA8C;AAE9C,4DAA4D;AAG5D,uCAAiD;AAE1C,MAAM,aAAa,GAAwB,CAAC,CAAY,EAAE,OAAiB,EAAE,EAAE;IACpF,MAAM,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;QACpC,kCAAkC;QAClC,IAAI,IAAI,CAAC,EAAE,CAAC,WAAW,EAAE,KAAK,yBAAa,CAAC,WAAW,EAAE,EAAE,CAAC;YAC1D,IAAI,IAAI,CAAC,KAAK,GAAG,EAAE,EAAE,CAAC;gBACpB,OAAO;oBACL,GAAG,IAAI;oBACP,iBAAiB,EAAE,CAAC,IAAA,iBAAS,EAAC,oBAAoB,CAAC,EAAE,IAAA,gBAAQ,EAAC,oBAAW,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;iBACxF,CAAA;YACH,CAAC;YACD,IAAI,CAAC;gBACH,MAAM,CAAC,IAAI,CAAC,GAAG,IAAI,iBAAQ,EAAE,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,SAAS,EAAE,QAAQ,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,CAAA;gBAChF,iDAAiD;gBACjD,IAAI,IAAI,KAAK,SAAS;oBACpB,OAAO,EAAE,GAAG,IAAI,EAAE,iBAAiB,EAAE,CAAC,IAAA,iBAAS,EAAC,uBAAuB,CAAC,CAAC,EAAE,CAAA;YAC/E,CAAC;YAAC,OAAO,CAAC,EAAE,CAAC;gBACX,aAAa;YACf,CAAC;QACH,CAAC;aAAM,IACL,IAAI,CAAC,iBAAiB,EAAE,CAAC,CAAC,CAAC,EAAE,OAAO,KAAK,MAAM;YAC/C,IAAI,CAAC,iBAAiB,EAAE,CAAC,CAAC,CAAC,EAAE,IAAI,KAAK,OAAO;YAC7C,IAAI,CAAC,iBAAiB,EAAE,CAAC,CAAC,CAAC,EAAE,OAAO,KAAK,IAAI;YAC7C,IAAI,CAAC,iBAAiB,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,SAAS;YAC9C,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,OAAQ,CAAC,WAAW,EAAE,KAAK,yBAAa,CAAC,WAAW,EAAE;YAEhF,OAAO;gBACL,GAAG,IAAI;gBACP,iBAAiB,EAAE,CAAC,IAAA,iBAAS,EAAC,oBAAoB,CAAC,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;aAChF,CAAA;QACH,OAAO,IAAI,CAAA;IACb,CAAC,CAAC,CAAA;IACF,OAAO,QAAQ,CAAA;AACjB,CAAC,CAAA;AAhCY,QAAA,aAAa,iBAgCzB","sourcesContent":["import { AbiCoder, ZeroAddress } from 'ethers'\n\nimport { FEE_COLLECTOR } from '../../../../consts/addresses'\nimport { AccountOp } from '../../../accountOp/accountOp'\nimport { HumanizerCallModule, IrCall } from '../../interfaces'\nimport { getAction, getToken } from '../../utils'\n\nexport const gasTankModule: HumanizerCallModule = (_: AccountOp, irCalls: IrCall[]) => {\n  const newCalls = irCalls.map((call) => {\n    // @TODO fix those upper/lowercase\n    if (call.to.toLowerCase() === FEE_COLLECTOR.toLowerCase()) {\n      if (call.value > 0n) {\n        return {\n          ...call,\n          fullVisualization: [getAction('Fuel gas tank with'), getToken(ZeroAddress, call.value)]\n        }\n      }\n      try {\n        const [text] = new AbiCoder().decode(['string', 'uint256', 'string'], call.data)\n        // mostly useful for filtering out call in benzin\n        if (text === 'gasTank')\n          return { ...call, fullVisualization: [getAction('Pay fee with gas tank')] }\n      } catch (e) {\n        // do nothing\n      }\n    } else if (\n      call.fullVisualization?.[0]?.content === 'Send' &&\n      call.fullVisualization?.[1]?.type === 'token' &&\n      call.fullVisualization?.[2]?.content === 'to' &&\n      call.fullVisualization?.[3].type === 'address' &&\n      call.fullVisualization[3].address!.toLowerCase() === FEE_COLLECTOR.toLowerCase()\n    )\n      return {\n        ...call,\n        fullVisualization: [getAction('Fuel gas tank with'), call.fullVisualization[1]]\n      }\n    return call\n  })\n  return newCalls\n}\n"]}