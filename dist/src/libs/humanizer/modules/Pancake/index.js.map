{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../../src/libs/humanizer/modules/Pancake/index.ts"],"names":[],"mappings":";;AAAA,mCAAkC;AAGlC,sDAAkD;AAElD,uCAAiG;AAEjG,MAAM,aAAa,GAAwB,CAAC,KAAgB,EAAE,KAAe,EAAE,EAAE;IAC/E,MAAM,KAAK,GAAG,IAAI,kBAAS,CAAC,iBAAO,CAAC,CAAA;IACpC,MAAM,OAAO,GAAG;QACd,CAAC,KAAK,CAAC,WAAW,CAAC,4EAA4E,CAAC;YAC9F,EAAE,QAAS,CAAC,EAAE,CAAC,IAAY,EAAE,EAAE;YAC/B,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,UAAU,EAAE,GAAG,KAAK,CAAC,gBAAgB,CAAC,IAAI,CAAE,CAAC,IAAI,CAAA;YACjF,OAAO;gBACL,IAAA,iBAAS,EAAC,SAAS,CAAC;gBACpB,IAAA,+BAAuB,EAAC,OAAO,CAAC;gBAChC,IAAA,gBAAQ,EAAC,QAAQ,CAAC;gBAClB,IAAA,gBAAQ,EAAC,KAAK,EAAE,MAAM,CAAC;gBACvB,IAAA,mBAAW,EAAC,UAAU,CAAC;aACxB,CAAA;QACH,CAAC;KACF,CAAA;IACD,MAAM,QAAQ,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;QAClC,IAAI,IAAI,CAAC,iBAAiB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YAAE,OAAO,IAAI,CAAA;QAC3E,OAAO,EAAE,GAAG,IAAI,EAAE,iBAAiB,EAAE,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAA;IAC9E,CAAC,CAAC,CAAA;IAEF,OAAO,QAAQ,CAAA;AACjB,CAAC,CAAA;AAED,kBAAe,aAAa,CAAA","sourcesContent":["import { Interface } from 'ethers'\n\nimport { AccountOp } from '../../../accountOp/accountOp'\nimport { Pancake } from '../../const/abis/Pancake'\nimport { HumanizerCallModule, IrCall } from '../../interfaces'\nimport { getAction, getAddressVisualization, getDeadline, getLabel, getToken } from '../../utils'\n\nconst PancakeModule: HumanizerCallModule = (accOp: AccountOp, calls: IrCall[]) => {\n  const iface = new Interface(Pancake)\n  const matcher = {\n    [iface.getFunction('approve(address token, address spender, uint160 amount, uint48 expiration)')\n      ?.selector!]: (call: IrCall) => {\n      const { token, spender, amount, expiration } = iface.parseTransaction(call)!.args\n      return [\n        getAction('Approve'),\n        getAddressVisualization(spender),\n        getLabel('to use'),\n        getToken(token, amount),\n        getDeadline(expiration)\n      ]\n    }\n  }\n  const newCalls = calls.map((call) => {\n    if (call.fullVisualization || !matcher[call.data.slice(0, 10)]) return call\n    return { ...call, fullVisualization: matcher[call.data.slice(0, 10)](call) }\n  })\n\n  return newCalls\n}\n\nexport default PancakeModule\n"]}