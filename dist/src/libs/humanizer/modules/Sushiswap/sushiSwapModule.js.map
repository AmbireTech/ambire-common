{"version":3,"file":"sushiSwapModule.js","sourceRoot":"","sources":["../../../../../../src/libs/humanizer/modules/Sushiswap/sushiSwapModule.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,WAAW,EAAE,MAAM,QAAQ,CAAA;AAG/C,OAAO,EAAE,cAAc,EAAE,MAAM,kBAAkB,CAAA;AAEjD,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,gBAAgB,EAAE,QAAQ,EAAE,MAAM,aAAa,CAAA;AAE7E,MAAM,CAAC,MAAM,eAAe,GAAwB,CAAC,SAAoB,EAAE,OAAiB,EAAE,EAAE;IAC9F,MAAM,mBAAmB,GAAG,IAAI,SAAS,CAAC,cAAc,CAAC,CAAA;IACzD,MAAM,OAAO,GAAG;QACd,CAAC,GAAG,mBAAmB,CAAC,WAAW,CAAC,cAAc,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,CAChE,UAAqB,EACrB,IAAY,EACJ,EAAE;YACV,MAAM,MAAM,GAAG,mBAAmB,CAAC,gBAAgB,CAAC,IAAI,CAAE,CAAC,IAAI,CAAA;YAC/D,IAAI,EAAE,OAAO,EAAE,QAAQ,CAAC,WAAW,EAAE,GAAG,MAAM,CAAA;YAC9C,MAAM,EAAE,QAAQ,EAAE,YAAY,EAAE,EAAE,EAAE,GAAG,MAAM,CAAA;YAC7C,IAAI,OAAO,CAAC,WAAW,EAAE,KAAK,4CAA4C;gBACxE,OAAO,GAAG,WAAW,CAAA;YACvB,IAAI,QAAQ,CAAC,WAAW,EAAE,KAAK,4CAA4C;gBACzE,QAAQ,GAAG,WAAW,CAAA;YAExB,OAAO;gBACL,GAAG,IAAI;gBACP,iBAAiB,EAAE;oBACjB,SAAS,CAAC,MAAM,CAAC;oBACjB,QAAQ,CAAC,OAAO,EAAE,QAAQ,CAAC;oBAC3B,QAAQ,CAAC,KAAK,CAAC;oBACf,QAAQ,CAAC,QAAQ,EAAE,YAAY,CAAC;oBAChC,GAAG,gBAAgB,CAAC,SAAS,CAAC,WAAW,EAAE,EAAE,CAAC;iBAC/C;aACF,CAAA;QACH,CAAC;KACF,CAAA;IACD,MAAM,QAAQ,GAAa,OAAO,CAAC,GAAG,CAAC,CAAC,IAAY,EAAE,EAAE;QACtD,IAAI,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE;YACnC,OAAO,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,SAAS,EAAE,IAAI,CAAC,CAAA;SACxD;QACD,OAAO,IAAI,CAAA;IACb,CAAC,CAAC,CAAA;IACF,OAAO,QAAQ,CAAA;AACjB,CAAC,CAAA","sourcesContent":["import { Interface, ZeroAddress } from 'ethers'\n\nimport { AccountOp } from '../../../accountOp/accountOp'\nimport { RouteProcessor } from '../../const/abis'\nimport { HumanizerCallModule, IrCall } from '../../interfaces'\nimport { getAction, getLabel, getRecipientText, getToken } from '../../utils'\n\nexport const sushiSwapModule: HumanizerCallModule = (accountOp: AccountOp, irCalls: IrCall[]) => {\n  const routeProcessorIface = new Interface(RouteProcessor)\n  const matcher = {\n    [`${routeProcessorIface.getFunction('processRoute')?.selector}`]: (\n      _accountOp: AccountOp,\n      call: IrCall\n    ): IrCall => {\n      const params = routeProcessorIface.parseTransaction(call)!.args\n      let { tokenIn, tokenOut /* route */ } = params\n      const { amountIn, amountOutMin, to } = params\n      if (tokenIn.toLowerCase() === '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee')\n        tokenIn = ZeroAddress\n      if (tokenOut.toLowerCase() === '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee')\n        tokenOut = ZeroAddress\n\n      return {\n        ...call,\n        fullVisualization: [\n          getAction('Swap'),\n          getToken(tokenIn, amountIn),\n          getLabel('for'),\n          getToken(tokenOut, amountOutMin),\n          ...getRecipientText(accountOp.accountAddr, to)\n        ]\n      }\n    }\n  }\n  const newCalls: IrCall[] = irCalls.map((call: IrCall) => {\n    if (matcher[call.data.slice(0, 10)]) {\n      return matcher[call.data.slice(0, 10)](accountOp, call)\n    }\n    return call\n  })\n  return newCalls\n}\n"]}