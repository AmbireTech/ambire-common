{"version":3,"file":"WALLETSupplyController.js","sourceRoot":"","sources":["../../../../../../src/libs/humanizer/modules/WALLET/WALLETSupplyController.ts"],"names":[],"mappings":";;;;AAAA,sDAAsD;AACtD,mCAAkC;AAElC,wIAAqG;AAErG,uCAAiD;AAEjD,6DAA6D;AACtD,MAAM,6BAA6B,GAAG,GAE3C,EAAE;IACF,MAAM,KAAK,GAAG,IAAI,kBAAS,CAAC,qCAAyB,CAAC,CAAA;IAEtD,OAAO;QACL,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,CAAC,EAAE,QAAS,CAAC,EAAE,CAAC,IAAY,EAA4B,EAAE;YAClF,MAAM,EAAE,SAAS,EAAE,GAAG,KAAK,CAAC,gBAAgB,CAAC,IAAI,CAAE,CAAC,IAAI,CAAA;YACxD,MAAM,cAAc,GAAG,SAAS,CAAC,QAAQ,EAAE,GAAG,GAAG,CAAA;YACjD,OAAO,cAAc,GAAG,CAAC;gBACvB,CAAC,CAAC,CAAC,IAAA,iBAAS,EAAC,eAAe,CAAC,EAAE,IAAA,gBAAQ,EAAC,QAAQ,cAAc,QAAQ,CAAC,CAAC;gBACxE,CAAC,CAAC,CAAC,IAAA,iBAAS,EAAC,eAAe,CAAC,CAAC,CAAA;QAClC,CAAC;QACD,CAAC,KAAK,CAAC,WAAW,CAAC,qBAAqB,CAAC,EAAE,QAAS,CAAC,EAAE,CACrD,IAAY,EACc,EAAE;YAC5B,MAAM,EAAE,SAAS,EAAE,GAAG,KAAK,CAAC,gBAAgB,CAAC,IAAI,CAAE,CAAC,IAAI,CAAA;YACxD,MAAM,cAAc,GAAG,SAAS,CAAC,QAAQ,EAAE,GAAG,GAAG,CAAA;YAEjD,OAAO,cAAc,GAAG,CAAC;gBACvB,CAAC,CAAC,CAAC,IAAA,iBAAS,EAAC,eAAe,CAAC,EAAE,IAAA,gBAAQ,EAAC,QAAQ,cAAc,QAAQ,CAAC,CAAC;gBACxE,CAAC,CAAC,CAAC,IAAA,iBAAS,EAAC,eAAe,CAAC,CAAC,CAAA;QAClC,CAAC;QACD,6DAA6D;QAC7D,CAAC,KAAK,CAAC,WAAW,CAAC,aAAa,CAAC,EAAE,QAAS,CAAC,EAAE,GAA6B,EAAE;YAC5E,OAAO,CAAC,IAAA,iBAAS,EAAC,qBAAqB,CAAC,CAAC,CAAA;QAC3C,CAAC;KACF,CAAA;AACH,CAAC,CAAA;AA5BY,QAAA,6BAA6B,iCA4BzC","sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { Interface } from 'ethers'\n\nimport WALLETSupplyControllerABI from '../../../../../contracts/compiled/WALLETSupplyController.json'\nimport { HumanizerVisualization, IrCall } from '../../interfaces'\nimport { getAction, getLabel } from '../../utils'\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport const WALLETSupplyControllerMapping = (): {\n  [key: string]: (arg1: IrCall) => HumanizerVisualization[]\n} => {\n  const iface = new Interface(WALLETSupplyControllerABI)\n\n  return {\n    [iface.getFunction('claim')?.selector!]: (call: IrCall): HumanizerVisualization[] => {\n      const { toBurnBps } = iface.parseTransaction(call)!.args\n      const burnPercentage = toBurnBps.toString() / 100\n      return burnPercentage > 0\n        ? [getAction('Claim rewards'), getLabel(`with ${burnPercentage}% burn`)]\n        : [getAction('Claim rewards')]\n    },\n    [iface.getFunction('claimWithRootUpdate')?.selector!]: (\n      call: IrCall\n    ): HumanizerVisualization[] => {\n      const { toBurnBps } = iface.parseTransaction(call)!.args\n      const burnPercentage = toBurnBps.toString() / 100\n\n      return burnPercentage > 0\n        ? [getAction('Claim rewards'), getLabel(`with ${burnPercentage}% burn`)]\n        : [getAction('Claim rewards')]\n    },\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    [iface.getFunction('mintVesting')?.selector!]: (): HumanizerVisualization[] => {\n      return [getAction('Claim vested tokens')]\n    }\n  }\n}\n"]}