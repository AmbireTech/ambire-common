{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../../src/libs/humanizer/modules/Legends/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { getAddress, Interface, ZeroAddress } from 'ethers'\n\nimport { AccountOp } from '../../../accountOp/accountOp'\nimport { Legends } from '../../const/abis/Legends'\nimport { HumanizerCallModule, IrCall } from '../../interfaces'\nimport { getAction, getAddressVisualization, getImage, getLabel } from '../../utils'\n\nconst ONCHAIN_TXNS_LEGENDS_ADDRESS = '0x1415926535897932384626433832795028841971'\nconst OLD_AND_CURRENT_LEGENDS_NFT_ADDRESSES = [\n  '0x52d067EBB7b06F31AEB645Bd34f92c3Ac13a29ea',\n  '0xcfbAec203431045E9589F70375AC5F529EE55511',\n  '0xF51dF52d0a9BEeB7b6E4B6451e729108a115B863',\n  '0xb850AcfBC7720873242D27A38E4AE987f914Ef5B'\n]\n\nconst legendsModule: HumanizerCallModule = (accOp: AccountOp, calls: IrCall[]) => {\n  const iface = new Interface(Legends)\n  const characterTypes = [\n    {\n      type: 'Unknown',\n      image: 'https://relayer.ambire.com/legends/nft-image/avatar/unknown.png'\n    },\n    {\n      type: 'The Degenerate',\n      image: 'https://relayer.ambire.com/legends/nft-image/avatar/slime-lvl0.png'\n    },\n    {\n      type: 'The Codeweaver',\n      image: 'https://relayer.ambire.com/legends/nft-image/avatar/sorceress-lvl0.png'\n    },\n    {\n      type: 'The Layerbinder',\n      image: 'https://relayer.ambire.com/legends/nft-image/avatar/necromancer-lvl0.png'\n    },\n    {\n      type: 'The Custodian',\n      image: 'https://relayer.ambire.com/legends/nft-image/avatar/penguin-lvl0.png'\n    },\n    {\n      type: 'The Warrior',\n      image: 'https://relayer.ambire.com/legends/nft-image/avatar/orc-lvl0.png'\n    },\n    {\n      type: 'The Shapeshifter',\n      image: 'https://relayer.ambire.com/legends/nft-image/avatar/shapeshifter-lvl0.png'\n    }\n  ]\n  const matcher = {\n    [iface.getFunction('mint')?.selector!]: (call: IrCall) => {\n      const [heroType] = iface.parseTransaction(call)!.args\n\n      return [\n        getAction('Pick character'),\n        getImage(characterTypes[heroType]?.image || characterTypes[0].image),\n        getLabel(characterTypes[heroType]?.type || characterTypes[0].type, true),\n        getLabel('for Ambire Rewards')\n      ]\n    },\n    [iface.getFunction('getDailyReward')?.selector!]: () => [\n      getAction('Unlock the treasure chest')\n    ],\n    [iface.getFunction('spinWheel')?.selector!]: () => {\n      return [getAction('Unlock the wheel of fortune')]\n    },\n    [iface.getFunction('linkAndAcceptInvite')?.selector!]: (call: IrCall) => {\n      const [inviteeV2Account, inviteeEoaOrV1, inviter] = iface.parseTransaction(call)!.args\n      const acceptInvitationVisualizationPrefix =\n        inviter !== ZeroAddress\n          ? [\n              getAction('Accept invitation'),\n              getLabel('from'),\n              getAddressVisualization(inviter),\n              getLabel('and')\n            ]\n          : []\n      return [\n        ...acceptInvitationVisualizationPrefix,\n        getAction('Link account'),\n        getAddressVisualization(inviteeEoaOrV1),\n        getLabel('to'),\n        getAddressVisualization(inviteeV2Account)\n      ]\n    },\n    [iface.getFunction('invite')?.selector!]: (call: IrCall) => {\n      const [invitee] = iface.parseTransaction(call)!.args\n\n      return [getAction('Invite'), getAddressVisualization(invitee), getLabel('to Ambire Rewards')]\n    },\n    [iface.getFunction('claimXpFromFeedback')?.selector!]: () => {\n      return [getAction('Claim XP'), getLabel('from'), getLabel('feedback form', true)]\n    }\n  }\n  const newCalls = calls.map((call) => {\n    if (\n      ![ONCHAIN_TXNS_LEGENDS_ADDRESS, ...OLD_AND_CURRENT_LEGENDS_NFT_ADDRESSES].includes(\n        getAddress(call.to)\n      ) ||\n      !matcher[call.data.slice(0, 10)]\n    )\n      return call\n    return { ...call, fullVisualization: matcher[call.data.slice(0, 10)](call) }\n  })\n\n  return newCalls\n}\n\nexport default legendsModule\n"]}