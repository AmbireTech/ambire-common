{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../../src/libs/humanizer/modules/KyberSwap/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,QAAQ,CAAA;AAGlC,OAAO,EAAE,SAAS,EAAE,MAAM,kBAAkB,CAAA;AAE5C,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,aAAa,CAAA;AAEtE,MAAM,WAAW,GAAwB,CAAC,KAAgB,EAAE,KAAe,EAAE,EAAE;IAC7E,MAAM,KAAK,GAAG,IAAI,SAAS,CAAC,SAAS,CAAC,CAAA;IAEtC,MAAM,OAAO,GAAG;QACd,CAAC,KAAK,CAAC,WAAW,CAChB,+TAA+T,CAChU,EAAE,QAAS,CAAC,EAAE,CAAC,IAAY,EAAE,EAAE;YAC9B,MAAM,EACJ,SAAS,EAAE,EACT,IAAI,EAAE,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,eAAe,EAAE,EACtD,EACF,GAAG,KAAK,CAAC,gBAAgB,CAAC,IAAI,CAAE,CAAC,IAAI,CAAA;YACtC,OAAO;gBACL,SAAS,CAAC,MAAM,CAAC;gBACjB,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,MAAM,CAAC;gBACrC,QAAQ,CAAC,KAAK,CAAC;gBACf,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,eAAe,CAAC;aAC/C,CAAA;QACH,CAAC;QACD,CAAC,KAAK,CAAC,WAAW,CAChB,iSAAiS,CAClS,EAAE,QAAS,CAAC,EAAE,CAAC,IAAY,EAAE,EAAE;YAC9B,MAAM,EACJ,IAAI,EAAE,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,eAAe,EAAE,EACtD,GAAG,KAAK,CAAC,gBAAgB,CAAC,IAAI,CAAE,CAAC,IAAI,CAAA;YACtC,OAAO;gBACL,SAAS,CAAC,MAAM,CAAC;gBACjB,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,MAAM,CAAC;gBACrC,QAAQ,CAAC,KAAK,CAAC;gBACf,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,eAAe,CAAC;aAC/C,CAAA;QACH,CAAC;KACF,CAAA;IACD,MAAM,QAAQ,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;QAClC,IAAI,IAAI,CAAC,iBAAiB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YAAE,OAAO,IAAI,CAAA;QAC3E,OAAO,EAAE,GAAG,IAAI,EAAE,iBAAiB,EAAE,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAA;IAC9E,CAAC,CAAC,CAAA;IAEF,OAAO,QAAQ,CAAA;AACjB,CAAC,CAAA;AAED,eAAe,WAAW,CAAA","sourcesContent":["import { Interface } from 'ethers'\n\nimport { AccountOp } from '../../../accountOp/accountOp'\nimport { KyberSwap } from '../../const/abis'\nimport { HumanizerCallModule, IrCall } from '../../interfaces'\nimport { eToNative, getAction, getLabel, getToken } from '../../utils'\n\nconst KyberModule: HumanizerCallModule = (accOp: AccountOp, calls: IrCall[]) => {\n  const iface = new Interface(KyberSwap)\n\n  const matcher = {\n    [iface.getFunction(\n      'swap(tuple(address callTarget,address approveTarget,bytes targetData,tuple(address srcToken,address dstToken,address[] srcReceivers,uint256[] srcAmounts,address[] feeReceivers,uint256[] feeAmounts,address dstReceiver,uint256 amount,uint256 minReturnAmount,uint256 flags,bytes permit) desc,bytes clientData) execution)'\n    )?.selector!]: (call: IrCall) => {\n      const {\n        execution: {\n          desc: { srcToken, dstToken, amount, minReturnAmount }\n        }\n      } = iface.parseTransaction(call)!.args\n      return [\n        getAction('Swap'),\n        getToken(eToNative(srcToken), amount),\n        getLabel('for'),\n        getToken(eToNative(dstToken), minReturnAmount)\n      ]\n    },\n    [iface.getFunction(\n      'swapSimpleMode(address caller, tuple(address srcToken,address dstToken,address[] srcReceivers,uint256[] srcAmounts,address[] feeReceivers,uint256[] feeAmounts,address dstReceiver,uint256 amount,uint256 minReturnAmount,uint256 flags,bytes permit) desc,bytes executorData,bytes clientData)'\n    )?.selector!]: (call: IrCall) => {\n      const {\n        desc: { srcToken, dstToken, amount, minReturnAmount }\n      } = iface.parseTransaction(call)!.args\n      return [\n        getAction('Swap'),\n        getToken(eToNative(srcToken), amount),\n        getLabel('for'),\n        getToken(eToNative(dstToken), minReturnAmount)\n      ]\n    }\n  }\n  const newCalls = calls.map((call) => {\n    if (call.fullVisualization || !matcher[call.data.slice(0, 10)]) return call\n    return { ...call, fullVisualization: matcher[call.data.slice(0, 10)](call) }\n  })\n\n  return newCalls\n}\n\nexport default KyberModule\n"]}