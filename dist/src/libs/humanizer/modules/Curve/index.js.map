{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../../src/libs/humanizer/modules/Curve/index.ts"],"names":[],"mappings":";;AAAA,mCAA+C;AAG/C,kDAAoD;AAEpD,uCAA2D;AAE3D,MAAM,WAAW,GAAwB,CAAC,CAAY,EAAE,KAAe,EAAE,EAAE;IACzE,MAAM,KAAK,GAAG,IAAI,kBAAS,CAAC,mBAAW,CAAC,CAAA;IAExC,MAAM,gBAAgB,GAAG,CAAC,OAAe,EAAE,EAAE,CAC3C,OAAO,CAAC,WAAW,EAAE,KAAK,4CAA4C,CAAC,CAAC,CAAC,oBAAW,CAAC,CAAC,CAAC,OAAO,CAAA;IAEhG,MAAM,eAAe,GAAG,CAAC,UAAoB,EAAE,QAAgB,EAAE,SAAiB,EAAE,EAAE;QACpF,gEAAgE;QAChE,MAAM,KAAK,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC,CAAS,EAAE,EAAE,CAAC,CAAC,KAAK,oBAAW,CAAC,CAAA;QACjE,MAAM,CAAC,OAAO,EAAE,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAA;QAC/D,OAAO;YACL,IAAA,iBAAS,EAAC,MAAM,CAAC;YACjB,IAAA,gBAAQ,EAAC,gBAAgB,CAAC,OAAO,CAAC,EAAE,QAAQ,CAAC;YAC7C,IAAA,gBAAQ,EAAC,KAAK,CAAC;YACf,IAAA,gBAAQ,EAAC,gBAAgB,CAAC,QAAQ,CAAC,EAAE,SAAS,CAAC;SAChD,CAAA;IACH,CAAC,CAAA;IAED,MAAM,OAAO,GAAG;QACd,CAAC,KAAK,CAAC,WAAW,CAChB,iHAAiH,CAClH,EAAE,QAAS,CAAC,EAAE,CAAC,IAAY,EAAE,EAAE;YAC9B,gEAAgE;YAChE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,SAAS,EAAE,GAAG,KAAK,CAAC,gBAAgB,CAAC,IAAI,CAAE,CAAC,IAAI,CAAA;YACzE,OAAO,eAAe,CAAC,MAAM,EAAE,OAAO,EAAE,SAAS,CAAC,CAAA;QACpD,CAAC;KACF,CAAA;IAED,MAAM,QAAQ,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;QAClC,IAAI,IAAI,CAAC,iBAAiB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YAAE,OAAO,IAAI,CAAA;QAC3E,OAAO,EAAE,GAAG,IAAI,EAAE,iBAAiB,EAAE,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAA;IAC9E,CAAC,CAAC,CAAA;IAEF,OAAO,QAAQ,CAAA;AACjB,CAAC,CAAA;AAED,kBAAe,WAAW,CAAA","sourcesContent":["import { Interface, ZeroAddress } from 'ethers'\n\nimport { AccountOp } from '../../../accountOp/accountOp'\nimport { CurveRouter } from '../../const/abis/Curve'\nimport { HumanizerCallModule, IrCall } from '../../interfaces'\nimport { getAction, getLabel, getToken } from '../../utils'\n\nconst curveModule: HumanizerCallModule = (_: AccountOp, calls: IrCall[]) => {\n  const iface = new Interface(CurveRouter)\n\n  const parseCurveNative = (address: string) =>\n    address.toLowerCase() === '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee' ? ZeroAddress : address\n\n  const handleBasicSwap = (curveRoute: string[], amountIn: bigint, amountOut: bigint) => {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const route = curveRoute.filter((a: string) => a !== ZeroAddress)\n    const [inToken, outToken] = [route[0], route[route.length - 1]]\n    return [\n      getAction('Swap'),\n      getToken(parseCurveNative(inToken), amountIn),\n      getLabel('for'),\n      getToken(parseCurveNative(outToken), amountOut)\n    ]\n  }\n\n  const matcher = {\n    [iface.getFunction(\n      'exchange(address[11] _route, uint256[5][5] _swap_params, uint256 _amount, uint256 _expected, address[5] _pools)'\n    )?.selector!]: (call: IrCall) => {\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      const { _route, _amount, _expected } = iface.parseTransaction(call)!.args\n      return handleBasicSwap(_route, _amount, _expected)\n    }\n  }\n\n  const newCalls = calls.map((call) => {\n    if (call.fullVisualization || !matcher[call.data.slice(0, 10)]) return call\n    return { ...call, fullVisualization: matcher[call.data.slice(0, 10)](call) }\n  })\n\n  return newCalls\n}\n\nexport default curveModule\n"]}