{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../../src/libs/humanizer/modules/Guild/index.ts"],"names":[],"mappings":";;AAAA,mCAAkC;AAGlC,kDAA8C;AAE9C,uCAAiD;AAEjD,MAAM,WAAW,GAAwB,CAAC,KAAgB,EAAE,KAAe,EAAE,EAAE;IAC7E,MAAM,KAAK,GAAG,IAAI,kBAAS,CAAC,aAAK,CAAC,CAAA;IAClC,MAAM,OAAO,GAAG;QACd,CAAC,KAAK,CAAC,WAAW,CAChB,oNAAoN,CACrN,EAAE,QAAS,CAAC,EAAE,CAAC,IAAY,EAAE,EAAE;YAC9B,MAAM,EACJ,OAAO,EAAE;YACP,YAAY;YACZ,eAAe;YACf,UAAU;YACV,WAAW;YACX,SAAS;YACT,YAAY;cACb;YACD,iBAAiB;YACjB,YAAY;YACZ,YAAY;YACZ,OAAO;YACP,YAAY;cACb,GAAG,KAAK,CAAC,gBAAgB,CAAC,IAAI,CAAE,CAAC,IAAI,CAAA;YACtC,sCAAsC;YACtC,OAAO,CAAC,IAAA,iBAAS,EAAC,mBAAmB,CAAC,EAAE,IAAA,gBAAQ,EAAC,KAAK,CAAC,EAAE,IAAA,gBAAQ,EAAC,SAAS,EAAE,IAAI,CAAC,CAAC,CAAA;QACrF,CAAC;KACF,CAAA;IACD,MAAM,QAAQ,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;QAClC,IAAI,IAAI,CAAC,iBAAiB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YAAE,OAAO,IAAI,CAAA;QAC3E,OAAO,EAAE,GAAG,IAAI,EAAE,iBAAiB,EAAE,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAA;IAC9E,CAAC,CAAC,CAAA;IAEF,OAAO,QAAQ,CAAA;AACjB,CAAC,CAAA;AAED,kBAAe,WAAW,CAAA","sourcesContent":["import { Interface } from 'ethers'\n\nimport { AccountOp } from '../../../accountOp/accountOp'\nimport { Guild } from '../../const/abis/Guild'\nimport { HumanizerCallModule, IrCall } from '../../interfaces'\nimport { getAction, getLabel } from '../../utils'\n\nconst GuildModule: HumanizerCallModule = (accOp: AccountOp, calls: IrCall[]) => {\n  const iface = new Interface(Guild)\n  const matcher = {\n    [iface.getFunction(\n      'claim((address receiver, uint8 guildAction, uint256 userId, uint256 guildId, string guildName, uint256 createdAt) pinData, address adminTreasury, uint256 adminFee, uint256 signedAt, string cid, bytes signature)'\n    )?.selector!]: (call: IrCall) => {\n      const {\n        pinData: {\n          // receiver,\n          // guildAction,\n          // userId,\n          // guildId,\n          guildName\n          // createdAt\n        }\n        // adminTreasury,\n        // adminFee,\n        // signedAt,\n        // cid,\n        // signature\n      } = iface.parseTransaction(call)!.args\n      // if (receiver === accOp.accountAddr)\n      return [getAction('Claim Guild badge'), getLabel('for'), getLabel(guildName, true)]\n    }\n  }\n  const newCalls = calls.map((call) => {\n    if (call.fullVisualization || !matcher[call.data.slice(0, 10)]) return call\n    return { ...call, fullVisualization: matcher[call.data.slice(0, 10)](call) }\n  })\n\n  return newCalls\n}\n\nexport default GuildModule\n"]}