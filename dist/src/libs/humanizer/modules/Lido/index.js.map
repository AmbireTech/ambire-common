{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../../src/libs/humanizer/modules/Lido/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { getAddress, Interface, isAddress, ZeroAddress } from 'ethers'\n\nimport { AccountOp } from '../../../accountOp/accountOp'\nimport { unstETH, WrappedStETH } from '../../const/abis/Lido'\nimport { HumanizerCallModule, IrCall } from '../../interfaces'\nimport { getAction, getAddressVisualization, getLabel, getToken } from '../../utils'\n\nconst WRAPPED_ST_ETH_ADDRESS = '0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0'\nconst ST_ETH_ADDRESS = '0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84'\nconst UNWRAP_CONTRACT_ADDR = '0x889edC2eDab5f40e902b864aD4d7AdE8E412F9B1'\nconst wrapIface = new Interface(WrappedStETH)\nconst unwrapIface = new Interface(unstETH)\nexport const LidoModule: HumanizerCallModule = (accOp: AccountOp, calls: IrCall[]) => {\n  const newCalls = calls.map((call) => {\n    if (isAddress(call.to) && getAddress(call.to) === WRAPPED_ST_ETH_ADDRESS) {\n      if (call.data.startsWith(wrapIface.getFunction('wrap(uint256)')!.selector)) {\n        const [amount] = wrapIface.parseTransaction(call)!.args\n        const fullVisualization = [getAction('Wrap'), getToken(ST_ETH_ADDRESS, amount)]\n        return { ...call, fullVisualization }\n      }\n      if (call.data.startsWith(wrapIface.getFunction('unwrap(uint256)')!.selector)) {\n        const [amount] = wrapIface.parseTransaction(call)!.args\n        const fullVisualization = [getAction('Unwrap'), getToken(ST_ETH_ADDRESS, amount)]\n        return { ...call, fullVisualization }\n      }\n    }\n\n    if (isAddress(call.to) && getAddress(call.to) === UNWRAP_CONTRACT_ADDR) {\n      if (call.data.startsWith(unwrapIface.getFunction('requestWithdrawals')!.selector)) {\n        // eslint-disable-next-line @typescript-eslint/naming-convention\n        const { _amounts, _owner } = unwrapIface.parseTransaction(call)!.args\n        const amount = _amounts.reduce((acc: bigint, cur: bigint) => acc + cur, 0n)\n        const fullVisualization = [getAction('Request withdraw'), getToken(ST_ETH_ADDRESS, amount)]\n        if (![ZeroAddress, accOp.accountAddr.toLowerCase()].includes(_owner.toLowerCase()))\n          fullVisualization.push(getLabel('and authorize'), getAddressVisualization(_owner))\n        return { ...call, fullVisualization }\n      }\n\n      if (call.data.startsWith(unwrapIface.getFunction('claimWithdrawals')!.selector)) {\n        return { ...call, fullVisualization: [getAction('Claim withdrawals')] }\n      }\n      if (call.data.startsWith(unwrapIface.getFunction('claimWithdrawal')!.selector)) {\n        return { ...call, fullVisualization: [getAction('Claim withdrawal')] }\n      }\n      if (call.data.startsWith(unwrapIface.getFunction('claimWithdrawalsTo')!.selector)) {\n        // eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-unused-vars\n        const { _requestIds, _hints, _recipient } = unwrapIface.parseTransaction(call)!.args\n        const fullVisualization = [getAction('Claim withdrawal')]\n        if (_recipient.toLowerCase() !== accOp.accountAddr.toLowerCase())\n          fullVisualization.push(getLabel('and send to'), getAddressVisualization(_recipient))\n        return { ...call, fullVisualization: [getAction('Claim withdrawal')] }\n      }\n    }\n    return call\n  })\n\n  return newCalls\n}\n"]}