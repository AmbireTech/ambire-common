{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../../src/libs/humanizer/modules/Across/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Interface } from 'ethers'\n\nimport { AccountOp } from '../../../accountOp/accountOp'\nimport { Across } from '../../const/abis'\nimport { HumanizerCallModule, IrCall } from '../../interfaces'\nimport {\n  getAction,\n  getChain,\n  getDeadline,\n  getLabel,\n  getRecipientText,\n  getToken,\n  getTokenWithChain\n} from '../../utils'\n\nconst AcrossModule: HumanizerCallModule = (accOp: AccountOp, calls: IrCall[]) => {\n  const iface = new Interface(Across)\n  const matcher = {\n    [iface.getFunction(\n      'depositV3(address depositor,address recipient,address inputToken,address outputToken,uint256 inputAmount,uint256 outputAmount,uint256 destinationChainId,address exclusiveRelayer,uint32 quoteTimestamp,uint32 fillDeadline,uint32 exclusivityDeadline,bytes calldata message)'\n    )?.selector!]: (call: IrCall) => {\n      const {\n        recipient,\n        inputToken,\n        outputToken,\n        inputAmount,\n        outputAmount,\n        destinationChainId,\n        fillDeadline\n      } = iface.parseTransaction(call)!.args\n      return [\n        getAction('Bridge'),\n        getToken(inputToken, inputAmount),\n        getLabel('for'),\n        getTokenWithChain(outputToken, outputAmount, destinationChainId),\n        getLabel('to'),\n        getChain(destinationChainId),\n        getDeadline(fillDeadline),\n        ...getRecipientText(accOp.accountAddr, recipient)\n      ]\n    },\n    [iface.getFunction(\n      'deposit(address recipient,address originToken,uint256 amount,uint256 destinationChainId,int64 relayerFeePct,uint32 quoteTimestamp,bytes memory message,uint256 maxCount)'\n    )?.selector!]: (call: IrCall) => {\n      const { recipient, originToken, amount, destinationChainId } =\n        iface.parseTransaction(call)!.args\n      return [\n        getAction('Bridge'),\n        getToken(originToken, amount),\n        getLabel('to'),\n        getChain(destinationChainId),\n        ...getRecipientText(accOp.accountAddr, recipient)\n      ]\n    },\n    [iface.getFunction(\n      'function deposit(address spokePool,address recipient, address originToken, uint256 amount, uint256 destinationChainId, int64 relayerFeePct, uint32 quoteTimestamp,bytes message, uint256 maxCount) payable'\n    )?.selector!]: (call: IrCall) => {\n      const { recipient, originToken, amount, destinationChainId } =\n        iface.parseTransaction(call)!.args\n\n      return [\n        getAction('Bridge'),\n        getToken(originToken, amount),\n        getLabel('to'),\n        getChain(destinationChainId),\n        ...getRecipientText(accOp.accountAddr, recipient)\n      ]\n    }\n  }\n  const newCalls = calls.map((call) => {\n    if (call.fullVisualization || !matcher[call.data.slice(0, 10)]) return call\n    return { ...call, fullVisualization: matcher[call.data.slice(0, 10)](call) }\n  })\n\n  return newCalls\n}\n\nexport default AcrossModule\n"]}