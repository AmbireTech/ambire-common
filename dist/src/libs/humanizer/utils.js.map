{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../src/libs/humanizer/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { ZeroAddress } from 'ethers'\n\nimport { geckoIdMapper } from '../../consts/coingecko'\nimport { Fetch } from '../../interfaces/fetch'\nimport { Network } from '../../interfaces/network'\nimport { HumanizerMeta, HumanizerVisualization, HumanizerWarning, IrCall } from './interfaces'\n\nconst baseUrlCena = 'https://cena.ambire.com/api/v3'\n\nexport function getWarning(\n  content: string,\n  level: HumanizerWarning['level'] = 'caution'\n): HumanizerWarning {\n  return { content, level }\n}\nexport const randomId = (): number => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER)\n\nexport function getLabel(content: string, isBold?: boolean): HumanizerVisualization {\n  return { type: 'label', content, id: randomId(), isBold }\n}\nexport function getAction(content: string): HumanizerVisualization {\n  return { type: 'action', content, id: randomId() }\n}\nexport function getImage(content: string): HumanizerVisualization {\n  return { type: 'image', content, id: randomId() }\n}\nexport function getAddressVisualization(_address: string): HumanizerVisualization {\n  const address = _address.toLowerCase()\n  return { type: 'address', address, id: randomId() }\n}\n\nexport function getToken(\n  _address: string,\n  amount: bigint,\n  isHidden?: boolean,\n  chainId?: bigint\n): HumanizerVisualization {\n  const address = _address.toLowerCase()\n  return {\n    type: 'token',\n    address,\n    value: BigInt(amount),\n    id: randomId(),\n    isHidden,\n    chainId\n  }\n}\nexport function getTokenWithChain(\n  address: string,\n  amount: bigint,\n  chainId?: bigint\n): HumanizerVisualization {\n  return getToken(address, amount, undefined, chainId)\n}\n\nexport function getChain(chainId: bigint): HumanizerVisualization {\n  return { type: 'chain', id: randomId(), chainId }\n}\n\nexport function getText(text: string): HumanizerVisualization {\n  return { type: 'text', content: text, id: randomId() }\n}\n\nexport function getOnBehalfOf(onBehalfOf: string, sender: string): HumanizerVisualization[] {\n  return onBehalfOf.toLowerCase() !== sender.toLowerCase()\n    ? [getLabel('on behalf of'), getAddressVisualization(onBehalfOf)]\n    : []\n}\n\n// @TODO on some humanization of uniswap there is recipient 0x000...000\nexport function getRecipientText(from: string, recipient: string): HumanizerVisualization[] {\n  return from.toLowerCase() === recipient.toLowerCase()\n    ? []\n    : [getLabel('and send it to'), getAddressVisualization(recipient)]\n}\n\nexport function getDeadlineText(deadline: bigint): string {\n  const minute = 60000n\n  const diff = BigInt(deadline) - BigInt(Date.now())\n\n  if (diff < 0 && diff > -minute * 2n) return 'expired just now'\n  if (diff < 0) return 'already expired'\n  if (diff < minute) return 'expires in less than a minute'\n  if (diff < 30n * minute) return `expires in ${Math.floor(Number(diff / minute))} minutes`\n  return `valid until ${new Date(Number(deadline)).toLocaleString()}`\n}\n\nexport function getDeadline(deadlineSecs: bigint | number): HumanizerVisualization {\n  const deadline = BigInt(deadlineSecs) * 1000n\n  return {\n    type: 'deadline',\n    value: deadline,\n    id: randomId()\n  }\n}\nexport function getLink(url: string, content: string): HumanizerVisualization {\n  return { type: 'link', url, content, id: randomId() }\n}\n\n/**\n * Make a request to coingecko to fetch the latest price of the native token.\n * This is used by benzina and hence we cannot wrap the errors in emitError\n */\n// @TODO this shouldn't be here, a more suitable place would be portfolio/gecko\nexport async function getNativePrice(network: Network, fetch: Fetch): Promise<number> {\n  const platformId = geckoIdMapper(ZeroAddress, network)\n  if (!platformId) {\n    throw new Error(`getNativePrice: ${network.name} is not supported`)\n  }\n\n  const queryUrl = `${baseUrlCena}/simple/price?ids=${platformId}&vs_currencies=usd`\n  let response = await fetch(queryUrl)\n  response = await response.json()\n\n  if (!response[platformId] || !response[platformId].usd) {\n    throw new Error(`getNativePrice: could not fetch native token price for ${network.name} `)\n  }\n\n  return response[platformId].usd\n}\n\nexport function checkIfUnknownAction(v: HumanizerVisualization[] | undefined): boolean {\n  return !!(v && v[0]?.type === 'action' && v?.[0]?.content?.startsWith('Unknown action'))\n}\n\nexport function getUnknownVisualization(name: string, call: IrCall): HumanizerVisualization[] {\n  const unknownVisualization = [\n    getAction(`Unknown action (${name})`),\n    getLabel('to'),\n    getAddressVisualization(call.to)\n  ]\n  if (call.value)\n    unknownVisualization.push(\n      ...[getLabel('and'), getAction('Send'), getToken(ZeroAddress, call.value)]\n    )\n  return unknownVisualization\n}\n\nexport function getWrapping(address: string, amount: bigint): HumanizerVisualization[] {\n  return [getAction('Wrap'), getToken(address, amount)]\n}\n\nexport function getUnwrapping(address: string, amount: bigint): HumanizerVisualization[] {\n  return [getAction('Unwrap'), getToken(address, amount)]\n}\n\n// @TODO cant this be used in the <Address component>\nexport function getKnownName(\n  humanizerMeta: HumanizerMeta | undefined,\n  address: string\n): string | undefined {\n  return humanizerMeta?.knownAddresses?.[address.toLowerCase()]?.name\n}\n\nexport const EMPTY_HUMANIZER_META = { abis: { NO_ABI: {} }, knownAddresses: {} }\n\nexport const uintToAddress = (uint: bigint): string =>\n  `0x${BigInt(uint).toString(16).slice(-40).padStart(40, '0')}`\n\nexport const eToNative = (address: string): string =>\n  address.slice(2).toLocaleLowerCase() === 'e'.repeat(40) ? ZeroAddress : address\n"]}