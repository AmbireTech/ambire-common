{"version":3,"file":"entropyGenerator.js","sourceRoot":"","sources":["../../../../src/libs/entropyGenerator/entropyGenerator.ts"],"names":[],"mappings":";;;AAAA,+BAA+B;AAC/B,mCAA2E;AAE3E,+EAA+E;AAC/E,kDAAkD;AAClD,wGAAwG;AACxG,yFAAyF;AACzF,MAAa,gBAAgB;IAC3B,YAAY,GAAe,IAAI,UAAU,CAAC,CAAC,CAAC,CAAA;IAE5C,mBAAmB,CAAC,MAAc,EAAE,YAAoB;QACtD,IAAI,CAAC,iBAAiB,EAAE,CAAA;QACxB,IAAI,CAAC,4BAA4B,CAAC,MAAM,CAAC,CAAA;QACzC,IAAI,CAAC,mBAAmB,EAAE,CAAA;QAE1B,IAAI,YAAY,EAAE,CAAC;YACjB,MAAM,OAAO,GAAG,IAAI,WAAW,EAAE,CAAA;YACjC,MAAM,UAAU,GAAG,OAAO,CAAC,MAAM,CAAC,YAAY,CAAC,CAAA;YAC/C,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,CAAA;QAC7B,CAAC;QAED,IAAI,IAAI,CAAC,YAAY,CAAC,MAAM,KAAK,CAAC;YAAE,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAA;QAE5E,MAAM,IAAI,GAAG,IAAA,iBAAQ,EAAC,IAAA,kBAAS,EAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAA;QACnD,MAAM,oBAAoB,GAAG,IAAA,oBAAW,EAAC,MAAM,CAAC,CAAA;QAChD,+CAA+C;QAC/C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YAChC,oBAAoB,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,CAAA;QAClD,CAAC;QAED,OAAO,oBAAoB,CAAA;IAC7B,CAAC;IAED,sBAAsB,CAAC,SAAkB,EAAE,YAAoB;QAC7D,MAAM,sBAAsB,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAA;QACjD,MAAM,WAAW,GAAG,sBAAsB,CAAC,SAAS,CAAC,IAAI,EAAE,CAAA,CAAC,6BAA6B;QACzF,MAAM,OAAO,GAAG,IAAI,CAAC,mBAAmB,CAAC,WAAW,EAAE,YAAY,CAAC,CAAA;QACnE,MAAM,QAAQ,GAAG,iBAAQ,CAAC,WAAW,CAAC,OAAO,EAAE,EAAE,EAAE,eAAM,CAAC,QAAQ,EAAE,CAAC,CAAA;QACrE,OAAO,QAAQ,CAAA;IACjB,CAAC;IAED,mBAAmB;QACjB,iDAAiD;QACjD,+DAA+D;QAC/D,0CAA0C;QAC1C,4CAA4C;QAC5C,iCAAiC;QACjC,IAAI;QACJ,MAAM,GAAG,GAAG,WAAW,CAAC,GAAG,EAAE,CAAA;QAE7B,IAAI,CAAC,GAAG;YAAE,OAAM;QAEhB,MAAM,WAAW,GAAG,IAAI,UAAU,CAAC,IAAI,YAAY,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,CAAA;QAClE,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,CAAA;IAC9B,CAAC;IAED,4BAA4B,CAAC,MAAc;QACzC,IAAI,CAAC,UAAU,CAAC,IAAA,oBAAW,EAAC,MAAM,CAAC,CAAC,CAAA;IACtC,CAAC;IAED,UAAU,CAAC,UAAsB;QAC/B,IAAI,CAAC,YAAY,GAAG,IAAI,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,YAAY,EAAE,UAAU,CAAC,CAAC,CAAC,CAAA;IACpF,CAAC;IAED,iBAAiB;QACf,IAAI,CAAC,YAAY,GAAG,IAAI,UAAU,CAAC,CAAC,CAAC,CAAA;IACvC,CAAC;CACF;AA5DD,4CA4DC","sourcesContent":["/* eslint-disable no-bitwise */\nimport { getBytes, keccak256, LangEn, Mnemonic, randomBytes } from 'ethers'\n\n// Custom entropy generator that enhances ethers' randomBytes by incorporating:\n// - Time-based entropy for additional randomness.\n// - Optional extra entropy (like mouse position, timestamp...) provided by the user for added security.\n// This helps improve the security of mainKey generation and random seed phrase creation.\nexport class EntropyGenerator {\n  #entropyPool: Uint8Array = new Uint8Array(0)\n\n  generateRandomBytes(length: number, extraEntropy: string): Uint8Array {\n    this.#resetEntropyPool()\n    this.#collectCryptographicEntropy(length)\n    this.#collectTimeEntropy()\n\n    if (extraEntropy) {\n      const encoder = new TextEncoder()\n      const uint8Array = encoder.encode(extraEntropy)\n      this.addEntropy(uint8Array)\n    }\n\n    if (this.#entropyPool.length === 0) throw new Error('Entropy pool is empty')\n\n    const hash = getBytes(keccak256(this.#entropyPool))\n    const randomBytesGenerated = randomBytes(length)\n    // Introduces additional entropy mixing via XOR\n    for (let i = 0; i < length; i++) {\n      randomBytesGenerated[i] ^= hash[i % hash.length]\n    }\n\n    return randomBytesGenerated\n  }\n\n  generateRandomMnemonic(wordCount: 12 | 24, extraEntropy: string): Mnemonic {\n    const wordCountToBytesLength = { 12: 16, 24: 32 }\n    const bytesLength = wordCountToBytesLength[wordCount] || 16 // defaults to 12-word phrase\n    const entropy = this.generateRandomBytes(bytesLength, extraEntropy)\n    const mnemonic = Mnemonic.fromEntropy(entropy, '', LangEn.wordlist())\n    return mnemonic\n  }\n\n  #collectTimeEntropy(): void {\n    // TODO: steps to add support for the mobile app:\n    // 1. install the polyfill: `yarn add react-native-performance`\n    // 2. add it globally in a top-level file:\n    // if (typeof performance === \"undefined\") {\n    //   global.performance = { now }\n    // }\n    const now = performance.now()\n\n    if (!now) return\n\n    const timeEntropy = new Uint8Array(new Float64Array([now]).buffer)\n    this.addEntropy(timeEntropy)\n  }\n\n  #collectCryptographicEntropy(length: number): void {\n    this.addEntropy(randomBytes(length))\n  }\n\n  addEntropy(newEntropy: Uint8Array): void {\n    this.#entropyPool = new Uint8Array(Buffer.concat([this.#entropyPool, newEntropy]))\n  }\n\n  #resetEntropyPool() {\n    this.#entropyPool = new Uint8Array(0)\n  }\n}\n"]}