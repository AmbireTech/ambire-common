{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../../src/libs/defiPositions/types.ts"],"names":[],"mappings":";;;AAGA,IAAY,SAIX;AAJD,WAAY,SAAS;IACnB,mDAAS,CAAA;IACT,qDAAU,CAAA;IACV,6CAAM,CAAA;AACR,CAAC,EAJW,SAAS,GAAT,iBAAS,KAAT,iBAAS,QAIpB;AAED,IAAY,kBAGX;AAHD,WAAY,kBAAkB;IAC5B,yDAAmC,CAAA;IACnC,qDAA+B,CAAA;AACjC,CAAC,EAHW,kBAAkB,GAAlB,0BAAkB,KAAlB,0BAAkB,QAG7B","sourcesContent":["import { Network, NetworkId } from '../../interfaces/network'\nimport { Price } from '../portfolio'\n\nexport enum AssetType {\n  Liquidity,\n  Collateral,\n  Borrow\n}\n\nexport enum DeFiPositionsError {\n  AssetPriceError = 'AssetPriceError',\n  CriticalError = 'CriticalError'\n}\n\nexport type ProviderName = 'AAVE v3' | 'Uniswap V3'\n\nexport interface PositionAsset {\n  address: string\n  symbol: string\n  decimals: number\n  amount: bigint\n  simulationAmount?: bigint\n  amountPostSimulation?: bigint\n  priceIn: Price[]\n  value?: number\n  type: AssetType\n  additionalData?: {\n    [key: string]: any\n  }\n  protocolAsset?: {\n    address: string\n    symbol: string\n    decimals: number\n  }\n}\n\nexport interface DeFiPositionsState {\n  [accountId: string]: AccountState\n}\n\nexport interface AccountState {\n  [networkId: string]: NetworkState\n}\n\nexport interface ProviderError {\n  providerName: ProviderName\n  error: string\n}\n\nexport interface NetworkState {\n  positionsByProvider: PositionsByProvider[]\n  isLoading: boolean\n  updatedAt?: number\n  error?: string | null\n  providerErrors?: ProviderError[]\n}\n\nexport type NetworksWithPositions = {\n  [networkId: NetworkId]: ProviderName[]\n}\n\nexport type NetworksWithPositionsByAccounts = {\n  [accountId: string]: NetworksWithPositions\n}\n\nexport type PositionsByProvider = {\n  providerName: ProviderName\n  networkId: Network['id']\n  type: 'lending' | 'liquidity-pool'\n  positions: Position[]\n  positionInUSD?: number\n}\n\nexport interface Position {\n  id: string\n  assets: PositionAsset[]\n  additionalData: {\n    [key: string]: any\n  }\n}\n"]}