{"version":3,"file":"univ3Math.js","sourceRoot":"","sources":["../../../../../../src/libs/defiPositions/providers/helpers/univ3Math.ts"],"names":[],"mappings":";;AAAA,oEA0CC;AA1CD,SAAgB,4BAA4B,CAC1C,SAAiB,EACjB,YAAoB,EACpB,OAAe,EACf,QAAgB;IAEhB,MAAM,GAAG,GAAQ,CAAC,IAAI,EAAE,CAAA;IAExB,SAAS,kBAAkB,CAAC,YAAoB;QAC9C,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,YAAY,GAAG,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAA;QAC/E,OAAO,IAAI,CAAA;IACb,CAAC;IAED,SAAS,eAAe,CACtB,SAAiB,EACjB,YAAoB,EACpB,OAAe,EACf,QAAgB;QAEhB,IAAI,QAAQ,GAAG,KAAK,CAAA;QACpB,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,OAAO,CAAC,CAAA;QAC/C,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,QAAQ,CAAC,CAAA;QAChD,MAAM,WAAW,GAAG,kBAAkB,CAAC,YAAY,CAAC,CAAA;QAEpD,MAAM,SAAS,GAAG,YAAY,GAAG,GAAG,CAAA;QACpC,IAAI,OAAO,GAAG,CAAC,CAAA;QACf,IAAI,OAAO,GAAG,CAAC,CAAA;QACf,IAAI,WAAW,GAAG,OAAO,EAAE,CAAC;YAC1B,QAAQ,GAAG,KAAK,CAAA;YAChB,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,CAAC,CAAC,UAAU,GAAG,UAAU,CAAC,GAAG,CAAC,UAAU,GAAG,UAAU,CAAC,CAAC,CAAC,CAAA;QAC3F,CAAC;aAAM,IAAI,WAAW,IAAI,QAAQ,EAAE,CAAC;YACnC,QAAQ,GAAG,KAAK,CAAA;YAChB,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,CAAC,UAAU,GAAG,UAAU,CAAC,CAAC,CAAA;QAC7D,CAAC;aAAM,IAAI,WAAW,IAAI,OAAO,IAAI,WAAW,GAAG,QAAQ,EAAE,CAAC;YAC5D,QAAQ,GAAG,IAAI,CAAA;YACf,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,CAAC,CAAC,UAAU,GAAG,SAAS,CAAC,GAAG,CAAC,SAAS,GAAG,UAAU,CAAC,CAAC,CAAC,CAAA;YACvF,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,CAAC,SAAS,GAAG,UAAU,CAAC,CAAC,CAAA;QAC5D,CAAC;QACD,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,CAAA;IACvC,CAAC;IAED,OAAO,eAAe,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE,MAAM,CAAC,YAAY,CAAC,EAAE,MAAM,CAAC,OAAO,CAAC,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAA;AACpG,CAAC","sourcesContent":["export function uniV3DataToPortfolioPosition(\n  liquidity: bigint,\n  sqrtPriceX96: bigint,\n  tickLow: bigint,\n  tickHigh: bigint\n) {\n  const Q96: any = 2 ** 96\n\n  function getTickAtSqrtPrice(sqrtPriceX96: number) {\n    const tick = Math.floor(Math.log((sqrtPriceX96 / Q96) ** 2) / Math.log(1.0001))\n    return tick\n  }\n\n  function getTokenAmounts(\n    liquidity: number,\n    sqrtPriceX96: number,\n    tickLow: number,\n    tickHigh: number\n  ) {\n    let isInRage = false\n    const sqrtRatioA = Math.sqrt(1.0001 ** tickLow)\n    const sqrtRatioB = Math.sqrt(1.0001 ** tickHigh)\n    const currentTick = getTickAtSqrtPrice(sqrtPriceX96)\n\n    const sqrtPrice = sqrtPriceX96 / Q96\n    let amount0 = 0\n    let amount1 = 0\n    if (currentTick < tickLow) {\n      isInRage = false\n      amount0 = Math.floor(liquidity * ((sqrtRatioB - sqrtRatioA) / (sqrtRatioA * sqrtRatioB)))\n    } else if (currentTick >= tickHigh) {\n      isInRage = false\n      amount1 = Math.floor(liquidity * (sqrtRatioB - sqrtRatioA))\n    } else if (currentTick >= tickLow && currentTick < tickHigh) {\n      isInRage = true\n      amount0 = Math.floor(liquidity * ((sqrtRatioB - sqrtPrice) / (sqrtPrice * sqrtRatioB)))\n      amount1 = Math.floor(liquidity * (sqrtPrice - sqrtRatioA))\n    }\n    return { amount0, amount1, isInRage }\n  }\n\n  return getTokenAmounts(Number(liquidity), Number(sqrtPriceX96), Number(tickLow), Number(tickHigh))\n}\n"]}