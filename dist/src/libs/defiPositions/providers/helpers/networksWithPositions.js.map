{"version":3,"file":"networksWithPositions.js","sourceRoot":"","sources":["../../../../../../src/libs/defiPositions/providers/helpers/networksWithPositions.ts"],"names":[],"mappings":";;AAIA,MAAM,+BAA+B,GAAG,CACtC,SAAoB,EACpB,YAA0B,EAC1B,kCAAmE,EACnE,SAAuB,EACA,EAAE;IACzB,MAAM,qBAAqB,GAA0B;QACnD,GAAG,kCAAkC,CAAC,SAAS,CAAC;KACjD,CAAA;IAED,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;QAC5C,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC;YAAE,OAAM;QAE/B,MAAM,SAAS,GAAG,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,SAAS,CAAA;QAC/C,MAAM,EAAE,mBAAmB,EAAE,KAAK,EAAE,cAAc,EAAE,GAAG,YAAY,CAAC,OAAO,CAAC,CAAA;QAE5E,mCAAmC;QACnC,IAAI,KAAK,IAAI,SAAS,IAAI,cAAc,EAAE,MAAM;YAAE,OAAM;QAExD,qBAAqB,CAAC,OAAO,CAAC,GAAG,mBAAmB,CAAC,MAAM,CACzD,CAAC,gCAAgC,EAAE,QAAQ,EAAE,EAAE;YAC7C,IAAI,gCAAgC,CAAC,QAAQ,CAAC,QAAQ,CAAC,YAAY,CAAC;gBAClE,OAAO,gCAAgC,CAAA;YAEzC,gCAAgC,CAAC,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAA;YAE5D,OAAO,gCAAgC,CAAA;QACzC,CAAC,EACD,qBAAqB,CAAC,OAAO,CAAC,IAAI,EAAE,CACrC,CAAA;IACH,CAAC,CAAC,CAAA;IAEF,OAAO,qBAAqB,CAAA;AAC9B,CAAC,CAAA;AAED,kBAAe,+BAA+B,CAAA","sourcesContent":["import { AccountId } from '../../../../interfaces/account'\nimport { RPCProviders } from '../../../../interfaces/provider'\nimport { AccountState, NetworksWithPositions, NetworksWithPositionsByAccounts } from '../../types'\n\nconst getAccountNetworksWithPositions = (\n  accountId: AccountId,\n  accountState: AccountState,\n  oldNetworksWithPositionsByAccounts: NetworksWithPositionsByAccounts,\n  providers: RPCProviders\n): NetworksWithPositions => {\n  const networksWithPositions: NetworksWithPositions = {\n    ...oldNetworksWithPositionsByAccounts[accountId]\n  }\n\n  Object.keys(accountState).forEach((chainId) => {\n    if (!providers[chainId]) return\n\n    const isRPCDown = !providers[chainId].isWorking\n    const { positionsByProvider, error, providerErrors } = accountState[chainId]\n\n    // RPC is down or an error occurred\n    if (error || isRPCDown || providerErrors?.length) return\n\n    networksWithPositions[chainId] = positionsByProvider.reduce(\n      (networksWithPositionsByProviders, provider) => {\n        if (networksWithPositionsByProviders.includes(provider.providerName))\n          return networksWithPositionsByProviders\n\n        networksWithPositionsByProviders.push(provider.providerName)\n\n        return networksWithPositionsByProviders\n      },\n      networksWithPositions[chainId] || []\n    )\n  })\n\n  return networksWithPositions\n}\n\nexport default getAccountNetworksWithPositions\n"]}