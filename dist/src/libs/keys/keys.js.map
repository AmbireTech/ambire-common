{"version":3,"file":"keys.js","sourceRoot":"","sources":["../../../../src/libs/keys/keys.ts"],"names":[],"mappings":";;;AAGa,QAAA,yBAAyB,GAAG,aAAa,CAAA;AAC/C,MAAM,kBAAkB,GAAG,CAAC,QAAe,EAAE,CAAS,EAAE,EAAE;IAC/D,MAAM,MAAM,GAAG,QAAQ,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,CAAA;IAEtC,OAAO,OAAO,MAAM,EAAE,CAAA;AACxB,CAAC,CAAA;AAJY,QAAA,kBAAkB,sBAI9B;AAEM,MAAM,mBAAmB,GAAG,CAAC,IAAW,EAAE,IAAY,EAAE,iBAA+B,EAAE,EAAE;IAChG,IAAI,GAAoB,CAAA;IACxB,IAAI,iBAAiB,EAAE,CAAC;QACtB,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,IAAI,IAAI,CAAC,CAAC,IAAI,KAAK,iBAAiB,CAAC,CAAA;IACzE,CAAC;SAAM,CAAC;QACN,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,CAAA;IACzC,CAAC;IACD,OAAO,GAAG,EAAE,KAAK,CAAA;AACnB,CAAC,CAAA;AARY,QAAA,mBAAmB,uBAQ/B;AAEM,MAAM,mBAAmB,GAAG,CAAC,EAClC,WAAW,EACX,QAAQ,EACR,IAAI,EAKL,EAAE,EAAE;IACH,MAAM,OAAO,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,WAAW,CAAC,CAAA;IAE5D,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,OAAO,EAAE,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAA;AAC5E,CAAC,CAAA;AAZY,QAAA,mBAAmB,uBAY/B","sourcesContent":["import { Account, AccountId } from '../../interfaces/account'\nimport { Key } from '../../interfaces/keystore'\n\nexport const DEFAULT_KEY_LABEL_PATTERN = /^Key (\\d+)$/\nexport const getDefaultKeyLabel = (prevKeys: Key[], i: number) => {\n  const number = prevKeys.length + i + 1\n\n  return `Key ${number}`\n}\n\nexport const getExistingKeyLabel = (keys: Key[], addr: string, accountPickerType?: Key['type']) => {\n  let key: Key | undefined\n  if (accountPickerType) {\n    key = keys.find((k) => k.addr === addr && k.type === accountPickerType)\n  } else {\n    key = keys.find((k) => k.addr === addr)\n  }\n  return key?.label\n}\n\nexport const getAccountKeysCount = ({\n  accountAddr,\n  accounts,\n  keys\n}: {\n  accountAddr: AccountId\n  accounts: Account[]\n  keys: Key[]\n}) => {\n  const account = accounts.find((x) => x.addr === accountAddr)\n\n  return keys.filter((x) => account?.associatedKeys.includes(x.addr)).length\n}\n"]}