{"version":3,"file":"keys.js","sourceRoot":"","sources":["../../../../src/libs/keys/keys.ts"],"names":[],"mappings":"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","sourcesContent":["import { BIP44_STANDARD_DERIVATION_TEMPLATE, HD_PATH_TEMPLATE_TYPE } from '../../consts/derivation'\nimport { Account, AccountId } from '../../interfaces/account'\nimport { Key, KeystoreSeed, StoredKey } from '../../interfaces/keystore'\n\nexport const DEFAULT_KEY_LABEL_PATTERN = /^Key (\\d+)$/\nexport const getDefaultKeyLabel = (prevKeys: Key[], i: number) => {\n  const number = prevKeys.length + i + 1\n\n  return `Key ${number}`\n}\n\nexport const getExistingKeyLabel = (keys: Key[], addr: string, accountAdderType?: Key['type']) => {\n  let key: Key | undefined\n  if (accountAdderType) {\n    key = keys.find((k) => k.addr === addr && k.type === accountAdderType)\n  } else {\n    key = keys.find((k) => k.addr === addr)\n  }\n  return key?.label\n}\n\nexport const getAccountKeysCount = ({\n  accountAddr,\n  accounts,\n  keys\n}: {\n  accountAddr: AccountId\n  accounts: Account[]\n  keys: Key[]\n}) => {\n  const account = accounts.find((x) => x.addr === accountAddr)\n\n  return keys.filter((x) => account?.associatedKeys.includes(x.addr)).length\n}\n\n// As of version 4.33.0, we no longer store the key preferences in a separate object called keyPreferences in the storage.\n// Migration is needed because each preference (like key label)\n// is now part of the Key interface and managed by the KeystoreController.\nexport function migrateKeyPreferencesToKeystoreKeys(\n  keyPreferences: {\n    addr: Key['addr']\n    type: Key['type']\n    label: string\n  }[],\n  keystoreKeys: StoredKey[]\n) {\n  return keystoreKeys.map((key) => {\n    if (key.label) return key\n\n    const keyPref = keyPreferences.find((k) => k.addr === key.addr && k.type === key.type)\n\n    if (keyPref) {\n      return { ...key, label: keyPref.label }\n    }\n\n    return key\n  })\n}\n\n// As of version 4.33.0, we introduced createdAt prop to the Key interface to help with sorting and add more details for the Keys.\nexport const getShouldMigrateKeyMetaNullToKeyMetaCreatedAt = (keystoreKeys: StoredKey[]) =>\n  keystoreKeys.some((key) => {\n    const internalKeyWithoutMeta = key.type === 'internal' && !key.meta\n    const externalKeyWithoutCreatedAt = key.type !== 'internal' && !('createdAt' in key.meta)\n\n    return internalKeyWithoutMeta || externalKeyWithoutCreatedAt\n  })\nexport function migrateKeyMetaNullToKeyMetaCreatedAt(keystoreKeys: StoredKey[]) {\n  return keystoreKeys.map((key) => {\n    if (!key.meta) return { ...key, meta: { createdAt: null } } as StoredKey\n    if (!key.meta.createdAt) return { ...key, meta: { ...key.meta, createdAt: null } } as StoredKey\n\n    return key\n  })\n}\n\n// As of version v4.33.0, user can change the HD path when importing a seed.\n// Migration is needed because previously the HD path was not stored,\n// and the default used was `BIP44_STANDARD_DERIVATION_TEMPLATE`.\nexport const getShouldMigrateKeystoreSeedsWithoutHdPath = (\n  keystoreSeeds: string[] | KeystoreSeed[]\n) =>\n  // @ts-ignore TS complains, but we know that keystoreSeeds is either an array of strings or an array of objects\n  !!keystoreSeeds?.length && keystoreSeeds.every((seed) => typeof seed === 'string')\nexport function migrateKeystoreSeedsWithoutHdPathTemplate(\n  prevKeystoreSeeds: string[]\n): { seed: string; hdPathTemplate: HD_PATH_TEMPLATE_TYPE }[] {\n  return prevKeystoreSeeds.map((seed) => ({\n    seed,\n    hdPathTemplate: BIP44_STANDARD_DERIVATION_TEMPLATE\n  }))\n}\n"]}