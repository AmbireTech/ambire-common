{"version":3,"file":"EOA7702.js","sourceRoot":"","sources":["../../../../src/libs/account/EOA7702.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable class-methods-use-this */\nimport { Interface } from 'ethers'\nimport AmbireAccount from '../../../contracts/compiled/AmbireAccount.json'\nimport AmbireAccount7702 from '../../../contracts/compiled/AmbireAccount7702.json'\nimport { Hex } from '../../interfaces/hex'\nimport { AccountOp, getSignableCalls } from '../accountOp/accountOp'\nimport { BROADCAST_OPTIONS } from '../broadcast/broadcast'\nimport {\n  BundlerStateOverride,\n  FeePaymentOption,\n  FullEstimation,\n  FullEstimationSummary\n} from '../estimate/interfaces'\nimport { getBroadcastGas } from '../gasPrice/gasPrice'\nimport { TokenResult } from '../portfolio'\nimport { isNative } from '../portfolio/helpers'\nimport { UserOperation } from '../userOperation/types'\nimport { BaseAccount } from './BaseAccount'\n\n// this class describes an EOA that CAN transition to 7702\n// even if it is YET to transition to 7702\nexport class EOA7702 extends BaseAccount {\n  // when doing the 7702 activator, we should add the additional gas required\n  // for the authorization list:\n  // PER_EMPTY_ACCOUNT_COST: 25000\n  // access list storage key: 1900\n  // access list address: 2400\n  ACTIVATOR_GAS_USED = 29300n\n\n  /**\n   * Introduce a public variable we can use to make a simple check on the FE\n   * whether this account type is 7702.\n   * This should only be used in cases where refactoring the logic on the FE\n   * would mean a time-consuming event like sorting the fee payment options.\n   * Use this as an exception rather than rule. Long term, we should refactor\n   */\n  is7702 = true\n\n  getEstimationCriticalError(estimation: FullEstimation, op: AccountOp): Error | null {\n    // the critical error should be from the provider if we can broadcast in EOA only mode\n    if (!this.accountState.isSmarterEoa && op.calls.length === 1) {\n      return estimation.provider instanceof Error ? estimation.provider : null\n    }\n\n    if (estimation.ambire instanceof Error) return estimation.ambire\n    return null\n  }\n\n  supportsBundlerEstimation() {\n    return true\n  }\n\n  /*\n   * Available options:\n   * - Native\n   * - Token/Gas tank, if bundler estimation & paymaster\n   */\n  getAvailableFeeOptions(\n    estimation: FullEstimationSummary,\n    feePaymentOptions: FeePaymentOption[],\n    op: AccountOp\n  ): FeePaymentOption[] {\n    const isDelegating = op.meta && op.meta.setDelegation !== undefined\n    return feePaymentOptions.filter(\n      (opt) =>\n        opt.paidBy === this.account.addr &&\n        (isNative(opt.token) ||\n          (!isDelegating &&\n            opt.availableAmount > 0n &&\n            estimation.bundlerEstimation &&\n            estimation.bundlerEstimation.paymaster.isUsable()))\n    )\n  }\n\n  getGasUsed(\n    estimation: FullEstimationSummary | Error,\n    options: {\n      feeToken: TokenResult\n      op: AccountOp\n    }\n  ): bigint {\n    const isError = estimation instanceof Error\n    if (isError) return 0n\n\n    if (isNative(options.feeToken)) {\n      // if we're delegating, we need to add the gas used for the authorization list\n      const isDelegating = options.op.meta && options.op.meta.setDelegation !== undefined\n      const revokeGas = isDelegating ? this.ACTIVATOR_GAS_USED : 0n\n\n      if (this.accountState.isSmarterEoa) {\n        // smarter EOAs with a failing ambire estimation cannot broadcast\n        if (!estimation.ambireEstimation) return 0n\n\n        // paying in native + smartEOA makes the provider estimation more accurate\n        if (estimation.providerEstimation) return estimation.providerEstimation.gasUsed + revokeGas\n\n        // trust the ambire estimaton as it's more precise\n        // but also add the broadcast gas as it's not included in the ambire estimate\n        return estimation.ambireEstimation.gasUsed + getBroadcastGas(this, options.op) + revokeGas\n      }\n\n      // if calls are only 1, use the provider if set\n      const numberOfCalls = options.op.calls.length\n      if (numberOfCalls === 1) {\n        if (estimation.providerEstimation) return estimation.providerEstimation.gasUsed + revokeGas\n        return estimation.ambireEstimation ? estimation.ambireEstimation.gasUsed + revokeGas : 0n\n      }\n\n      // txn type 4 from here: not smarter with a batch, we need the bundler\n      if (!estimation.bundlerEstimation) return 0n\n      return BigInt(estimation.bundlerEstimation.callGasLimit) + this.ACTIVATOR_GAS_USED\n    }\n\n    // if we're paying in tokens, we're using the bundler\n    if (!estimation.bundlerEstimation) return 0n\n\n    return this.accountState.isSmarterEoa\n      ? BigInt(estimation.bundlerEstimation.callGasLimit)\n      : BigInt(estimation.bundlerEstimation.callGasLimit) + this.ACTIVATOR_GAS_USED\n  }\n\n  getBroadcastOption(\n    feeOption: FeePaymentOption,\n    options: {\n      op: AccountOp\n      isSponsored?: boolean\n    }\n  ): string {\n    if (options.op.meta && options.op.meta.setDelegation !== undefined)\n      return BROADCAST_OPTIONS.delegation\n    if (options.isSponsored) return BROADCAST_OPTIONS.byBundler\n\n    const feeToken = feeOption.token\n    if (isNative(feeToken)) {\n      // if there's no native in the account, use the bundler as a broadcast method\n      if (feeToken.amount === 0n) return BROADCAST_OPTIONS.byBundler\n\n      // if the call is only 1, broadcast normally\n      if (options.op.calls.length === 1) return BROADCAST_OPTIONS.bySelf\n\n      // if already smart, executeBySender() on itself\n      if (this.accountState.isSmarterEoa) return BROADCAST_OPTIONS.bySelf7702\n    }\n\n    // txn type 4 OR paying in token\n    return BROADCAST_OPTIONS.byBundler\n  }\n\n  // if the EOA is not yet smarter and the broadcast option is a bundler,\n  // sign the authorization\n  shouldSignAuthorization(broadcastOption: string): boolean {\n    return !this.accountState.isSmarterEoa && broadcastOption === BROADCAST_OPTIONS.byBundler\n  }\n\n  canUseReceivingNativeForFee(amount: bigint): boolean {\n    // when we use the bundler, we can use receiving eth for fee payment\n    return !this.accountState.isSmarterEoa || amount === 0n\n  }\n\n  getBroadcastCalldata(accountOp: AccountOp): Hex {\n    const ambireAccount = new Interface(AmbireAccount.abi)\n    return ambireAccount.encodeFunctionData('executeBySender', [getSignableCalls(accountOp)]) as Hex\n  }\n\n  getBundlerStateOverride(userOp: UserOperation): BundlerStateOverride | undefined {\n    if (this.accountState.isSmarterEoa || !!userOp.eip7702Auth) return undefined\n\n    // if EOA without eip7702Auth, make it look like a smart account so we could\n    // do the estimation\n    return {\n      [this.account.addr]: {\n        code: AmbireAccount7702.binRuntime\n      }\n    }\n  }\n\n  isSponsorable(): boolean {\n    return this.network.chainId === 100n\n  }\n\n  getAtomicStatus(): 'unsupported' | 'supported' | 'ready' {\n    return this.accountState.isSmarterEoa ? 'supported' : 'ready'\n  }\n}\n"]}