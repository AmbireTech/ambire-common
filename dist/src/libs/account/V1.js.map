{"version":3,"file":"V1.js","sourceRoot":"","sources":["../../../../src/libs/account/V1.ts"],"names":[],"mappings":";;;;AAAA,2CAA2C;AAC3C,sDAAsD;AACtD,mCAAkC;AAClC,gHAA0E;AAC1E,gHAA0E;AAC1E,oDAAyD;AAEzD,sDAAoE;AACpE,sDAA0D;AAE1D,mDAAsD;AAEtD,kDAA+C;AAC/C,+CAA2C;AAC3C,uCAAoC;AAEpC,0DAA0D;AAC1D,+EAA+E;AAC/E,MAAa,EAAG,SAAQ,yBAAW;IACjC,0BAA0B,CAAC,UAA0B;QACnD,IAAI,UAAU,CAAC,MAAM,YAAY,KAAK;YAAE,OAAO,UAAU,CAAC,MAAM,CAAA;QAChE,OAAO,IAAI,CAAA;IACb,CAAC;IAED,yBAAyB;QACvB,OAAO,KAAK,CAAA;IACd,CAAC;IAED,sBAAsB,CACpB,UAAiC,EACjC,iBAAqC;QAErC,OAAO,iBAAiB,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,IAAA,kBAAQ,EAAC,GAAG,CAAC,KAAK,CAAC,IAAI,GAAG,CAAC,eAAe,GAAG,EAAE,CAAC,CAAA;IAC3F,CAAC;IAED,UAAU,CACR,UAAyC,EACzC,OAGC;QAED,MAAM,OAAO,GAAG,UAAU,YAAY,KAAK,CAAA;QAC3C,IAAI,OAAO,IAAI,CAAC,UAAU,CAAC,gBAAgB;YAAE,OAAO,EAAE,CAAA;QACtD,MAAM,eAAe,GAAG,UAAU,CAAC,kBAAkB;YACnD,CAAC,CAAC,UAAU,CAAC,kBAAkB,CAAC,OAAO;YACvC,CAAC,CAAC,EAAE,CAAA;QAEN,MAAM,mBAAmB,GAAG,IAAA,0BAAe,EAAC,IAAI,EAAE,OAAO,CAAC,EAAE,CAAC,CAAA;QAC7D,MAAM,SAAS,GAAG,mBAAmB,GAAG,UAAU,CAAC,gBAAgB,CAAC,OAAO,CAAA;QAE3E,iEAAiE;QACjE,+CAA+C;QAC/C,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,KAAK,4BAAiB,IAAI,eAAe,GAAG,SAAS;YAC9E,CAAC,CAAC,eAAe;YACjB,CAAC,CAAC,SAAS,CAAA;IACf,CAAC;IAED,kBAAkB,CAChB,SAA2B,EAC3B,OAEC;QAED,IAAI,SAAS,CAAC,MAAM,KAAK,IAAI,CAAC,UAAU,EAAE,CAAC,IAAI;YAAE,OAAO,6BAAiB,CAAC,UAAU,CAAA;QACpF,OAAO,6BAAiB,CAAC,SAAS,CAAA;IACpC,CAAC;IAED,2BAA2B;QACzB,OAAO,IAAI,CAAA;IACb,CAAC;IAED,oBAAoB,CAAC,SAAoB;QACvC,IAAI,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE,CAAC;YACjC,MAAM,aAAa,GAAG,IAAI,kBAAS,CAAC,4BAAa,CAAC,GAAG,CAAC,CAAA;YACtD,OAAO,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,EAAE;gBACzD,IAAA,4BAAgB,EAAC,SAAS,CAAC;aAC5B,CAAQ,CAAA;QACX,CAAC;QAED,6CAA6C;QAC7C,MAAM,aAAa,GAAG,IAAI,kBAAS,CAAC,4BAAa,CAAC,GAAG,CAAC,CAAA;QACtD,OAAO,aAAa,CAAC,kBAAkB,CAAC,kBAAkB,EAAE;YAC1D,IAAI,CAAC,OAAO,CAAC,QAAS,CAAC,QAAQ;YAC/B,IAAI,CAAC,OAAO,CAAC,QAAS,CAAC,IAAI;YAC3B,IAAA,4BAAgB,EAAC,SAAS,CAAC;YAC3B,IAAA,kBAAQ,EAAC,IAAI,CAAC,OAAO,CAAC;SACvB,CAAQ,CAAA;IACX,CAAC;IAED,eAAe;QACb,OAAO,WAAW,CAAA;IACpB,CAAC;CACF;AA3ED,gBA2EC","sourcesContent":["/* eslint-disable class-methods-use-this */\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { Interface } from 'ethers'\nimport AmbireAccount from '../../../contracts/compiled/AmbireAccount.json'\nimport AmbireFactory from '../../../contracts/compiled/AmbireFactory.json'\nimport { ARBITRUM_CHAIN_ID } from '../../consts/networks'\nimport { Hex } from '../../interfaces/hex'\nimport { AccountOp, getSignableCalls } from '../accountOp/accountOp'\nimport { BROADCAST_OPTIONS } from '../broadcast/broadcast'\nimport { FeePaymentOption, FullEstimation, FullEstimationSummary } from '../estimate/interfaces'\nimport { getBroadcastGas } from '../gasPrice/gasPrice'\nimport { TokenResult } from '../portfolio'\nimport { isNative } from '../portfolio/helpers'\nimport { BaseAccount } from './BaseAccount'\nimport { getSpoof } from './account'\n\n// this class describes a plain EOA that cannot transition\n// to 7702 either because the network or the hardware wallet doesnt' support it\nexport class V1 extends BaseAccount {\n  getEstimationCriticalError(estimation: FullEstimation): Error | null {\n    if (estimation.ambire instanceof Error) return estimation.ambire\n    return null\n  }\n\n  supportsBundlerEstimation() {\n    return false\n  }\n\n  getAvailableFeeOptions(\n    estimation: FullEstimationSummary,\n    feePaymentOptions: FeePaymentOption[]\n  ): FeePaymentOption[] {\n    return feePaymentOptions.filter((opt) => isNative(opt.token) || opt.availableAmount > 0n)\n  }\n\n  getGasUsed(\n    estimation: FullEstimationSummary | Error,\n    options: {\n      feeToken: TokenResult\n      op: AccountOp\n    }\n  ): bigint {\n    const isError = estimation instanceof Error\n    if (isError || !estimation.ambireEstimation) return 0n\n    const providerGasUsed = estimation.providerEstimation\n      ? estimation.providerEstimation.gasUsed\n      : 0n\n\n    const ambireBroaddcastGas = getBroadcastGas(this, options.op)\n    const ambireGas = ambireBroaddcastGas + estimation.ambireEstimation.gasUsed\n\n    // use ambireEstimation.gasUsed in all cases except Arbitrum when\n    // the provider gas is more than the ambire gas\n    return this.network.chainId === ARBITRUM_CHAIN_ID && providerGasUsed > ambireGas\n      ? providerGasUsed\n      : ambireGas\n  }\n\n  getBroadcastOption(\n    feeOption: FeePaymentOption,\n    options: {\n      op: AccountOp\n    }\n  ): string {\n    if (feeOption.paidBy !== this.getAccount().addr) return BROADCAST_OPTIONS.byOtherEOA\n    return BROADCAST_OPTIONS.byRelayer\n  }\n\n  canUseReceivingNativeForFee(): boolean {\n    return true\n  }\n\n  getBroadcastCalldata(accountOp: AccountOp): Hex {\n    if (this.accountState.isDeployed) {\n      const ambireAccount = new Interface(AmbireAccount.abi)\n      return ambireAccount.encodeFunctionData('executeBySender', [\n        getSignableCalls(accountOp)\n      ]) as Hex\n    }\n\n    // deployAndExecuteMultiple is the worst case\n    const ambireFactory = new Interface(AmbireFactory.abi)\n    return ambireFactory.encodeFunctionData('deployAndExecute', [\n      this.account.creation!.bytecode,\n      this.account.creation!.salt,\n      getSignableCalls(accountOp),\n      getSpoof(this.account)\n    ]) as Hex\n  }\n\n  getAtomicStatus(): 'unsupported' | 'supported' | 'ready' {\n    return 'supported'\n  }\n}\n"]}