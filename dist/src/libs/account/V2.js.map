{"version":3,"file":"V2.js","sourceRoot":"","sources":["../../../../src/libs/account/V2.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable class-methods-use-this */\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { Interface } from 'ethers'\nimport AmbireAccount from '../../../contracts/compiled/AmbireAccount.json'\nimport AmbireFactory from '../../../contracts/compiled/AmbireFactory.json'\nimport { ENTRY_POINT_MARKER, ERC_4337_ENTRYPOINT } from '../../consts/deploy'\nimport { Hex } from '../../interfaces/hex'\nimport { AccountOp, getSignableCalls } from '../accountOp/accountOp'\nimport { BROADCAST_OPTIONS } from '../broadcast/broadcast'\nimport {\n  BundlerStateOverride,\n  FeePaymentOption,\n  FullEstimation,\n  FullEstimationSummary\n} from '../estimate/interfaces'\nimport { getBroadcastGas } from '../gasPrice/gasPrice'\nimport { TokenResult } from '../portfolio'\nimport { isNative } from '../portfolio/helpers'\nimport { privSlot } from '../proxyDeploy/deploy'\nimport { UserOperation } from '../userOperation/types'\nimport { BaseAccount } from './BaseAccount'\nimport { getSpoof } from './account'\n\n// this class describes a plain EOA that cannot transition\n// to 7702 either because the network or the hardware wallet doesnt' support it\nexport class V2 extends BaseAccount {\n  // we're state overriding the estimation to make it think\n  // the account is deployed and it has the entry point as a signer\n  //\n  // deployment costs are already added and calculated by the ambire estimation\n  // we're adding 20k gas for SSTORE in the privilege for the entry point\n  // and 15k gas entry point overhead to be on the safe side\n  ENTRY_POINT_DEPLOYMENT_ADDITIONAL_GAS = 35000n\n\n  getEstimationCriticalError(estimation: FullEstimation): Error | null {\n    if (estimation.ambire instanceof Error) return estimation.ambire\n    return null\n  }\n\n  supportsBundlerEstimation() {\n    return this.network.erc4337.enabled\n  }\n\n  getAvailableFeeOptions(\n    estimation: FullEstimationSummary,\n    feePaymentOptions: FeePaymentOption[]\n  ): FeePaymentOption[] {\n    const hasPaymaster =\n      this.network.erc4337.enabled &&\n      estimation.bundlerEstimation &&\n      estimation.bundlerEstimation.paymaster.isUsable()\n\n    // on a 4437 network where the account is not deployed,\n    // we force the user to pay by ERC-4337 to enable the entry point\n    if (this.network.erc4337.enabled && !this.accountState.isDeployed) {\n      return feePaymentOptions.filter(\n        (opt) =>\n          opt.paidBy === this.account.addr &&\n          (isNative(opt.token) || (opt.availableAmount > 0n && hasPaymaster))\n      )\n    }\n\n    const hasRelayer = !this.network.erc4337.enabled && this.network.hasRelayer\n    return feePaymentOptions.filter(\n      (opt) => isNative(opt.token) || (opt.availableAmount > 0n && (hasPaymaster || hasRelayer))\n    )\n  }\n\n  getGasUsed(\n    estimation: FullEstimationSummary | Error,\n    options: {\n      feeToken: TokenResult\n      op: AccountOp\n    }\n  ): bigint {\n    const isError = estimation instanceof Error\n    if (isError || !estimation.ambireEstimation) return 0n\n\n    const ambireBroaddcastGas = getBroadcastGas(this, options.op)\n    const ambireGas = ambireBroaddcastGas + estimation.ambireEstimation.gasUsed\n\n    // no 4337 => use ambireEstimation\n    if (!this.network.erc4337.enabled) return ambireGas\n\n    // has 4337 => use the bundler if it doesn't have an error\n    if (!estimation.bundlerEstimation) return ambireGas\n    let bundlerGasUsed = BigInt(estimation.bundlerEstimation.callGasLimit)\n\n    // if the account is not deployed, add the ambire estimation deployment calc\n    // to the bundler total as we're state overriding the bundler to think\n    // the account is already deployed during estimation\n    if (!this.accountState.isDeployed)\n      bundlerGasUsed +=\n        estimation.ambireEstimation.deploymentGas + this.ENTRY_POINT_DEPLOYMENT_ADDITIONAL_GAS\n\n    return bundlerGasUsed > ambireGas ? bundlerGasUsed : ambireGas\n  }\n\n  getBroadcastOption(\n    feeOption: FeePaymentOption,\n    options: {\n      op: AccountOp\n    }\n  ): string {\n    if (feeOption.paidBy !== this.getAccount().addr) return BROADCAST_OPTIONS.byOtherEOA\n    if (this.network.erc4337.enabled) return BROADCAST_OPTIONS.byBundler\n    return BROADCAST_OPTIONS.byRelayer\n  }\n\n  shouldIncludeActivatorCall(broadcastOption: string) {\n    return (\n      this.network.erc4337.enabled &&\n      !this.accountState.isErc4337Enabled &&\n      broadcastOption === BROADCAST_OPTIONS.byOtherEOA\n    )\n  }\n\n  canUseReceivingNativeForFee(): boolean {\n    return true\n  }\n\n  getBroadcastCalldata(accountOp: AccountOp): Hex {\n    if (this.accountState.isDeployed) {\n      const ambireAccount = new Interface(AmbireAccount.abi)\n      return ambireAccount.encodeFunctionData('executeBySender', [\n        getSignableCalls(accountOp)\n      ]) as Hex\n    }\n\n    // deployAndExecuteMultiple is the worst case\n    const ambireFactory = new Interface(AmbireFactory.abi)\n    return ambireFactory.encodeFunctionData('deployAndExecute', [\n      this.account.creation!.bytecode,\n      this.account.creation!.salt,\n      getSignableCalls(accountOp),\n      getSpoof(this.account)\n    ]) as Hex\n  }\n\n  getBundlerStateOverride(userOp: UserOperation): BundlerStateOverride | undefined {\n    if (this.accountState.isDeployed || !!userOp.factory) return undefined\n\n    return {\n      [this.account.addr]: {\n        code: AmbireAccount.binRuntime,\n        stateDiff: {\n          [privSlot(0, 'uint256', ERC_4337_ENTRYPOINT, 'uint256')]: ENTRY_POINT_MARKER\n        }\n      }\n    }\n  }\n\n  // we need to authorize the entry point as a signer if we're deploying\n  // the account via 4337\n  shouldSignDeployAuth(broadcastOption: string): boolean {\n    return broadcastOption === BROADCAST_OPTIONS.byBundler && !this.accountState.isDeployed\n  }\n\n  isSponsorable(): boolean {\n    return this.network.chainId === 100n\n  }\n\n  getAtomicStatus(): 'unsupported' | 'supported' | 'ready' {\n    return 'supported'\n  }\n}\n"]}