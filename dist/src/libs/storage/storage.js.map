{"version":3,"file":"storage.js","sourceRoot":"","sources":["../../../../src/libs/storage/storage.ts"],"names":[],"mappings":"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","sourcesContent":["import { networks as predefinedNetworks } from '../../consts/networks'\nimport { Account } from '../../interfaces/account'\nimport { KeystoreSeed, StoredKey } from '../../interfaces/keystore'\nimport { Network } from '../../interfaces/network'\nimport { CashbackStatus, LegacyCashbackStatus } from '../../interfaces/selectedAccount'\nimport { getFeaturesByNetworkProperties, relayerAdditionalNetworks } from '../networks/networks'\nimport { LegacyTokenPreference } from '../portfolio/customToken'\n\nexport const getShouldMigrateKeystoreSeedsWithoutHdPath = (\n  keystoreSeeds: string[] | KeystoreSeed[]\n) =>\n  // @ts-ignore TS complains, but we know that keystoreSeeds is either an array of strings or an array of objects\n  !!keystoreSeeds?.length && keystoreSeeds.every((seed) => typeof seed === 'string')\n\nexport const getShouldMigrateKeyMetaNullToKeyMetaCreatedAt = (keystoreKeys: StoredKey[]) =>\n  keystoreKeys.some((key) => {\n    const internalKeyWithoutMeta = key.type === 'internal' && !key.meta\n    const externalKeyWithoutCreatedAt = key.type !== 'internal' && !('createdAt' in key.meta)\n\n    return internalKeyWithoutMeta || externalKeyWithoutCreatedAt\n  })\n\nexport const needsCashbackStatusMigration = (\n  cashbackStatusByAccount: Record<Account['addr'], CashbackStatus | LegacyCashbackStatus>\n) => {\n  return Object.values(cashbackStatusByAccount).some(\n    (value) => typeof value === 'object' && value !== null && 'cashbackWasZeroAt' in value\n  )\n}\n\nexport const migrateHiddenTokens = (tokenPreferences: LegacyTokenPreference[]) => {\n  return tokenPreferences\n    .filter(({ isHidden }) => isHidden)\n    .map(({ address, networkId, isHidden }: any) => ({\n      address,\n      networkId,\n      isHidden\n    }))\n}\n\nexport const migrateCustomTokens = (tokenPreferences: LegacyTokenPreference[]) => {\n  return tokenPreferences\n    .filter(({ standard }) => !!standard)\n    .map(({ address, standard, networkId }: any) => ({\n      address,\n      standard,\n      networkId\n    }))\n}\n\nexport async function migrateNetworkPreferencesToNetworks(networkPreferences: {\n  [key: string]: Partial<Network>\n}) {\n  const predefinedNetworkIds = predefinedNetworks.map((n) => (n as any).id)\n  const customNetworkIds = Object.keys(networkPreferences).filter(\n    (k) => !predefinedNetworkIds.includes(k)\n  )\n\n  const networksToStore: { [key: string]: Network } = {}\n\n  predefinedNetworks.forEach((n) => {\n    networksToStore[(n as any).id] = n\n  })\n  customNetworkIds.forEach((networkId: string) => {\n    const preference = networkPreferences[networkId]\n    const networkInfo = {\n      chainId: preference.chainId!,\n      isSAEnabled: preference.isSAEnabled ?? false,\n      isOptimistic: preference.isOptimistic ?? false,\n      rpcNoStateOverride: preference.rpcNoStateOverride ?? true,\n      erc4337: preference.erc4337 ?? {\n        enabled: false,\n        hasPaymaster: false,\n        hasBundlerSupport: false\n      },\n      areContractsDeployed: preference.areContractsDeployed ?? false,\n      feeOptions: { is1559: (preference as any).is1559 ?? false },\n      platformId: preference.platformId ?? '',\n      nativeAssetId: preference.nativeAssetId ?? '',\n      flagged: preference.flagged ?? false,\n      hasSingleton: preference.hasSingleton ?? false\n    }\n    delete (preference as any).is1559\n    networksToStore[networkId] = {\n      id: networkId,\n      ...preference,\n      ...networkInfo,\n      features: getFeaturesByNetworkProperties(networkInfo, undefined),\n      hasRelayer: !!relayerAdditionalNetworks.find((net) => net.chainId === preference.chainId!),\n      predefined: false\n    } as Network\n  })\n\n  return networksToStore\n}\n"]}