{"version":3,"file":"pendingAmountsHelper.js","sourceRoot":"","sources":["../../../../src/libs/portfolio/pendingAmountsHelper.ts"],"names":[],"mappings":"AAAA,OAAO,EAAa,eAAe,EAAE,MAAM,wBAAwB,CAAA;AAGnE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAqCG;AACH,MAAM,CAAC,MAAM,uBAAuB,GAAG,CACrC,YAAoB,EACpB,aAAqB,EACrB,oBAA6B,EAC7B,eAAwB,EAAE,8DAA8D;AACxF,kBAA8B,EACP,EAAE;IACzB,IAAI,kBAAkB,GAAG,aAAa,GAAG,YAAY,CAAA;IAErD,sEAAsE;IACtE,8DAA8D;IAC9D,MAAM,SAAS,GAAG,aAAa,GAAG,EAAE,CAAC,CAAC,CAAC,aAAa,GAAG,QAAU,CAAC,CAAC,CAAC,MAAM,CAAA;IAE1E,4FAA4F;IAC5F,+EAA+E;IAC/E,kGAAkG;IAClG,wEAAwE;IACxE,0EAA0E;IAC1E,4GAA4G;IAC5G,MAAM,iBAAiB,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC,IAAI,MAAM,CAAC,SAAS,CAAC,CAAA;IAEnF,gDAAgD;IAChD,IAAI,CAAC,iBAAiB,EAAE;QACtB,kBAAkB,GAAG,EAAE,CAAA;KACxB;IAED,oCAAoC;IACpC,IAAI,kBAAkB,KAAK,EAAE,IAAI,CAAC,eAAe;QAAE,OAAO,IAAI,CAAA;IAE9D,IAAI,cAAc,CAAA;IAElB,0EAA0E;IAC1E,wEAAwE;IACxE,IAAI,kBAAkB,IAAI,CAAC,oBAAoB,EAAE;QAC/C,cAAc,GAAG,aAAa,CAAA;KAC/B;SAAM;QACL,4FAA4F;QAC5F,cAAc,GAAG,oBAAqB,CAAA;KACvC;IAED,sDAAsD;IACtD,oGAAoG;IACpG,MAAM,MAAM,GAAmB;QAC7B,SAAS,EAAE,IAAI;QACf,cAAc;KACf,CAAA;IAED,IAAI,eAAe,EAAE;QACnB,gHAAgH;QAChH,yHAAyH;QACzH,qIAAqI;QACrI,MAAM,uBAAuB,GAC3B,kBAAkB,EAAE,MAAM,KAAK,eAAe,CAAC,0BAA0B,CAAA;QAE3E,IAAI,uBAAuB,EAAE;YAC3B,oBAAoB;YACpB,MAAM,CAAC,oBAAoB,GAAG,eAAe,CAAA;SAC9C;aAAM;YACL,oBAAoB;YACpB,MAAM,CAAC,iBAAiB,GAAG,eAAe,CAAA;SAC3C;KACF;IAED,IAAI,kBAAkB,EAAE;QACtB,MAAM,CAAC,oBAAoB,GAAG,MAAM,CAAC,oBAAoB;YACvD,CAAC,CAAC,MAAM,CAAC,oBAAoB,GAAG,kBAAkB,CAAC,oBAAoB;YACvE,CAAC,CAAC,kBAAkB,CAAA,CAAC,oBAAoB;KAC5C;IAED,OAAO,MAAM,CAAA;AACf,CAAC,CAAA","sourcesContent":["import { AccountOp, AccountOpStatus } from '../accountOp/accountOp'\nimport { PendingAmounts } from './interfaces'\n\n/**\n * Function for calculating the pending balance and the delta amounts\n * for pendingToBeSigned and pendingToBeConfirmed states (referred to as token badges) of a token.\n *\n * While calculating the balance is a routine operation,\n * calculating the pending delta and determining its state (whether it needs to be signed or confirmed)\n * can be quite challenging.\n *\n * We use this function's output to display PendingToBeSigned, PendingToBeConfirmed, or both badges on the Dashboard.\n *\n * Here's the main mechanism for handling the pending state and simulation:\n * 1. Once we have an AccountOp, we perform a simulation against the pending block. The `PendingToBeSigned` badge is shown.\n * 2. After broadcasting the AccountOp, we update its status to `PendingToBeConfirmed`. The `PendingToBeConfirmed` badge appears.\n * 3. After broadcasting, we ensure the AccountPortfolio is not updated immediately to avoid losing the simulation and badge.\n * 4. Even if we try updating with the previous simulation, it won't work as the account nonce will already be incremented.\n * 5. Once the transaction is confirmed, the AccountPortfolio is updated. The simulation and the `PendingToBeConfirmed` badge clear.\n * 6. If the user refreshes or the transaction delays, the portfolio updates automatically, clearing the simulation. This is acceptable.\n *\n * Let's review the main scenarios where we encounter simulation (simulatedAccountOp), followed by a discussion of corner cases.\n *\n * Main scenarios:\n * 1. If there is an AccOp that has not yet been signed, we return the `pendingToBeSigned` amount.\n * 2. If there is an AccOp that has been signed and broadcasted (but not yet confirmed),\n *    we display the `pendingToBeConfirmed` badge, reflecting the corresponding amount.\n * 3. If we detect a delta between the pending and latest token amounts, it indicates that there is something awaiting confirmation.\n *    In this case, we also return the `pendingToBeConfirmed` amount.\n *    For example, if someone sends you tokens outside of the extension, the extension will show the `pendingToBeConfirmed` amount.\n *\n * Rare scenarios:\n * 1. It is possible to have both `pendingToBeSigned` and `pendingToBeConfirmed` badges in the following scenario:\n *    - If someone sends you tokens, the `latestPendingDelta` is triggered.\n *      At the same time, if you have an AccOp waiting to be signed, both badges will be displayed,\n *       and the amounts for `pendingToBeSigned` and `pendingToBeConfirmed` will be calculated.\n * 2. If you sign and broadcast an AccOp while the `latestPendingDelta` also has a value,\n *    the `pendingToBeConfirmed` badge will be displayed, representing the sum of both `simulationDelta` and `pendingLatestDelta`.\n *    - This is similar to the previous case, but here the AccOp has been broadcasted.\n *      When there is a delta between the latest and pending block amounts, both deltas are summed, resulting in the `pendingToBeConfirmed` amount.\n */\nexport const calculatePendingAmounts = (\n  latestAmount: bigint,\n  pendingAmount: bigint,\n  amountPostSimulation?: bigint,\n  simulationDelta?: bigint, // pending delta (this is the amount of the simulation itself)\n  simulatedAccountOp?: AccountOp\n): PendingAmounts | null => {\n  let latestPendingDelta = pendingAmount - latestAmount\n\n  // Dynamically calculate the threshold as 0.0001% of the pendingAmount\n  // Use a minimum threshold of 10000n to avoid a zero threshold\n  const threshold = pendingAmount > 0n ? pendingAmount / 1_000_000n : 10000n\n\n  // Check if the change in latestPendingDelta is significant (>= threshold or <= -threshold).\n  // This helps to avoid processing insignificant changes in the pending balance.\n  // This is important for handling tokens with pending balances, such as those deposited into AAVE.\n  // With AAVE each block generates a small amount of interest or rewards,\n  // which is constantly displaying on dashboard as pending to be confirmed.\n  // The percentage change helps determine if the change in pending balance is significant enough to consider.\n  const significantChange = Math.abs(Number(latestPendingDelta)) >= Number(threshold)\n\n  // Ignore changes without significant difference\n  if (!significantChange) {\n    latestPendingDelta = 0n\n  }\n\n  // There is no Pending state changes\n  if (latestPendingDelta === 0n && !simulationDelta) return null\n\n  let pendingBalance\n\n  // If there is a latest/pending block delta, but there is no a simulation,\n  // set the pending token's balance to equal to the pending block amount.\n  if (latestPendingDelta && !amountPostSimulation) {\n    pendingBalance = pendingAmount\n  } else {\n    // Otherwise, if we have a simulation, the pending balance is equal to the simulation amount\n    pendingBalance = amountPostSimulation!\n  }\n\n  // Okay, we already know that we have a pending state,\n  // but in the following lines, we need to set the pendingToBeSigned and pendingToBeConfirmed states.\n  const result: PendingAmounts = {\n    isPending: true,\n    pendingBalance\n  }\n\n  if (simulationDelta) {\n    // When we broadcast the AccountOp, we set the status of the simulated AccountOp to `BroadcastedButNotConfirmed`\n    // until the transaction is confirmed or the user forcefully refreshes their portfolio balance and clears the simulation.\n    // When the SimulatedAccountOp has the status `BroadcastedButNotConfirmed`, we know that the pending badge is `pendingToBeConfirmed`.\n    const hasPendingToBeConfirmed =\n      simulatedAccountOp?.status === AccountOpStatus.BroadcastedButNotConfirmed\n\n    if (hasPendingToBeConfirmed) {\n      // Main scenario #2.\n      result.pendingToBeConfirmed = simulationDelta\n    } else {\n      // Main scenario #1.\n      result.pendingToBeSigned = simulationDelta\n    }\n  }\n\n  if (latestPendingDelta) {\n    result.pendingToBeConfirmed = result.pendingToBeConfirmed\n      ? result.pendingToBeConfirmed + latestPendingDelta // Rare scenario #2.\n      : latestPendingDelta // Main scenario #3.\n  }\n\n  return result\n}\n"]}