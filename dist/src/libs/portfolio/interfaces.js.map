{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../../../src/libs/portfolio/interfaces.ts"],"names":[],"mappings":"","sourcesContent":["import { Account, AccountId } from '../../interfaces/account'\nimport { NetworkId } from '../../interfaces/network'\nimport { AccountOp } from '../accountOp/accountOp'\n\nexport interface Price {\n  baseCurrency: string\n  price: number\n}\n\nexport interface GetOptionsSimulation {\n  accountOps: AccountOp[]\n  account: Account\n}\nexport type TokenError = string | '0x'\n\nexport type AccountAssetsState = { [networkId: NetworkId]: boolean }\n\nexport type TokenResult = {\n  symbol: string\n  decimals: number\n  address: string\n  networkId: NetworkId\n  amount: bigint\n  simulationAmount?: bigint\n  amountPostSimulation?: bigint\n  priceIn: Price[]\n  flags: {\n    onGasTank: boolean\n    rewardsType: 'wallet-vesting' | 'wallet-rewards' | null\n    canTopUpGasTank: boolean\n    isFeeToken: boolean\n    isDefiToken?: boolean\n    isHidden?: boolean\n  }\n}\n\nexport interface CollectionResult extends TokenResult {\n  name: string\n  collectibles: bigint[]\n  postSimulation?: {\n    sending?: bigint[]\n    receiving?: bigint[]\n  }\n}\n\nexport type PriceCache = Map<string, [number, Price[]]>\n\nexport type MetaData = { blockNumber?: number; beforeNonce?: bigint; afterNonce?: bigint }\n\nexport interface ERC721Enumerable {\n  isKnown: boolean\n  enumerable: boolean\n}\nexport interface ERC721Innumerable {\n  isKnown: boolean\n  tokens: string[]\n}\n\nexport interface ERC721s {\n  [name: string]: ERC721Enumerable | ERC721Innumerable\n}\n\nexport interface Hints {\n  erc20s: string[]\n  erc721s: ERC721s\n}\n\nexport interface ExternalHintsAPIResponse extends Hints {\n  lastUpdate: number\n  networkId: string\n  accountAddr: string\n  prices: {\n    [name: string]: Price\n  }\n  hasHints: boolean\n  // Attached by the application error handling logic.\n  // All other props, are provided by Velcro Discovery request.\n  error?: string\n}\n\nexport type StrippedExternalHintsAPIResponse = Pick<\n  ExternalHintsAPIResponse,\n  'erc20s' | 'erc721s' | 'lastUpdate'\n>\n\nexport interface ExtendedError extends Error {\n  simulationErrorMsg?: string\n}\n\ntype ExtendedErrorWithLevel = ExtendedError & {\n  level: 'critical' | 'warning' | 'silent'\n}\n\nexport interface PortfolioLibGetResult {\n  updateStarted: number\n  discoveryTime: number\n  oracleCallTime: number\n  priceUpdateTime: number\n  priceCache: PriceCache\n  tokens: TokenResult[]\n  feeTokens: TokenResult[]\n  tokenErrors: { error: string; address: string }[]\n  collections: CollectionResult[]\n  hintsFromExternalAPI: StrippedExternalHintsAPIResponse | null\n  errors: ExtendedErrorWithLevel[]\n  blockNumber: number\n  beforeNonce: bigint\n  afterNonce: bigint\n}\n\ninterface Total {\n  [currency: string]: number\n}\n\ntype AdditionalPortfolioProperties = 'updateStarted' | 'tokens'\n\nexport type ClaimableRewardsData = {\n  addr: string\n  fromBalanceClaimable: number\n  fromADXClaimable: number\n  totalClaimable: string\n  leaf: string\n  proof: string[]\n  root: string\n  signedRoot: string\n}\n\nexport type AddrVestingData = {\n  addr: string\n  rate: string\n  start: string\n  end: string\n}\n\n// Create the final type with some properties optional\nexport type AdditionalPortfolioNetworkResult = Partial<PortfolioLibGetResult> &\n  Pick<PortfolioLibGetResult, AdditionalPortfolioProperties> & {\n    lastSuccessfulUpdate: number\n    total: Total\n    claimableRewardsData?: ClaimableRewardsData\n    addrVestingData?: AddrVestingData\n  }\n\ntype PortfolioNetworkResult = Required<AdditionalPortfolioNetworkResult>\n\nexport type NetworkState = {\n  isReady: boolean\n  isLoading: boolean\n  criticalError?: ExtendedError\n  errors: ExtendedErrorWithLevel[]\n  result?: PortfolioNetworkResult | AdditionalPortfolioNetworkResult\n  // We store the previously simulated AccountOps only for the pending state.\n  // Prior to triggering a pending state update, we compare the newly passed AccountOp[] (updateSelectedAccount) with the cached version.\n  // If there are no differences, the update is canceled unless the `forceUpdate` flag is set.\n  accountOps?: AccountOp[]\n}\n\nexport type AccountState = {\n  [networkId: string]: NetworkState | undefined\n}\n\nexport type PortfolioControllerState = {\n  // accountId:networkId:NetworkState\n  [accountId: string]: AccountState\n}\n\nexport interface LimitsOptions {\n  erc20: number\n  erc721: number\n  erc721TokensInput: number\n  erc721Tokens: number\n}\n\nexport interface Limits {\n  deploylessProxyMode: LimitsOptions\n  deploylessStateOverrideMode: LimitsOptions\n}\n\nexport type PinnedTokens = {\n  networkId: NetworkId\n  address: string\n  onGasTank: boolean\n  accountId?: AccountId\n}[]\n\nexport type TemporaryTokens = {\n  [networkId: NetworkId]: {\n    isLoading: boolean\n    errors: { error: string; address: string }[]\n    result: { tokens: PortfolioLibGetResult['tokens'] }\n  }\n}\n\nexport interface GetOptions {\n  baseCurrency: string\n  blockTag: string | number\n  simulation?: GetOptionsSimulation\n  priceCache?: PriceCache\n  priceRecency: number\n  previousHintsFromExternalAPI?: StrippedExternalHintsAPIResponse | null\n  isEOA: boolean\n  fetchPinned: boolean\n  additionalErc20Hints?: Hints['erc20s']\n  additionalErc721Hints?: Hints['erc721s']\n  disableAutoDiscovery?: boolean\n}\n\nexport interface PreviousHintsStorage {\n  learnedTokens: { [network in NetworkId]: { [tokenAddress: string]: string | null } }\n  learnedNfts: { [network in NetworkId]: { [nftAddress: string]: bigint[] } }\n  fromExternalAPI: {\n    [networkAndAccountKey: string]: GetOptions['previousHintsFromExternalAPI']\n  }\n}\n\nexport interface NetworkSimulatedAccountOp {\n  [networkId: NetworkId]: AccountOp\n}\n\nexport type PendingAmounts = {\n  isPending: boolean\n  pendingBalance: bigint\n  pendingToBeSigned?: bigint\n  pendingToBeConfirmed?: bigint\n}\n\nexport type FormattedPendingAmounts = Omit<PendingAmounts, 'pendingBalance'> & {\n  pendingBalance: string\n  pendingBalanceFormatted: string\n  pendingBalanceUSDFormatted?: string\n  pendingToBeSignedFormatted?: string\n  pendingToBeConfirmedFormatted?: string\n}\n"]}