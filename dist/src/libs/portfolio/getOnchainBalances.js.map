{"version":3,"file":"getOnchainBalances.js","sourceRoot":"","sources":["../../../../src/libs/portfolio/getOnchainBalances.ts"],"names":[],"mappings":"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","sourcesContent":["import { DEPLOYLESS_SIMULATION_FROM } from '../../consts/deploy'\nimport { EOA_SIMULATION_NONCE } from '../../consts/deployless'\nimport { Network } from '../../interfaces/network'\nimport { getEoaSimulationStateOverride } from '../../utils/simulationStateOverride'\nimport { getAccountDeployParams, shouldUseStateOverrideForEOA } from '../account/account'\nimport { callToTuple, toSingletonCall } from '../accountOp/accountOp'\nimport { Deployless, DeploylessMode, parseErr } from '../deployless/deployless'\nimport { getFlags, overrideSymbol } from './helpers'\nimport {\n  CollectionResult,\n  GetOptions,\n  LimitsOptions,\n  MetaData,\n  TokenError,\n  TokenResult\n} from './interfaces'\n\nclass SimulationError extends Error {\n  public simulationErrorMsg: string\n\n  public beforeNonce: bigint\n\n  public afterNonce: bigint\n\n  constructor(message: string, beforeNonce: bigint, afterNonce: bigint) {\n    super(`simulation error: ${message}`)\n    this.simulationErrorMsg = message\n    this.beforeNonce = beforeNonce\n    this.afterNonce = afterNonce\n  }\n}\n\nfunction handleSimulationError(\n  error: string,\n  beforeNonce: bigint,\n  afterNonce: bigint,\n  simulationOps: { nonce: bigint | null; calls: [string, string, string][] }[]\n) {\n  if (error !== '0x') throw new SimulationError(parseErr(error) || error, beforeNonce, afterNonce)\n\n  // If the afterNonce is 0, it means that we reverted, even if the error is empty\n  // In both BalanceOracle and NFTOracle, afterSimulation and therefore afterNonce will be left empty\n  if (afterNonce === 0n) throw new SimulationError('Simulation reverted', beforeNonce, afterNonce)\n\n  if (afterNonce < beforeNonce)\n    throw new SimulationError(\n      'lower \"after\" nonce, should not be possible',\n      beforeNonce,\n      afterNonce\n    )\n  if (simulationOps.length && afterNonce === beforeNonce)\n    throw new SimulationError(\n      'Account op passed for simulation but the nonce did not increment. Perhaps wrong nonce set in Account op',\n      beforeNonce,\n      afterNonce\n    )\n\n  // make sure the afterNonce (after all the accOps execution) is\n  // at least the same as the final nonce in the simulationOps\n  const nonces: bigint[] = simulationOps\n    .map((op) => op.nonce ?? -1n)\n    .filter((nonce) => nonce !== -1n)\n    .sort((a, b) => {\n      if (a === b) return 0\n      if (a > b) return 1\n      return -1\n    })\n  if (nonces.length && afterNonce < nonces[nonces.length - 1] + 1n) {\n    throw new SimulationError(\n      'Failed to increment the nonce to the final account op nonce',\n      beforeNonce,\n      afterNonce\n    )\n  }\n}\n\nexport function getDeploylessOpts(\n  accountAddr: string,\n  supportsStateOverride: boolean,\n  opts: Partial<GetOptions>\n) {\n  const hasEOAOverride =\n    opts.simulation && shouldUseStateOverrideForEOA(opts.simulation.account, opts.simulation.state)\n\n  return {\n    blockTag: opts.blockTag,\n    from: DEPLOYLESS_SIMULATION_FROM,\n    mode:\n      supportsStateOverride && hasEOAOverride\n        ? DeploylessMode.StateOverride\n        : DeploylessMode.Detect,\n    stateToOverride:\n      supportsStateOverride && hasEOAOverride ? getEoaSimulationStateOverride(accountAddr) : null\n  }\n}\n\nexport async function getNFTs(\n  network: Network,\n  deployless: Deployless,\n  opts: Partial<GetOptions>,\n  accountAddr: string,\n  tokenAddrs: [string, any][],\n  limits: LimitsOptions\n): Promise<[[TokenError, CollectionResult][], {}][]> {\n  const deploylessOpts = getDeploylessOpts(accountAddr, !network.rpcNoStateOverride, opts)\n  const mapToken = (token: any) => {\n    return {\n      name: token.name,\n      chainId: network.chainId,\n      symbol: token.symbol,\n      amount: BigInt(token.nfts.length),\n      decimals: 1,\n      collectibles: [...token.nfts]\n    } as CollectionResult\n  }\n\n  if (!opts.simulation) {\n    const collections = (\n      await deployless.call(\n        'getAllNFTs',\n        [\n          accountAddr,\n          tokenAddrs.map(([address]) => address),\n          tokenAddrs.map(([, x]) =>\n            x.enumerable ? [] : x.tokens.slice(0, limits.erc721TokensInput)\n          ),\n          limits.erc721Tokens\n        ],\n        deploylessOpts\n      )\n    )[0]\n\n    return [collections.map((token: any) => [token.error, mapToken(token)]), {}]\n  }\n\n  const { accountOps, account, state } = opts.simulation\n  const [factory, factoryCalldata] = getAccountDeployParams(account)\n\n  const simulationOps = accountOps.map(({ nonce, calls }, idx) => ({\n    // EOA starts from a fake, specified nonce\n    nonce: !shouldUseStateOverrideForEOA(account, state)\n      ? nonce\n      : BigInt(EOA_SIMULATION_NONCE) + BigInt(idx),\n    calls: calls.map(toSingletonCall).map(callToTuple)\n  }))\n  const [before, after, simulationErr, , , deltaAddressesMapping] = await deployless.call(\n    'simulateAndGetAllNFTs',\n    [\n      accountAddr,\n      account.associatedKeys,\n      tokenAddrs.map(([address]) => address),\n      tokenAddrs.map(([, x]) => (x.enumerable ? [] : x.tokens.slice(0, limits.erc721TokensInput))),\n      limits.erc721Tokens,\n      factory,\n      factoryCalldata,\n      simulationOps.map((op) => Object.values(op))\n    ],\n    deploylessOpts\n  )\n\n  const beforeNonce = before[1]\n  const afterNonce = after[1]\n  handleSimulationError(simulationErr, beforeNonce, afterNonce, simulationOps)\n\n  // simulation was performed if the nonce is changed\n  const hasSimulation = afterNonce !== beforeNonce\n\n  const simulationTokens: (CollectionResult & { addr: any })[] | null = hasSimulation\n    ? after[0].map((simulationToken: any, tokenIndex: number) => ({\n        ...mapToken(simulationToken),\n        addr: deltaAddressesMapping[tokenIndex]\n      }))\n    : null\n\n  return [\n    before[0].map((beforeToken: any, i: number) => {\n      const simulationToken = simulationTokens\n        ? simulationTokens.find(\n            (token: any) => token.addr.toLowerCase() === tokenAddrs[i][0].toLowerCase()\n          )\n        : null\n\n      const token = mapToken(beforeToken)\n      const receiving: bigint[] = []\n      const sending: bigint[] = []\n\n      token.collectibles.forEach((oldCollectible: bigint) => {\n        // the first check is required because if there are no changes we will always have !undefined from the second check\n        if (\n          simulationToken?.collectibles &&\n          !simulationToken?.collectibles?.includes(oldCollectible)\n        )\n          sending.push(oldCollectible)\n      })\n      simulationToken?.collectibles?.forEach((newCollectible: bigint) => {\n        if (!token.collectibles.includes(newCollectible)) receiving.push(newCollectible)\n      })\n\n      return [\n        beforeToken.error,\n        {\n          ...token,\n          // Please refer to getTokens() for more info regarding `amountBeforeSimulation` calc\n          simulationAmount: simulationToken ? simulationToken.amount - token.amount : undefined,\n          amountPostSimulation: simulationToken ? simulationToken.amount : token.amount,\n          postSimulation: { receiving, sending }\n        }\n      ]\n    }),\n    {}\n  ]\n}\n\nexport async function getTokens(\n  network: Network,\n  deployless: Deployless,\n  opts: Partial<GetOptions>,\n  accountAddr: string,\n  tokenAddrs: string[]\n): Promise<[[TokenError, TokenResult][], MetaData][]> {\n  const mapToken = (token: any, address: string) => {\n    return {\n      amount: token.amount,\n      chainId: network.chainId,\n      decimals: Number(token.decimals),\n      name:\n        address === '0x0000000000000000000000000000000000000000'\n          ? network.nativeAssetName\n          : token.name,\n      symbol:\n        address === '0x0000000000000000000000000000000000000000'\n          ? network.nativeAssetSymbol\n          : overrideSymbol(address, network.chainId, token.symbol),\n      address,\n      flags: getFlags({}, network.chainId.toString(), network.chainId, address)\n    } as TokenResult\n  }\n  const deploylessOpts = getDeploylessOpts(accountAddr, !network.rpcNoStateOverride, opts)\n  if (!opts.simulation) {\n    const [results, blockNumber] = await deployless.call(\n      'getBalances',\n      [accountAddr, tokenAddrs],\n      deploylessOpts\n    )\n\n    return [\n      results.map((token: any, i: number) => [token.error, mapToken(token, tokenAddrs[i])]),\n      {\n        blockNumber\n      }\n    ]\n  }\n  const { accountOps, account, state } = opts.simulation\n  const simulationOps = accountOps.map(({ nonce, calls }, idx) => ({\n    // EOA starts from a fake, specified nonce\n    nonce: !shouldUseStateOverrideForEOA(account, state)\n      ? nonce\n      : BigInt(EOA_SIMULATION_NONCE) + BigInt(idx),\n    calls: calls.map(toSingletonCall).map(callToTuple)\n  }))\n  const [factory, factoryCalldata] = getAccountDeployParams(account)\n  const [before, after, simulationErr, , blockNumber, deltaAddressesMapping] =\n    await deployless.call(\n      'simulateAndGetBalances',\n      [\n        accountAddr,\n        account.associatedKeys,\n        tokenAddrs,\n        factory,\n        factoryCalldata,\n        simulationOps.map((op) => Object.values(op))\n      ],\n      deploylessOpts\n    )\n\n  const beforeNonce = before[1]\n  const afterNonce = after[1]\n  handleSimulationError(simulationErr, beforeNonce, afterNonce, simulationOps)\n\n  // simulation was performed if the nonce is changed\n  const hasSimulation = afterNonce !== beforeNonce\n\n  const simulationTokens = hasSimulation\n    ? after[0].map((simulationToken: any, tokenIndex: number) => ({\n        ...simulationToken,\n        amount: simulationToken.amount,\n        addr: deltaAddressesMapping[tokenIndex]\n      }))\n    : null\n  return [\n    before[0].map((token: any, i: number) => {\n      const simulation = simulationTokens\n        ? simulationTokens.find((simulationToken: any) => simulationToken.addr === tokenAddrs[i])\n        : null\n\n      // Here's the math before `simulationAmount` and `amountPostSimulation`.\n      // AccountA initial balance: 10 USDC.\n      // AccountA attempts to transfer 5 USDC (not signed yet).\n      // An external entity sends 3 USDC to AccountA on-chain.\n      // Deployless simulation contract processing:\n      //   - Balance before simulation (before[0]): 10 USDC + 3 USDC = 13 USDC.\n      //   - Balance after simulation (after[0]): 10 USDC - 5 USDC + 3 USDC = 8 USDC.\n      // Simulation-only balance displayed on the Sign Screen (we will call it `simulationAmount`):\n      //   - difference between after simulation and before: 8 USDC - 13 USDC = -5 USDC\n      // Final balance displayed on the Dashboard (we will call it `amountPostSimulation`):\n      //   - after[0], 8 USDC.\n      return [\n        token.error,\n        {\n          ...mapToken(token, tokenAddrs[i]),\n          simulationAmount: simulation ? simulation.amount - token.amount : undefined,\n          amountPostSimulation: simulation ? simulation.amount : token.amount\n        }\n      ]\n    }),\n    {\n      blockNumber,\n      beforeNonce,\n      afterNonce\n    }\n  ]\n}\n"]}