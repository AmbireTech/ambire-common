{"version":3,"file":"tokenPreferences.js","sourceRoot":"","sources":["../../../../../src/libs/portfolio/migrations/tokenPreferences.ts"],"names":[],"mappings":";;;AAEA,MAAM,mBAAmB,GAAG,CAAC,gBAAyC,EAAE,EAAE;IACxE,IAAI,gBAAgB,CAAC,IAAI,CAAC,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC,CAAC,QAAQ,CAAC,EAAE;QAC3E,OAAO,CAAC,CAAA;KACT;IAED,OAAO,CAAC,CAAA;AACV,CAAC,CAAA;AAED,MAAM,mBAAmB,GAAG,CAAC,gBAAyC,EAAE,EAAE;IACxE,OAAO,gBAAgB;SACpB,MAAM,CAAC,CAAC,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC,QAAQ,CAAC;SAClC,GAAG,CAAC,CAAC,EAAE,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC,CAAC;QAC1C,OAAO;QACP,SAAS;QACT,QAAQ;KACT,CAAC,CAAC,CAAA;AACP,CAAC,CAAA;AAED,MAAM,mBAAmB,GAAG,CAAC,gBAAyC,EAAE,EAAE;IACxE,OAAO,gBAAgB;SACpB,MAAM,CAAC,CAAC,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC;SACpC,GAAG,CAAC,CAAC,EAAE,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,EAAE,EAAE,CAAC,CAAC;QAC1C,OAAO;QACP,QAAQ;QACR,SAAS;KACV,CAAC,CAAC,CAAA;AACP,CAAC,CAAA;AAED;;;GAGG;AACH,MAAM,uBAAuB,GAAG,CAC9B,gBAAyC,EACzC,YAA4B,EAC5B,EAAE;IACF,MAAM,cAAc,GAAG,mBAAmB,CAAC,gBAAgB,CAAC,CAAA;IAE5D,UAAU;IACV,IAAI,cAAc,KAAK,CAAC,EAAE;QACxB,OAAO;YACL,gBAAgB,EAAE,mBAAmB,CAAC,gBAAgB,CAAC;YACvD,YAAY,EAAE,mBAAmB,CAAC,gBAAgB,CAAC;YACnD,mBAAmB,EAAE,IAAI;SAC1B,CAAA;KACF;IAED,OAAO;QACL,gBAAgB;QAChB,YAAY,EAAE,YAAY,IAAI,EAAE;QAChC,mBAAmB,EAAE,KAAK;KAC3B,CAAA;AACH,CAAC,CAAA;AAEQ,0DAAuB","sourcesContent":["import { CustomToken, LegacyTokenPreference } from '../customToken'\n\nconst inferStorageVersion = (tokenPreferences: LegacyTokenPreference[]) => {\n  if (tokenPreferences.some(({ symbol, decimals }) => !!symbol || !!decimals)) {\n    return 1\n  }\n\n  return 2\n}\n\nconst migrateHiddenTokens = (tokenPreferences: LegacyTokenPreference[]) => {\n  return tokenPreferences\n    .filter(({ isHidden }) => isHidden)\n    .map(({ address, networkId, isHidden }) => ({\n      address,\n      networkId,\n      isHidden\n    }))\n}\n\nconst migrateCustomTokens = (tokenPreferences: LegacyTokenPreference[]) => {\n  return tokenPreferences\n    .filter(({ standard }) => !!standard)\n    .map(({ address, standard, networkId }) => ({\n      address,\n      standard,\n      networkId\n    }))\n}\n\n/**\n * Migrates legacy token preferences to token preferences and custom tokens\n * if necessary.\n */\nconst migrateTokenPreferences = (\n  tokenPreferences: LegacyTokenPreference[],\n  customTokens?: CustomToken[]\n) => {\n  const storageVersion = inferStorageVersion(tokenPreferences)\n\n  // Migrate\n  if (storageVersion === 1) {\n    return {\n      tokenPreferences: migrateHiddenTokens(tokenPreferences),\n      customTokens: migrateCustomTokens(tokenPreferences),\n      shouldUpdateStorage: true\n    }\n  }\n\n  return {\n    tokenPreferences,\n    customTokens: customTokens || [],\n    shouldUpdateStorage: false\n  }\n}\n\nexport { migrateTokenPreferences }\n"]}