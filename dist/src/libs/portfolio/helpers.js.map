{"version":3,"file":"helpers.js","sourceRoot":"","sources":["../../../../src/libs/portfolio/helpers.ts"],"names":[],"mappings":";;;AA2BA,wCAUC;AAED,4BA6BC;AA2LD,0CA6GC;;AA5WD,mCAA2D;AAE3D,kGAA4D;AAC5D,6FAA4D;AAC5D,4DAAyD;AAezD,MAAM,YAAY,GAA8B;IAC9C,OAAO,EAAE,4CAA4C;IACrD,MAAM,EAAE,4CAA4C;IACpD,OAAO,EAAE,4CAA4C;IACrD,KAAK,EAAE,4CAA4C;IACnD,IAAI,EAAE,4CAA4C;CACnD,CAAA;AAED,SAAgB,cAAc,CAAC,OAAe,EAAE,OAAe,EAAE,MAAc;IAC7E,qGAAqG;IACrG,IACE,YAAY,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;QAChC,YAAY,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC,WAAW,EAAE,KAAK,OAAO,CAAC,WAAW,EAAE,EACxE,CAAC;QACD,OAAO,QAAQ,CAAA;IACjB,CAAC;IAED,OAAO,MAAM,CAAA;AACf,CAAC;AAED,SAAgB,QAAQ,CAAC,WAAgB,EAAE,OAAe,EAAE,YAAoB,EAAE,OAAe;IAC/F,MAAM,kBAAkB,GAAG,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAA;IACnE,MAAM,SAAS,GAAG,OAAO,KAAK,SAAS,CAAA;IAEvC,IAAI,WAAW,GAAG,IAAI,CAAA;IACtB,IAAI,WAAW,EAAE,yBAAyB,EAAE,OAAO,CAAC,WAAW,EAAE,KAAK,OAAO,CAAC,WAAW,EAAE;QACzF,WAAW,GAAG,gBAAgB,CAAA;IAChC,IAAI,WAAW,EAAE,sBAAsB,EAAE,OAAO,CAAC,WAAW,EAAE,KAAK,OAAO,CAAC,WAAW,EAAE;QACtF,WAAW,GAAG,gBAAgB,CAAA;IAEhC,MAAM,aAAa,GAAG,0BAAgB,CAAC,IAAI,CACzC,CAAC,CAAC,EAAE,EAAE,CACJ,CAAC,CAAC,OAAO,CAAC,WAAW,EAAE,KAAK,OAAO,CAAC,WAAW,EAAE;QACjD,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,KAAK,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,EAAE,KAAK,OAAO,CAAC,CACvF,CAAA;IAED,MAAM,eAAe,GAAG,aAAa,IAAI,CAAC,aAAa,EAAE,qBAAqB,IAAI,CAAC,WAAW,CAAA;IAC9F,MAAM,UAAU,GACd,OAAO,KAAK,oBAAW;QACvB,6BAA6B;QAC7B,CAAC,aAAa,IAAI,CAAC,aAAa,CAAC,iBAAiB,CAAC;QACnD,OAAO,KAAK,SAAS,CAAA;IAEvB,OAAO;QACL,SAAS;QACT,WAAW;QACX,eAAe;QACf,UAAU;KACX,CAAA;AACH,CAAC;AAEM,MAAM,kBAAkB,GAAG,KAAK,EACrC,KAA2C,EAC3C,SAAiB,EACjB,QAAqB,EACrB,EAAE;IACF,MAAM,KAAK,GAAG,IAAI,iBAAQ,CAAC,KAAK,EAAE,OAAO,EAAE,qBAAM,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAA;IAEhE,MAAM,IAAI,GAAG,OAAO,CAAA;IACpB,IAAI,OAAO,GAAG,IAAI,CAAA;IAClB,IAAI,QAAQ,GAAG,KAAK,CAAA;IAEpB,MAAM,CAAC,OAAO,EAAE,MAAM,EAAE,QAAQ,CAAC,GAAG,CAAC,MAAM,OAAO,CAAC,GAAG,CAAC;QACrD,KAAK,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE;YACpC,QAAQ,GAAG,IAAI,CAAA;QACjB,CAAC,CAAC;QACF,KAAK,CAAC,MAAM,EAAE,CAAC,KAAK,CAAC,GAAG,EAAE;YACxB,QAAQ,GAAG,IAAI,CAAA;QACjB,CAAC,CAAC;QACF,KAAK,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC,GAAG,EAAE;YAC1B,QAAQ,GAAG,IAAI,CAAA;QACjB,CAAC,CAAC;KACH,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE;QACZ,QAAQ,GAAG,IAAI,CAAA;QACf,OAAO,GAAG,KAAK,CAAA;IACjB,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,CAAA;IAExC,IACE,OAAO,OAAO,KAAK,WAAW;QAC9B,OAAO,MAAM,KAAK,WAAW;QAC7B,OAAO,QAAQ,KAAK,WAAW,EAC/B,CAAC;QACD,OAAO,GAAG,KAAK,CAAA;IACjB,CAAC;IAED,OAAO,GAAG,OAAO,IAAI,CAAC,QAAQ,CAAA;IAC9B,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,CAAA;AACxB,CAAC,CAAA;AApCY,QAAA,kBAAkB,sBAoC9B;AAED,sDAAsD;AACtD,8BAA8B;AACvB,MAAM,cAAc,GAAG,CAAC,KAAkB,EAAU,EAAE;IAC3D,OAAO,OAAO,KAAK,CAAC,oBAAoB,KAAK,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,CAAA;AACnG,CAAC,CAAA;AAFY,QAAA,cAAc,kBAE1B;AAEM,MAAM,oBAAoB,GAAG,CAAC,KAAkB,EAAE,EAAE;IACzD,MAAM,MAAM,GAAG,IAAA,sBAAc,EAAC,KAAK,CAAC,CAAA;IACpC,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,GAAG,KAAK,CAAA;IACnC,MAAM,OAAO,GAAG,UAAU,CAAC,IAAA,oBAAW,EAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAA;IACzD,MAAM,KAAK,GACT,OAAO,CAAC,IAAI,CAAC,CAAC,EAAE,YAAY,EAA4B,EAAE,EAAE,CAAC,YAAY,KAAK,KAAK,CAAC,EAAE,KAAK,IAAI,CAAC,CAAA;IAElG,OAAO,OAAO,GAAG,KAAK,CAAA;AACxB,CAAC,CAAA;AARY,QAAA,oBAAoB,wBAQhC;AAEM,MAAM,QAAQ,GAAG,CAAC,CAAgB,EAAE,sBAA+B,IAAI,EAAE,EAAE,CAChF,CAAC,CAAC,MAAM,CAAC,CAAC,GAA8B,EAAE,KAAkB,EAAE,EAAE;IAC9D,MAAM,QAAQ,GAAG,GAAG,CAAA,CAAC,8CAA8C;IACnE,IAAI,KAAK,CAAC,KAAK,CAAC,QAAQ,IAAI,mBAAmB;QAAE,OAAO,QAAQ,CAAA;IAChE,gDAAgD;IAChD,KAAK,MAAM,CAAC,IAAI,KAAK,CAAC,OAAO,EAAE,CAAC;QAC9B,MAAM,aAAa,GAAG,QAAQ,CAAC,CAAC,CAAC,YAAY,CAAC,IAAI,CAAC,CAAA;QAEnD,MAAM,WAAW,GAAG,MAAM,CAAC,IAAA,sBAAc,EAAC,KAAK,CAAC,CAAC,GAAG,EAAE,IAAI,KAAK,CAAC,QAAQ,CAAA;QACxE,QAAQ,CAAC,CAAC,CAAC,YAAY,CAAC,GAAG,aAAa,GAAG,WAAW,GAAG,CAAC,CAAC,KAAK,CAAA;IAClE,CAAC;IAED,OAAO,QAAQ,CAAA;AACjB,CAAC,EAAE,EAAE,CAAC,CAAA;AAbK,QAAA,QAAQ,YAab;AAED,MAAM,0BAA0B,GAAG,CACxC,wBAAgC,EAChC,MAAqB,EACrB,EAAE;IACF,OAAO,MAAM,CAAC,MAAM,CAAC,CAAC,GAAW,EAAE,KAAkB,EAAE,EAAE;QACvD,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ;YAAE,OAAO,GAAG,CAAA;QAErC,OAAO,GAAG,GAAG,IAAA,4BAAoB,EAAC,KAAK,CAAC,CAAA;IAC1C,CAAC,EAAE,wBAAwB,CAAC,CAAA;AAC9B,CAAC,CAAA;AATY,QAAA,0BAA0B,8BAStC;AAEM,MAAM,wBAAwB,GAAG,CACtC,gBAA8B,EAC9B,kBAA4B,EAAE,EAC9B,mBAAmB,GAAG,IAAI,EAC1B,EAAE;IACF,IAAI,CAAC,gBAAgB;QAAE,OAAO,CAAC,CAAA;IAE/B,OAAO,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,OAAO,EAAE,EAAE;QAC3D,IAAI,eAAe,CAAC,QAAQ,CAAC,OAAO,CAAC;YAAE,OAAO,GAAG,CAAA;QAEjD,MAAM,WAAW,GAAG,gBAAgB,CAAC,OAAO,CAAC,CAAA;QAC7C,MAAM,SAAS,GAAG,WAAW,EAAE,MAAM,EAAE,MAAM,IAAI,EAAE,CAAA;QACnD,IAAI,qBAAqB,GAAG,WAAW,EAAE,MAAM,EAAE,KAAK,CAAC,GAAG,IAAI,CAAC,CAAA;QAE/D,IAAI,CAAC,mBAAmB,EAAE,CAAC;YACzB,qBAAqB,GAAG,IAAA,kCAA0B,EAAC,qBAAqB,EAAE,SAAS,CAAC,CAAA;QACtF,CAAC;QAED,OAAO,GAAG,GAAG,qBAAqB,CAAA;IACpC,CAAC,EAAE,CAAC,CAAC,CAAA;AACP,CAAC,CAAA;AApBY,QAAA,wBAAwB,4BAoBpC;AAEM,MAAM,sBAAsB,GAAG,CACpC,sBAAqC,EACrC,gBAAyB,EACzB,SAAoB,EACpB,aAA4B,EAC5B,EAAE;IACF,IAAI,CAAC,sBAAsB;QAAE,OAAO,EAAE,CAAA;IACtC,oEAAoE;IACpE,IAAI,gBAAgB;QAAE,OAAO,EAAE,CAAA;IAE/B,OAAO,sBAAsB,CAAC,MAAM,CAAC,CAAC,GAAkB,EAAE,KAAU,EAAE,EAAE;QACtE,MAAM,cAAc,GAAG,CAAC,CAAC,aAAa,CAAC,IAAI,CACzC,CAAC,YAAyB,EAAE,EAAE,CAC5B,YAAY,CAAC,MAAM,CAAC,WAAW,EAAE,KAAK,KAAK,CAAC,MAAM,CAAC,WAAW,EAAE,CACnE,CAAA;QACD,MAAM,eAAe,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAChC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,WAAW,EAAE,KAAK,KAAK,CAAC,MAAM,CAAC,WAAW,EAAE,CAC3E,CAAA;QAED,IAAI,cAAc,IAAI,eAAe;YAAE,OAAO,GAAG,CAAA;QAEjD,MAAM,wBAAwB,GAAG,4BAAa,CAAC,IAAI,CACjD,CAAC,WAAW,EAAE,EAAE,CACd,CAAC,CAAC,CAAC,WAAW,IAAI,WAAW,CAAC,IAAI,WAAW,CAAC,SAAS,KAAK,SAAS,CAAC;YACtE,WAAW,CAAC,OAAO,KAAK,KAAK,CAAC,OAAO;YACrC,WAAW,CAAC,OAAO,CAAC,QAAQ,EAAE,KAAK,KAAK,CAAC,OAAO,CAAC,QAAQ,EAAE,CAC9D,CAAA;QAED,IAAI,wBAAwB,IAAI,wBAAwB,CAAC,SAAS,EAAE,CAAC;YACnE,GAAG,CAAC,IAAI,CAAC;gBACP,OAAO,EAAE,KAAK,CAAC,OAAO;gBACtB,MAAM,EAAE,KAAK,CAAC,MAAM,CAAC,WAAW,EAAE;gBAClC,IAAI,EAAE,KAAK,CAAC,IAAI;gBAChB,MAAM,EAAE,EAAE;gBACV,OAAO,EAAE,wBAAwB,CAAC,OAAO;gBACzC,QAAQ,EAAE,KAAK,CAAC,QAAQ;gBACxB,OAAO,EAAE;oBACP;wBACE,YAAY,EAAE,KAAK;wBACnB,KAAK,EAAE,KAAK,CAAC,KAAK;qBACnB;iBACF;gBACD,KAAK,EAAE;oBACL,WAAW,EAAE,IAAI;oBACjB,eAAe,EAAE,IAAI;oBACrB,UAAU,EAAE,IAAI;oBAChB,SAAS,EAAE,IAAI;iBAChB;aACF,CAAC,CAAA;QACJ,CAAC;QACD,OAAO,GAAG,CAAA;IACZ,CAAC,EAAE,EAAE,CAAC,CAAA;AACR,CAAC,CAAA;AApDY,QAAA,sBAAsB,0BAoDlC;AAEM,MAAM,6BAA6B,GAAG,CAC3C,QAAiD,EACR,EAAE;IAC3C,IAAI,CAAC,QAAQ;QAAE,OAAO,IAAI,CAAA;IAE1B,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,UAAU,EAAE,GAAG,QAAQ,CAAA;IAEhD,OAAO;QACL,MAAM;QACN,OAAO;QACP,UAAU;KACX,CAAA;AACH,CAAC,CAAA;AAZY,QAAA,6BAA6B,iCAYzC;AAED,MAAM,kCAAkC,GAAG,CACzC,KAA8C,EAC9C,OAAe,EACf,EAAE,CACF,KAAK;KACF,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,KAAK,OAAO,CAAC;KACtD,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,CAAA;AAE9C;;;;;;GAMG;AACH,SAAgB,eAAe;AAC7B,oDAAoD;AACpD,0BAAmE,EACnE,MAAqB,EACrB,WAA4D,EAC5D,OAAe,EACf,oBAA0C,EAC1C,GAAW,EACX,YAA2B,EAC3B,gBAAmC;IAEnC,MAAM,aAAa,GAAG,EAAE,GAAG,oBAAoB,EAAE,CAAA;IAEjD,IAAI,CAAC,aAAa,CAAC,eAAe;QAAE,aAAa,CAAC,eAAe,GAAG,EAAE,CAAA;IACtE,IAAI,CAAC,aAAa,CAAC,aAAa;QAAE,aAAa,CAAC,aAAa,GAAG,EAAE,CAAA;IAElE,MAAM,EAAE,aAAa,EAAE,WAAW,EAAE,GAAG,aAAa,CAAA;IACpD,MAAM,+BAA+B,GAAG,0BAA0B,EAAE,MAAM,IAAI,EAAE,CAAA;IAChF,MAAM,oBAAoB,GAAG,aAAa,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,IAAI,EAAE,CAAA;IAEpE,oDAAoD;IACpD,MAAM,4BAA4B,GAAG,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAA;IAEtE,gFAAgF;IAChF,uIAAuI;IACvI,0EAA0E;IAC1E,wGAAwG;IACxG,wFAAwF;IACxF,wEAAwE;IACxE,QAAQ;IACR,sIAAsI;IACtI,gIAAgI;IAChI,wJAAwJ;IACxJ,MAAM,mBAAmB,GAAG,YAAY,CAAA;IACxC,MAAM,uCAAuC,GAAG,4BAA4B,CAAC,MAAM,CACjF,CAAC,YAAY,EAAE,EAAE;QACf,MAAM,QAAQ,GAAG,CAAC,CAAC,WAAW,EAAE,IAAI,CAClC,CAAC,UAAU,EAAE,EAAE,CACb,UAAU,CAAC,OAAO,CAAC,WAAW,EAAE,KAAK,YAAY,CAAC,WAAW,EAAE;YAC/D,UAAU,CAAC,KAAK,KAAK,mBAAmB,CAC3C,CAAA;QAED,OAAO,QAAQ,CAAA;IACjB,CAAC,CACF,CAAA;IAED,IAAI,4BAA4B,CAAC,MAAM,EAAE,CAAC;QACxC,qEAAqE;QACrE,MAAM,oCAAoC,GAAG,kCAAkC,CAC7E,4BAAa,EACb,OAAO,CACR,CAAA;QACD,MAAM,qBAAqB,GAAG,kCAAkC,CAAC,YAAY,EAAE,OAAO,CAAC,CAAA;QACvF,MAAM,yBAAyB,GAAG,kCAAkC,CAAC,gBAAgB,EAAE,OAAO,CAAC,CAAA;QAC/F,MAAM,wBAAwB,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,MAAM,GAAG,EAAE,CAAC,CAAA;QAC5E,MAAM,yCAAyC,GAAG,kCAAkC,CAClF,wBAAwB,EACxB,OAAO,CACR,CAAA;QACD,MAAM,kCAAkC,GAAG,+BAA+B,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CACtF,IAAI,CAAC,WAAW,EAAE,CACnB,CAAA;QAED,yCAAyC;QACzC,kCAAkC;QAClC,gDAAgD;QAChD,KAAK,MAAM,OAAO,IAAI,4BAA4B,EAAE,CAAC;YACnD,MAAM,gBAAgB,GAAG,OAAO,CAAC,WAAW,EAAE,CAAA;YAE9C,iDAAiD;YACjD,IACE,uCAAuC,CAAC,IAAI,CAC1C,CAAC,UAAU,EAAE,EAAE,CAAC,UAAU,CAAC,WAAW,EAAE,KAAK,gBAAgB,CAC9D,EACD,CAAC;gBACD,OAAO,aAAa,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC,gBAAgB,CAAC,CAAA;gBAC1D,uCAAuC;gBACvC,SAAQ;YACV,CAAC;YAED,MAAM,QAAQ,GAAG,oCAAoC,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAA;YAChF,MAAM,aAAa,GAAG,qBAAqB,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAA;YACtE,MAAM,iBAAiB,GAAG,yBAAyB,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAA;YAC9E,MAAM,yBAAyB,GAC7B,kCAAkC,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAA;YAC/D,MAAM,UAAU,GAAG,yCAAyC,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAA;YAEvF,IACE,CAAC,yBAAyB;gBAC1B,CAAC,QAAQ;gBACT,CAAC,aAAa;gBACd,CAAC,iBAAiB;gBAClB,UAAU,EACV,CAAC;gBACD,yFAAyF;gBACzF,0FAA0F;gBAC1F,oBAAoB;gBACpB,aAAa,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC,QAAQ,EAAE,CAAA;YACpE,CAAC;QACH,CAAC;IACH,CAAC;IACD,wFAAwF;IACxF,aAAa,CAAC,eAAe,CAAC,GAAG,CAAC,GAAG,0BAA0B,CAAA;IAE/D,OAAO;QACL,eAAe,EAAE,aAAa,CAAC,eAAe;QAC9C,aAAa;QACb,WAAW;KACZ,CAAA;AACH,CAAC;AAEM,MAAM,qBAAqB,GAAG,CAAC,iBAA2B,EAAE,YAA2B,EAAE,EAAE;IAChG,IAAI,CAAC,iBAAiB,IAAI,CAAC,YAAY,IAAI,CAAC,iBAAiB,CAAC,MAAM,IAAI,CAAC,YAAY,CAAC,MAAM;QAC1F,OAAO,EAAE,CAAA;IAEX,OAAO,iBAAiB,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,EAAE,CAC1C,YAAY,CAAC,IAAI,CAAC,CAAC,WAAW,EAAE,EAAE,CAAC,WAAW,CAAC,OAAO,KAAK,OAAO,IAAI,WAAW,CAAC,MAAM,GAAG,EAAE,CAAC,CAC/F,CAAA;AACH,CAAC,CAAA;AAPY,QAAA,qBAAqB,yBAOjC;AAEM,MAAM,WAAW,GAAG,CACzB,KAAkB,EAClB,WAAwB,EACxB,OAAgB,EAChB,gBAAyB,EACzB,eAAqC,EACrC,iBAA0B,EACjB,EAAE;IACX,oEAAoE;IACpE,8FAA8F;IAC9F,iGAAiG;IACjG,uFAAuF;IACvF,MAAM,2BAA2B,GAC/B,CAAC,KAAK,CAAC,MAAM,KAAK,WAAW,EAAE,MAAM;QACnC,OAAO,CAAC,qBAAqB,EAAE,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QACxD,KAAK,CAAC,MAAM,KAAK,WAAW,CAAC,MAAM;QACnC,KAAK,CAAC,OAAO,KAAK,oBAAW,CAAA;IAE/B,IAAI,2BAA2B;QAAE,OAAO,KAAK,CAAA;IAE7C,8CAA8C;IAC9C,IAAI,iBAAiB;QAAE,OAAO,IAAI,CAAA;IAElC,6CAA6C;IAC7C,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,IAAI,KAAK,CAAC,OAAO,KAAK,oBAAW;QAAE,OAAO,IAAI,CAAA;IAElE,MAAM,QAAQ,GAAG,CAAC,CAAC,4BAAa,CAAC,IAAI,CAAC,CAAC,WAAW,EAAE,EAAE;QACpD,OAAO,WAAW,CAAC,OAAO,KAAK,OAAO,CAAC,OAAO,IAAI,WAAW,CAAC,OAAO,KAAK,KAAK,CAAC,OAAO,CAAA;IACzF,CAAC,CAAC,CAAA;IAEF,iEAAiE;IACjE,MAAM,cAAc,GAAG,eAAe;QACpC,CAAC,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;QACnD,CAAC,CAAC,SAAS,CAAA;IACb,MAAM,mBAAmB,GAAG,cAAc,EAAE,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,CAAA;IAEjF,qBAAqB;IACrB,gDAAgD;IAChD,MAAM,eAAe,GAAG,QAAQ,IAAI,CAAC,gBAAgB,CAAA;IAErD,OAAO,mBAAmB,IAAI,eAAe,CAAA;AAC/C,CAAC,CAAA;AAzCY,QAAA,WAAW,eAyCvB;AAED;;;GAGG;AACI,MAAM,aAAa,GAAG,CAC3B,YAA2B,EAC3B,OAAgB,EAChB,gBAAyB,EACzB,eAAqC,EACrC,gBAAmC,EACnC,YAA2B,EACZ,EAAE;IACjB,4FAA4F;IAC5F,kHAAkH;IAClH,MAAM,WAAW,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,OAAO,KAAK,oBAAW,CAAC,CAAA;IAE/E,OAAO,YAAY,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,WAAW,EAAE,EAAE;QACjD,MAAM,KAAK,GAAG,EAAE,GAAG,WAAW,EAAE,CAAA;QAChC,MAAM,kBAAkB,GAAG,KAAK,CAAC,KAAK,CAAC,SAAS,IAAI,KAAK,CAAC,KAAK,CAAC,WAAW,CAAA;QAE3E,MAAM,UAAU,GAAG,gBAAgB,EAAE,IAAI,CAAC,CAAC,eAAe,EAAE,EAAE;YAC5D,OAAO,CACL,eAAe,CAAC,OAAO,KAAK,KAAK,CAAC,OAAO,IAAI,eAAe,CAAC,OAAO,KAAK,OAAO,CAAC,OAAO,CACzF,CAAA;QACH,CAAC,CAAC,CAAA;QAEF,IAAI,UAAU,EAAE,CAAC;YACf,KAAK,CAAC,KAAK,CAAC,QAAQ,GAAG,UAAU,CAAC,QAAQ,CAAA;QAC5C,CAAC;QAED,KAAK,CAAC,KAAK,CAAC,QAAQ;YAClB,CAAC,kBAAkB;gBACnB,CAAC,CAAC,YAAY,CAAC,IAAI,CACjB,CAAC,WAAW,EAAE,EAAE,CACd,WAAW,CAAC,OAAO,KAAK,KAAK,CAAC,OAAO,IAAI,WAAW,CAAC,OAAO,KAAK,OAAO,CAAC,OAAO,CACnF,CAAA;QAEH,IAAI,IAAA,mBAAW,EAAC,KAAK,EAAE,WAAY,EAAE,OAAO,EAAE,gBAAgB,EAAE,eAAe,EAAE,CAAC,CAAC,UAAU,CAAC;YAC5F,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;QAEpB,OAAO,MAAM,CAAA;IACf,CAAC,EAAE,EAAmB,CAAC,CAAA;AACzB,CAAC,CAAA;AAtCY,QAAA,aAAa,iBAsCzB;AAEM,MAAM,wBAAwB,GAAG,CACtC,MAA8B,EACI,EAAE;IACpC,OAAO,CAAC,CAAC,MAAM,IAAI,eAAe,IAAI,MAAM,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,aAAa,CAAC,CAAA;AACrF,CAAC,CAAA;AAJY,QAAA,wBAAwB,4BAIpC;AAEM,MAAM,QAAQ,GAAG,CAAC,KAAkB,EAAE,EAAE,CAC7C,KAAK,CAAC,OAAO,KAAK,oBAAW,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,SAAS,CAAA;AAD5C,QAAA,QAAQ,YACoC","sourcesContent":["import { Contract, formatUnits, ZeroAddress } from 'ethers'\n\nimport IERC20 from '../../../contracts/compiled/IERC20.json'\nimport gasTankFeeTokens from '../../consts/gasTankFeeTokens'\nimport { PINNED_TOKENS } from '../../consts/pinnedTokens'\nimport { AccountId } from '../../interfaces/account'\nimport { Network } from '../../interfaces/network'\nimport { RPCProvider } from '../../interfaces/provider'\nimport { CustomToken, TokenPreference } from './customToken'\nimport {\n  AccountState,\n  AdditionalPortfolioNetworkResult,\n  NetworkState,\n  PortfolioGasTankResult,\n  PreviousHintsStorage,\n  StrippedExternalHintsAPIResponse,\n  TokenResult\n} from './interfaces'\n\nconst usdcEMapping: { [key: string]: string } = {\n  '43114': '0xa7d7079b0fead91f3e65f86e8915cb59c1a4c664',\n  '1285': '0x748134b5f553f2bcbd78c6826de99a70274bdeb3',\n  '42161': '0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8',\n  '137': '0x2791bca1f2de4661ed88a30c99a7a9449aa84174',\n  '10': '0x7f5c764cbc14f9669b88837ca1490cca17c31607'\n}\n\nexport function overrideSymbol(address: string, chainId: bigint, symbol: string) {\n  // Since deployless lib calls contract and USDC.e is returned as USDC, we need to override the symbol\n  if (\n    usdcEMapping[chainId.toString()] &&\n    usdcEMapping[chainId.toString()].toLowerCase() === address.toLowerCase()\n  ) {\n    return 'USDC.E'\n  }\n\n  return symbol\n}\n\nexport function getFlags(networkData: any, chainId: string, tokenChainId: bigint, address: string) {\n  const isRewardsOrGasTank = ['gasTank', 'rewards'].includes(chainId)\n  const onGasTank = chainId === 'gasTank'\n\n  let rewardsType = null\n  if (networkData?.stkWalletClaimableBalance?.address.toLowerCase() === address.toLowerCase())\n    rewardsType = 'wallet-rewards'\n  if (networkData?.walletClaimableBalance?.address.toLowerCase() === address.toLowerCase())\n    rewardsType = 'wallet-vesting'\n\n  const foundFeeToken = gasTankFeeTokens.find(\n    (t) =>\n      t.address.toLowerCase() === address.toLowerCase() &&\n      (isRewardsOrGasTank ? t.chainId === tokenChainId : t.chainId.toString() === chainId)\n  )\n\n  const canTopUpGasTank = foundFeeToken && !foundFeeToken?.disableGasTankDeposit && !rewardsType\n  const isFeeToken =\n    address === ZeroAddress ||\n    // disable if not in gas tank\n    (foundFeeToken && !foundFeeToken.disableAsFeeToken) ||\n    chainId === 'gasTank'\n\n  return {\n    onGasTank,\n    rewardsType,\n    canTopUpGasTank,\n    isFeeToken\n  }\n}\n\nexport const validateERC20Token = async (\n  token: { address: string; chainId: bigint },\n  accountId: string,\n  provider: RPCProvider\n) => {\n  const erc20 = new Contract(token?.address, IERC20.abi, provider)\n\n  const type = 'erc20'\n  let isValid = true\n  let hasError = false\n\n  const [balance, symbol, decimals] = (await Promise.all([\n    erc20.balanceOf(accountId).catch(() => {\n      hasError = true\n    }),\n    erc20.symbol().catch(() => {\n      hasError = true\n    }),\n    erc20.decimals().catch(() => {\n      hasError = true\n    })\n  ]).catch(() => {\n    hasError = true\n    isValid = false\n  })) || [undefined, undefined, undefined]\n\n  if (\n    typeof balance === 'undefined' ||\n    typeof symbol === 'undefined' ||\n    typeof decimals === 'undefined'\n  ) {\n    isValid = false\n  }\n\n  isValid = isValid && !hasError\n  return [isValid, type]\n}\n\n// fetch the amountPostSimulation for the token if set\n// otherwise, the token.amount\nexport const getTokenAmount = (token: TokenResult): bigint => {\n  return typeof token.amountPostSimulation === 'bigint' ? token.amountPostSimulation : token.amount\n}\n\nexport const getTokenBalanceInUSD = (token: TokenResult) => {\n  const amount = getTokenAmount(token)\n  const { decimals, priceIn } = token\n  const balance = parseFloat(formatUnits(amount, decimals))\n  const price =\n    priceIn.find(({ baseCurrency }: { baseCurrency: string }) => baseCurrency === 'usd')?.price || 0\n\n  return balance * price\n}\n\nexport const getTotal = (t: TokenResult[], excludeHiddenTokens: boolean = true) =>\n  t.reduce((cur: { [key: string]: number }, token: TokenResult) => {\n    const localCur = cur // Add index signature to the type of localCur\n    if (token.flags.isHidden && excludeHiddenTokens) return localCur\n    // eslint-disable-next-line no-restricted-syntax\n    for (const x of token.priceIn) {\n      const currentAmount = localCur[x.baseCurrency] || 0\n\n      const tokenAmount = Number(getTokenAmount(token)) / 10 ** token.decimals\n      localCur[x.baseCurrency] = currentAmount + tokenAmount * x.price\n    }\n\n    return localCur\n  }, {})\n\nexport const addHiddenTokenValueToTotal = (\n  totalWithoutHiddenTokens: number,\n  tokens: TokenResult[]\n) => {\n  return tokens.reduce((cur: number, token: TokenResult) => {\n    if (!token.flags.isHidden) return cur\n\n    return cur + getTokenBalanceInUSD(token)\n  }, totalWithoutHiddenTokens)\n}\n\nexport const getAccountPortfolioTotal = (\n  accountPortfolio: AccountState,\n  excludeNetworks: string[] = [],\n  excludeHiddenTokens = true\n) => {\n  if (!accountPortfolio) return 0\n\n  return Object.keys(accountPortfolio).reduce((acc, chainId) => {\n    if (excludeNetworks.includes(chainId)) return acc\n\n    const networkData = accountPortfolio[chainId]\n    const tokenList = networkData?.result?.tokens || []\n    let networkTotalAmountUSD = networkData?.result?.total.usd || 0\n\n    if (!excludeHiddenTokens) {\n      networkTotalAmountUSD = addHiddenTokenValueToTotal(networkTotalAmountUSD, tokenList)\n    }\n\n    return acc + networkTotalAmountUSD\n  }, 0)\n}\n\nexport const getPinnedGasTankTokens = (\n  availableGasTankAssets: TokenResult[],\n  hasNonZeroTokens: boolean,\n  accountId: AccountId,\n  gasTankTokens: TokenResult[]\n) => {\n  if (!availableGasTankAssets) return []\n  // Don't set pinnedGasTankTokens if the user has > 1 non-zero tokens\n  if (hasNonZeroTokens) return []\n\n  return availableGasTankAssets.reduce((acc: TokenResult[], token: any) => {\n    const isGasTankToken = !!gasTankTokens.find(\n      (gasTankToken: TokenResult) =>\n        gasTankToken.symbol.toLowerCase() === token.symbol.toLowerCase()\n    )\n    const isAlreadyPinned = !!acc.find(\n      (accToken) => accToken.symbol.toLowerCase() === token.symbol.toLowerCase()\n    )\n\n    if (isGasTankToken || isAlreadyPinned) return acc\n\n    const correspondingPinnedToken = PINNED_TOKENS.find(\n      (pinnedToken) =>\n        (!('accountId' in pinnedToken) || pinnedToken.accountId === accountId) &&\n        pinnedToken.address === token.address &&\n        pinnedToken.chainId.toString() === token.chainId.toString()\n    )\n\n    if (correspondingPinnedToken && correspondingPinnedToken.onGasTank) {\n      acc.push({\n        address: token.address,\n        symbol: token.symbol.toUpperCase(),\n        name: token.name,\n        amount: 0n,\n        chainId: correspondingPinnedToken.chainId,\n        decimals: token.decimals,\n        priceIn: [\n          {\n            baseCurrency: 'usd',\n            price: token.price\n          }\n        ],\n        flags: {\n          rewardsType: null,\n          canTopUpGasTank: true,\n          isFeeToken: true,\n          onGasTank: true\n        }\n      })\n    }\n    return acc\n  }, [])\n}\n\nexport const stripExternalHintsAPIResponse = (\n  response: StrippedExternalHintsAPIResponse | null\n): StrippedExternalHintsAPIResponse | null => {\n  if (!response) return null\n\n  const { erc20s, erc721s, lastUpdate } = response\n\n  return {\n    erc20s,\n    erc721s,\n    lastUpdate\n  }\n}\n\nconst getLowercaseAddressArrayForNetwork = (\n  array: { address: string; chainId?: bigint }[],\n  chainId: bigint\n) =>\n  array\n    .filter((item) => !chainId || item.chainId === chainId)\n    .map((item) => item.address.toLowerCase())\n\n/**\n * Tasks:\n * - updates the external hints for [network:account] with the latest from the external API\n * - cleans the learned tokens by removing non-ERC20 items\n * - updates the timestamp of learned tokens\n * - returns the updated hints\n */\nexport function getUpdatedHints(\n  // Can only be null in case of no external api hints\n  latestHintsFromExternalAPI: StrippedExternalHintsAPIResponse | null,\n  tokens: TokenResult[],\n  tokenErrors: AdditionalPortfolioNetworkResult['tokenErrors'],\n  chainId: bigint,\n  storagePreviousHints: PreviousHintsStorage,\n  key: string,\n  customTokens: CustomToken[],\n  tokenPreferences: TokenPreference[]\n): PreviousHintsStorage {\n  const previousHints = { ...storagePreviousHints }\n\n  if (!previousHints.fromExternalAPI) previousHints.fromExternalAPI = {}\n  if (!previousHints.learnedTokens) previousHints.learnedTokens = {}\n\n  const { learnedTokens, learnedNfts } = previousHints\n  const latestERC20HintsFromExternalAPI = latestHintsFromExternalAPI?.erc20s || []\n  const networkLearnedTokens = learnedTokens[chainId.toString()] || {}\n\n  // The keys in learnedTokens are addresses of tokens\n  const networkLearnedTokenAddresses = Object.keys(networkLearnedTokens)\n\n  // Self-cleaning mechanism for removing non-ERC20 items from the learned tokens.\n  // There's a possibility that the discovered tokens (from debug_traceCall or mostly Humanizer) include items that are not ERC20 tokens.\n  // For instance, a SmartContract address can be passed as a learned token.\n  // Thanks to BalanceGetter, we know which tokens encounter an error when we try to update the portfolio.\n  // All the errors are collected in `tokenErrors`, and if we cannot retrieve its balance,\n  // the contract returns `bytes('unkn')`, which is equal to `0x756e6b6e`.\n  // Note:\n  // When we extract tokens from `debug_traceCall`, we are already filtering the tokens the same way as here (relying on BalanceGetter).\n  // However, for the Humanizer tokens, we skipped that check because the Humanizer is invoked more frequently on the Sign screen,\n  // and this validation may slow down the performance of the page. Because of this, we perform the check here, where we are calling BalanceGetter anyway.\n  const unknownBalanceError = '0x756e6b6e'\n  const networkLearnedTokenAddressesHavingError = networkLearnedTokenAddresses.filter(\n    (tokenAddress) => {\n      const hasError = !!tokenErrors?.find(\n        (errorToken) =>\n          errorToken.address.toLowerCase() === tokenAddress.toLowerCase() &&\n          errorToken.error === unknownBalanceError\n      )\n\n      return hasError\n    }\n  )\n\n  if (networkLearnedTokenAddresses.length) {\n    // Lowercase all addresses outside of the loop for better performance\n    const lowercaseNetworkPinnedTokenAddresses = getLowercaseAddressArrayForNetwork(\n      PINNED_TOKENS,\n      chainId\n    )\n    const lowercaseCustomTokens = getLowercaseAddressArrayForNetwork(customTokens, chainId)\n    const lowercaseTokenPreferences = getLowercaseAddressArrayForNetwork(tokenPreferences, chainId)\n    const networkTokensWithBalance = tokens.filter((token) => token.amount > 0n)\n    const lowercaseNetworkTokenAddressesWithBalance = getLowercaseAddressArrayForNetwork(\n      networkTokensWithBalance,\n      chainId\n    )\n    const lowercaseERC20HintsFromExternalAPI = latestERC20HintsFromExternalAPI.map((hint) =>\n      hint.toLowerCase()\n    )\n\n    // Update the timestamp of learned tokens\n    // and self-clean non-ERC20 items.\n    // eslint-disable-next-line no-restricted-syntax\n    for (const address of networkLearnedTokenAddresses) {\n      const lowercaseAddress = address.toLowerCase()\n\n      // Delete non-ERC20 items from the learned tokens\n      if (\n        networkLearnedTokenAddressesHavingError.find(\n          (errorToken) => errorToken.toLowerCase() === lowercaseAddress\n        )\n      ) {\n        delete learnedTokens[chainId.toString()][lowercaseAddress]\n        // eslint-disable-next-line no-continue\n        continue\n      }\n\n      const isPinned = lowercaseNetworkPinnedTokenAddresses.includes(lowercaseAddress)\n      const isCustomToken = lowercaseCustomTokens.includes(lowercaseAddress)\n      const isTokenPreference = lowercaseTokenPreferences.includes(lowercaseAddress)\n      const isTokenInExternalAPIHints =\n        lowercaseERC20HintsFromExternalAPI.includes(lowercaseAddress)\n      const hasBalance = lowercaseNetworkTokenAddressesWithBalance.includes(lowercaseAddress)\n\n      if (\n        !isTokenInExternalAPIHints &&\n        !isPinned &&\n        !isCustomToken &&\n        !isTokenPreference &&\n        hasBalance\n      ) {\n        // Don't set the timestamp back to null if the account doesn't have balance for the token\n        // as learnedTokens aren't account specific and one account can have balance for the token\n        // while other don't\n        learnedTokens[chainId.toString()][address] = Date.now().toString()\n      }\n    }\n  }\n  // Update the external hints for [network:account] with the latest from the external API\n  previousHints.fromExternalAPI[key] = latestHintsFromExternalAPI\n\n  return {\n    fromExternalAPI: previousHints.fromExternalAPI,\n    learnedTokens,\n    learnedNfts\n  }\n}\n\nexport const getTokensReadyToLearn = (toBeLearnedTokens: string[], resultTokens: TokenResult[]) => {\n  if (!toBeLearnedTokens || !resultTokens || !toBeLearnedTokens.length || !resultTokens.length)\n    return []\n\n  return toBeLearnedTokens.filter((address) =>\n    resultTokens.find((resultToken) => resultToken.address === address && resultToken.amount > 0n)\n  )\n}\n\nexport const tokenFilter = (\n  token: TokenResult,\n  nativeToken: TokenResult,\n  network: Network,\n  hasNonZeroTokens: boolean,\n  additionalHints: string[] | undefined,\n  isTokenPreference: boolean\n): boolean => {\n  // Never add ERC20 tokens that represent the network's native token.\n  // For instance, on Polygon, we have this token: `0x0000000000000000000000000000000000001010`.\n  // It mimics the native POL token (same symbol, same amount) and is shown twice in the Dashboard.\n  // From a user's perspective, the token is duplicated and counted twice in the balance.\n  const isERC20NativeRepresentation =\n    (token.symbol === nativeToken?.symbol ||\n      network.oldNativeAssetSymbols?.includes(token.symbol)) &&\n    token.amount === nativeToken.amount &&\n    token.address !== ZeroAddress\n\n  if (isERC20NativeRepresentation) return false\n\n  // always include tokens added as a preference\n  if (isTokenPreference) return true\n\n  // always include > 0 amount and native token\n  if (token.amount > 0 || token.address === ZeroAddress) return true\n\n  const isPinned = !!PINNED_TOKENS.find((pinnedToken) => {\n    return pinnedToken.chainId === network.chainId && pinnedToken.address === token.address\n  })\n\n  // make the comparison to lowercase as otherwise, it doesn't work\n  const hintsLowerCase = additionalHints\n    ? additionalHints.map((hint) => hint.toLowerCase())\n    : undefined\n  const isInAdditionalHints = hintsLowerCase?.includes(token.address.toLowerCase())\n\n  // if the amount is 0\n  // return the token if it's pinned and requested\n  const pinnedRequested = isPinned && !hasNonZeroTokens\n\n  return isInAdditionalHints || pinnedRequested\n}\n\n/**\n * Filter the TokenResult[] by certain criteria (please refer to `tokenFilter` for more details)\n * and set the token.flags.isHidden flag.\n */\nexport const processTokens = (\n  tokenResults: TokenResult[],\n  network: Network,\n  hasNonZeroTokens: boolean,\n  additionalHints: string[] | undefined,\n  tokenPreferences: TokenPreference[],\n  customTokens: CustomToken[]\n): TokenResult[] => {\n  // We need to know the native token in order to execute our filtration logic in tokenFilter.\n  // For performance reasons, we define it here once, instead of during every single iteration in the reduce method.\n  const nativeToken = tokenResults.find((token) => token.address === ZeroAddress)\n\n  return tokenResults.reduce((tokens, tokenResult) => {\n    const token = { ...tokenResult }\n    const isGasTankOrRewards = token.flags.onGasTank || token.flags.rewardsType\n\n    const preference = tokenPreferences?.find((tokenPreference) => {\n      return (\n        tokenPreference.address === token.address && tokenPreference.chainId === network.chainId\n      )\n    })\n\n    if (preference) {\n      token.flags.isHidden = preference.isHidden\n    }\n\n    token.flags.isCustom =\n      !isGasTankOrRewards &&\n      !!customTokens.find(\n        (customToken) =>\n          customToken.address === token.address && customToken.chainId === network.chainId\n      )\n\n    if (tokenFilter(token, nativeToken!, network, hasNonZeroTokens, additionalHints, !!preference))\n      tokens.push(token)\n\n    return tokens\n  }, [] as TokenResult[])\n}\n\nexport const isPortfolioGasTankResult = (\n  result: NetworkState['result']\n): result is PortfolioGasTankResult => {\n  return !!result && 'gasTankTokens' in result && Array.isArray(result.gasTankTokens)\n}\n\nexport const isNative = (token: TokenResult) =>\n  token.address === ZeroAddress && !token.flags.onGasTank\n"]}