{"version":3,"file":"pagination.js","sourceRoot":"","sources":["../../../../src/libs/portfolio/pagination.ts"],"names":[],"mappings":"AASA,MAAM,UAAU,QAAQ,CACtB,KAAkE,EAClE,KAAa;IAEb,MAAM,KAAK,GAAG,EAAE,CAAA;IAChB,IAAI,IAAI,GAAG,CAAC,CAAA;IACZ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,KAAK,CAAC,EAAE,CAAC,EAAE,EAAE;QACzD,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,GAAG,KAAK,CAAC,CAAC,CAAA;QACxC,IAAI,IAAI,KAAK,CAAA;KACd;IACD,OAAO,KAAK,CAAA;AACd,CAAC;AAED,MAAM,UAAU,cAAc,CAC5B,UAA+E;IAE/E,OAAO,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE;QAC9C,IAAI,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;YAC/B,OAAO,CAAC,EAAE,EAAE,EAAE,CAAC,CAAA;SAChB;QAED,MAAM,SAAS,GAAU,EAAE,CAAA;QAC3B,IAAI,QAAQ,GAAa,EAAE,CAAA;QAE3B,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;YACzB,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC9C,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,GAAG,MAAM,CAAA;gBAEjC,IAAI,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;oBAC7B,SAAS,CAAC,IAAI,CAAC,GAAG,UAAU,CAAC,CAAA;iBAC9B;gBACD,IAAI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE;oBACtC,QAAQ,GAAG,EAAE,GAAI,IAAiB,EAAE,CAAA;iBACrC;aACF;QACH,CAAC,CAAC,CAAA;QAEF,OAAO,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAA;IAC9B,CAAC,CAAC,CAAA;AACJ,CAAC","sourcesContent":["import {\n  CollectionResult,\n  ERC721Enumerable,\n  ERC721Innumerable,\n  MetaData,\n  TokenError,\n  TokenResult\n} from './interfaces'\n\nexport function paginate(\n  input: string[] | [string, ERC721Enumerable | ERC721Innumerable][],\n  limit: number\n): any[][] {\n  const pages = []\n  let from = 0\n  for (let i = 1; i <= Math.ceil(input.length / limit); i++) {\n    pages.push(input.slice(from, i * limit))\n    from += limit\n  }\n  return pages\n}\n\nexport function flattenResults(\n  everything: Promise<[[string, TokenResult | CollectionResult][], MetaData][]>[]\n): Promise<[[TokenError, TokenResult | CollectionResult][], MetaData | {}]> {\n  return Promise.all(everything).then((results) => {\n    if (!results || !results.length) {\n      return [[], {}]\n    }\n\n    const allTokens: any[] = []\n    let metadata: MetaData = {}\n\n    results.forEach((result) => {\n      if (Array.isArray(result) && result.length > 0) {\n        const [hintsArray, meta] = result\n\n        if (Array.isArray(hintsArray)) {\n          allTokens.push(...hintsArray)\n        }\n        if (Object.keys(metadata).length === 0) {\n          metadata = { ...(meta as MetaData) }\n        }\n      }\n    })\n\n    return [allTokens, metadata]\n  })\n}\n"]}