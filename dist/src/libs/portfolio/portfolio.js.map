{"version":3,"file":"portfolio.js","sourceRoot":"","sources":["../../../../src/libs/portfolio/portfolio.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable import/no-cycle */\n/* eslint-disable no-restricted-syntax */\n/* eslint-disable guard-for-in */\n\nimport { getAddress, JsonRpcProvider, Provider, ZeroAddress } from 'ethers'\n\nimport BalanceGetter from '../../../contracts/compiled/BalanceGetter.json'\nimport NFTGetter from '../../../contracts/compiled/NFTGetter.json'\nimport gasTankFeeTokens from '../../consts/gasTankFeeTokens'\nimport { PINNED_TOKENS } from '../../consts/pinnedTokens'\nimport { Fetch } from '../../interfaces/fetch'\nimport { Network } from '../../interfaces/network'\nimport { Deployless, fromDescriptor } from '../deployless/deployless'\nimport batcher from './batcher'\nimport { geckoRequestBatcher, geckoResponseIdentifier } from './gecko'\nimport { getNFTs, getTokens } from './getOnchainBalances'\nimport { stripExternalHintsAPIResponse } from './helpers'\nimport {\n  CollectionResult,\n  ExternalHintsAPIResponse,\n  GetOptions,\n  Hints,\n  Limits,\n  LimitsOptions,\n  PortfolioLibGetResult,\n  PriceCache,\n  TokenError,\n  TokenResult\n} from './interfaces'\nimport { flattenResults, paginate } from './pagination'\n\nexport const LIMITS: Limits = {\n  // we have to be conservative with erc721Tokens because if we pass 30x20 (worst case) tokenIds, that's 30x20 extra words which is 19kb\n  // proxy mode input is limited to 24kb\n  deploylessProxyMode: { erc20: 66, erc721: 30, erc721TokensInput: 20, erc721Tokens: 50 },\n  // theoretical capacity is 1666/450\n  deploylessStateOverrideMode: {\n    erc20: 230,\n    erc721: 70,\n    erc721TokensInput: 70,\n    erc721Tokens: 70\n  }\n}\n\nexport const PORTFOLIO_LIB_ERROR_NAMES = {\n  /** External hints API (Velcro) request failed but fallback is sufficient */\n  NonCriticalApiHintsError: 'NonCriticalApiHintsError',\n  /** External API (Velcro) hints are older than X minutes */\n  StaleApiHintsError: 'StaleApiHintsError',\n  /** No external API (Velcro) hints are available- the request failed without fallback */\n  NoApiHintsError: 'NoApiHintsError',\n  /** One or more cena request has failed */\n  PriceFetchError: 'PriceFetchError'\n}\n\nexport const getEmptyHints = (): Hints => ({\n  erc20s: [],\n  erc721s: {}\n})\n\nconst defaultOptions: GetOptions = {\n  baseCurrency: 'usd',\n  blockTag: 'latest',\n  priceRecency: 0,\n  previousHintsFromExternalAPI: null,\n  fetchPinned: true\n}\n\nexport class Portfolio {\n  network: Network\n\n  private batchedVelcroDiscovery: Function\n\n  private batchedGecko: Function\n\n  private deploylessTokens: Deployless\n\n  private deploylessNfts: Deployless\n\n  constructor(\n    fetch: Fetch,\n    provider: Provider | JsonRpcProvider,\n    network: Network,\n    velcroUrl?: string,\n    customBatcher?: Function\n  ) {\n    if (customBatcher) {\n      this.batchedVelcroDiscovery = customBatcher\n    } else {\n      this.batchedVelcroDiscovery = batcher(\n        fetch,\n        (queue) => {\n          const baseCurrencies = [...new Set(queue.map((x) => x.data.baseCurrency))]\n          return baseCurrencies.map((baseCurrency) => {\n            const queueSegment = queue.filter((x) => x.data.baseCurrency === baseCurrency)\n            const url = `${velcroUrl}/multi-hints?networks=${queueSegment\n              .map((x) => x.data.chainId)\n              .join(',')}&accounts=${queueSegment\n              .map((x) => x.data.accountAddr)\n              .join(',')}&baseCurrency=${baseCurrency}`\n            return { queueSegment, url }\n          })\n        },\n        {\n          timeoutSettings: {\n            timeoutAfter: 3000,\n            timeoutErrorMessage: `Velcro discovery timed out on ${network.name}`\n          },\n          dedupeByKeys: ['chainId', 'accountAddr']\n        }\n      )\n    }\n    this.batchedGecko = batcher(fetch, geckoRequestBatcher, {\n      timeoutSettings: {\n        timeoutAfter: 3000,\n        timeoutErrorMessage: `Cena request timed out on ${network.name}`\n      }\n    })\n    this.network = network\n    this.deploylessTokens = fromDescriptor(provider, BalanceGetter, !network.rpcNoStateOverride)\n    this.deploylessNfts = fromDescriptor(provider, NFTGetter, !network.rpcNoStateOverride)\n  }\n\n  async get(accountAddr: string, opts: Partial<GetOptions> = {}): Promise<PortfolioLibGetResult> {\n    const errors: PortfolioLibGetResult['errors'] = []\n    const localOpts = { ...defaultOptions, ...opts }\n    const disableAutoDiscovery = localOpts.disableAutoDiscovery || false\n    const { baseCurrency } = localOpts\n    if (localOpts.simulation && localOpts.simulation.account.addr !== accountAddr)\n      throw new Error('wrong account passed')\n\n    // Get hints (addresses to check on-chain) via Velcro\n    const start = Date.now()\n    const chainId = this.network.chainId\n\n    // Make sure portfolio lib still works, even in the case Velcro discovery fails.\n    // Because of this, we fall back to Velcro default response.\n    let hints: Hints = getEmptyHints()\n    let hintsFromExternalAPI: ExternalHintsAPIResponse | null = null\n\n    try {\n      // if the network doesn't have a relayer, velcro will not work\n      // but we should not record an error if such is the case\n      if (!disableAutoDiscovery) {\n        hintsFromExternalAPI = await this.batchedVelcroDiscovery({\n          chainId,\n          accountAddr,\n          baseCurrency\n        })\n\n        if (hintsFromExternalAPI) {\n          hintsFromExternalAPI.lastUpdate = Date.now()\n          hints = stripExternalHintsAPIResponse(hintsFromExternalAPI) as Hints\n        }\n      }\n    } catch (error: any) {\n      const errorMesssage = `Failed to fetch hints from Velcro for chainId (${chainId}): ${error.message}`\n      if (localOpts.previousHintsFromExternalAPI) {\n        hints = { ...localOpts.previousHintsFromExternalAPI }\n        const TEN_MINUTES = 10 * 60 * 1000\n        const lastUpdate = localOpts.previousHintsFromExternalAPI.lastUpdate\n        const isLastUpdateTooOld = Date.now() - lastUpdate > TEN_MINUTES\n\n        errors.push({\n          name: isLastUpdateTooOld\n            ? PORTFOLIO_LIB_ERROR_NAMES.StaleApiHintsError\n            : PORTFOLIO_LIB_ERROR_NAMES.NonCriticalApiHintsError,\n          message: errorMesssage,\n          level: isLastUpdateTooOld ? 'critical' : 'silent'\n        })\n      } else {\n        errors.push({\n          name: PORTFOLIO_LIB_ERROR_NAMES.NoApiHintsError,\n          message: errorMesssage,\n          level: 'critical'\n        })\n      }\n\n      // It's important for DX to see this error\n      // eslint-disable-next-line no-console\n      console.error(errorMesssage)\n    }\n\n    // Please note 2 things:\n    // 1. Velcro hints data takes advantage over previous hints because, in most cases, Velcro data is more up-to-date than the previously cached hints.\n    // 2. There is only one use-case where the previous hints data is more recent, and that is when we find an NFT token via a pending simulation.\n    // In order to support it, we have to apply a complex deep merging algorithm (which may become problematic if the Velcro API changes)\n    // and also have to introduce an algorithm for self-cleaning outdated/previous NFT tokens.\n    // However, we have chosen to keep it as simple as possible and disregard this rare case.\n    if (localOpts.additionalErc721Hints) {\n      hints.erc721s = { ...localOpts.additionalErc721Hints, ...hints.erc721s }\n    }\n\n    if (localOpts.additionalErc20Hints) {\n      hints.erc20s = [...hints.erc20s, ...localOpts.additionalErc20Hints]\n    }\n\n    if (localOpts.fetchPinned) {\n      hints.erc20s = [...hints.erc20s, ...PINNED_TOKENS.map((x) => x.address)]\n    }\n\n    // add the fee tokens\n    hints.erc20s = [\n      ...hints.erc20s,\n      ...gasTankFeeTokens.filter((x) => x.chainId === this.network.chainId).map((x) => x.address)\n    ]\n\n    const checksummedErc20Hints = hints.erc20s\n      .map((address) => {\n        try {\n          // getAddress may throw an error. This will break the portfolio\n          // if the error isn't caught\n          return getAddress(address)\n        } catch {\n          return null\n        }\n      })\n      .filter(Boolean) as string[]\n\n    // Remove duplicates and always add ZeroAddress\n    hints.erc20s = [...new Set(checksummedErc20Hints.concat(ZeroAddress))]\n\n    // This also allows getting prices, this is used for more exotic tokens that cannot be retrieved via Coingecko\n    const priceCache: PriceCache = localOpts.priceCache || new Map()\n    for (const addr in hintsFromExternalAPI?.prices || {}) {\n      const priceHint = hintsFromExternalAPI?.prices[addr]\n      // eslint-disable-next-line no-continue\n      if (!priceHint) continue\n      // @TODO consider validating the external response here, before doing the .set; or validating the whole velcro response\n      priceCache.set(addr, [start, Array.isArray(priceHint) ? priceHint : [priceHint]])\n    }\n    const discoveryDone = Date.now()\n\n    // .isLimitedAt24kbData should be the same for both instances; @TODO more elegant check?\n    const limits: LimitsOptions = this.deploylessTokens.isLimitedAt24kbData\n      ? LIMITS.deploylessProxyMode\n      : LIMITS.deploylessStateOverrideMode\n    const collectionsHints = Object.entries(hints.erc721s)\n    const [tokensWithErr, collectionsWithErr] = await Promise.all([\n      flattenResults(\n        paginate(hints.erc20s, limits.erc20).map((page) =>\n          getTokens(this.network, this.deploylessTokens, localOpts, accountAddr, page)\n        )\n      ),\n      flattenResults(\n        paginate(collectionsHints, limits.erc721).map((page) =>\n          getNFTs(this.network, this.deploylessNfts, localOpts, accountAddr, page, limits)\n        )\n      )\n    ])\n\n    const [tokensWithErrResult, metaData] = tokensWithErr\n    const { blockNumber, beforeNonce, afterNonce } = metaData as {\n      blockNumber: number\n      beforeNonce: bigint\n      afterNonce: bigint\n    }\n    const [collectionsWithErrResult] = collectionsWithErr\n\n    // Re-map/filter into our format\n    const getPriceFromCache = (address: string) => {\n      const cached = priceCache.get(address)\n      if (!cached) return null\n      const [timestamp, entry] = cached\n      const eligible = entry.filter((x) => x.baseCurrency === baseCurrency)\n      // by using `start` instead of `Date.now()`, we make sure that prices updated from Velcro will not be updated again\n      // even if priceRecency is 0\n      if (start - timestamp <= localOpts.priceRecency! && eligible.length) return eligible\n      return null\n    }\n\n    const tokenFilter = ([error, result]: [TokenError, TokenResult]): boolean =>\n      error === '0x' && !!result.symbol\n\n    const tokensWithoutPrices = tokensWithErrResult\n      .filter((_tokensWithErrResult: [TokenError, TokenResult]) =>\n        tokenFilter(_tokensWithErrResult)\n      )\n      .map(([, result]: [any, TokenResult]) => result)\n\n    const unfilteredCollections = collectionsWithErrResult.map(([error, x], i) => {\n      const address = collectionsHints[i][0] as unknown as string\n      return [\n        error,\n        {\n          ...x,\n          address,\n          priceIn: getPriceFromCache(address) || []\n        }\n      ] as [string, CollectionResult]\n    })\n\n    const collections = unfilteredCollections\n      .filter((preFilterCollection) => tokenFilter(preFilterCollection))\n      .map(([, collection]) => collection)\n\n    const oracleCallDone = Date.now()\n\n    // Update prices and set the priceIn for each token by reference,\n    // updating the final tokens array as a result\n    const tokensWithPrices: TokenResult[] = await Promise.all(\n      tokensWithoutPrices.map(async (token: { address: string }) => {\n        let priceIn: TokenResult['priceIn'] = []\n        const cachedPriceIn = getPriceFromCache(token.address)\n\n        if (cachedPriceIn) {\n          priceIn = cachedPriceIn\n\n          return {\n            ...(token as TokenResult),\n            priceIn\n          }\n        }\n\n        if (!this.network.platformId) {\n          return {\n            ...(token as TokenResult),\n            priceIn\n          }\n        }\n\n        try {\n          const priceData = await this.batchedGecko({\n            ...token,\n            network: this.network,\n            baseCurrency,\n            // this is what to look for in the coingecko response object\n            responseIdentifier: geckoResponseIdentifier(token.address, this.network)\n          })\n\n          priceIn = Object.entries(priceData || {}).map(([baseCurr, price]) => ({\n            baseCurrency: baseCurr,\n            price: price as number\n          }))\n          if (priceIn.length) priceCache.set(token.address, [Date.now(), priceIn])\n        } catch (error: any) {\n          const errorMessage = error?.message || 'Unknown error'\n          priceIn = []\n\n          // Avoid duplicate errors, because this.bachedGecko is called for each token and if\n          // there is an error it will most likely be the same for all tokens\n          if (\n            !errors.find(\n              (x) =>\n                x.name === PORTFOLIO_LIB_ERROR_NAMES.PriceFetchError && x.message === errorMessage\n            )\n          ) {\n            errors.push({\n              name: PORTFOLIO_LIB_ERROR_NAMES.PriceFetchError,\n              message: errorMessage,\n              level: 'warning'\n            })\n          }\n        }\n\n        return {\n          ...(token as TokenResult),\n          priceIn\n        }\n      })\n    )\n\n    const priceUpdateDone = Date.now()\n\n    return {\n      hintsFromExternalAPI: stripExternalHintsAPIResponse(hintsFromExternalAPI),\n      errors,\n      updateStarted: start,\n      discoveryTime: discoveryDone - start,\n      oracleCallTime: oracleCallDone - discoveryDone,\n      priceUpdateTime: priceUpdateDone - oracleCallDone,\n      priceCache,\n      tokens: tokensWithPrices,\n      feeTokens: tokensWithPrices.filter((t) => {\n        // return the native token\n        if (t.address === ZeroAddress && t.chainId === this.network.chainId) return true\n\n        return gasTankFeeTokens.find(\n          (gasTankT) =>\n            gasTankT.address.toLowerCase() === t.address.toLowerCase() &&\n            gasTankT.chainId === t.chainId\n        )\n      }),\n      beforeNonce,\n      afterNonce,\n      blockNumber,\n      tokenErrors: tokensWithErrResult\n        .filter(([error, result]: [string, TokenResult]) => error !== '0x' || result.symbol === '')\n        .map(([error, result]: [string, TokenResult]) => ({ error, address: result.address })),\n      collections\n    }\n  }\n}\n"]}