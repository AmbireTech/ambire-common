{"version":3,"file":"calls.js","sourceRoot":"","sources":["../../../../src/libs/calls/calls.ts"],"names":[],"mappings":"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","sourcesContent":["import { AbiCoder, Interface, ZeroAddress } from 'ethers'\n\nimport ERC20 from '../../../contracts/compiled/IERC20.json'\nimport { FEE_COLLECTOR } from '../../consts/addresses'\nimport { DEPLOYLESS_SIMULATION_FROM } from '../../consts/deploy'\nimport gasTankFeeTokens from '../../consts/gasTankFeeTokens'\nimport { Network } from '../../interfaces/network'\nimport { Call } from '../accountOp/types'\nimport { TokenResult } from '../portfolio'\n\nconst abiCoder = new AbiCoder()\nconst ERC20Interface = new Interface(ERC20.abi)\n\nexport function getFeeCall(feeToken: TokenResult): Call {\n  // set a bigger number for gas tank / approvals so on\n  // L2s it could calculate the preVerificationGas better\n  const gasTankOrApproveAmount = 500n * BigInt(feeToken.decimals)\n\n  if (feeToken.flags.onGasTank) {\n    return {\n      to: FEE_COLLECTOR,\n      value: 0n,\n      data: abiCoder.encode(\n        ['string', 'uint256', 'string'],\n        ['gasTank', gasTankOrApproveAmount, feeToken.symbol]\n      )\n    }\n  }\n\n  if (feeToken.address === ZeroAddress) {\n    // native payment\n    return {\n      to: FEE_COLLECTOR,\n      value: 1n,\n      data: '0x'\n    }\n  }\n\n  // token payment\n  return {\n    to: feeToken.address,\n    value: 0n,\n    data: ERC20Interface.encodeFunctionData('approve', [\n      DEPLOYLESS_SIMULATION_FROM,\n      gasTankOrApproveAmount\n    ])\n  }\n}\n\nexport function decodeFeeCall(\n  { to, value, data }: Call,\n  network: Network\n): {\n  address: string\n  amount: bigint\n  isGasTank: boolean\n  chainId: bigint\n} {\n  if (to === FEE_COLLECTOR) {\n    if (data === '0x') {\n      return {\n        address: ZeroAddress,\n        amount: value,\n        isGasTank: false,\n        chainId: network.chainId\n      }\n    }\n\n    const [, amount, symbol] = abiCoder.decode(['string', 'uint256', 'string'], data)\n\n    // Prioritize Ethereum tokens\n    const ethereumToken = gasTankFeeTokens.find(\n      ({ symbol: tSymbol, chainId: tChainId }) =>\n        tSymbol.toLowerCase() === symbol.toLowerCase() && tChainId === 1n\n    )\n    // Fallback to network tokens\n    const networkToken =\n      network.chainId !== 1n\n        ? gasTankFeeTokens.find(\n            ({ symbol: tSymbol, chainId: tChainId }) =>\n              tSymbol.toLowerCase() === symbol.toLowerCase() && tChainId === network.chainId\n          )\n        : null\n    // Fallback to any network token. Example: user paid the fee on Base\n    // with Wrapped Matic (neither Ethereum nor Base token)\n    const anyNetworkToken = gasTankFeeTokens.find(\n      ({ symbol: tSymbol }) => tSymbol.toLowerCase() === symbol.toLowerCase()\n    )\n\n    // This is done for backwards compatibility with the old gas tank. A known flaw\n    // is that it may prioritize the wrong token. Example: a user had paid the fee with\n    // USDT on BSC, but we prioritize the USDT on Ethereum. 18 vs 6 decimals.\n    // There is no way to fix this as the call data doesn't contain the decimals nor\n    // the network of the token.\n    const { address, chainId } = ethereumToken || networkToken || anyNetworkToken || {}\n\n    if (!address)\n      throw new Error(\n        `Unable to find gas tank fee token for symbol ${symbol} and network ${chainId}`\n      )\n\n    return {\n      amount,\n      address,\n      isGasTank: true,\n      chainId: chainId!\n    }\n  }\n\n  const [, amount] = ERC20Interface.decodeFunctionData('transfer', data)\n  return {\n    amount,\n    address: to,\n    isGasTank: false,\n    chainId: network.chainId\n  }\n}\n"]}