{"version":3,"file":"calls.js","sourceRoot":"","sources":["../../../../src/libs/calls/calls.ts"],"names":[],"mappings":";;;;AAAA,mCAAyD;AAEzD,kGAA2D;AAC3D,sDAAsD;AACtD,gDAAgE;AAIhE,SAAgB,UAAU,CAAC,QAAqB;IAC9C,qDAAqD;IACrD,uDAAuD;IACvD,MAAM,sBAAsB,GAAG,UAAU,GAAG,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAA;IAErE,IAAI,QAAQ,CAAC,KAAK,CAAC,SAAS,EAAE;QAC5B,MAAM,QAAQ,GAAG,IAAI,iBAAQ,EAAE,CAAA;QAC/B,OAAO;YACL,EAAE,EAAE,yBAAa;YACjB,KAAK,EAAE,EAAE;YACT,IAAI,EAAE,QAAQ,CAAC,MAAM,CACnB,CAAC,QAAQ,EAAE,SAAS,EAAE,QAAQ,CAAC,EAC/B,CAAC,SAAS,EAAE,sBAAsB,EAAE,QAAQ,CAAC,MAAM,CAAC,CACrD;SACF,CAAA;KACF;IAED,IAAI,QAAQ,CAAC,OAAO,KAAK,oBAAW,EAAE;QACpC,iBAAiB;QACjB,OAAO;YACL,EAAE,EAAE,yBAAa;YACjB,KAAK,EAAE,EAAE;YACT,IAAI,EAAE,IAAI;SACX,CAAA;KACF;IAED,gBAAgB;IAChB,MAAM,cAAc,GAAG,IAAI,kBAAS,CAAC,qBAAK,CAAC,GAAG,CAAC,CAAA;IAC/C,OAAO;QACL,EAAE,EAAE,QAAQ,CAAC,OAAO;QACpB,KAAK,EAAE,EAAE;QACT,IAAI,EAAE,cAAc,CAAC,kBAAkB,CAAC,SAAS,EAAE;YACjD,mCAA0B;YAC1B,sBAAsB;SACvB,CAAC;KACH,CAAA;AACH,CAAC;AApCD,gCAoCC","sourcesContent":["import { AbiCoder, Interface, ZeroAddress } from 'ethers'\n\nimport ERC20 from '../../../contracts/compiled/IERC20.json'\nimport { FEE_COLLECTOR } from '../../consts/addresses'\nimport { DEPLOYLESS_SIMULATION_FROM } from '../../consts/deploy'\nimport { Call } from '../accountOp/types'\nimport { TokenResult } from '../portfolio'\n\nexport function getFeeCall(feeToken: TokenResult): Call {\n  // set a bigger number for gas tank / approvals so on\n  // L2s it could calculate the preVerificationGas better\n  const gasTankOrApproveAmount = 500000000n * BigInt(feeToken.decimals)\n\n  if (feeToken.flags.onGasTank) {\n    const abiCoder = new AbiCoder()\n    return {\n      to: FEE_COLLECTOR,\n      value: 0n,\n      data: abiCoder.encode(\n        ['string', 'uint256', 'string'],\n        ['gasTank', gasTankOrApproveAmount, feeToken.symbol]\n      )\n    }\n  }\n\n  if (feeToken.address === ZeroAddress) {\n    // native payment\n    return {\n      to: FEE_COLLECTOR,\n      value: 1n,\n      data: '0x'\n    }\n  }\n\n  // token payment\n  const ERC20Interface = new Interface(ERC20.abi)\n  return {\n    to: feeToken.address,\n    value: 0n,\n    data: ERC20Interface.encodeFunctionData('approve', [\n      DEPLOYLESS_SIMULATION_FROM,\n      gasTankOrApproveAmount\n    ])\n  }\n}\n"]}