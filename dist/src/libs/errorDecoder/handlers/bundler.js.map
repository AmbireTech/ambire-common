{"version":3,"file":"bundler.js","sourceRoot":"","sources":["../../../../../src/libs/errorDecoder/handlers/bundler.ts"],"names":[],"mappings":"AAAA,2CAA2C;AAC3C,OAAO,EAA8B,SAAS,EAAE,MAAM,UAAU,CAAA;AAEhE,MAAM,mBAAmB;IAChB,OAAO,CAAC,IAAY,EAAE,KAAU;QACrC,MAAM,EAAE,OAAO,EAAE,GAAG,KAAK,EAAE,KAAK,IAAI,KAAK,IAAI,EAAE,CAAA;QAE/C,OAAO,CACL,OAAO,CAAC,QAAQ,CAAC,uDAAuD,CAAC;YACzE,OAAO,CAAC,QAAQ,CAAC,kCAAkC,CAAC;YACpD,OAAO,CAAC,QAAQ,CAAC,8CAA8C,CAAC;YAChE,OAAO,CAAC,QAAQ,CAAC,qCAAqC,CAAC,CACxD,CAAA;IACH,CAAC;IAEM,MAAM,CAAC,IAAY,EAAE,KAAU;QACpC,MAAM,EAAE,OAAO,EAAE,GAAG,KAAK,EAAE,KAAK,IAAI,KAAK,IAAI,EAAE,CAAA;QAC/C,IAAI,MAAM,GAAG,EAAE,CAAA;QAEf,IAAI,OAAO,CAAC,QAAQ,CAAC,kCAAkC,CAAC,EAAE;YACxD,MAAM,GAAG,kCAAkC,CAAA;SAC5C;aAAM;YACL,MAAM,4BAA4B,GAChC,2DAA2D,CAAA;YAC7D,MAAM,4BAA4B,GAAG,kDAAkD,CAAA;YACvF,MAAM,0BAA0B,GAAG,yCAAyC,CAAA;YAC5E,MAAM,OAAO,GAAG;gBACd,4BAA4B;gBAC5B,4BAA4B;gBAC5B,0BAA0B;aAC3B,CAAA;YAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACvC,MAAM,KAAK,GAAG,OAAO,CAAC,CAAC,CAAC,CAAA;gBACxB,IAAI,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;oBACvB,MAAM,mBAAmB,GAAG,iBAAiB,CAAA;oBAC7C,MAAM,GAAG,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAA;oBACnC,kEAAkE;oBAClE,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,mBAAmB,EAAE,EAAE,CAAC,CAAA;oBAChD,MAAK;iBACN;aACF;SACF;QAED,OAAO;YACL,IAAI,EAAE,SAAS,CAAC,YAAY;YAC5B,MAAM;YACN,IAAI,EAAE,MAAM;SACb,CAAA;IACH,CAAC;CACF;AAED,eAAe,mBAAmB,CAAA","sourcesContent":["/* eslint-disable class-methods-use-this */\nimport { DecodedError, ErrorHandler, ErrorType } from '../types'\n\nclass BundlerErrorHandler implements ErrorHandler {\n  public matches(data: string, error: any) {\n    const { message } = error?.error || error || {}\n\n    return (\n      message.includes('UserOperation reverted during simulation with reason:') ||\n      message.includes('pimlico_getUserOperationGasPrice') ||\n      message.includes('UserOperation failed validation with reason:') ||\n      message.includes('UserOperation reverted with reason:')\n    )\n  }\n\n  public handle(data: string, error: any): DecodedError {\n    const { message } = error?.error || error || {}\n    let reason = ''\n\n    if (message.includes('pimlico_getUserOperationGasPrice')) {\n      reason = 'pimlico_getUserOperationGasPrice'\n    } else {\n      const userOperationSimulationRegex =\n        /UserOperation reverted during simulation with reason:\\s*/i\n      const userOperationValidationRegex = /UserOperation failed validation with reason:\\s*/i\n      const userOperationRevertedRegex = /UserOperation reverted with reason:\\s*/i\n      const regexes = [\n        userOperationSimulationRegex,\n        userOperationValidationRegex,\n        userOperationRevertedRegex\n      ]\n\n      for (let i = 0; i < regexes.length; i++) {\n        const regex = regexes[i]\n        if (regex.test(message)) {\n          const EntryPointErrorCode = /AA[0-9]{1,2}\\s?/\n          reason = message.replace(regex, '')\n          // Remove error codes like AA1, AA2, etc. and the space after them\n          reason = reason.replace(EntryPointErrorCode, '')\n          break\n        }\n      }\n    }\n\n    return {\n      type: ErrorType.BundlerError,\n      reason,\n      data: reason\n    }\n  }\n}\n\nexport default BundlerErrorHandler\n"]}