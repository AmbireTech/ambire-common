{"version":3,"file":"custom.js","sourceRoot":"","sources":["../../../../../src/libs/errorDecoder/handlers/custom.ts"],"names":[],"mappings":";;AAAA,2CAA2C;AAC3C,4CAA+D;AAC/D,oCAAgE;AAEhE,gDAAgD;AAChD,MAAM,kBAAkB;IACf,OAAO,CAAC,IAAY;QACzB,OAAO,CACL,CAAC,CAAC,IAAI;YACN,IAAI,KAAK,IAAI;YACb,CAAC,IAAI,EAAE,UAAU,CAAC,wBAAY,CAAC;YAC/B,CAAC,IAAI,EAAE,UAAU,CAAC,8BAAkB,CAAC,CACtC,CAAA;IACH,CAAC;IAEM,MAAM,CAAC,IAAY;QACxB,OAAO;YACL,IAAI,EAAE,iBAAS,CAAC,WAAW;YAC3B,kDAAkD;YAClD,2DAA2D;YAC3D,6DAA6D;YAC7D,MAAM,EAAE,IAAI;YACZ,IAAI;SACL,CAAA;IACH,CAAC;CACF;AAED,kBAAe,kBAAkB,CAAA","sourcesContent":["/* eslint-disable class-methods-use-this */\nimport { ERROR_PREFIX, PANIC_ERROR_PREFIX } from '../constants'\nimport { DecodedError, ErrorHandler, ErrorType } from '../types'\n\n/** Handles custom errors thrown by contracts */\nclass CustomErrorHandler implements ErrorHandler {\n  public matches(data: string) {\n    return (\n      !!data &&\n      data !== '0x' &&\n      !data?.startsWith(ERROR_PREFIX) &&\n      !data?.startsWith(PANIC_ERROR_PREFIX)\n    )\n  }\n\n  public handle(data: string): DecodedError {\n    return {\n      type: ErrorType.CustomError,\n      // Custom errors do not provide a specific reason.\n      // Therefore, we return the raw data in hexadecimal format,\n      // which can be used to map to a corresponding error message.\n      reason: data,\n      data\n    }\n  }\n}\n\nexport default CustomErrorHandler\n"]}