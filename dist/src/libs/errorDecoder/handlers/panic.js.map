{"version":3,"file":"panic.js","sourceRoot":"","sources":["../../../../../src/libs/errorDecoder/handlers/panic.ts"],"names":[],"mappings":"AAAA,2CAA2C;AAC3C,OAAO,EAAE,QAAQ,EAAE,aAAa,EAAE,MAAM,QAAQ,CAAA;AAEhD,OAAO,EAAE,kBAAkB,EAAE,MAAM,cAAc,CAAA;AACjD,OAAO,EAAE,sBAAsB,EAAE,MAAM,YAAY,CAAA;AACnD,OAAO,EAA8B,SAAS,EAAE,MAAM,UAAU,CAAA;AAEhE,MAAM,iBAAiB;IACd,OAAO,CAAC,IAAY;QACzB,OAAO,IAAI,EAAE,UAAU,CAAC,kBAAkB,CAAC,CAAA;IAC7C,CAAC;IAEM,MAAM,CAAC,IAAY;QACxB,MAAM,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAA;QAC3D,MAAM,GAAG,GAAG,IAAI,QAAQ,EAAE,CAAA;QAC1B,IAAI;YACF,MAAM,QAAQ,GAAG,aAAa,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAA;YACrD,MAAM,IAAI,GAAG,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,KAAK,aAAa,EAAE,CAAC,CAAA;YAC9D,MAAM,MAAM,GAAG,sBAAsB,CAAC,IAAI,CAAC,CAAC,CAAW,CAAC,IAAI,oBAAoB,CAAA;YAEhF,OAAO;gBACL,IAAI,EAAE,SAAS,CAAC,UAAU;gBAC1B,MAAM;gBACN,IAAI;aACL,CAAA;SACF;QAAC,OAAO,CAAC,EAAE;YACV,OAAO,CAAC,KAAK,CAAC,8BAA8B,EAAE,CAAC,CAAC,CAAA;YAChD,OAAO;gBACL,IAAI,EAAE,SAAS,CAAC,UAAU;gBAC1B,MAAM,EAAE,8BAA8B;gBACtC,IAAI;aACL,CAAA;SACF;IACH,CAAC;CACF;AAED,eAAe,iBAAiB,CAAA","sourcesContent":["/* eslint-disable class-methods-use-this */\nimport { AbiCoder, ErrorFragment } from 'ethers'\n\nimport { PANIC_ERROR_PREFIX } from '../constants'\nimport { panicErrorCodeToReason } from '../helpers'\nimport { DecodedError, ErrorHandler, ErrorType } from '../types'\n\nclass PanicErrorHandler implements ErrorHandler {\n  public matches(data: string): boolean {\n    return data?.startsWith(PANIC_ERROR_PREFIX)\n  }\n\n  public handle(data: string): DecodedError {\n    const encodedReason = data.slice(PANIC_ERROR_PREFIX.length)\n    const abi = new AbiCoder()\n    try {\n      const fragment = ErrorFragment.from('Panic(uint256)')\n      const args = abi.decode(fragment.inputs, `0x${encodedReason}`)\n      const reason = panicErrorCodeToReason(args[0] as bigint) ?? 'Unknown panic code'\n\n      return {\n        type: ErrorType.PanicError,\n        reason,\n        data\n      }\n    } catch (e) {\n      console.error('Failed to decode panic error', e)\n      return {\n        type: ErrorType.PanicError,\n        reason: 'Failed to decode panic error',\n        data\n      }\n    }\n  }\n}\n\nexport default PanicErrorHandler\n"]}