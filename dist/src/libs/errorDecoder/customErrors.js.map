{"version":3,"file":"customErrors.js","sourceRoot":"","sources":["../../../../src/libs/errorDecoder/customErrors.ts"],"names":[],"mappings":";AAAA,yCAAyC;;;AAEzC,mCAAoC;AAMpC,MAAM,qBAAsB,SAAQ,KAAK;IAChC,IAAI,GAAW,EAAE,CAAA;IAEjB,KAAK,CAAQ;IAEb,oBAAoB,CAAoB;IAExC,OAAO,CAAS;IAEvB,YAAY,OAAe,EAAE,KAAa,EAAE,OAAgB,EAAE,oBAA6B;QACzF,KAAK,CAAC,OAAO,CAAC,CAAA;QACd,IAAI,CAAC,IAAI,GAAG,uBAAuB,CAAA;QACnC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAA;QAClB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAA;QACtB,IAAI,CAAC,oBAAoB,GAAG,oBAAoB,CAAA;QAChD,4CAA4C;QAC5C,2DAA2D;QAC3D,IAAI,IAAA,oBAAW,EAAC,OAAO,CAAC,EAAE;YACxB,IAAI,CAAC,IAAI,GAAG,OAAO,CAAA;SACpB;IACH,CAAC;CACF;AAqCQ,sDAAqB;AAnC9B,MAAM,qBAAsB,SAAQ,KAAK;IACvC,YAAY,KAAU;QACpB,IAAI,OAAO,GAAG,EAAE,CAAA;QAChB,IAAI,KAAK,CAAC,UAAU,IAAI,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE;YAC3C,OAAO,GAAG,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,OAAO,CAAA;SACtC;aAAM,IAAI,KAAK,CAAC,OAAO,EAAE;YACxB,OAAO,GAAG,KAAK,CAAC,OAAO,CAAA;SACxB;QAED,KAAK,CAAC,OAAO,CAAC,CAAA;QACd,IAAI,CAAC,IAAI,GAAG,gBAAgB,CAAA;QAC5B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAA;IACxB,CAAC;CACF;AAsB+B,sDAAqB;AApBrD,MAAM,yBAA0B,SAAQ,KAAK;IAC3C;QACE,MAAM,OAAO,GAAG,qBAAqB,CAAA;QACrC,KAAK,CAAC,OAAO,CAAC,CAAA;QACd,IAAI,CAAC,IAAI,GAAG,2BAA2B,CAAA;QACvC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAA;IACxB,CAAC;CACF;AAasD,8DAAyB;AAXhF,MAAM,YAAa,SAAQ,KAAK;IAC9B,WAAW,CAAS;IAEpB,YAAY,OAAe,EAAE,WAAoB;QAC/C,KAAK,CAAC,OAAO,CAAC,CAAA;QACd,IAAI,CAAC,WAAW,GAAG,WAAW,CAAA;QAC9B,IAAI,CAAC,IAAI,GAAG,cAAc,CAAA;QAC1B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAA;IACxB,CAAC;CACF;AAEiF,oCAAY","sourcesContent":["/* eslint-disable max-classes-per-file */\n\nimport { isHexString } from 'ethers'\n\nimport { BUNDLER } from '../../consts/bundlers'\nimport { Network } from '../../interfaces/network'\nimport { Call } from '../accountOp/types'\n\nclass InnerCallFailureError extends Error {\n  public data: string = ''\n\n  public calls: Call[]\n\n  public nativePortfolioValue: bigint | undefined\n\n  public network: Network\n\n  constructor(message: string, calls: Call[], network: Network, nativePortfolioValue?: bigint) {\n    super(message)\n    this.name = 'InnerCallFailureError'\n    this.calls = calls\n    this.network = network\n    this.nativePortfolioValue = nativePortfolioValue\n    // If the message is a hex string pass it to\n    // the data field so it can be used by other error handlers\n    if (isHexString(message)) {\n      this.data = message\n    }\n  }\n}\n\nclass RelayerPaymasterError extends Error {\n  constructor(error: any) {\n    let message = ''\n    if (error.errorState && error.errorState[0]) {\n      message = error.errorState[0].message\n    } else if (error.message) {\n      message = error.message\n    }\n\n    super(message)\n    this.name = 'PaymasterError'\n    this.message = message\n  }\n}\n\nclass SponsorshipPaymasterError extends Error {\n  constructor() {\n    const message = 'Sponsorship failed.'\n    super(message)\n    this.name = 'PaymasterSponsorshipError'\n    this.message = message\n  }\n}\n\nclass BundlerError extends Error {\n  bundlerName: BUNDLER\n\n  constructor(message: string, bundlerName: BUNDLER) {\n    super(message)\n    this.bundlerName = bundlerName\n    this.name = 'BundlerError'\n    this.message = message\n  }\n}\n\nexport { InnerCallFailureError, RelayerPaymasterError, SponsorshipPaymasterError, BundlerError }\n"]}