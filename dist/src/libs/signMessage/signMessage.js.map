{"version":3,"file":"signMessage.js","sourceRoot":"","sources":["../../../../src/libs/signMessage/signMessage.ts"],"names":[],"mappings":";;;AA2SA,sCAIC;AA+BD,sCAkHC;AAGD,kDAqBC;AAED,sDAkEC;AAED,gDA+EC;AAGD,gEAOC;AAED,sEAIC;AAGD,oDAaC;AAaD,gCAeC;AAED,8DAWC;AAMD,0CAQC;;AApsBD,sCAAsC;AACtC,mCAiBe;AAEf,gIAA0F;AAE1F,sDAAoF;AAOpF,sGAAqE;AACrE,gFAA+C;AAC/C,+DAA2D;AAC3D,sDAK+B;AAC/B,yDAAyD;AAEzD,kEAAiE;AACjE,mCAAqC;AAErC,gEAAgE;AAChE,iHAAiH;AACjH,sCAAsC;AACtC,MAAM,UAAU,GAAG,kEAAkE,CAAA;AAExE,QAAA,yBAAyB,GAAG;IACvC,YAAY;IACZ,cAAc;IACd,SAAS;IACT,UAAU;IACV,eAAe;IACf,WAAW;IACX,YAAY;IACZ,YAAY;CACb,CAAA;AAED;;;GAGG;AACI,MAAM,eAAe,GAAG,CAAC,SAAiB,EAAE,EAAE;IACnD,OAAO,GAAG,SAAS,IAAI,CAAA;AACzB,CAAC,CAAA;AAFY,QAAA,eAAe,mBAE3B;AAED;;;;;GAKG;AACI,MAAM,YAAY,GAAG,CAAC,SAAiB,EAAE,EAAE;IAChD,OAAO,GAAG,SAAS,IAAI,CAAA;AACzB,CAAC,CAAA;AAFY,QAAA,YAAY,gBAExB;AAED;;;;GAIG;AACI,MAAM,UAAU,GAAG,CAAC,SAAiB,EAAE,UAAkB,EAAE,EAAE;IAClE,MAAM,aAAa,GAAG,GAAG,IAAA,+BAAc,EAAC,IAAA,gBAAO,EAAC,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,IAAA,+BAAc,EAAC,UAAU,CAAC,EAAE,CAAA;IACtF,OAAO,GAAG,SAAS,GAAG,aAAa,IAAI,CAAA;AACzC,CAAC,CAAA;AAHY,QAAA,UAAU,cAGtB;AAUM,MAAM,0BAA0B,GAAG,CACxC,OAAe,EACf,aAAqB,EACrB,SAAkC,EACpB,EAAE;IAChB,MAAM,MAAM,GAAoB;QAC9B,IAAI,EAAE,QAAQ;QACd,OAAO,EAAE,GAAG;QACZ,OAAO,EAAE,OAAO,CAAC,QAAQ,EAAE;QAC3B,iBAAiB,EAAE,aAAa;QAChC,IAAI,EAAE,IAAA,gBAAO,EAAC,CAAC,EAAE,EAAE,CAAC;KACrB,CAAA;IACD,MAAM,KAAK,GAAG;QACZ,YAAY,EAAE;YACZ;gBACE,IAAI,EAAE,MAAM;gBACZ,IAAI,EAAE,QAAQ;aACf;YACD;gBACE,IAAI,EAAE,SAAS;gBACf,IAAI,EAAE,QAAQ;aACf;YACD;gBACE,IAAI,EAAE,SAAS;gBACf,IAAI,EAAE,SAAS;aAChB;YACD;gBACE,IAAI,EAAE,mBAAmB;gBACzB,IAAI,EAAE,SAAS;aAChB;YACD;gBACE,IAAI,EAAE,MAAM;gBACZ,IAAI,EAAE,SAAS;aAChB;SACF;QACD,KAAK,EAAE;YACL,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE;YAC/B,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE;YAClC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE;SAChC;QACD,uBAAuB,EAAE;YACvB,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,EAAE;YACpC,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,EAAE;YACpC,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE;YAClC,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE;SACnC;KACF,CAAA;IAED,OAAO;QACL,IAAI,EAAE,cAAc;QACpB,MAAM;QACN,KAAK;QACL,OAAO,EAAE,SAAS;QAClB,WAAW,EAAE,iBAAiB;KAC/B,CAAA;AACH,CAAC,CAAA;AAvDY,QAAA,0BAA0B,8BAuDtC;AAED;;GAEG;AACI,MAAM,YAAY,GAAG,CAC1B,OAAe,EACf,aAAqB,EACrB,OAAe,EACD,EAAE;IAChB,MAAM,MAAM,GAAoB;QAC9B,IAAI,EAAE,QAAQ;QACd,OAAO,EAAE,GAAG;QACZ,OAAO,EAAE,OAAO,CAAC,QAAQ,EAAE;QAC3B,iBAAiB,EAAE,aAAa;QAChC,IAAI,EAAE,IAAA,gBAAO,EAAC,CAAC,EAAE,EAAE,CAAC;KACrB,CAAA;IACD,MAAM,KAAK,GAAG;QACZ,YAAY,EAAE;YACZ;gBACE,IAAI,EAAE,MAAM;gBACZ,IAAI,EAAE,QAAQ;aACf;YACD;gBACE,IAAI,EAAE,SAAS;gBACf,IAAI,EAAE,QAAQ;aACf;YACD;gBACE,IAAI,EAAE,SAAS;gBACf,IAAI,EAAE,SAAS;aAChB;YACD;gBACE,IAAI,EAAE,mBAAmB;gBACzB,IAAI,EAAE,SAAS;aAChB;YACD;gBACE,IAAI,EAAE,MAAM;gBACZ,IAAI,EAAE,SAAS;aAChB;SACF;QACD,eAAe,EAAE;YACf,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,EAAE;YACpC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE;SAClC;KACF,CAAA;IACD,MAAM,OAAO,GAAG;QACd,OAAO,EAAE,aAAa;QACtB,IAAI,EAAE,OAAO;KACd,CAAA;IAED,OAAO;QACL,IAAI,EAAE,cAAc;QACpB,MAAM;QACN,KAAK;QACL,OAAO;QACP,WAAW,EAAE,iBAAiB;KAC/B,CAAA;AACH,CAAC,CAAA;AApDY,QAAA,YAAY,gBAoDxB;AAED;;GAEG;AACI,MAAM,sBAAsB,GAAG,CACpC,OAAe,EACf,IAAgC,EAChC,YAAiC,EACjC,UAAkB,EACJ,EAAE;IAChB,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;QAC/B,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC;QACV,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC;QACb,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC;KACb,CAAC,CAAC,CAAA;IAEH,MAAM,MAAM,GAAoB;QAC9B,IAAI,EAAE,QAAQ;QACd,OAAO,EAAE,GAAG;QACZ,OAAO;QACP,iBAAiB,EAAE,YAAY,CAAC,MAAM;QACtC,IAAI,EAAE,IAAA,gBAAO,EAAC,CAAC,EAAE,EAAE,CAAC;KACrB,CAAA;IACD,MAAM,KAAK,GAAG;QACZ,WAAW,EAAE;YACX,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE;YAC/B,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE;YAClC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE;SAChC;QACD,mBAAmB,EAAE;YACnB,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,EAAE;YACpC,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,EAAE;YACpC,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE;YAClC,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,OAAO,EAAE;YACnC,EAAE,IAAI,EAAE,kBAAkB,EAAE,IAAI,EAAE,SAAS,EAAE;YAC7C,EAAE,IAAI,EAAE,oBAAoB,EAAE,IAAI,EAAE,SAAS,EAAE;YAC/C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,EAAE;YACpC,EAAE,IAAI,EAAE,kBAAkB,EAAE,IAAI,EAAE,OAAO,EAAE;YAC3C,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,OAAO,EAAE;YACnC,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,eAAe,EAAE;YACxC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE;SAClC;KACF,CAAA;IACD,MAAM,OAAO,GAAG;QACd,OAAO,EAAE,YAAY,CAAC,MAAM;QAC5B,OAAO;QACP,KAAK,EAAE,YAAY,CAAC,KAAK;QACzB,QAAQ,EAAE,YAAY,CAAC,QAAQ;QAC/B,gBAAgB,EAAE,YAAY,CAAC,gBAAgB;QAC/C,kBAAkB,EAAE,YAAY,CAAC,kBAAkB;QACnD,OAAO,EAAE,YAAY,CAAC,OAAO;QAC7B,gBAAgB,EAAE,YAAY,CAAC,gBAAgB;QAC/C,QAAQ,EAAE,YAAY,CAAC,QAAQ;QAC/B,KAAK;QACL,IAAI,EAAE,UAAU;KACjB,CAAA;IAED,OAAO;QACL,IAAI,EAAE,cAAc;QACpB,MAAM;QACN,KAAK;QACL,OAAO;QACP,WAAW,EAAE,qBAAqB;KACnC,CAAA;AACH,CAAC,CAAA;AA5DY,QAAA,sBAAsB,0BA4DlC;AAED;;;;;;;;GAQG;AACI,MAAM,sBAAsB,GAAG,CAAC,SAAiB,EAAE,QAAyB,EAAE,EAAE;IACrF,MAAM,GAAG,GAAG,CAAC,2CAA2C,CAAC,CAAA;IACzD,MAAM,KAAK,GAAG,IAAI,kBAAS,CAAC,GAAG,CAAC,CAAA;IAChC,MAAM,eAAe,GAAG,KAAK,CAAC,kBAAkB,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,QAAQ,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAA;IAE9F,MAAM,KAAK,GAAG,IAAI,iBAAQ,EAAE,CAAA;IAE5B,oBAAoB;IACpB,OAAO,CACL,KAAK,CAAC,MAAM,CACV,CAAC,SAAS,EAAE,OAAO,EAAE,OAAO,CAAC,EAC7B,CAAC,QAAQ,CAAC,WAAW,EAAE,eAAe,EAAE,SAAS,CAAC,CACnD,GAAG,UAAU,CACf,CAAA;AACH,CAAC,CAAA;AAdY,QAAA,sBAAsB,0BAclC;AAED,SAAgB,aAAa,CAAC,MAAc;IAC1C,MAAM,GAAG,GAAG,IAAA,+BAAqB,EAAC,MAAM,CAAC,CAAA;IACzC,IAAI,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE;QAAE,GAAG,CAAC,EAAE,CAAC,IAAI,EAAE,CAAA;IAC/B,OAAO,IAAA,gBAAO,EAAC,GAAG,CAAC,CAAA;AACrB,CAAC;AAsBD;;;;;;;;GAQG;AACI,KAAK,UAAU,aAAa,CAAC,EAClC,OAAO,EACP,QAAQ,EACR,MAAM,EACN,SAAS,EACT,OAAO,EACP,aAAa,EACb,SAAS,EACH;IACN,IAAI,WAAmB,CAAA;IAEvB,IAAI,OAAO,EAAE,CAAC;QACZ,IAAI,CAAC;YACH,WAAW,GAAG,IAAA,oBAAW,EAAC,OAAO,CAAC,CAAA;YAClC,IAAI,CAAC,WAAW;gBAAE,MAAM,KAAK,CAAC,iDAAiD,CAAC,CAAA;QAClF,CAAC;QAAC,OAAO,CAAM,EAAE,CAAC;YAChB,MAAM,KAAK,CACT,wJACE,CAAC,EAAE,OAAO,IAAI,SAChB,EAAE,CACH,CAAA;QACH,CAAC;IACH,CAAC;SAAM,IAAI,aAAa,EAAE,CAAC;QACzB,WAAW,GAAG,aAAa,CAAA;IAC7B,CAAC;SAAM,CAAC;QACN,uFAAuF;QACvF,2GAA2G;QAC3G,+EAA+E;QAC/E,IAAI,CAAC,SAAS,EAAE,CAAC;YACf,MAAM,IAAI,KAAK,CAAC,mDAAmD,CAAC,CAAA;QACtE,CAAC;QAED,yEAAyE;QACzE,wEAAwE;QACxE,uEAAuE;QACvE,gCAAgC;QAChC,sDAAsD;QACtD,MAAM,wBAAwB,GAAG,EAAE,GAAG,SAAS,CAAC,KAAK,EAAE,CAAA;QACvD,IAAI,wBAAwB,CAAC,YAAY,EAAE,CAAC;YAC1C,6CAA6C;YAC7C,OAAO,wBAAwB,CAAC,YAAY,CAAA;QAC9C,CAAC;QAED,IAAI,CAAC;YACH,mEAAmE;YACnE,mEAAmE;YACnE,qBAAqB;YACrB,IAAI,yBAAyB,IAAI,SAAS,CAAC,KAAK,EAAE,CAAC;gBACjD,MAAM,uBAAuB,GAAG,SAAS,CAAC,OAAkC,CAAA;gBAC5E,WAAW,GAAG,IAAA,gBAAO,EACnB,IAAA,2BAAe,EACb,uBAAuB,CAAC,IAAI,EAC5B,uBAAuB,CAAC,OAAO,EAC/B,uBAAuB,CAAC,KAAK,EAC7B,uBAAuB,CAAC,KAAK,CAAC,GAAG,CAAC,uBAAW,CAAC,CAC/C,CACF,CAAA;YACH,CAAC;iBAAM,CAAC;gBACN,WAAW,GAAG,yBAAgB,CAAC,IAAI,CACjC,SAAS,CAAC,MAAM,EAChB,wBAAwB,EACxB,SAAS,CAAC,OAAO,CAClB,CAAA;YACH,CAAC;YAED,IAAI,CAAC,WAAW;gBAAE,MAAM,KAAK,CAAC,mDAAmD,CAAC,CAAA;QACpF,CAAC;QAAC,OAAO,CAAM,EAAE,CAAC;YAChB,MAAM,KAAK,CACT,0JACE,CAAC,EAAE,OAAO,IAAI,SAChB,EAAE,CACH,CAAA;QACH,CAAC;IACH,CAAC;IAED,sHAAsH;IACtH,+DAA+D;IAC/D,MAAM,KAAK,GAAG,IAAI,iBAAQ,EAAE,CAAA;IAC5B,IAAI,UAAU,CAAA;IACd,IAAI,CAAC;QACH,MAAM,gBAAgB,GAAG,IAAA,2BAAc,EACrC,QAAQ,EACR,oCAAqB,EACrB,CAAC,OAAO,CAAC,kBAAkB,CAC5B,CAAA;QACD,MAAM,aAAa,GAAG,MAAM,gBAAgB,CAAC,IAAI,CAAC,2BAA2B,EAAE;YAC7E,MAAM;YACN,WAAW;YACX,SAAS;SACV,CAAC,CAAA;QACF,IAAI,aAAa,CAAC,CAAC,CAAC,KAAK,IAAI;YAAE,UAAU,GAAG,MAAM,CAAA;aAC7C,IAAI,aAAa,CAAC,CAAC,CAAC,KAAK,KAAK;YAAE,UAAU,GAAG,MAAM,CAAA;;YACnD,UAAU,GAAG,aAAa,CAAC,CAAC,CAAC,CAAA;IACpC,CAAC;IAAC,OAAO,CAAM,EAAE,CAAC;QAChB,MAAM,IAAI,KAAK,CACb,6KAA6K;QAC3K,oGAAoG;QACpG,CAAC,EAAE,OAAO,IAAI,SAChB,EAAE,CACH,CAAA;IACH,CAAC;IAED,IAAI,UAAU,KAAK,MAAM;QAAE,OAAO,IAAI,CAAA;IACtC,IAAI,UAAU,KAAK,MAAM;QAAE,OAAO,KAAK,CAAA;IACvC,IAAI,UAAU,CAAC,UAAU,CAAC,YAAY,CAAC;QACrC,MAAM,IAAI,KAAK,CACb,qLACE,KAAK,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,EAAE,KAAK,UAAU,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CACzD,EAAE,CACH,CAAA;IAEH,MAAM,IAAI,KAAK,CACb,mOAAmO,UAAU,EAAE,CAChP,CAAA;AACH,CAAC;AAED,4EAA4E;AACrE,KAAK,UAAU,mBAAmB,CACvC,OAAgB,EAChB,SAAoB,EACpB,YAAiC,EACjC,MAA+B;IAE/B,qEAAqE;IACrE,2BAA2B;IAC3B,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;QACvB,MAAM,OAAO,GAAG,IAAA,gBAAO,EAAC,IAAA,iCAAqB,EAAC,SAAS,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC,CAAA;QAC1E,OAAO,IAAA,oBAAY,EAAC,MAAM,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,CAAA;IACxD,CAAC;IAED,2EAA2E;IAC3E,oBAAoB;IACpB,MAAM,SAAS,GAAG,IAAA,oBAAY,EAC5B,OAAO,CAAC,OAAO,EACf,YAAY,CAAC,WAAW,EACxB,IAAA,gBAAO,EAAC,IAAA,iCAAqB,EAAC,SAAS,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC,CAC3D,CAAA;IACD,OAAO,IAAA,oBAAY,EAAC,MAAM,MAAM,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,CAAA;AAC5D,CAAC;AAEM,KAAK,UAAU,qBAAqB,CACzC,OAA4B,EAC5B,OAAgB,EAChB,OAAgB,EAChB,YAAiC,EACjC,MAA+B,EAC/B,IAAI,GAAG,KAAK;IAEZ,MAAM,gBAAgB,GAAG,MAAM,CAAC,GAAG,CAAC,gBAAgB,CAAA;IAEpD,IAAI,UAAU,CAAA;IACd,IAAI,OAAO,YAAY,UAAU,EAAE,CAAC;QAClC,UAAU,GAAG,IAAA,gBAAO,EAAC,OAAO,CAAC,CAAA;IAC/B,CAAC;SAAM,IAAI,CAAC,IAAA,oBAAW,EAAC,OAAO,CAAC,EAAE,CAAC;QACjC,UAAU,GAAG,IAAA,gBAAO,EAAC,IAAA,oBAAW,EAAC,OAAO,CAAC,CAAC,CAAA;IAC5C,CAAC;SAAM,CAAC;QACN,UAAU,GAAG,OAAO,CAAA;IACtB,CAAC;IAED,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;QACtB,MAAM,SAAS,GAAG,MAAM,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,CAAA;QACtD,OAAO,SAAS,CAAA;IAClB,CAAC;IAED,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;QACvB,MAAM,yBAAyB,GAAG,IAAA,gBAAO,EAAC,IAAA,oBAAW,EAAC,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;QAC3F,MAAM,2BAA2B,GAAG,IAAA,gBAAO,EAAC,IAAA,oBAAW,EAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;QAC/E,MAAM,kBAAkB,GAAG,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,CAAA;QACrD,MAAM,gBAAgB,GAAG,OAAO,YAAY,UAAU,CAAC,CAAC,CAAC,IAAA,gBAAO,EAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAA;QAEnF,MAAM,uBAAuB,GAAG,gBAAgB,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,kBAAkB,CAAC,CAAA;QAC3F,MAAM,8BAA8B,GAAG,gBAAgB,CAAC,QAAQ,CAC9D,yBAAyB,CAAC,KAAK,CAAC,CAAC,CAAC,CACnC,CAAA;QACD,MAAM,gCAAgC,GAAG,gBAAgB,CAAC,QAAQ,CAChE,2BAA2B,CAAC,KAAK,CAAC,CAAC,CAAC,CACrC,CAAA;QAED;QACE,0GAA0G;QAC1G,CAAC,IAAI;YACL,CAAC,uBAAuB;YACxB,CAAC,8BAA8B;YAC/B,CAAC,gCAAgC,EACjC,CAAC;YACD,MAAM,IAAI,KAAK,CACb,mFAAmF,CACpF,CAAA;QACH,CAAC;QAED,OAAO,IAAA,uBAAe,EAAC,MAAM,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,CAAA;IAC9D,CAAC;IAED,2BAA2B;IAC3B,IAAI,gBAAgB,EAAE,CAAC;QACrB,OAAO,IAAA,uBAAe,EAAC,MAAM,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,CAAA;IAC9D,CAAC;IAED,2DAA2D;IAC3D,sEAAsE;IACtE,mEAAmE;IACnE,oEAAoE;IACpE,gEAAgE;IAChE,UAAU;IACV,MAAM,SAAS,GAAG,IAAA,oBAAY,EAAC,OAAQ,CAAC,OAAO,EAAE,OAAO,CAAC,IAAI,EAAE,IAAA,oBAAW,EAAC,IAAA,iBAAQ,EAAC,UAAU,CAAC,CAAC,CAAC,CAAA;IACjG,OAAO,IAAA,oBAAY,EAAC,MAAM,MAAM,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,CAAA;AAC5D,CAAC;AAEM,KAAK,UAAU,kBAAkB,CACtC,OAAqB,EACrB,OAAgB,EAChB,YAAiC,EACjC,MAA+B,EAC/B,OAAgB,EAChB,IAAI,GAAG,KAAK;IAEZ,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,YAAY,EAAE,CAAC;QAChC,MAAM,IAAI,KAAK,CACb,wGAAwG,CACzG,CAAA;IACH,CAAC;IACD,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC;QACzB,MAAM,IAAI,KAAK,CACb,8GAA8G,CAC/G,CAAA;IACH,CAAC;IAED,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;QACtB,MAAM,SAAS,GAAG,MAAM,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,CAAA;QACrD,OAAO,SAAS,CAAA;IAClB,CAAC;IAED,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;QACvB,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,CAAA;QACtD;QACE,0GAA0G;QAC1G,CAAC,IAAI;YACL,CAAC,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;YAC9C,CAAC,CACC,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,SAAS;gBACjC,OAAO,CAAC,MAAM,CAAC,iBAAiB;gBAChC,IAAA,mBAAU,EAAC,OAAO,CAAC,MAAM,CAAC,iBAAiB,CAAC,KAAK,4BAAgB;gBACjE,OAAO,CAAC,OAAO;gBACf,OAAO,CAAC,OAAO,CAAC,OAAO;gBACvB,qCAAyB,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;gBAClD,qCAAyB,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,KAAK,IAAA,mBAAU,EAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,CAC3F,EACD,CAAC;YACD,MAAM,IAAI,KAAK,CACb,yIAAyI,CAC1I,CAAA;QACH,CAAC;QAED,OAAO,IAAA,uBAAe,EAAC,MAAM,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,CAAA;IAC7D,CAAC;IAED,+EAA+E;IAC/E,4DAA4D;IAC5D,MAAM,gBAAgB,GAAG,MAAM,CAAC,GAAG,CAAC,gBAAgB,CAAA;IACpD,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACtB,MAAM,IAAI,KAAK,CACb,uBAAuB,MAAM,CAAC,GAAG,CAAC,IAAI,qGAAqG,CAC5I,CAAA;IACH,CAAC;IAED,IAAI,yBAAyB,IAAI,OAAO,CAAC,KAAK,EAAE,CAAC;QAC/C,MAAM,uBAAuB,GAAG,OAAO,CAAC,OAAkC,CAAA;QAC1E,IAAI,IAAA,oBAAU,EAAC,uBAAuB,CAAC,IAAI,EAAE,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC;YAC3D,MAAM,IAAI,KAAK,CACb,yGAAyG,CAC1G,CAAA;QACH,CAAC;QAED,MAAM,IAAI,GAAG,IAAA,gBAAO,EAClB,IAAA,2BAAe,EACb,uBAAuB,CAAC,IAAI,EAC5B,uBAAuB,CAAC,OAAO,EAC/B,uBAAuB,CAAC,KAAK,EAC7B,uBAAuB,CAAC,KAAK,CAAC,GAAG,CAAC,uBAAW,CAAC,CAC/C,CACF,CAAA;QACD,MAAM,eAAe,GAAG,IAAA,oBAAY,EAAC,uBAAuB,CAAC,OAAO,EAAE,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,CAAA;QACzF,MAAM,SAAS,GAAG,IAAA,oBAAY,EAAC,MAAM,MAAM,CAAC,aAAa,CAAC,eAAe,CAAC,CAAC,CAAA;QAC3E,OAAO,IAAA,kBAAU,EAAC,SAAS,EAAE,OAAO,CAAC,IAAI,CAAC,CAAA;IAC5C,CAAC;IAED,OAAO,IAAA,uBAAe,EAAC,MAAM,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,CAAA;AAC7D,CAAC;AAED,sDAAsD;AAC/C,KAAK,UAAU,0BAA0B,CAC9C,IAAe,EACf,OAAe,EACf,KAAa;IAEb,MAAM,IAAI,GAAG,IAAA,2BAAe,EAAC,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,IAAA,uBAAW,EAAC,IAAA,gCAAgB,EAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAA;IACzF,OAAO,IAAA,oBAAY,EAAC,OAAO,EAAE,IAAI,EAAE,IAAA,gBAAO,EAAC,IAAI,CAAC,CAAC,CAAA;AACnD,CAAC;AAED,SAAgB,6BAA6B,CAAC,aAAqB;IACjE,6EAA6E;IAC7E,8EAA8E;IAC9E,OAAO,IAAA,oBAAY,EAAC,aAAa,CAAC,SAAS,CAAC,CAAC,EAAE,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAA;AAC3E,CAAC;AAED,2EAA2E;AAC3E,SAAgB,oBAAoB,CAAC,OAAe,EAAE,YAAiB,EAAE,KAAa;IACpF,OAAO,IAAA,kBAAS,EACd,IAAA,eAAM,EAAC;QACL,MAAM,EAAE,8BAA8B;QACtC,IAAA,kBAAS,EAAC;YACR,wCAAwC;YACxC,OAAO,KAAK,EAAE,CAAC,CAAC,CAAC,IAAA,gBAAO,EAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI;YACxC,YAAY;YACZ,wCAAwC;YACxC,KAAK,KAAK,EAAE,CAAC,CAAC,CAAC,IAAA,gBAAO,EAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI;SACrC,CAAC;KACH,CAAC,CACI,CAAA;AACV,CAAC;AAED,SAAS,qBAAqB,CAC5B,SAAiB,EACjB,OAAgB,EAChB,YAAiC;IAEjC,OAAO,OAAO,CAAC,QAAQ,IAAI,CAAC,YAAY,CAAC,UAAU;QACjD,CAAC,CAAC,0CAA0C;YACzC,IAAA,8BAAsB,EAAC,SAAS,EAAE,OAAO,CAAC,QAAQ,CAAS;QAC9D,CAAC,CAAE,SAAiB,CAAA;AACxB,CAAC;AAED,SAAgB,UAAU,CACxB,OAAe,EACf,KAAa,EACb,cAAmB,EACnB,SAA2B;IAE3B,OAAO;QACL,OAAO,EAAE,cAAc;QACvB,OAAO,EAAE,IAAA,gBAAO,EAAC,OAAO,CAAQ;QAChC,KAAK,EAAE,IAAA,gBAAO,EAAC,KAAK,CAAQ;QAC5B,CAAC,EAAE,SAAS,CAAC,CAAC;QACd,CAAC,EAAE,SAAS,CAAC,CAAC;QACd,CAAC,EAAE,IAAA,mBAAW,EAAC,SAAS,CAAC;QACzB,OAAO,EAAE,SAAS,CAAC,OAAO;KAC3B,CAAA;AACH,CAAC;AAED,SAAgB,yBAAyB,CACvC,SAAoC,EACpC,OAAgB,EAChB,YAAiC;IAEjC,IAAI,IAAA,oBAAW,EAAC,SAAS,CAAC;QAAE,OAAO,qBAAqB,CAAC,SAAS,EAAE,OAAO,EAAE,YAAY,CAAC,CAAA;IAE1F,MAAM,GAAG,GAAG,SAA6B,CAAA;IACzC,yBAAyB;IACzB,MAAM,CAAC,GAAG,IAAA,mBAAW,EAAC,GAAG,CAAC,CAAA;IAC1B,OAAO,IAAA,eAAM,EAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAQ,CAAA;AACzC,CAAC;AAED,+EAA+E;AAC/E,sDAAsD;AACtD,6CAA6C;AAC7C,+DAA+D;AAC/D,SAAgB,eAAe,CAC7B,SAAoC,EACpC,OAAgB,EAChB,YAAiC;IAEjC,IAAI,IAAA,oBAAW,EAAC,SAAS,CAAC;QAAE,OAAO,qBAAqB,CAAC,SAAS,EAAE,OAAO,EAAE,YAAY,CAAC,CAAA;IAE1F,OAAO,SAA6B,CAAA;AACtC,CAAC","sourcesContent":["/* eslint-disable no-param-reassign */\nimport {\n  AbiCoder,\n  concat,\n  encodeRlp,\n  getAddress,\n  getBytes,\n  hashMessage,\n  hexlify,\n  Interface,\n  isHexString,\n  JsonRpcProvider,\n  keccak256,\n  toBeHex,\n  toUtf8Bytes,\n  TypedDataDomain,\n  TypedDataEncoder,\n  TypedDataField\n} from 'ethers'\n\nimport UniversalSigValidator from '../../../contracts/compiled/UniversalSigValidator.json'\nimport { EIP7702Auth } from '../../consts/7702'\nimport { PERMIT_2_ADDRESS, UNISWAP_UNIVERSAL_ROUTERS } from '../../consts/addresses'\nimport { Account, AccountCreation, AccountId, AccountOnchainState } from '../../interfaces/account'\nimport { Hex } from '../../interfaces/hex'\nimport { KeystoreSignerInterface } from '../../interfaces/keystore'\nimport { Network } from '../../interfaces/network'\nimport { EIP7702Signature } from '../../interfaces/signatures'\nimport { TypedMessage } from '../../interfaces/userRequest'\nimport hexStringToUint8Array from '../../utils/hexStringToUint8Array'\nimport isSameAddr from '../../utils/isSameAddr'\nimport { stripHexPrefix } from '../../utils/stripHexPrefix'\nimport {\n  AccountOp,\n  accountOpSignableHash,\n  callToTuple,\n  getSignableHash\n} from '../accountOp/accountOp'\nimport { fromDescriptor } from '../deployless/deployless'\nimport { PackedUserOperation } from '../userOperation/types'\nimport { getActivatorCall } from '../userOperation/userOperation'\nimport { get7702SigV } from './utils'\n\n// EIP6492 signature ends in magicBytes, which ends with a 0x92,\n// which makes it is impossible for it to collide with a valid ecrecover signature if packed in the r,s,v format,\n// as 0x92 is not a valid value for v.\nconst magicBytes = '6492649264926492649264926492649264926492649264926492649264926492'\n\nexport const EIP_1271_NOT_SUPPORTED_BY = [\n  'opensea.io',\n  'paraswap.xyz',\n  'blur.io',\n  'aevo.xyz',\n  'socialscan.io',\n  'tally.xyz',\n  'questn.com',\n  'taskon.xyz'\n]\n\n/**\n * For Unprotected signatures, we need to append 00 at the end\n * for ambire to recognize it\n */\nexport const wrapUnprotected = (signature: string) => {\n  return `${signature}00`\n}\n\n/**\n * For EIP-712 signatures, we need to append 01 at the end\n * for ambire to recognize it.\n * For v1 contracts, we do ETH sign at the 01 slot, which we'll\n * call standard from now on\n */\nexport const wrapStandard = (signature: string) => {\n  return `${signature}01`\n}\n\n/**\n * For v2 accounts acting as signers, we need to append the v2 wallet\n * addr that's the signer and a 02 mode at the end to indicate it's a wallet:\n * {sig+mode}{wallet_32bytes}{mode}\n */\nexport const wrapWallet = (signature: string, walletAddr: string) => {\n  const wallet32bytes = `${stripHexPrefix(toBeHex(0, 12))}${stripHexPrefix(walletAddr)}`\n  return `${signature}${wallet32bytes}02`\n}\n\n// allow v1 accounts to have v2 signers\ninterface AmbireReadableOperation {\n  addr: Hex\n  chainId: bigint\n  nonce: bigint\n  calls: { to: Hex; value: bigint; data: Hex }[]\n}\n\nexport const getAmbireReadableTypedData = (\n  chainId: bigint,\n  verifyingAddr: string,\n  v1Execute: AmbireReadableOperation\n): TypedMessage => {\n  const domain: TypedDataDomain = {\n    name: 'Ambire',\n    version: '1',\n    chainId: chainId.toString(),\n    verifyingContract: verifyingAddr,\n    salt: toBeHex(0, 32)\n  }\n  const types = {\n    EIP712Domain: [\n      {\n        name: 'name',\n        type: 'string'\n      },\n      {\n        name: 'version',\n        type: 'string'\n      },\n      {\n        name: 'chainId',\n        type: 'uint256'\n      },\n      {\n        name: 'verifyingContract',\n        type: 'address'\n      },\n      {\n        name: 'salt',\n        type: 'bytes32'\n      }\n    ],\n    Calls: [\n      { name: 'to', type: 'address' },\n      { name: 'value', type: 'uint256' },\n      { name: 'data', type: 'bytes' }\n    ],\n    AmbireReadableOperation: [\n      { name: 'account', type: 'address' },\n      { name: 'chainId', type: 'uint256' },\n      { name: 'nonce', type: 'uint256' },\n      { name: 'calls', type: 'Calls[]' }\n    ]\n  }\n\n  return {\n    kind: 'typedMessage',\n    domain,\n    types,\n    message: v1Execute,\n    primaryType: 'AmbireOperation'\n  }\n}\n\n/**\n * Return the typed data for EIP-712 sign\n */\nexport const getTypedData = (\n  chainId: bigint,\n  verifyingAddr: string,\n  msgHash: string\n): TypedMessage => {\n  const domain: TypedDataDomain = {\n    name: 'Ambire',\n    version: '1',\n    chainId: chainId.toString(),\n    verifyingContract: verifyingAddr,\n    salt: toBeHex(0, 32)\n  }\n  const types = {\n    EIP712Domain: [\n      {\n        name: 'name',\n        type: 'string'\n      },\n      {\n        name: 'version',\n        type: 'string'\n      },\n      {\n        name: 'chainId',\n        type: 'uint256'\n      },\n      {\n        name: 'verifyingContract',\n        type: 'address'\n      },\n      {\n        name: 'salt',\n        type: 'bytes32'\n      }\n    ],\n    AmbireOperation: [\n      { name: 'account', type: 'address' },\n      { name: 'hash', type: 'bytes32' }\n    ]\n  }\n  const message = {\n    account: verifyingAddr,\n    hash: msgHash\n  }\n\n  return {\n    kind: 'typedMessage',\n    domain,\n    types,\n    message,\n    primaryType: 'AmbireOperation'\n  }\n}\n\n/**\n * Return the typed data for EIP-712 sign\n */\nexport const get7702UserOpTypedData = (\n  chainId: bigint,\n  txns: [string, string, string][],\n  packedUserOp: PackedUserOperation,\n  userOpHash: string\n): TypedMessage => {\n  const calls = txns.map((txn) => ({\n    to: txn[0],\n    value: txn[1],\n    data: txn[2]\n  }))\n\n  const domain: TypedDataDomain = {\n    name: 'Ambire',\n    version: '1',\n    chainId,\n    verifyingContract: packedUserOp.sender,\n    salt: toBeHex(0, 32)\n  }\n  const types = {\n    Transaction: [\n      { name: 'to', type: 'address' },\n      { name: 'value', type: 'uint256' },\n      { name: 'data', type: 'bytes' }\n    ],\n    Ambire4337AccountOp: [\n      { name: 'account', type: 'address' },\n      { name: 'chainId', type: 'uint256' },\n      { name: 'nonce', type: 'uint256' },\n      { name: 'initCode', type: 'bytes' },\n      { name: 'accountGasLimits', type: 'bytes32' },\n      { name: 'preVerificationGas', type: 'uint256' },\n      { name: 'gasFees', type: 'bytes32' },\n      { name: 'paymasterAndData', type: 'bytes' },\n      { name: 'callData', type: 'bytes' },\n      { name: 'calls', type: 'Transaction[]' },\n      { name: 'hash', type: 'bytes32' }\n    ]\n  }\n  const message = {\n    account: packedUserOp.sender,\n    chainId,\n    nonce: packedUserOp.nonce,\n    initCode: packedUserOp.initCode,\n    accountGasLimits: packedUserOp.accountGasLimits,\n    preVerificationGas: packedUserOp.preVerificationGas,\n    gasFees: packedUserOp.gasFees,\n    paymasterAndData: packedUserOp.paymasterAndData,\n    callData: packedUserOp.callData,\n    calls,\n    hash: userOpHash\n  }\n\n  return {\n    kind: 'typedMessage',\n    domain,\n    types,\n    message,\n    primaryType: 'Ambire4337AccountOp'\n  }\n}\n\n/**\n * Produce EIP6492 signature for Predeploy Contracts\n *\n * More info: https://eips.ethereum.org/EIPS/eip-6492\n *\n * @param {string} signature - origin ERC-1271 signature\n * @param {object} account\n * @returns {string} - EIP6492 signature\n */\nexport const wrapCounterfactualSign = (signature: string, creation: AccountCreation) => {\n  const ABI = ['function deploy(bytes code, uint256 salt)']\n  const iface = new Interface(ABI)\n  const factoryCallData = iface.encodeFunctionData('deploy', [creation.bytecode, creation.salt])\n\n  const coder = new AbiCoder()\n\n  // EIP6492 signature\n  return (\n    coder.encode(\n      ['address', 'bytes', 'bytes'],\n      [creation.factoryAddr, factoryCallData, signature]\n    ) + magicBytes\n  )\n}\n\nexport function mapSignatureV(sigRaw: string) {\n  const sig = hexStringToUint8Array(sigRaw)\n  if (sig[64] < 27) sig[64] += 27\n  return hexlify(sig)\n}\n\n// Either `message` or `typedData` must be provided - never both.\ntype Props = {\n  network: Network\n  provider: JsonRpcProvider\n  signer: string\n  signature: string | Uint8Array\n} & (\n  | { message: string | Uint8Array; typedData?: never; authorization?: never }\n  | {\n      typedData: {\n        domain: TypedDataDomain\n        types: Record<string, Array<TypedDataField>>\n        message: Record<string, any>\n      }\n      message?: never\n      authorization?: never\n    }\n  | { message?: never; typedData?: never; authorization: Hex }\n)\n\n/**\n * Verifies the signature of a message using the provided signer and signature\n * via a \"magic\" universal validator contract using the provided provider to\n * verify the signature on-chain. The contract deploys itself within the\n * `eth_call`, tries to verify the signature using ERC-6492, ERC-1271, and\n * `ecrecover`, and returns the value to the function.\n *\n * Note: you only need to pass one of: `message` or `typedData`\n */\nexport async function verifyMessage({\n  network,\n  provider,\n  signer,\n  signature,\n  message,\n  authorization,\n  typedData\n}: Props): Promise<boolean> {\n  let finalDigest: string\n\n  if (message) {\n    try {\n      finalDigest = hashMessage(message)\n      if (!finalDigest) throw Error('Hashing the message returned no (falsy) result.')\n    } catch (e: any) {\n      throw Error(\n        `Preparing the just signed (standard) message for validation failed. Please try again or contact Ambire support if the issue persists. Error details: ${\n          e?.message || 'missing'\n        }`\n      )\n    }\n  } else if (authorization) {\n    finalDigest = authorization\n  } else {\n    // According to the Props definition, either `message` or `typedData` must be provided.\n    // However, TypeScript struggles with this `else` condition, incorrectly treating `typedData` as undefined.\n    // To prevent TypeScript from complaining, we've added this runtime validation.\n    if (!typedData) {\n      throw new Error(\"Either 'message' or 'typedData' must be provided.\")\n    }\n\n    // To resolve the \"ambiguous primary types or unused types\" error, remove\n    // the `EIP712Domain` from `types` object. The domain type is inbuilt in\n    // the EIP712 standard and hence TypedDataEncoder so you do not need to\n    // specify it in the types, see:\n    // {@link https://ethereum.stackexchange.com/a/151930}\n    const typesWithoutEIP712Domain = { ...typedData.types }\n    if (typesWithoutEIP712Domain.EIP712Domain) {\n      // eslint-disable-next-line no-param-reassign\n      delete typesWithoutEIP712Domain.EIP712Domain\n    }\n\n    try {\n      // the final digest for AmbireReadableOperation is the execute hash\n      // as it's wrapped in mode.standard and onchain gets transformed to\n      // an AmbireOperation\n      if ('AmbireReadableOperation' in typedData.types) {\n        const ambireReadableOperation = typedData.message as AmbireReadableOperation\n        finalDigest = hexlify(\n          getSignableHash(\n            ambireReadableOperation.addr,\n            ambireReadableOperation.chainId,\n            ambireReadableOperation.nonce,\n            ambireReadableOperation.calls.map(callToTuple)\n          )\n        )\n      } else {\n        finalDigest = TypedDataEncoder.hash(\n          typedData.domain,\n          typesWithoutEIP712Domain,\n          typedData.message\n        )\n      }\n\n      if (!finalDigest) throw Error('Hashing the typedData returned no (falsy) result.')\n    } catch (e: any) {\n      throw Error(\n        `Preparing the just signed (typed data) message for validation failed. Please try again or contact Ambire support if the issue persists. Error details: ${\n          e?.message || 'missing'\n        }`\n      )\n    }\n  }\n\n  // this 'magic' universal validator contract will deploy itself within the eth_call, try to verify the signature using\n  // ERC-6492, ERC-1271 and ecrecover, and return the value to us\n  const coder = new AbiCoder()\n  let callResult\n  try {\n    const deploylessVerify = fromDescriptor(\n      provider,\n      UniversalSigValidator,\n      !network.rpcNoStateOverride\n    )\n    const deploylessRes = await deploylessVerify.call('isValidSigWithSideEffects', [\n      signer,\n      finalDigest,\n      signature\n    ])\n    if (deploylessRes[0] === true) callResult = '0x01'\n    else if (deploylessRes[0] === false) callResult = '0x00'\n    else callResult = deploylessRes[0]\n  } catch (e: any) {\n    throw new Error(\n      `Validating the just signed message failed. Please try again or contact Ambire support if the issue persists. Error details: UniversalValidator call failed, more details: ${\n        // TODO: Use the `reason` from the decodeError(e) instead, when this case is better handled in there\n        e?.message || 'missing'\n      }`\n    )\n  }\n\n  if (callResult === '0x01') return true\n  if (callResult === '0x00') return false\n  if (callResult.startsWith('0x08c379a0'))\n    throw new Error(\n      `Ambire failed to validate the signature. Please make sure you are signing with the correct key or device. If the problem persists, please contact Ambire support. Error details:: ${\n        coder.decode(['string'], `0x${callResult.slice(10)}`)[0]\n      }`\n    )\n\n  throw new Error(\n    `Ambire failed to validate the signature. Please make sure you are signing with the correct key or device. If the problem persists, please contact Ambire support. Error details: unexpected result from the UniversalValidator: ${callResult}`\n  )\n}\n\n// Authorize the execute calls according to the version of the smart account\nexport async function getExecuteSignature(\n  network: Network,\n  accountOp: AccountOp,\n  accountState: AccountOnchainState,\n  signer: KeystoreSignerInterface\n) {\n  // if we're authorizing calls for a v1 contract, we do a sign message\n  // on the hash of the calls\n  if (!accountState.isV2) {\n    const message = hexlify(accountOpSignableHash(accountOp, network.chainId))\n    return wrapStandard(await signer.signMessage(message))\n  }\n\n  // txns for v2 contracts are always eip-712 so we put the hash of the calls\n  // in eip-712 format\n  const typedData = getTypedData(\n    network.chainId,\n    accountState.accountAddr,\n    hexlify(accountOpSignableHash(accountOp, network.chainId))\n  )\n  return wrapStandard(await signer.signTypedData(typedData))\n}\n\nexport async function getPlainTextSignature(\n  message: string | Uint8Array,\n  network: Network,\n  account: Account,\n  accountState: AccountOnchainState,\n  signer: KeystoreSignerInterface,\n  isOG = false\n): Promise<string> {\n  const dedicatedToOneSA = signer.key.dedicatedToOneSA\n\n  let messageHex\n  if (message instanceof Uint8Array) {\n    messageHex = hexlify(message)\n  } else if (!isHexString(message)) {\n    messageHex = hexlify(toUtf8Bytes(message))\n  } else {\n    messageHex = message\n  }\n\n  if (!account.creation) {\n    const signature = await signer.signMessage(messageHex)\n    return signature\n  }\n\n  if (!accountState.isV2) {\n    const lowercaseHexAddrWithout0x = hexlify(toUtf8Bytes(account.addr.toLowerCase().slice(2)))\n    const checksummedHexAddrWithout0x = hexlify(toUtf8Bytes(account.addr.slice(2)))\n    const asciiAddrLowerCase = account.addr.toLowerCase()\n    const humanReadableMsg = message instanceof Uint8Array ? hexlify(message) : message\n\n    const isAsciiAddressInMessage = humanReadableMsg.toLowerCase().includes(asciiAddrLowerCase)\n    const isLowercaseHexAddressInMessage = humanReadableMsg.includes(\n      lowercaseHexAddrWithout0x.slice(2)\n    )\n    const isChecksummedHexAddressInMessage = humanReadableMsg.includes(\n      checksummedHexAddrWithout0x.slice(2)\n    )\n\n    if (\n      // @NOTE: isOG is to allow tem members to sign anything with v1 accounts regardless of safety and security\n      !isOG &&\n      !isAsciiAddressInMessage &&\n      !isLowercaseHexAddressInMessage &&\n      !isChecksummedHexAddressInMessage\n    ) {\n      throw new Error(\n        'Signing messages is disallowed for v1 accounts. Please contact support to proceed'\n      )\n    }\n\n    return wrapUnprotected(await signer.signMessage(messageHex))\n  }\n\n  // if it's safe, we proceed\n  if (dedicatedToOneSA) {\n    return wrapUnprotected(await signer.signMessage(messageHex))\n  }\n\n  // in case of only_standard priv key, we transform the data\n  // for signing to EIP-712. This is because the key is not labeled safe\n  // and it should inform the user that he's performing an Ambire Op.\n  // This is important as this key could be a metamask one and someone\n  // could be phishing him into approving an Ambire Op without him\n  // knowing\n  const typedData = getTypedData(network!.chainId, account.addr, hashMessage(getBytes(messageHex)))\n  return wrapStandard(await signer.signTypedData(typedData))\n}\n\nexport async function getEIP712Signature(\n  message: TypedMessage,\n  account: Account,\n  accountState: AccountOnchainState,\n  signer: KeystoreSignerInterface,\n  network: Network,\n  isOG = false\n): Promise<string> {\n  if (!message.types.EIP712Domain) {\n    throw new Error(\n      'Ambire only supports signing EIP712 typed data messages. Please try again with a valid EIP712 message.'\n    )\n  }\n  if (!message.primaryType) {\n    throw new Error(\n      'The primaryType is missing in the typed data message incoming. Please try again with a valid EIP712 message.'\n    )\n  }\n\n  if (!account.creation) {\n    const signature = await signer.signTypedData(message)\n    return signature\n  }\n\n  if (!accountState.isV2) {\n    const asString = JSON.stringify(message).toLowerCase()\n    if (\n      // @NOTE: isOG is to allow tem members to sign anything with v1 accounts regardless of safety and security\n      !isOG &&\n      !asString.includes(account.addr.toLowerCase()) &&\n      !(\n        message.domain.name === 'Permit2' &&\n        message.domain.verifyingContract &&\n        getAddress(message.domain.verifyingContract) === PERMIT_2_ADDRESS &&\n        message.message &&\n        message.message.spender &&\n        UNISWAP_UNIVERSAL_ROUTERS[Number(network.chainId)] &&\n        UNISWAP_UNIVERSAL_ROUTERS[Number(network.chainId)] === getAddress(message.message.spender)\n      )\n    ) {\n      throw new Error(\n        'Signing this eip-712 message is disallowed for v1 accounts as it does not contain the smart account address and therefore deemed unsafe'\n      )\n    }\n\n    return wrapUnprotected(await signer.signTypedData(message))\n  }\n\n  // we do not allow signers who are not dedicated to one account to sign eip-712\n  // messsages in v2 as it could lead to reusing that key from\n  const dedicatedToOneSA = signer.key.dedicatedToOneSA\n  if (!dedicatedToOneSA) {\n    throw new Error(\n      `Signer with address ${signer.key.addr} does not have privileges to execute this operation. Please choose a different signer and try again`\n    )\n  }\n\n  if ('AmbireReadableOperation' in message.types) {\n    const ambireReadableOperation = message.message as AmbireReadableOperation\n    if (isSameAddr(ambireReadableOperation.addr, account.addr)) {\n      throw new Error(\n        'signature error: trying to sign an AmbireReadableOperation for the same address. Please contact support'\n      )\n    }\n\n    const hash = hexlify(\n      getSignableHash(\n        ambireReadableOperation.addr,\n        ambireReadableOperation.chainId,\n        ambireReadableOperation.nonce,\n        ambireReadableOperation.calls.map(callToTuple)\n      )\n    )\n    const ambireOperation = getTypedData(ambireReadableOperation.chainId, account.addr, hash)\n    const signature = wrapStandard(await signer.signTypedData(ambireOperation))\n    return wrapWallet(signature, account.addr)\n  }\n\n  return wrapUnprotected(await signer.signTypedData(message))\n}\n\n// get the typedData for the first ERC-4337 deploy txn\nexport async function getEntryPointAuthorization(\n  addr: AccountId,\n  chainId: bigint,\n  nonce: bigint\n): Promise<TypedMessage> {\n  const hash = getSignableHash(addr, chainId, nonce, [callToTuple(getActivatorCall(addr))])\n  return getTypedData(chainId, addr, hexlify(hash))\n}\n\nexport function adjustEntryPointAuthorization(entryPointSig: string): string {\n  // since normally when we sign an EIP-712 request, we wrap it in Unprotected,\n  // we adjust the entry point authorization signature so we could execute a txn\n  return wrapStandard(entryPointSig.substring(0, entryPointSig.length - 2))\n}\n\n// the hash the user needs to eth_sign in order for his EOA to turn smarter\nexport function getAuthorizationHash(chainId: bigint, contractAddr: Hex, nonce: bigint): Hex {\n  return keccak256(\n    concat([\n      '0x05', // magic authrorization string\n      encodeRlp([\n        // zeros are empty bytes in rlp encoding\n        chainId !== 0n ? toBeHex(chainId) : '0x',\n        contractAddr,\n        // zeros are empty bytes in rlp encoding\n        nonce !== 0n ? toBeHex(nonce) : '0x'\n      ])\n    ])\n  ) as Hex\n}\n\nfunction getHexStringSignature(\n  signature: string,\n  account: Account,\n  accountState: AccountOnchainState\n) {\n  return account.creation && !accountState.isDeployed\n    ? // https://eips.ethereum.org/EIPS/eip-6492\n      (wrapCounterfactualSign(signature, account.creation) as Hex)\n    : (signature as Hex)\n}\n\nexport function get7702Sig(\n  chainId: bigint,\n  nonce: bigint,\n  implementation: Hex,\n  signature: EIP7702Signature\n): EIP7702Auth {\n  return {\n    address: implementation,\n    chainId: toBeHex(chainId) as Hex,\n    nonce: toBeHex(nonce) as Hex,\n    r: signature.r,\n    s: signature.s,\n    v: get7702SigV(signature),\n    yParity: signature.yParity\n  }\n}\n\nexport function getVerifyMessageSignature(\n  signature: EIP7702Signature | string,\n  account: Account,\n  accountState: AccountOnchainState\n): Hex {\n  if (isHexString(signature)) return getHexStringSignature(signature, account, accountState)\n\n  const sig = signature as EIP7702Signature\n  // ethereum v is 27 or 28\n  const v = get7702SigV(sig)\n  return concat([sig.r, sig.s, v]) as Hex\n}\n\n// get the signature in the format you want returned to the dapp/implementation\n// for example, we return the counterfactual signature\n// to the dapp if the account is not deployed\n// and we return directly an EIP7702Signature if it's that type\nexport function getAppFormatted(\n  signature: EIP7702Signature | string,\n  account: Account,\n  accountState: AccountOnchainState\n): EIP7702Signature | Hex {\n  if (isHexString(signature)) return getHexStringSignature(signature, account, accountState)\n\n  return signature as EIP7702Signature\n}\n"]}