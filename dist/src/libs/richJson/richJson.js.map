{"version":3,"file":"richJson.js","sourceRoot":"","sources":["../../../../src/libs/richJson/richJson.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;AAMH,8BAuBC;AAED,sBAoBC;AA7CD,SAAgB,SAAS,CAAC,GAAQ,EAAE,IAAc;IAChD,OAAO,IAAI,CAAC,SAAS,CACnB,GAAG,EACH,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE;QACb,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;YAC9B,OAAO,EAAE,OAAO,EAAE,KAAK,CAAC,QAAQ,EAAE,EAAE,CAAA;QACtC,CAAC;QAED,IAAI,KAAK,YAAY,KAAK,EAAE,CAAC;YAC3B,MAAM,KAAK,GAAQ,EAAE,CAAA;YAErB,MAAM,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;gBACrD,aAAa;gBACb,KAAK,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAC,CAAA;YACnC,CAAC,CAAC,CAAA;YAEF,OAAO,KAAK,CAAA;QACd,CAAC;QAED,OAAO,KAAK,CAAA;IACd,CAAC,EACD,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACrB,CAAA;AACH,CAAC;AAED,SAAgB,KAAK,CAAC,IAAY;IAChC,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE;QACrC,IAAI,KAAK,EAAE,OAAO,EAAE,CAAC;YACnB,OAAO,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAA;QAC9B,CAAC;QAED,IAAI,KAAK,EAAE,KAAK,EAAE,UAAU,CAAC,OAAO,CAAC,EAAE,CAAC;YACtC,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAA;YACtC,MAAM,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;gBACrD,IAAI,QAAQ,KAAK,SAAS,EAAE,CAAC;oBAC3B,aAAa;oBACb,KAAK,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAC,CAAA;gBACnC,CAAC;YACH,CAAC,CAAC,CAAA;YAEF,OAAO,KAAK,CAAA;QACd,CAAC;QAED,OAAO,KAAK,CAAA;IACd,CAAC,CAAC,CAAA;AACJ,CAAC","sourcesContent":["/**\n *\n * richJson lib\n *\n * JSON.serialize and JSON.parse don't support BigInt values.\n * To address this limitation, we have created this small library that adds support for BigInt numbers\n * during JSON serialization and parsing.\n *\n * Limitations: The library does not currently support BigInt values in new Map, Set, or Uint8Array.\n * However, extending and adding support can be easily accomplished if needed.\n * @credits: https://dev.to/benlesh/bigint-and-json-stringify-json-parse-2m8p\n *\n *\n * Additionally, JSON.serialize and JSON.parse do not properly serialize the Error object, so we extend that functionality here as well.\n */\n\ninterface Options {\n  pretty?: boolean\n}\n\nexport function stringify(obj: any, opts?: Options): string {\n  return JSON.stringify(\n    obj,\n    (key, value) => {\n      if (typeof value === 'bigint') {\n        return { $bigint: value.toString() }\n      }\n\n      if (value instanceof Error) {\n        const error: any = {}\n\n        Object.getOwnPropertyNames(value).forEach((propName) => {\n          // @ts-ignore\n          error[propName] = value[propName]\n        })\n\n        return error\n      }\n\n      return value\n    },\n    opts?.pretty ? 4 : 0\n  )\n}\n\nexport function parse(json: string) {\n  return JSON.parse(json, (key, value) => {\n    if (value?.$bigint) {\n      return BigInt(value.$bigint)\n    }\n\n    if (value?.stack?.startsWith('Error')) {\n      const error = new Error(value.message)\n      Object.getOwnPropertyNames(value).forEach((propName) => {\n        if (propName !== 'message') {\n          // @ts-ignore\n          error[propName] = value[propName]\n        }\n      })\n\n      return error\n    }\n\n    return value\n  })\n}\n"]}