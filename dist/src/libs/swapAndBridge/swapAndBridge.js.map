{"version":3,"file":"swapAndBridge.js","sourceRoot":"","sources":["../../../../src/libs/swapAndBridge/swapAndBridge.ts"],"names":[],"mappings":"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","sourcesContent":["import { Contract, getAddress, Interface, MaxUint256 } from 'ethers'\n\nimport ERC20 from '../../../contracts/compiled/IERC20.json'\nimport { Account } from '../../interfaces/account'\nimport { Network } from '../../interfaces/network'\nimport { RPCProvider } from '../../interfaces/provider'\nimport {\n  ActiveRoute,\n  SocketAPIBridgeUserTx,\n  SocketAPISendTransactionRequest,\n  SocketAPIStep,\n  SocketAPIToken,\n  SocketAPIUserTx,\n  SwapAndBridgeToToken\n} from '../../interfaces/swapAndBridge'\nimport { SignUserRequest } from '../../interfaces/userRequest'\nimport { isSmartAccount } from '../account/account'\nimport { Call } from '../accountOp/types'\nimport { TokenResult } from '../portfolio'\nimport { getTokenBalanceInUSD } from '../portfolio/helpers'\n\nconst sortTokensByPendingAndBalance = (a: TokenResult, b: TokenResult) => {\n  // Pending tokens go on top\n  const isAPending =\n    typeof a.amountPostSimulation === 'bigint' && a.amountPostSimulation !== BigInt(a.amount)\n  const isBPending =\n    typeof b.amountPostSimulation === 'bigint' && b.amountPostSimulation !== BigInt(b.amount)\n\n  if (isAPending && !isBPending) return -1\n  if (!isAPending && isBPending) return 1\n\n  // Otherwise, higher balance comes first\n  const aBalanceUSD = getTokenBalanceInUSD(a)\n  const bBalanceUSD = getTokenBalanceInUSD(b)\n  if (aBalanceUSD !== bBalanceUSD) return bBalanceUSD - aBalanceUSD\n\n  return 0\n}\n\nexport const sortTokenListResponse = (\n  tokenListResponse: SwapAndBridgeToToken[],\n  accountPortfolioTokenList: TokenResult[]\n) => {\n  return tokenListResponse.sort((a: SocketAPIToken, b: SocketAPIToken) => {\n    const aInPortfolio = accountPortfolioTokenList.find((t) => t.address === a.address)\n    const bInPortfolio = accountPortfolioTokenList.find((t) => t.address === b.address)\n\n    // Tokens in portfolio should come first\n    if (aInPortfolio && !bInPortfolio) return -1\n    if (!aInPortfolio && bInPortfolio) return 1\n\n    if (aInPortfolio && bInPortfolio) {\n      const comparisonResult = sortTokensByPendingAndBalance(aInPortfolio, bInPortfolio)\n      if (comparisonResult !== 0) return comparisonResult\n    }\n\n    // Otherwise, just alphabetical\n    return (a.name || '').localeCompare(b.name || '')\n  })\n}\n\nexport const sortPortfolioTokenList = (accountPortfolioTokenList: TokenResult[]) => {\n  return accountPortfolioTokenList.sort((a, b) => {\n    const comparisonResult = sortTokensByPendingAndBalance(a, b)\n    if (comparisonResult !== 0) return comparisonResult\n\n    // Otherwise, just alphabetical\n    return (a.symbol || '').localeCompare(b.symbol || '')\n  })\n}\n\n/**\n * Determines if a token is eligible for swapping and bridging.\n * Not all tokens in the portfolio are eligible.\n */\nexport const getIsTokenEligibleForSwapAndBridge = (token: TokenResult) => {\n  // Prevent filtering out tokens with amountPostSimulation = 0 if the actual amount is positive.\n  // This ensures the token remains in the list when sending the full amount of it\n  const amount =\n    token.amountPostSimulation === 0n && token.amount > 0n\n      ? token.amount\n      : token.amountPostSimulation ?? token.amount\n  const hasPositiveBalance = Number(amount) > 0\n  return (\n    // The same token can be in the Gas Tank (or as a Reward) and in the portfolio.\n    // Exclude the one in the Gas Tank (swapping Gas Tank tokens is not supported).\n    !token.flags.onGasTank &&\n    // And exclude the rewards ones (swapping rewards is not supported).\n    !token.flags.rewardsType &&\n    hasPositiveBalance\n  )\n}\n\nexport const convertPortfolioTokenToSocketAPIToken = (\n  portfolioToken: TokenResult,\n  chainId: number\n): SocketAPIToken => {\n  const { address, decimals, symbol } = portfolioToken\n  // Although name and symbol will be the same, it's better than having \"No name\" in the UI (valid use-case)\n  const name = symbol\n  // Fine for not having both icon props, because this would fallback to the\n  // icon discovery method used for the portfolio tokens\n  const icon = ''\n  const logoURI = ''\n\n  return { address, chainId, decimals, symbol, name, icon, logoURI }\n}\n\nconst getQuoteRouteSteps = (userTxs: SocketAPIUserTx[]) => {\n  return userTxs.reduce((stepsAcc: SocketAPIStep[], tx) => {\n    if (tx.userTxType === 'fund-movr') {\n      tx.steps.forEach((s) => stepsAcc.push({ ...s, userTxIndex: tx.userTxIndex }))\n    }\n    if (tx.userTxType === 'dex-swap') {\n      stepsAcc.push({\n        chainId: tx.chainId,\n        fromAmount: tx.fromAmount,\n        fromAsset: tx.fromAsset,\n        gasFees: tx.gasFees,\n        minAmountOut: tx.minAmountOut,\n        protocol: tx.protocol,\n        swapSlippage: tx.swapSlippage,\n        toAmount: tx.toAmount,\n        toAsset: tx.toAsset,\n        type: 'swap',\n        userTxIndex: tx.userTxIndex\n      })\n    }\n    return stepsAcc\n  }, [])\n}\n\nconst getActiveRoutesLowestServiceTime = (activeRoutes: ActiveRoute[]) => {\n  const serviceTimes: number[] = []\n\n  activeRoutes.forEach((r) =>\n    r.route.userTxs.forEach((tx) => {\n      if ((tx as SocketAPIBridgeUserTx).serviceTime) {\n        serviceTimes.push((tx as SocketAPIBridgeUserTx).serviceTime)\n      }\n    })\n  )\n\n  return serviceTimes.sort((a, b) => a - b)[0]\n}\n\nconst getActiveRoutesUpdateInterval = (minServiceTime?: number) => {\n  if (!minServiceTime) return 7000\n\n  if (minServiceTime < 60) return 5000\n  if (minServiceTime <= 180) return 6000\n  if (minServiceTime <= 300) return 8000\n  if (minServiceTime <= 600) return 12000\n\n  return 15000\n}\n\nconst buildRevokeApprovalIfNeeded = async (\n  userTx: SocketAPISendTransactionRequest,\n  account: Account,\n  provider: RPCProvider\n): Promise<Call | undefined> => {\n  if (!userTx.approvalData) return\n  const erc20Contract = new Contract(userTx.approvalData.approvalTokenAddress, ERC20.abi, provider)\n  const requiredAmount = isSmartAccount(account)\n    ? BigInt(userTx.approvalData.minimumApprovalAmount)\n    : MaxUint256\n  const approveCallData = erc20Contract.interface.encodeFunctionData('approve', [\n    userTx.approvalData.allowanceTarget,\n    requiredAmount\n  ])\n\n  let fails = false\n  try {\n    await provider.call({\n      from: account.addr,\n      to: userTx.approvalData.approvalTokenAddress,\n      data: approveCallData\n    })\n  } catch (e) {\n    fails = true\n  }\n\n  if (!fails) return\n\n  return {\n    to: userTx.approvalData.approvalTokenAddress,\n    value: BigInt('0'),\n    data: erc20Contract.interface.encodeFunctionData('approve', [\n      userTx.approvalData.allowanceTarget,\n      BigInt(0)\n    ])\n  }\n}\n\nconst buildSwapAndBridgeUserRequests = async (\n  userTx: SocketAPISendTransactionRequest,\n  networkId: string,\n  account: Account,\n  provider: RPCProvider\n) => {\n  if (isSmartAccount(account)) {\n    const calls: Call[] = []\n    if (userTx.approvalData) {\n      const erc20Interface = new Interface(ERC20.abi)\n\n      const revokeApproval = await buildRevokeApprovalIfNeeded(userTx, account, provider)\n      if (revokeApproval) calls.push(revokeApproval)\n\n      calls.push({\n        to: userTx.approvalData.approvalTokenAddress,\n        value: BigInt('0'),\n        data: erc20Interface.encodeFunctionData('approve', [\n          userTx.approvalData.allowanceTarget,\n          BigInt(userTx.approvalData.minimumApprovalAmount)\n        ]),\n        fromUserRequestId: userTx.activeRouteId\n      } as Call)\n    }\n\n    calls.push({\n      to: userTx.txTarget,\n      value: BigInt(userTx.value),\n      data: userTx.txData,\n      fromUserRequestId: userTx.activeRouteId\n    } as Call)\n\n    return [\n      {\n        id: userTx.activeRouteId,\n        action: {\n          kind: 'calls' as const,\n          calls\n        },\n        meta: {\n          isSignAction: true,\n          networkId,\n          accountAddr: account.addr,\n          activeRouteId: userTx.activeRouteId,\n          isSwapAndBridgeCall: true\n        }\n      } as SignUserRequest\n    ]\n  }\n  const requests: SignUserRequest[] = []\n  let shouldBuildSwapOrBridgeTx = true\n  if (userTx.approvalData) {\n    const erc20Interface = new Interface(ERC20.abi)\n    let shouldApprove = true\n    try {\n      const erc20Contract = new Contract(\n        userTx.approvalData.approvalTokenAddress,\n        ERC20.abi,\n        provider\n      )\n      const allowance = await erc20Contract.allowance(\n        userTx.approvalData.owner,\n        userTx.approvalData.allowanceTarget\n      )\n      // check if an approval already exists\n      if (BigInt(allowance) >= BigInt(userTx.approvalData.minimumApprovalAmount))\n        shouldApprove = false\n    } catch (error) {\n      console.error(error)\n    }\n\n    if (shouldApprove) {\n      const revokeApproval = await buildRevokeApprovalIfNeeded(userTx, account, provider)\n      if (revokeApproval) {\n        requests.push({\n          id: `${userTx.activeRouteId}-revoke-approval`,\n          action: { kind: 'calls' as const, calls: [revokeApproval] },\n          meta: {\n            isSignAction: true,\n            networkId,\n            accountAddr: account.addr,\n            isSwapAndBridgeCall: true,\n            activeRouteId: userTx.activeRouteId\n          }\n        } as SignUserRequest)\n      }\n      requests.push({\n        id: `${userTx.activeRouteId}-approval`,\n        action: {\n          kind: 'calls' as const,\n          calls: [\n            {\n              to: userTx.approvalData.approvalTokenAddress,\n              value: BigInt('0'),\n              data: erc20Interface.encodeFunctionData('approve', [\n                userTx.approvalData.allowanceTarget,\n                MaxUint256 // approve the max possible amount for better UX on BA\n              ]),\n              fromUserRequestId: `${userTx.activeRouteId}-approval`\n            } as Call\n          ]\n        },\n        meta: {\n          isSignAction: true,\n          networkId,\n          accountAddr: account.addr,\n          isSwapAndBridgeCall: true,\n          activeRouteId: userTx.activeRouteId\n        }\n      } as SignUserRequest)\n      // first build only the approval tx and then when confirmed this func will be called a second time\n      // and then only the swap or bridge tx will be created\n      shouldBuildSwapOrBridgeTx = false\n    }\n  }\n\n  if (shouldBuildSwapOrBridgeTx) {\n    requests.push({\n      id: userTx.activeRouteId,\n      action: {\n        kind: 'calls' as const,\n        calls: [\n          {\n            to: userTx.txTarget,\n            value: BigInt(userTx.value),\n            data: userTx.txData,\n            fromUserRequestId: userTx.activeRouteId\n          } as Call\n        ]\n      },\n      meta: {\n        isSignAction: true,\n        networkId,\n        accountAddr: account.addr,\n        isSwapAndBridgeCall: true,\n        activeRouteId: userTx.activeRouteId\n      }\n    } as SignUserRequest)\n  }\n  return requests\n}\n\nexport const getIsBridgeTxn = (userTxType: SocketAPIUserTx['userTxType']) =>\n  userTxType === 'fund-movr'\n\n/**\n * Checks if a network is supported by our Swap & Bridge service provider. As of v4.43.0\n * there are 16 networks supported, so user could have (many) custom networks that are not.\n */\nexport const getIsNetworkSupported = (\n  supportedChainIds: Network['chainId'][],\n  network?: Network\n) => {\n  // Assume supported if missing (and receive no results when attempting to use\n  // a not-supported network) than the alternative - blocking the UI.\n  if (!supportedChainIds.length || !network) return true\n\n  return supportedChainIds.includes(network.chainId)\n}\n\nconst getActiveRoutesForAccount = (accountAddress: string, activeRoutes: ActiveRoute[]) => {\n  return activeRoutes.filter(\n    (r) => getAddress(r.route.sender || r.route.userAddress) === accountAddress\n  )\n}\n\nexport {\n  getQuoteRouteSteps,\n  getActiveRoutesLowestServiceTime,\n  getActiveRoutesUpdateInterval,\n  buildSwapAndBridgeUserRequests,\n  getActiveRoutesForAccount\n}\n"]}