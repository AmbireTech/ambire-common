{"version":3,"file":"swapAndBridge.js","sourceRoot":"","sources":["../../../../src/libs/swapAndBridge/swapAndBridge.ts"],"names":[],"mappings":"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","sourcesContent":["import { Contract, getAddress, Interface, MaxUint256, ZeroAddress } from 'ethers'\n\nimport ERC20 from '../../../contracts/compiled/IERC20.json'\nimport { Account, AccountOnchainState } from '../../interfaces/account'\nimport { Fetch } from '../../interfaces/fetch'\nimport { Network } from '../../interfaces/network'\nimport { RPCProvider } from '../../interfaces/provider'\nimport {\n  SocketAPIUserTx,\n  SwapAndBridgeActiveRoute,\n  SwapAndBridgeRoute,\n  SwapAndBridgeSendTxRequest,\n  SwapAndBridgeToToken\n} from '../../interfaces/swapAndBridge'\nimport {\n  AMBIRE_WALLET_TOKEN_ON_BASE,\n  AMBIRE_WALLET_TOKEN_ON_ETHEREUM\n} from '../../services/socket/constants'\nimport { isBasicAccount } from '../account/account'\nimport { Call } from '../accountOp/types'\nimport { PaymasterService } from '../erc7677/types'\nimport { TokenResult } from '../portfolio'\nimport { getTokenBalanceInUSD } from '../portfolio/helpers'\n\nconst sortTokensByPendingAndBalance = (a: TokenResult, b: TokenResult) => {\n  // Pending tokens go on top\n  const isAPending =\n    typeof a.amountPostSimulation === 'bigint' && a.amountPostSimulation !== BigInt(a.amount)\n  const isBPending =\n    typeof b.amountPostSimulation === 'bigint' && b.amountPostSimulation !== BigInt(b.amount)\n\n  if (isAPending && !isBPending) return -1\n  if (!isAPending && isBPending) return 1\n\n  // Otherwise, higher balance comes first\n  const aBalanceUSD = getTokenBalanceInUSD(a)\n  const bBalanceUSD = getTokenBalanceInUSD(b)\n  if (aBalanceUSD !== bBalanceUSD) return bBalanceUSD - aBalanceUSD\n\n  return 0\n}\n\nexport const attemptToSortTokensByMarketCap = async ({\n  fetch,\n  chainId,\n  tokens\n}: {\n  fetch: Fetch\n  chainId: number\n  tokens: SwapAndBridgeToToken[]\n}) => {\n  try {\n    const tokenAddressesByMarketCapRes = await fetch(\n      `https://cena.ambire.com/api/v3/lists/byMarketCap/${chainId}`\n    )\n\n    if (tokenAddressesByMarketCapRes.status !== 200)\n      throw new Error(`Got status ${tokenAddressesByMarketCapRes.status} from the API.`)\n\n    const tokenAddressesByMarketCap = await tokenAddressesByMarketCapRes.json()\n\n    // Highest market cap comes first from the response\n    const addressPriority = new Map(\n      tokenAddressesByMarketCap.data.map((addr: string, index: number) => [addr, index])\n    )\n\n    // Sort the result by the market cap response order position (highest first)\n    return tokens.sort((a, b) => {\n      const aPriority = addressPriority.get(a.address)\n      const bPriority = addressPriority.get(b.address)\n\n      if (aPriority !== undefined && bPriority !== undefined)\n        return (aPriority as number) - (bPriority as number)\n\n      if (aPriority !== undefined) return -1\n      if (bPriority !== undefined) return 1\n      return 0\n    })\n  } catch (e) {\n    // Fail silently, no biggie\n    console.error(`Sorting Swap & Bridge tokens by market for network with id ${chainId} failed`, e)\n    return tokens\n  }\n}\n\nexport const sortNativeTokenFirst = (tokens: SwapAndBridgeToToken[]) => {\n  return tokens.sort((a, b) => {\n    if (a.address === ZeroAddress) return -1\n    if (b.address === ZeroAddress) return 1\n    return 0\n  })\n}\n\nexport const sortTokenListResponse = (\n  tokenListResponse: SwapAndBridgeToToken[],\n  accountPortfolioTokenList: TokenResult[]\n) => {\n  return tokenListResponse.sort((a: SwapAndBridgeToToken, b: SwapAndBridgeToToken) => {\n    const aInPortfolio = accountPortfolioTokenList.find((t) => t.address === a.address)\n    const bInPortfolio = accountPortfolioTokenList.find((t) => t.address === b.address)\n\n    // Tokens in portfolio should come first\n    if (aInPortfolio && !bInPortfolio) return -1\n    if (!aInPortfolio && bInPortfolio) return 1\n\n    if (aInPortfolio && bInPortfolio) {\n      const comparisonResult = sortTokensByPendingAndBalance(aInPortfolio, bInPortfolio)\n      if (comparisonResult !== 0) return comparisonResult\n    }\n\n    // Otherwise, don't change, persist the order from the service provider\n    return 0\n  })\n}\n\nexport const sortPortfolioTokenList = (accountPortfolioTokenList: TokenResult[]) => {\n  return accountPortfolioTokenList.sort((a, b) => {\n    const comparisonResult = sortTokensByPendingAndBalance(a, b)\n    if (comparisonResult !== 0) return comparisonResult\n\n    // Otherwise, just alphabetical\n    return (a.symbol || '').localeCompare(b.symbol || '')\n  })\n}\n\n/**\n * Determines if a token is eligible for swapping and bridging.\n * Not all tokens in the portfolio are eligible.\n */\nexport const getIsTokenEligibleForSwapAndBridge = (token: TokenResult) => {\n  // Prevent filtering out tokens with amountPostSimulation = 0 if the actual amount is positive.\n  // This ensures the token remains in the list when sending the full amount of it\n  const amount =\n    token.amountPostSimulation === 0n && token.amount > 0n\n      ? token.amount\n      : token.amountPostSimulation ?? token.amount\n  const hasPositiveBalance = Number(amount) > 0\n  return (\n    // The same token can be in the Gas Tank (or as a Reward) and in the portfolio.\n    // Exclude the one in the Gas Tank (swapping Gas Tank tokens is not supported).\n    !token.flags.onGasTank &&\n    // And exclude the rewards ones (swapping rewards is not supported).\n    !token.flags.rewardsType &&\n    hasPositiveBalance\n  )\n}\n\nexport const convertPortfolioTokenToSwapAndBridgeToToken = (\n  portfolioToken: TokenResult,\n  chainId: number\n): SwapAndBridgeToToken => {\n  const { address, decimals, symbol } = portfolioToken\n  // Although name and symbol will be the same, it's better than having \"No name\" in the UI (valid use-case)\n  const name = symbol\n  // Fine for not having both icon props, because this would fallback to the\n  // icon discovery method used for the portfolio tokens\n  const icon = ''\n\n  return { address, chainId, decimals, symbol, name, icon }\n}\n\nconst getActiveRoutesLowestServiceTime = (activeRoutes: SwapAndBridgeActiveRoute[]) => {\n  const serviceTimes: number[] = []\n\n  activeRoutes.forEach((r) =>\n    r.route?.userTxs.forEach((tx) => {\n      if (tx.serviceTime) {\n        serviceTimes.push(tx.serviceTime)\n      }\n    })\n  )\n\n  return serviceTimes.sort((a, b) => a - b)[0]\n}\n\nconst getActiveRoutesUpdateInterval = (minServiceTime?: number) => {\n  if (!minServiceTime) return 30000\n\n  // the absolute minimum needs to be 30s, it's not a game changer\n  // if the user waits an additional 15s to get a status check\n  // but it's a game changer if we brick the API with a 429\n  if (minServiceTime <= 300) return 30000\n  if (minServiceTime <= 600) return 60000\n\n  return 30000\n}\n\n// If you have approval that has not been spent (in some smart contracts), the transaction may revert\nconst buildRevokeApprovalIfNeeded = async (\n  userTx: SwapAndBridgeSendTxRequest,\n  account: Account,\n  state: AccountOnchainState,\n  provider: RPCProvider\n): Promise<Call | undefined> => {\n  if (!userTx.approvalData) return\n  const erc20Contract = new Contract(userTx.approvalData.approvalTokenAddress, ERC20.abi, provider)\n  const requiredAmount = !isBasicAccount(account, state)\n    ? BigInt(userTx.approvalData.minimumApprovalAmount)\n    : MaxUint256\n  const approveCallData = erc20Contract.interface.encodeFunctionData('approve', [\n    userTx.approvalData.allowanceTarget,\n    requiredAmount\n  ])\n\n  let fails = false\n  try {\n    await provider.call({\n      from: account.addr,\n      to: userTx.approvalData.approvalTokenAddress,\n      data: approveCallData\n    })\n  } catch (e) {\n    fails = true\n  }\n\n  if (!fails) return\n\n  return {\n    to: userTx.approvalData.approvalTokenAddress,\n    value: BigInt('0'),\n    data: erc20Contract.interface.encodeFunctionData('approve', [\n      userTx.approvalData.allowanceTarget,\n      BigInt(0)\n    ])\n  }\n}\n\nconst getSwapAndBridgeCalls = async (\n  userTx: SwapAndBridgeSendTxRequest,\n  account: Account,\n  provider: RPCProvider,\n  state: AccountOnchainState\n): Promise<Call[]> => {\n  const calls: Call[] = []\n  if (userTx.approvalData) {\n    const erc20Interface = new Interface(ERC20.abi)\n\n    const revokeApproval = await buildRevokeApprovalIfNeeded(userTx, account, state, provider)\n    if (revokeApproval) calls.push(revokeApproval)\n\n    calls.push({\n      to: userTx.approvalData.approvalTokenAddress,\n      value: BigInt('0'),\n      data: erc20Interface.encodeFunctionData('approve', [\n        userTx.approvalData.allowanceTarget,\n        BigInt(userTx.approvalData.minimumApprovalAmount)\n      ]),\n      fromUserRequestId: userTx.activeRouteId\n    } as Call)\n  }\n\n  calls.push({\n    to: userTx.txTarget,\n    value: BigInt(userTx.value),\n    data: userTx.txData,\n    fromUserRequestId: userTx.activeRouteId\n  })\n\n  return calls\n}\n\nconst buildSwapAndBridgeUserRequests = async (\n  userTx: SwapAndBridgeSendTxRequest,\n  chainId: bigint,\n  account: Account,\n  provider: RPCProvider,\n  state: AccountOnchainState,\n  paymasterService?: PaymasterService\n) => {\n  return [\n    {\n      id: userTx.activeRouteId,\n      action: {\n        kind: 'calls' as const,\n        calls: await getSwapAndBridgeCalls(userTx, account, provider, state)\n      },\n      meta: {\n        isSignAction: true as true,\n        chainId,\n        accountAddr: account.addr,\n        activeRouteId: userTx.activeRouteId,\n        isSwapAndBridgeCall: true,\n        paymasterService\n      }\n    }\n  ]\n}\n\nexport const getIsBridgeTxn = (userTxType: SocketAPIUserTx['userTxType']) =>\n  userTxType === 'fund-movr'\n\nexport const getIsBridgeRoute = (route: SwapAndBridgeRoute) => {\n  return route.userTxs.some((userTx) => getIsBridgeTxn(userTx.userTxType))\n}\n\n/**\n * Checks if a network is supported by our Swap & Bridge service provider. As of v4.43.0\n * there are 16 networks supported, so user could have (many) custom networks that are not.\n */\nexport const getIsNetworkSupported = (\n  supportedChainIds: Network['chainId'][],\n  network?: Network\n) => {\n  // Assume supported if missing (and receive no results when attempting to use\n  // a not-supported network) than the alternative - blocking the UI.\n  if (!supportedChainIds.length || !network) return true\n\n  return supportedChainIds.includes(network.chainId)\n}\n\nconst getActiveRoutesForAccount = (\n  accountAddress: string,\n  activeRoutes: SwapAndBridgeActiveRoute[]\n) => {\n  return activeRoutes.filter(\n    (r) => getAddress(r.route?.sender || r.route?.userAddress || '') === accountAddress\n  )\n}\n\n/**\n * Since v4.41.0 we request the shortlist from our service provider, which might\n * not include the Ambire $WALLET token. So adding it manually on the supported chains.\n */\nconst addCustomTokensIfNeeded = ({\n  tokens,\n  chainId\n}: {\n  tokens: SwapAndBridgeToToken[]\n  chainId: number\n}) => {\n  const newTokens = [...tokens]\n\n  if (chainId === 1) {\n    const shouldAddAmbireWalletToken = newTokens.every(\n      (t) => t.address !== AMBIRE_WALLET_TOKEN_ON_ETHEREUM.address\n    )\n    if (shouldAddAmbireWalletToken) newTokens.unshift(AMBIRE_WALLET_TOKEN_ON_ETHEREUM)\n  }\n  if (chainId === 8453) {\n    const shouldAddAmbireWalletToken = newTokens.every(\n      (t) => t.address !== AMBIRE_WALLET_TOKEN_ON_BASE.address\n    )\n    if (shouldAddAmbireWalletToken) newTokens.unshift(AMBIRE_WALLET_TOKEN_ON_BASE)\n  }\n\n  return newTokens\n}\n\nexport {\n  addCustomTokensIfNeeded,\n  buildSwapAndBridgeUserRequests,\n  getActiveRoutesForAccount,\n  getActiveRoutesLowestServiceTime,\n  getActiveRoutesUpdateInterval,\n  getSwapAndBridgeCalls\n}\n"]}