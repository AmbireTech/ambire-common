{"version":3,"file":"magicLink.js","sourceRoot":"","sources":["../../../../src/libs/magicLink/magicLink.ts"],"names":[],"mappings":";;;AAeO,KAAK,UAAU,gBAAgB,CACpC,KAAa,EACb,UAAkB,EAClB,KAAY,EACZ,OAAyD;IAEzD,MAAM,IAAI,GAAG,OAAO,EAAE,IAAI,CAAA;IAE1B,MAAM,IAAI,GAAG,MAAM,KAAK,CACtB,GAAG,UAAU,4BAA4B,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC,SAAS,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAC/E,CAAA;IACD,MAAM,MAAM,GAA2B,MAAM,IAAI,CAAC,IAAI,EAAE,CAAA;IACxD,IAAI,MAAM,EAAE,IAAI,EAAE,MAAM,IAAI,OAAO,EAAE,WAAW;QAC9C,UAAU,CAAC,GAAG,EAAE;YACd,KAAK,CACH,GAAG,UAAU,4BAA4B,KAAK,IAAI,MAAM,CAAC,IAAI,CAAC,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,CAC1F,CAAA;QACH,CAAC,EAAE,IAAI,CAAC,CAAA;IAEV,IAAI,CAAC,MAAM,CAAC,OAAO;QAAE,MAAM,IAAI,KAAK,CAAC,wCAAwC,MAAM,CAAC,OAAO,EAAE,CAAC,CAAA;IAC9F,OAAO,MAAM,CAAC,IAAI,CAAA;AACpB,CAAC;AArBD,4CAqBC","sourcesContent":["import { MagicLinkFlow } from '../../interfaces/emailVault'\nimport { Fetch } from '../../interfaces/fetch'\n\nexport interface MagicLinkData {\n  key: string\n  secret?: String // this will not be return in prod mode\n  expiry: number\n}\n\nexport interface RequestMagicLinkResult {\n  success: Boolean\n  data: MagicLinkData\n  message: String\n}\n\nexport async function requestMagicLink(\n  email: String,\n  relayerUrl: String,\n  fetch: Fetch,\n  options?: { autoConfirm?: boolean; flow?: MagicLinkFlow }\n): Promise<MagicLinkData> {\n  const flow = options?.flow\n\n  const resp = await fetch(\n    `${relayerUrl}/email-vault/request-key/${email}${flow ? `?flow=${flow}` : ''}`\n  )\n  const result: RequestMagicLinkResult = await resp.json()\n  if (result?.data?.secret && options?.autoConfirm)\n    setTimeout(() => {\n      fetch(\n        `${relayerUrl}/email-vault/confirm-key/${email}/${result.data.key}/${result.data.secret}`\n      )\n    }, 2000)\n\n  if (!result.success) throw new Error(`magicLink: error getting magic link: ${result.message}`)\n  return result.data\n}\n"]}