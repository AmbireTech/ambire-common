{"version":3,"file":"networks.js","sourceRoot":"","sources":["../../../../src/libs/networks/networks.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable import/no-extraneous-dependencies */\n\nimport { AMBIRE_ACCOUNT_FACTORY, OPTIMISTIC_ORACLE, SINGLETON } from '../../consts/deploy'\nimport { networks as predefinedNetworks } from '../../consts/networks'\nimport { Fetch } from '../../interfaces/fetch'\nimport {\n  Erc4337settings,\n  Network,\n  NetworkFeature,\n  NetworkId,\n  NetworkInfo,\n  NetworkInfoLoading\n} from '../../interfaces/network'\nimport { RPCProviders } from '../../interfaces/provider'\nimport { Bundler } from '../../services/bundlers/bundler'\nimport { getRpcProvider } from '../../services/provider'\nimport { getSASupport } from '../deployless/simulateDeployCall'\n\n// bnb, gnosis, fantom, metis\nexport const relayerAdditionalNetworks = [\n  {\n    chainId: 56n,\n    name: 'binance-smart-chain'\n  },\n  {\n    chainId: 100n,\n    name: 'gnosis'\n  },\n  {\n    chainId: 250n,\n    name: 'fantom'\n  },\n  {\n    chainId: 1088n,\n    name: 'andromeda'\n  }\n]\n\n// 4337 network support\n// if it is supported on the network (hasBundlerSupport),\n// we check if the user has specifically enabled it through settings (force4337)\n// if he has not, we check if the network is predefinedNetwork and we\n// have specifically disabled 4337\n// finally, we fallback to the bundler support\nexport function is4337Enabled(\n  hasBundlerSupport: boolean,\n  network?: Network,\n  force4337?: boolean\n): boolean {\n  if (!hasBundlerSupport) return false\n\n  // the user has chosen to use 4337\n  if (force4337 !== undefined) return force4337 as boolean\n\n  // if we have set it specifically\n  if (network && network.predefined) return network.erc4337.enabled\n\n  // this will be true in this case\n  return hasBundlerSupport\n}\n\nexport const getNetworksWithFailedRPC = ({ providers }: { providers: RPCProviders }): string[] => {\n  return Object.keys(providers).filter(\n    (networkId) =>\n      typeof providers[networkId].isWorking === 'boolean' && !providers[networkId].isWorking\n  )\n}\n\nasync function retryRequest(init: Function, counter = 0): Promise<any> {\n  if (counter >= 2) {\n    throw new Error('flagged')\n  }\n\n  const promise: Promise<any> = init()\n  const result = await promise.catch(async () => {\n    const retryRes = await retryRequest(init, counter + 1)\n    return retryRes\n  })\n\n  return result\n}\n\nexport async function getNetworkInfo(\n  fetch: Fetch,\n  rpcUrl: string,\n  chainId: bigint,\n  callback: (networkInfo: NetworkInfoLoading<NetworkInfo>) => void,\n  optionalArgs?: {\n    force4337?: boolean\n  }\n) {\n  let networkInfo: NetworkInfoLoading<NetworkInfo> = {\n    force4337: optionalArgs?.force4337,\n    chainId,\n    isSAEnabled: 'LOADING',\n    hasSingleton: 'LOADING',\n    isOptimistic: 'LOADING',\n    rpcNoStateOverride: 'LOADING',\n    erc4337: 'LOADING',\n    areContractsDeployed: 'LOADING',\n    feeOptions: 'LOADING',\n    platformId: 'LOADING',\n    nativeAssetId: 'LOADING',\n    flagged: 'LOADING'\n  }\n  callback(networkInfo)\n\n  const timeout = (time: number = 30000): Promise<'timeout reached'> => {\n    return new Promise((resolve) => {\n      setTimeout(resolve, time, 'timeout reached')\n    }) as unknown as Promise<'timeout reached'>\n  }\n\n  let flagged = false\n  const provider = getRpcProvider([rpcUrl], chainId)\n\n  const raiseFlagged = (e: Error, returnData: any): any => {\n    if (e.message === 'flagged') {\n      flagged = true\n    }\n\n    return returnData\n  }\n\n  const info = await Promise.race([\n    Promise.all([\n      (async () => {\n        const responses = await Promise.all([\n          retryRequest(() => provider.getCode(SINGLETON)),\n          retryRequest(() => provider.getCode(AMBIRE_ACCOUNT_FACTORY)),\n          retryRequest(() => getSASupport(provider)),\n          Bundler.isNetworkSupported(fetch, chainId).catch(() => false)\n          // retryRequest(() => provider.getCode(ERC_4337_ENTRYPOINT)),\n        ]).catch((e: Error) =>\n          raiseFlagged(e, ['0x', '0x', { addressMatches: false, supportsStateOverride: false }])\n        )\n        const [singletonCode, factoryCode, saSupport, hasBundlerSupport] = responses\n        const areContractsDeployed = factoryCode !== '0x'\n        // const has4337 = entryPointCode !== '0x' && hasBundler\n        const predefinedNetwork = predefinedNetworks.find((net) => net.chainId === chainId)\n\n        // Ambire support is as follows:\n        // - either the addresses match after simulation, that's perfect\n        // - or we can't do the simulation with this RPC but we have the factory\n        // deployed on the network\n        const supportsAmbire =\n          saSupport.addressMatches || (!saSupport.supportsStateOverride && areContractsDeployed)\n        networkInfo = {\n          ...networkInfo,\n          hasSingleton: singletonCode !== '0x',\n          isSAEnabled: supportsAmbire && singletonCode !== '0x',\n          areContractsDeployed,\n          rpcNoStateOverride:\n            predefinedNetwork && predefinedNetwork.rpcNoStateOverride === true\n              ? true\n              : !saSupport.supportsStateOverride,\n          erc4337: {\n            enabled: is4337Enabled(hasBundlerSupport, predefinedNetwork, optionalArgs?.force4337),\n            hasPaymaster: predefinedNetwork ? predefinedNetwork.erc4337.hasPaymaster : false,\n            hasBundlerSupport\n          }\n        }\n\n        callback(networkInfo)\n      })(),\n      (async () => {\n        const oracleCode = await retryRequest(() => provider.getCode(OPTIMISTIC_ORACLE)).catch(\n          (e: Error) => raiseFlagged(e, '0x')\n        )\n        const isOptimistic = oracleCode !== '0x'\n\n        networkInfo = { ...networkInfo, isOptimistic }\n\n        callback(networkInfo)\n      })(),\n      (async () => {\n        const block = await retryRequest(() => provider.getBlock('latest')).catch((e: Error) =>\n          raiseFlagged(e, null)\n        )\n        const feeOptions = { is1559: block?.baseFeePerGas !== null }\n\n        networkInfo = { ...networkInfo, feeOptions }\n\n        callback(networkInfo)\n      })(),\n      (async () => {\n        const coingeckoRequest = await fetch(\n          `https://cena.ambire.com/api/v3/platform/${Number(chainId)}`\n        ).catch(() => ({\n          error: 'currently, we cannot fetch the coingecko information'\n        }))\n        // set the coingecko info\n        let platformId = null\n        let nativeAssetId = null\n        if (!('error' in coingeckoRequest)) {\n          const coingeckoInfo = await coingeckoRequest.json()\n          if (!coingeckoInfo.error) {\n            platformId = coingeckoInfo.platformId\n            nativeAssetId = coingeckoInfo.nativeAssetId\n          }\n        }\n        networkInfo = { ...networkInfo, platformId, nativeAssetId }\n\n        callback(networkInfo)\n      })()\n    ]),\n    timeout()\n  ])\n\n  networkInfo = { ...networkInfo, flagged: flagged || info === 'timeout reached' }\n  callback(networkInfo)\n\n  provider.destroy()\n}\n\n// call this if you have the network props already calculated\nexport function getFeaturesByNetworkProperties(\n  networkInfo: NetworkInfo | NetworkInfoLoading<NetworkInfo> | undefined\n): NetworkFeature[] {\n  const features: NetworkFeature[] = [\n    {\n      id: 'saSupport',\n      title: 'Ambire Smart Accounts',\n      level: 'loading'\n    },\n    {\n      id: 'simulation',\n      title: 'Transaction simulation',\n      level: 'loading'\n    },\n    {\n      id: 'prices',\n      title: 'Token prices',\n      level: 'loading'\n    }\n  ]\n\n  if (!networkInfo) return features.map((f) => ({ ...f, level: 'initial' }))\n\n  const {\n    flagged,\n    isSAEnabled,\n    areContractsDeployed,\n    erc4337,\n    rpcNoStateOverride,\n    nativeAssetId,\n    chainId,\n    hasSingleton,\n    force4337\n  } = networkInfo\n\n  const updateFeature = (\n    id: string,\n    update: {\n      msg: string\n      title?: string\n      level: 'success' | 'danger' | 'warning' | 'loading'\n    }\n  ) => {\n    const foundFeature = features.find((f) => f.id === id)\n\n    if (foundFeature) {\n      Object.assign(foundFeature, update)\n    }\n  }\n  if (flagged && flagged !== 'LOADING') {\n    return [\n      {\n        id: 'flagged',\n        title: 'RPC error',\n        level: 'danger',\n        msg: 'We were unable to fetch the network information with the provided RPC. Try choosing a different RPC.'\n      }\n    ]\n  }\n\n  if (\n    [isSAEnabled, areContractsDeployed, erc4337, hasSingleton, force4337].every(\n      (p) => p !== 'LOADING'\n    )\n  ) {\n    if (!isSAEnabled) {\n      updateFeature('saSupport', {\n        level: 'danger',\n        title: 'Smart contract wallets are not supported',\n        msg: hasSingleton\n          ? 'We were unable to detect Smart Account support on the network with the provided RPC. Try choosing a different RPC.'\n          : 'Unfortunately, this network doesn’t support Smart Accounts. It can be used only with Basic Accounts (EOAs).'\n      })\n    }\n\n    const predefinedNetSettings = predefinedNetworks.find((net) => net.chainId === chainId)\n\n    const erc4337Settings = {\n      enabled: is4337Enabled(\n        (erc4337 as Erc4337settings).enabled,\n        predefinedNetSettings,\n        force4337 as boolean | undefined\n      ),\n      hasPaymaster: predefinedNetSettings\n        ? predefinedNetSettings.erc4337.hasPaymaster\n        : (erc4337 as Erc4337settings).hasPaymaster\n    }\n\n    const title = (erc4337Settings as any)?.enabled\n      ? 'Ambire Smart Accounts via ERC-4337 (Account Abstraction)'\n      : 'Ambire Smart Accounts'\n\n    if (isSAEnabled && areContractsDeployed) {\n      updateFeature('saSupport', {\n        title,\n        level: 'success',\n        msg: \"This network supports Smart Accounts, and Ambire Wallet's smart contracts are deployed.\"\n      })\n    } else if (isSAEnabled && !areContractsDeployed) {\n      updateFeature('saSupport', {\n        title,\n        level: 'warning',\n        msg: \"This network supports Smart Accounts, but Ambire Wallet's contracts have not yet been deployed. You can deploy them by using a Basic Account and the Deploy contracts option to unlock the Smart Accounts feature. Otherwise, only Basic Accounts (EOAs) can be used on this network.\"\n      })\n    }\n  }\n\n  if ([rpcNoStateOverride].every((p) => p !== 'LOADING')) {\n    const isPredefinedNetwork = predefinedNetworks.find((net) => net.chainId === chainId)\n    if (!rpcNoStateOverride && isPredefinedNetwork) {\n      updateFeature('simulation', {\n        level: 'success',\n        title: 'Transaction simulation is fully supported',\n        msg: 'Transaction simulation helps predict the outcome of a transaction and your future account balance before it’s broadcasted to the blockchain, enhancing security.'\n      })\n    } else if (!rpcNoStateOverride) {\n      updateFeature('simulation', {\n        level: 'warning',\n        title: 'Transaction simulation is partially supported',\n        msg: 'Transaction simulation, one of our security features that predicts the outcome of a transaction before it is broadcast to the blockchain, is not fully functioning on this chain. The reasons might be network or RPC limitations. Try choosing a different RPC.'\n      })\n    } else {\n      updateFeature('simulation', {\n        level: 'danger',\n        title: 'Transaction simulation is not supported',\n        msg: \"Transaction simulation helps predict the outcome of a transaction and your future account balance before it’s broadcasted to the blockchain, enhancing security. Unfortunately, this feature isn't available for the current network or RPC. Try choosing a different RPC.\"\n      })\n    }\n  }\n\n  if (nativeAssetId !== 'LOADING') {\n    const hasNativeAssetId = nativeAssetId && nativeAssetId !== ''\n    updateFeature('prices', {\n      level: hasNativeAssetId ? 'success' : 'danger',\n      msg: hasNativeAssetId\n        ? 'We pull token price information in real-time using third-party providers.'\n        : \"Our third-party providers don't support this network yet, so we cannot show token prices.\"\n    })\n  }\n\n  return features\n}\n\n// call this if you have only the rpcUrls and chainId\n// this method makes an RPC request, calculates the network info and returns the features\nexport function getFeatures(\n  networkInfo: NetworkInfoLoading<NetworkInfo> | undefined\n): NetworkFeature[] {\n  return getFeaturesByNetworkProperties(networkInfo)\n}\n\n// Since v4.24.0, a new Network interface has been introduced,\n// that replaces the old NetworkDescriptor, NetworkPreference, and CustomNetwork.\n// Previously, only NetworkPreferences were stored, with other network properties\n// being calculated in a getter each time the networks were needed.\n// Now, all network properties are pre-calculated and stored in a structured format: { [key: NetworkId]: Network } in the storage.\n// This function migrates the data from the old NetworkPreferences to the new structure\n// to ensure compatibility and prevent breaking the extension after updating to v4.24.0\nexport async function migrateNetworkPreferencesToNetworks(networkPreferences: {\n  [key: NetworkId]: Partial<Network>\n}) {\n  const predefinedNetworkIds = predefinedNetworks.map((n) => n.id)\n  const customNetworkIds = Object.keys(networkPreferences).filter(\n    (k) => !predefinedNetworkIds.includes(k)\n  )\n\n  const networksToStore: { [key: NetworkId]: Network } = {}\n\n  predefinedNetworks.forEach((n) => {\n    networksToStore[n.id] = n\n  })\n  customNetworkIds.forEach((networkId: NetworkId) => {\n    const preference = networkPreferences[networkId]\n    const networkInfo = {\n      chainId: preference.chainId!,\n      isSAEnabled: preference.isSAEnabled ?? false,\n      isOptimistic: preference.isOptimistic ?? false,\n      rpcNoStateOverride: preference.rpcNoStateOverride ?? true,\n      erc4337: preference.erc4337 ?? {\n        enabled: false,\n        hasPaymaster: false,\n        hasBundlerSupport: false\n      },\n      areContractsDeployed: preference.areContractsDeployed ?? false,\n      feeOptions: { is1559: (preference as any).is1559 ?? false },\n      platformId: preference.platformId ?? '',\n      nativeAssetId: preference.nativeAssetId ?? '',\n      flagged: preference.flagged ?? false,\n      hasSingleton: preference.hasSingleton ?? false\n    }\n    delete (preference as any).is1559\n    networksToStore[networkId] = {\n      id: networkId,\n      ...preference,\n      ...networkInfo,\n      features: getFeaturesByNetworkProperties(networkInfo),\n      hasRelayer: !!relayerAdditionalNetworks.find((net) => net.chainId === preference.chainId!),\n      predefined: false\n    } as Network\n  })\n\n  return networksToStore\n}\n\n// is the user allowed to change the network settings to 4337\nexport function canForce4337(network?: Network) {\n  return network && network.allowForce4337\n}\n\nexport function hasRelayerSupport(network: Network) {\n  return (\n    network.hasRelayer || !!relayerAdditionalNetworks.find((net) => net.chainId === network.chainId)\n  )\n}\n"]}