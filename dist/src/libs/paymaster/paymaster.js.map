{"version":3,"file":"paymaster.js","sourceRoot":"","sources":["../../../../src/libs/paymaster/paymaster.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable no-console */\nimport { AbiCoder, Contract, toBeHex } from 'ethers'\n\nimport entryPointAbi from '../../../contracts/compiled/EntryPoint.json'\nimport { FEE_COLLECTOR } from '../../consts/addresses'\nimport { AMBIRE_PAYMASTER, ERC_4337_ENTRYPOINT } from '../../consts/deploy'\nimport { Account } from '../../interfaces/account'\nimport { Hex } from '../../interfaces/hex'\nimport { Network } from '../../interfaces/network'\nimport { RPCProvider } from '../../interfaces/provider'\nimport { failedPaymasters } from '../../services/paymaster/FailedPaymasters'\nimport { AccountOp } from '../accountOp/accountOp'\nimport { Call } from '../accountOp/types'\nimport { getFeeCall } from '../calls/calls'\nimport { getPaymasterData, getPaymasterStubData } from '../erc7677/erc7677'\nimport {\n  PaymasterErrorReponse,\n  PaymasterEstimationData,\n  PaymasterService,\n  PaymasterSuccessReponse\n} from '../erc7677/types'\nimport { RelayerPaymasterError, SponsorshipPaymasterError } from '../errorDecoder/customErrors'\nimport { getHumanReadableBroadcastError } from '../errorHumanizer'\nimport { PAYMASTER_DOWN_BROADCAST_ERROR_MESSAGE } from '../errorHumanizer/broadcastErrorHumanizer'\nimport { getFeeTokenForEstimate } from '../estimate/estimateHelpers'\nimport { TokenResult } from '../portfolio'\nimport { UserOperation } from '../userOperation/types'\nimport { getCleanUserOp, getSigForCalculations } from '../userOperation/userOperation'\nimport { AbstractPaymaster } from './abstractPaymaster'\n\ntype PaymasterType = 'Ambire' | 'ERC7677' | 'None'\n\nexport function getPaymasterDataForEstimate(): PaymasterEstimationData {\n  const abiCoder = new AbiCoder()\n  return {\n    paymaster: AMBIRE_PAYMASTER,\n    paymasterVerificationGasLimit: toBeHex(100000) as Hex,\n    paymasterPostOpGasLimit: toBeHex(0) as Hex,\n    paymasterData: abiCoder.encode(\n      ['uint48', 'uint48', 'bytes'],\n      [0, 0, getSigForCalculations()]\n    ) as Hex\n  }\n}\n\nexport class Paymaster extends AbstractPaymaster {\n  callRelayer: Function\n\n  type: PaymasterType = 'None'\n\n  sponsorDataEstimation: PaymasterEstimationData | undefined\n\n  paymasterService: PaymasterService | null = null\n\n  network: Network | null = null\n\n  provider: RPCProvider | null = null\n\n  errorCallback: Function | undefined = undefined\n\n  constructor(callRelayer: Function, errorCallback: Function) {\n    super()\n    this.callRelayer = callRelayer\n    this.errorCallback = errorCallback\n  }\n\n  async init(op: AccountOp, userOp: UserOperation, network: Network, provider: RPCProvider) {\n    this.network = network\n    this.provider = provider\n\n    if (op.meta?.paymasterService && !op.meta?.paymasterService.failed) {\n      try {\n        this.paymasterService = op.meta.paymasterService\n        const response = await Promise.race([\n          getPaymasterStubData(op.meta.paymasterService, userOp, network),\n          new Promise((_resolve, reject) => {\n            setTimeout(() => reject(new Error('Sponsorship error, request too slow')), 5000)\n          })\n        ])\n        this.sponsorDataEstimation = response as PaymasterEstimationData\n        this.type = 'ERC7677'\n        return\n      } catch (e) {\n        // TODO: error handling\n        console.log(e)\n      }\n    }\n\n    // has the paymaster dried up\n    const seenInsufficientFunds =\n      failedPaymasters.insufficientFundsNetworks[Number(this.network.chainId)]\n\n    if (network.erc4337.hasPaymaster && !seenInsufficientFunds) {\n      this.type = 'Ambire'\n      return\n    }\n\n    // for custom networks, check if the paymaster there has balance\n    if (!network.predefined || seenInsufficientFunds) {\n      try {\n        const ep = new Contract(ERC_4337_ENTRYPOINT, entryPointAbi, provider)\n        const paymasterBalance = await ep.balanceOf(AMBIRE_PAYMASTER)\n\n        // if the network paymaster has failed because of insufficient funds,\n        // disable it before getting a top up\n        const minBalance = seenInsufficientFunds ? seenInsufficientFunds.lastSeenBalance : 0n\n        if (paymasterBalance > minBalance) {\n          this.type = 'Ambire'\n          if (seenInsufficientFunds) failedPaymasters.removeInsufficientFunds(network)\n          return\n        }\n      } catch (e) {\n        console.log('failed to retrieve the balance of the paymaster')\n        console.error(e)\n      }\n    }\n\n    this.type = 'None'\n  }\n\n  shouldIncludePayment(): boolean {\n    return this.type === 'Ambire' || this.type === 'ERC7677'\n  }\n\n  getFeeCallForEstimation(feeTokens: TokenResult[]): Call | undefined {\n    if (!this.network) throw new Error('network not set, did you call init?')\n\n    if (this.type === 'Ambire') {\n      const feeToken = getFeeTokenForEstimate(feeTokens, this.network)\n      if (!feeToken) return undefined\n\n      return getFeeCall(feeToken)\n    }\n\n    // hardcode USDC gas tank 0 for sponsorships\n    if (this.type === 'ERC7677') {\n      const abiCoder = new AbiCoder()\n      return {\n        to: FEE_COLLECTOR,\n        value: 0n,\n        data: abiCoder.encode(['string', 'uint256', 'string'], ['gasTank', 0n, 'USDC'])\n      }\n    }\n\n    return undefined\n  }\n\n  getEstimationData(): PaymasterEstimationData | null {\n    if (this.type === 'ERC7677') return this.sponsorDataEstimation as PaymasterEstimationData\n\n    if (this.type === 'Ambire') return getPaymasterDataForEstimate()\n\n    return null\n  }\n\n  isSponsored(): boolean {\n    return this.type === 'ERC7677'\n  }\n\n  isUsable() {\n    return this.type !== 'None'\n  }\n\n  async #retryPaymasterRequest(\n    apiCall: Function,\n    counter = 0\n  ): Promise<PaymasterSuccessReponse | PaymasterErrorReponse> {\n    // retry the request 3 times before declaring it a failure\n    if (counter >= 3) {\n      const e = new Error('Ambire relayer error timeout')\n      const convertedError = new RelayerPaymasterError(e)\n      const { message } = getHumanReadableBroadcastError(convertedError)\n      return {\n        success: false,\n        message,\n        error: e\n      }\n    }\n\n    try {\n      const response = await Promise.race([\n        apiCall(),\n        new Promise((_resolve, reject) => {\n          setTimeout(() => reject(new Error('Ambire relayer error timeout')), 8000)\n        })\n      ])\n\n      return {\n        success: true,\n        paymaster: this.type === 'Ambire' ? AMBIRE_PAYMASTER : response.paymaster,\n        paymasterData: this.type === 'Ambire' ? response.data.paymasterData : response.paymasterData\n      }\n    } catch (e: any) {\n      if (e.message === 'Ambire relayer error timeout') {\n        if (this.errorCallback) {\n          this.errorCallback({\n            level: 'major',\n            message: 'Paymaster is not responding. Retrying...',\n            error: new Error('Paymaster call timeout')\n          })\n        }\n        const increment = counter + 1\n        return this.#retryPaymasterRequest(apiCall, increment)\n      }\n\n      const convertedError =\n        this.type === 'ERC7677' ? new SponsorshipPaymasterError() : new RelayerPaymasterError(e)\n      const { message } = getHumanReadableBroadcastError(convertedError)\n      return {\n        success: false,\n        message,\n        error: e\n      }\n    }\n  }\n\n  async #ambireCall(\n    acc: Account,\n    op: AccountOp,\n    userOp: UserOperation\n  ): Promise<PaymasterSuccessReponse | PaymasterErrorReponse> {\n    if (!this.provider) throw new Error('provider not set, did you call init?')\n    if (!this.network) throw new Error('network not set, did you call init?')\n\n    // request the paymaster with a timeout window\n    const localUserOp = { ...userOp }\n    localUserOp.paymaster = AMBIRE_PAYMASTER\n    return this.#retryPaymasterRequest(() => {\n      return this.callRelayer(`/v2/paymaster/${op.networkId}/sign`, 'POST', {\n        userOperation: getCleanUserOp(localUserOp)[0],\n        paymaster: AMBIRE_PAYMASTER,\n        bytecode: acc.creation!.bytecode,\n        salt: acc.creation!.salt,\n        key: acc.associatedKeys[0],\n        // eslint-disable-next-line no-underscore-dangle\n        rpcUrl: this.provider!._getConnection().url,\n        bundler: userOp.bundler\n      })\n    })\n  }\n\n  async #erc7677Call(op: AccountOp, userOp: UserOperation, network: Network) {\n    const sponsorData = this.sponsorDataEstimation as PaymasterEstimationData\n\n    // no need to do an extra call if the dapp has already provided sponsorship\n    if ('isFinal' in sponsorData && sponsorData.isFinal)\n      return {\n        success: true,\n        paymaster: sponsorData.paymaster,\n        paymasterData: sponsorData.paymasterData\n      }\n\n    const localUserOp = { ...userOp }\n    localUserOp.paymaster = sponsorData.paymaster\n    localUserOp.paymasterData = sponsorData.paymasterData\n    const response = await this.#retryPaymasterRequest(() => {\n      return getPaymasterData(this.paymasterService as PaymasterService, localUserOp, network)\n    })\n\n    if (\n      !response.success &&\n      (response as PaymasterErrorReponse).message !== PAYMASTER_DOWN_BROADCAST_ERROR_MESSAGE &&\n      op.meta &&\n      op.meta.paymasterService\n    ) {\n      failedPaymasters.addFailedSponsorship(op.meta.paymasterService.id)\n    }\n\n    return response\n  }\n\n  async call(\n    acc: Account,\n    op: AccountOp,\n    userOp: UserOperation,\n    network: Network\n  ): Promise<PaymasterSuccessReponse | PaymasterErrorReponse> {\n    if (this.type === 'Ambire') return this.#ambireCall(acc, op, userOp)\n\n    if (this.type === 'ERC7677') return this.#erc7677Call(op, userOp, network)\n\n    throw new Error('Paymaster not configured. Please contact support')\n  }\n}\n"]}