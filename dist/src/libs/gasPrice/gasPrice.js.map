{"version":3,"file":"gasPrice.js","sourceRoot":"","sources":["../../../../src/libs/gasPrice/gasPrice.ts"],"names":[],"mappings":"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","sourcesContent":["import { Block, Interface, JsonRpcProvider, Provider } from 'ethers'\n\nimport AmbireAccount from '../../../contracts/compiled/AmbireAccount.json'\nimport AmbireFactory from '../../../contracts/compiled/AmbireFactory.json'\nimport { Account, AccountOnchainState } from '../../interfaces/account'\nimport { Network } from '../../interfaces/network'\nimport { AccountOp, getSignableCalls } from '../accountOp/accountOp'\nimport { getActivatorCall, shouldIncludeActivatorCall } from '../userOperation/userOperation'\n\n// https://eips.ethereum.org/EIPS/eip-1559\nconst DEFAULT_BASE_FEE_MAX_CHANGE_DENOMINATOR = 8n\nconst DEFAULT_ELASTICITY_MULTIPLIER = 2n\n\n// a 1 gwei min for gas price, non1559 networks\nexport const MIN_GAS_PRICE = 1000000000n\n\n// multipliers from the old: https://github.com/AmbireTech/relayer/blob/wallet-v2/src/utils/gasOracle.js#L64-L76\n// 2x, 2x*0.4, 2x*0.2 - all of them divided by 8 so 0.25, 0.1, 0.05 - those seem usable; with a slight tweak for the ape\nconst speeds = [\n  { name: 'slow', baseFeeAddBps: 0n },\n  { name: 'medium', baseFeeAddBps: 500n },\n  { name: 'fast', baseFeeAddBps: 1000n },\n  { name: 'ape', baseFeeAddBps: 1500n }\n]\n\nexport interface GasPriceRecommendation {\n  name: string\n  gasPrice: bigint\n}\nexport interface Gas1559Recommendation {\n  name: string\n  baseFeePerGas: bigint\n  maxPriorityFeePerGas: bigint\n}\nexport type GasRecommendation = GasPriceRecommendation | Gas1559Recommendation\n\n// https://stackoverflow.com/questions/20811131/javascript-remove-outlier-from-an-array\nfunction filterOutliers(data: bigint[]): bigint[] {\n  if (!data.length) return []\n\n  // numeric sort, a - b doesn't work for bigint\n  data.sort((a, b) => {\n    if (a === b) return 0\n    if (a > b) return 1\n    return -1\n  })\n\n  const q1 = data[Math.floor(data.length / 4)]\n  const endPosition = Math.ceil(data.length * (3 / 4))\n  const q2 = data[endPosition < data.length ? endPosition : data.length - 1]\n  const iqr = q2 - q1\n  const maxValue = q2 + (iqr * 15n) / 10n\n  const minValue = q1 - (iqr * 15n) / 10n\n  const filteredValues = data.filter((x) => x <= maxValue && x >= minValue)\n  return filteredValues\n}\n\nfunction nthGroup(data: bigint[], n: number, outOf: number): bigint[] {\n  const step = Math.floor(data.length / outOf)\n  const at = n * step\n\n  // if n is 3 (ape speed) and we have at least 4 txns in the previous block,\n  // we want to include the remaining high cost transactions in the group.\n  // Example: 15 txns make 3 groups of 3 for slow, medium and fast, totalling 9\n  // the remaining 6 get included in the ape calculation\n  const end = n !== 3 || data.length < 4 ? at + Math.max(1, step) : data.length\n  return data.slice(at, end)\n}\n\nfunction average(data: bigint[]): bigint {\n  if (data.length === 0) return 0n\n  return data.reduce((a, b) => a + b, 0n) / BigInt(data.length)\n}\n\nfunction getNetworkMinBaseFee(network: Network, lastBlock: Block): bigint {\n  // if we have a minBaseFee set in our config, use it\n  if (network.feeOptions.minBaseFee) return network.feeOptions.minBaseFee\n\n  // if we don't have a config, we return 0\n  if (network.predefined && !network.feeOptions.minBaseFeeEqualToLastBlock) return 0n\n\n  // if it's a custom network and it has EIP-1559, set the minimum\n  // to the lastBlock's baseFeePerGas. Every chain is free to tweak\n  // its EIP-1559 implementation as it deems fit. Therefore, we have no\n  // guarantee the 12.5% block base fee reduction will actually happen.\n  // if it doesn't and we reduce the baseFee with our calculations,\n  // most often than not the transaction will just get stuck.\n  //\n  // Transaction fees are no longer an issue on L2s.\n  // Having the user spend a fraction of the cent more is way better\n  // than having his txns constantly getting stuck\n  return lastBlock.baseFeePerGas ?? 0n\n}\n\n// if there's an RPC issue, try refetching the block at least\n// 5 times before declaring a failure\nasync function refetchBlock(\n  provider: Provider,\n  blockTag: string | number = -1,\n  counter = 0\n): Promise<Block> {\n  // the reason we throw an error here is that getGasPriceRecommendations is\n  // used in main.ts #updateGasPrice where we emit an error with a predefined\n  // msg, which in turn displays a notification popup with the error.\n  // If we change the design and decide to display this as an error\n  // somewhere else, we should probably not throw, but return the\n  // error instead\n  if (counter >= 5) throw new Error('unable to retrieve block')\n\n  let lastBlock = null\n  try {\n    const response = await Promise.race([\n      provider.getBlock(blockTag, true),\n      new Promise((_resolve, reject) => {\n        setTimeout(() => reject(new Error('last block failed to resolve, request too slow')), 6000)\n      })\n    ])\n    lastBlock = response as Block\n  } catch (e) {\n    lastBlock = null\n  }\n\n  if (!lastBlock) {\n    const localCounter = counter + 1\n    lastBlock = await refetchBlock(provider, blockTag, localCounter)\n  }\n\n  return lastBlock\n}\n\nexport async function getGasPriceRecommendations(\n  provider: Provider,\n  network: Network,\n  blockTag: string | number = -1\n): Promise<{ gasPrice: GasRecommendation[]; blockGasLimit: bigint }> {\n  const [lastBlock, ethGasPrice] = await Promise.all([\n    refetchBlock(provider, blockTag),\n    (provider as JsonRpcProvider).send('eth_gasPrice', []).catch((e) => {\n      console.log('eth_gasPrice failed because of the following reason:')\n      console.log(e)\n      return '0x'\n    })\n  ])\n  // https://github.com/ethers-io/ethers.js/issues/3683#issuecomment-1436554995\n  const txns = lastBlock.prefetchedTransactions\n\n  if (\n    network.feeOptions.is1559 &&\n    lastBlock.baseFeePerGas != null &&\n    lastBlock.baseFeePerGas !== 0n\n  ) {\n    // https://eips.ethereum.org/EIPS/eip-1559\n    const elasticityMultiplier =\n      network.feeOptions.elasticityMultiplier ?? DEFAULT_ELASTICITY_MULTIPLIER\n    const baseFeeMaxChangeDenominator =\n      network.feeOptions.baseFeeMaxChangeDenominator ?? DEFAULT_BASE_FEE_MAX_CHANGE_DENOMINATOR\n\n    const gasTarget = lastBlock.gasLimit / elasticityMultiplier\n    const baseFeePerGas = lastBlock.baseFeePerGas\n    const getBaseFeeDelta = (delta: bigint) =>\n      (baseFeePerGas * delta) / gasTarget / baseFeeMaxChangeDenominator\n    let expectedBaseFee = baseFeePerGas\n    if (lastBlock.gasUsed > gasTarget) {\n      const baseFeeDelta = getBaseFeeDelta(lastBlock.gasUsed - gasTarget)\n      expectedBaseFee += baseFeeDelta === 0n ? 1n : baseFeeDelta\n    } else if (lastBlock.gasUsed < gasTarget) {\n      const baseFeeDelta = getBaseFeeDelta(gasTarget - lastBlock.gasUsed)\n      expectedBaseFee -= baseFeeDelta\n    }\n\n    // if the estimated fee is below the chain minimum, set it to the min\n    const minBaseFee = getNetworkMinBaseFee(network, lastBlock)\n    if (expectedBaseFee < minBaseFee) expectedBaseFee = minBaseFee\n\n    const tips = filterOutliers(txns.map((x) => x.maxPriorityFeePerGas!).filter((x) => x > 0))\n    const fee: Gas1559Recommendation[] = []\n    speeds.forEach(({ name, baseFeeAddBps }, i) => {\n      const baseFee = expectedBaseFee + (expectedBaseFee * baseFeeAddBps) / 10000n\n      let maxPriorityFeePerGas = average(nthGroup(tips, i, speeds.length))\n\n      // set a bare minimum of 100000n for maxPriorityFeePerGas\n      maxPriorityFeePerGas = maxPriorityFeePerGas >= 100000n ? maxPriorityFeePerGas : 100000n\n\n      // compare the maxPriorityFeePerGas with the previous speed\n      // if it's not at least 12% bigger, then replace the calculated one\n      // with at least 12% bigger maxPriorityFeePerGas.\n      // This is most impactufull on L2s where txns get stuck for low maxPriorityFeePerGas\n      //\n      // if the speed is ape, make it 50% more\n      const prevSpeed = fee.length ? fee[i - 1].maxPriorityFeePerGas : null\n      if (prevSpeed) {\n        const divider = name === 'ape' ? 2n : 8n\n        const min = prevSpeed + prevSpeed / divider\n        if (maxPriorityFeePerGas < min) maxPriorityFeePerGas = min\n      }\n\n      fee.push({\n        name,\n        baseFeePerGas: baseFee,\n        maxPriorityFeePerGas\n      })\n    })\n    return { gasPrice: fee, blockGasLimit: lastBlock.gasLimit }\n  }\n  const prices = filterOutliers(txns.map((x) => x.gasPrice!).filter((x) => x > 0))\n\n  // use th fetched price as a min if not 0 as it could be actually lower\n  // than the hardcoded MIN.\n  const minOrFetchedGasPrice = ethGasPrice !== '0x' ? BigInt(ethGasPrice) : MIN_GAS_PRICE\n\n  const fee = speeds.map(({ name }, i) => {\n    const avgGasPrice = average(nthGroup(prices, i, speeds.length))\n    return {\n      name,\n      gasPrice: avgGasPrice >= minOrFetchedGasPrice ? avgGasPrice : minOrFetchedGasPrice\n    }\n  })\n  return { gasPrice: fee, blockGasLimit: lastBlock.gasLimit }\n}\n\nexport function getProbableCallData(\n  account: Account,\n  accountOp: AccountOp,\n  accountState: AccountOnchainState,\n  network: Network\n): string {\n  let estimationCallData\n\n  // include the activator call for estimation if any\n  const localOp = { ...accountOp }\n  if (shouldIncludeActivatorCall(network, account, accountState, false)) {\n    localOp.activatorCall = getActivatorCall(localOp.accountAddr)\n  }\n\n  // always call executeMultiple as the worts case scenario\n  // we disregard the initCode\n  if (accountState.isDeployed) {\n    const ambireAccount = new Interface(AmbireAccount.abi)\n    estimationCallData = ambireAccount.encodeFunctionData('executeMultiple', [\n      [\n        [\n          getSignableCalls(localOp),\n          '0x0dc2d37f7b285a2243b2e1e6ba7195c578c72b395c0f76556f8961b0bca97ddc44e2d7a249598f56081a375837d2b82414c3c94940db3c1e64110108021161ca1c01'\n        ]\n      ]\n    ])\n  } else {\n    // deployAndExecuteMultiple is the worst case\n    const ambireFactory = new Interface(AmbireFactory.abi)\n    estimationCallData = ambireFactory.encodeFunctionData('deployAndExecuteMultiple', [\n      '0x7f00000000000000000000000000000000000000000000000000000000000000017fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5553d602d80604d3d3981f3363d3d373d3d3d363d7353a31973ebcc225e219bb0d7c0c9324773f5b3e95af43d82803e903d91602b57fd5bf3',\n      '0x0000000000000000000000000000000000000000000000000000000000000000',\n      [\n        [\n          getSignableCalls(localOp),\n          '0x0dc2d37f7b285a2243b2e1e6ba7195c578c72b395c0f76556f8961b0bca97ddc44e2d7a249598f56081a375837d2b82414c3c94940db3c1e64110108021161ca1c01'\n        ]\n      ]\n    ])\n  }\n\n  return estimationCallData\n}\n"]}