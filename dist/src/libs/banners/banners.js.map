{"version":3,"file":"banners.js","sourceRoot":"","sources":["../../../../src/libs/banners/banners.ts"],"names":[],"mappings":"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","sourcesContent":["import { Account } from '../../interfaces/account'\nimport { AccountOpAction, Action as ActionFromActionsQueue } from '../../interfaces/actions'\n// eslint-disable-next-line import/no-cycle\nimport { Action, Banner } from '../../interfaces/banner'\nimport { Network } from '../../interfaces/network'\nimport { RPCProviders } from '../../interfaces/provider'\nimport { SelectedAccountPortfolioState } from '../../interfaces/selectedAccount'\nimport { ActiveRoute } from '../../interfaces/swapAndBridge'\nimport {\n  AccountState as DefiPositionsAccountState,\n  DeFiPositionsError,\n  NetworksWithPositions\n} from '../defiPositions/types'\nimport { getNetworksWithFailedRPC } from '../networks/networks'\nimport { AccountAssetsState } from '../portfolio/interfaces'\nimport { PORTFOLIO_LIB_ERROR_NAMES } from '../portfolio/portfolio'\nimport { getIsBridgeTxn, getQuoteRouteSteps } from '../swapAndBridge/swapAndBridge'\n\nconst getBridgeBannerTitle = (routeStatus: ActiveRoute['routeStatus']) => {\n  switch (routeStatus) {\n    case 'completed':\n      return 'Bridge request completed'\n    case 'in-progress':\n      return 'Bridge request in progress'\n    default:\n      return 'Bridge request awaiting signature'\n  }\n}\n\nconst getBridgeActionText = (routeStatus: ActiveRoute['routeStatus'], isBridgeTxn: boolean) => {\n  if (isBridgeTxn) {\n    return routeStatus === 'completed' ? 'Bridged' : 'Bridge'\n  }\n\n  return routeStatus === 'completed' ? 'Swapped' : 'Swap'\n}\n\nconst getBridgeBannerText = (route: ActiveRoute, isBridgeTxn: boolean, networks?: Network[]) => {\n  const steps = getQuoteRouteSteps(route.route.userTxs)\n  const actionText = getBridgeActionText(route.routeStatus, isBridgeTxn)\n  const fromAssetSymbol = steps[0].fromAsset.symbol\n  const toAssetSymbol = steps[steps.length - 1].toAsset.symbol\n\n  let assetsText = `${fromAssetSymbol} to ${toAssetSymbol}`\n\n  if (networks) {\n    const fromAssetNetwork = networks.find((n) => Number(n.chainId) === steps[0].fromAsset.chainId)\n    const toAssetNetwork = networks.find(\n      (n) => Number(n.chainId) === steps[steps.length - 1].toAsset.chainId\n    )\n    if (fromAssetNetwork && toAssetNetwork) {\n      assetsText = `${fromAssetSymbol} (on ${fromAssetNetwork.name}) to ${toAssetSymbol} (on ${toAssetNetwork.name})`\n    }\n  }\n\n  const stepsIndexText = `(step ${\n    route.routeStatus === 'completed' ? route.route.totalUserTx : route.route.currentUserTxIndex + 1\n  } of ${route.route.totalUserTx})`\n\n  return `${actionText} ${assetsText}${route.route.totalUserTx > 1 ? ` ${stepsIndexText}` : ''}`\n}\n\nexport const getBridgeBanners = (\n  activeRoutes: ActiveRoute[],\n  accountOpActions: AccountOpAction[],\n  networks: Network[]\n): Banner[] => {\n  const isBridgeTxn = (route: ActiveRoute) =>\n    route.route.userTxs.some((t) => getIsBridgeTxn(t.userTxType))\n  const isRouteTurnedIntoAccountOp = (route: ActiveRoute) => {\n    return accountOpActions.some((action) => {\n      return action.accountOp.calls.some(\n        (call) =>\n          call.fromUserRequestId === route.activeRouteId ||\n          call.fromUserRequestId === `${route.activeRouteId}-revoke-approval` ||\n          call.fromUserRequestId === `${route.activeRouteId}-approval`\n      )\n    })\n  }\n\n  return activeRoutes\n    .filter(isBridgeTxn)\n    .filter((route) => {\n      if (route.routeStatus === 'failed') return false\n      if (route.routeStatus !== 'ready') return true\n      // If the route is ready to be signed, we should display the banner only if it's not turned into an account op\n      // because when it does get turned into an account op, there will be a different banner for that\n      return !isRouteTurnedIntoAccountOp(route)\n    })\n    .map((r) => {\n      const actions: Action[] = []\n\n      if (r.routeStatus === 'in-progress' || r.routeStatus === 'waiting-approval-to-resolve') {\n        actions.push({\n          label: 'Details',\n          actionName: 'open-swap-and-bridge-tab'\n        })\n      }\n\n      if (r.routeStatus === 'completed') {\n        actions.push({\n          label: 'Close',\n          actionName: 'close-bridge',\n          meta: { activeRouteId: r.activeRouteId }\n        })\n      }\n\n      if (r.routeStatus === 'ready') {\n        const isNextTnxForBridging = r.route.currentUserTxIndex >= 1\n\n        actions.push(\n          {\n            label: 'Reject',\n            actionName: 'reject-bridge',\n            meta: { activeRouteId: r.activeRouteId }\n          },\n          {\n            label: isNextTnxForBridging ? 'Proceed to Next Step' : 'Open',\n            actionName: 'proceed-bridge',\n            meta: { activeRouteId: r.activeRouteId }\n          }\n        )\n      }\n\n      return {\n        id: `bridge-${r.activeRouteId}`,\n        type: r.routeStatus === 'completed' ? 'success' : 'info',\n        category: `bridge-${r.routeStatus}`,\n        title: getBridgeBannerTitle(r.routeStatus),\n        text: getBridgeBannerText(r, true, networks),\n        actions\n      }\n    })\n}\n\nexport const getDappActionRequestsBanners = (actions: ActionFromActionsQueue[]): Banner[] => {\n  const requests = actions.filter((a) => !['accountOp', 'benzin'].includes(a.type))\n  if (!requests.length) return []\n\n  return [\n    {\n      id: 'dapp-requests-banner',\n      type: 'info',\n      title: `You have ${requests.length} pending app request${requests.length > 1 ? 's' : ''}`,\n      text: '',\n      actions: [\n        {\n          label: 'Open',\n          actionName: 'open-pending-dapp-requests'\n        }\n      ]\n    }\n  ]\n}\n\nconst getAccountOpBannerText = (\n  activeSwapAndBridgeRoutesForSelectedAccount: ActiveRoute[],\n  chainId: bigint,\n  nonSwapAndBridgeTxns: number,\n  networks: Network[]\n) => {\n  const swapsAndBridges: string[] = []\n  const networkSwapAndBridgeRoutes = activeSwapAndBridgeRoutesForSelectedAccount.filter((route) => {\n    return BigInt(route.route.fromChainId) === chainId\n  })\n\n  if (networkSwapAndBridgeRoutes.length) {\n    networkSwapAndBridgeRoutes.forEach((route) => {\n      const isBridgeTxn = route.route.userTxs.some((t) => getIsBridgeTxn(t.userTxType))\n      const desc = getBridgeBannerText(route, isBridgeTxn, networks)\n\n      swapsAndBridges.push(desc)\n    })\n\n    return `${swapsAndBridges.join(', ')} ${\n      nonSwapAndBridgeTxns\n        ? `and ${nonSwapAndBridgeTxns} other transaction${nonSwapAndBridgeTxns > 1 ? 's' : ''}`\n        : ''\n    }`\n  }\n\n  return ''\n}\n\nexport const getAccountOpBanners = ({\n  accountOpActionsByNetwork,\n  selectedAccount,\n  accounts,\n  networks,\n  swapAndBridgeRoutesPendingSignature\n}: {\n  accountOpActionsByNetwork: {\n    [key: string]: AccountOpAction[]\n  }\n\n  selectedAccount: string\n  accounts: Account[]\n  networks: Network[]\n  swapAndBridgeRoutesPendingSignature: ActiveRoute[]\n}): Banner[] => {\n  if (!accountOpActionsByNetwork) return []\n  const txnBanners: Banner[] = []\n\n  const account = accounts.find((acc) => acc.addr === selectedAccount)\n\n  if (account?.creation) {\n    Object.entries(accountOpActionsByNetwork).forEach(([netId, actions]) => {\n      actions.forEach((action) => {\n        const network = networks.filter((n) => n.id === netId)[0]\n        const nonSwapAndBridgeTxns = action.accountOp.calls.reduce((prev, call) => {\n          const isSwapAndBridge = swapAndBridgeRoutesPendingSignature.some(\n            (route) => route.activeRouteId === call.fromUserRequestId\n          )\n\n          if (isSwapAndBridge) return prev\n\n          return prev + 1\n        }, 0)\n        const text = getAccountOpBannerText(\n          swapAndBridgeRoutesPendingSignature,\n          BigInt(network.chainId),\n          nonSwapAndBridgeTxns,\n          networks\n        )\n\n        txnBanners.push({\n          id: `${selectedAccount}-${netId}`,\n          type: 'info',\n          category: 'pending-to-be-signed-acc-op',\n          title: `Transaction waiting to be signed ${network.name ? `on ${network.name}` : ''}`,\n          text,\n          actions: [\n            {\n              label: 'Reject',\n              actionName: 'reject-accountOp',\n              meta: {\n                err: 'User rejected the transaction request.',\n                actionId: action.id,\n                shouldOpenNextAction: false\n              }\n            },\n            {\n              label: 'Open',\n              actionName: 'open-accountOp',\n              meta: { actionId: action.id }\n            }\n          ]\n        })\n      })\n    })\n  } else {\n    Object.entries(accountOpActionsByNetwork).forEach(([netId, actions]) => {\n      const network = networks.filter((n) => n.id === netId)[0]\n      const nonSwapAndBridgeTxns = actions.reduce((prev, action) => {\n        action.accountOp.calls.forEach((call) => {\n          const isSwapAndBridge = swapAndBridgeRoutesPendingSignature.some(\n            (route) => route.activeRouteId === call.fromUserRequestId\n          )\n\n          if (isSwapAndBridge) return prev\n\n          return prev + 1\n        })\n\n        return prev\n      }, 0)\n\n      const text = getAccountOpBannerText(\n        swapAndBridgeRoutesPendingSignature,\n        BigInt(network.chainId),\n        nonSwapAndBridgeTxns,\n        networks\n      )\n\n      txnBanners.push({\n        id: `${selectedAccount}-${netId}`,\n        type: 'info',\n        title: `${actions.length} transaction${\n          actions.length > 1 ? 's' : ''\n        } waiting to be signed ${network.name ? `on ${network.name}` : ''}`,\n        text,\n        actions: [\n          actions.length <= 1\n            ? {\n                label: 'Reject',\n                actionName: 'reject-accountOp',\n                meta: {\n                  err: 'User rejected the transaction request.',\n                  actionId: actions[0].id\n                }\n              }\n            : undefined,\n          {\n            label: 'Open',\n            actionName: 'open-accountOp',\n            meta: {\n              actionId: actions[0].id\n            }\n          }\n        ].filter(Boolean) as Action[]\n      })\n    })\n  }\n\n  return txnBanners\n}\n\nexport const getKeySyncBanner = (addr: string, email: string, keys: string[]) => {\n  const banner: Banner = {\n    id: `keys-sync:${addr}:${email}`,\n    accountAddr: addr,\n    type: 'info',\n    title: 'Sync Key Store keys',\n    text: 'This account has no signing keys added therefore it is in a view-only mode. Make a request for keys sync from another device.',\n    actions: [\n      {\n        label: 'Sync',\n        actionName: 'sync-keys',\n        meta: { email, keys }\n      }\n    ]\n  }\n  return banner\n}\n"]}