{"version":3,"file":"banners.js","sourceRoot":"","sources":["../../../../src/libs/banners/banners.ts"],"names":[],"mappings":"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","sourcesContent":["import { Account } from '../../interfaces/account'\nimport { AccountOpAction, Action as ActionFromActionsQueue } from '../../interfaces/actions'\n// eslint-disable-next-line import/no-cycle\nimport { Action, Banner, BannerType } from '../../interfaces/banner'\nimport { Network } from '../../interfaces/network'\nimport { CashbackStatusByAccount } from '../../interfaces/selectedAccount'\nimport { SwapAndBridgeActiveRoute } from '../../interfaces/swapAndBridge'\nimport { getIsBridgeTxn } from '../swapAndBridge/swapAndBridge'\n\nconst getBridgeActionText = (\n  routeStatus: SwapAndBridgeActiveRoute['routeStatus'],\n  isBridgeTxn: boolean\n) => {\n  if (isBridgeTxn) {\n    return routeStatus === 'completed' ? 'Bridged' : 'Bridge'\n  }\n\n  return routeStatus === 'completed' ? 'Swapped' : 'Swap'\n}\n\nconst getBridgeBannerText = (\n  route: SwapAndBridgeActiveRoute,\n  isBridgeTxn: boolean,\n  networks?: Network[]\n) => {\n  const steps = route.route?.steps || []\n  if (!steps[0]) return '' // should never happen\n\n  const actionText = getBridgeActionText(route.routeStatus, isBridgeTxn)\n  const fromAssetSymbol = steps[0].fromAsset.symbol\n  const toAssetSymbol = steps[steps.length - 1].toAsset.symbol\n\n  let assetsText = `${fromAssetSymbol} to ${toAssetSymbol}`\n\n  if (networks) {\n    const fromAssetNetwork = networks.find((n) => Number(n.chainId) === steps[0].fromAsset.chainId)\n    const toAssetNetwork = networks.find(\n      (n) => Number(n.chainId) === steps[steps.length - 1].toAsset.chainId\n    )\n    if (fromAssetNetwork && toAssetNetwork) {\n      assetsText = `${fromAssetSymbol} (on ${fromAssetNetwork.name}) to ${toAssetSymbol} (on ${toAssetNetwork.name})`\n    }\n  }\n\n  return `${actionText} ${assetsText}`\n}\n\nexport const getBridgeBanners = (\n  activeRoutes: SwapAndBridgeActiveRoute[],\n  accountOpActions: AccountOpAction[]\n): Banner[] => {\n  const isBridgeTxn = (route: SwapAndBridgeActiveRoute) =>\n    !!route.route?.userTxs.some((t) => getIsBridgeTxn(t.userTxType))\n  const isRouteTurnedIntoAccountOp = (route: SwapAndBridgeActiveRoute) => {\n    return accountOpActions.some((action) => {\n      return action.accountOp.calls.some(\n        (call) =>\n          call.fromUserRequestId === route.activeRouteId ||\n          call.fromUserRequestId === `${route.activeRouteId}-revoke-approval` ||\n          call.fromUserRequestId === `${route.activeRouteId}-approval`\n      )\n    })\n  }\n\n  const filteredRoutes = activeRoutes.filter(isBridgeTxn).filter((route) => {\n    if (route.routeStatus !== 'ready' && route.routeStatus !== 'waiting-approval-to-resolve')\n      return true\n    return !isRouteTurnedIntoAccountOp(route)\n  })\n\n  const inProgressRoutes = filteredRoutes.filter((r) => r.routeStatus === 'in-progress')\n  const failedRoutes = filteredRoutes.filter((r) => r.routeStatus === 'failed')\n  const completedRoutes = filteredRoutes.filter((r) => r.routeStatus === 'completed')\n  const allRoutes = [...inProgressRoutes, ...failedRoutes, ...completedRoutes]\n\n  let title = ''\n  let text = ''\n  let type: BannerType\n  if (inProgressRoutes.length > 0) {\n    type = 'info'\n    title = `Bridge${allRoutes.length > 1 ? 's' : ''} in progress`\n    text = `You have ${allRoutes.length} pending bridge${allRoutes.length > 1 ? 's' : ''}`\n  } else if (failedRoutes.length > 0) {\n    type = 'error'\n    title = `Failed bridge${failedRoutes.length > 1 ? 's' : ''}`\n    text = `You have ${failedRoutes.length} failed bridge${failedRoutes.length > 1 ? 's' : ''}${\n      completedRoutes.length > 1\n        ? ` and ${completedRoutes.length} completed bridge${completedRoutes.length > 1 ? 's' : ''}`\n        : ''\n    }`\n  } else {\n    type = 'success'\n    title = `Bridge${completedRoutes.length > 1 ? 's' : ''} completed`\n    text = `You have ${completedRoutes.length} completed bridge${\n      completedRoutes.length > 1 ? 's' : ''\n    }.`\n  }\n\n  const banners: Banner[] = []\n  if (allRoutes.length > 0) {\n    banners.push({\n      id: 'bridge-in-progress',\n      type,\n      category: 'bridge-in-progress',\n      title,\n      text,\n      actions: [\n        {\n          label: 'Close',\n          actionName: 'close-bridge',\n          meta: {\n            activeRouteIds: allRoutes.map((r) => r.activeRouteId),\n            isHideStyle: true\n          }\n        },\n        {\n          label: 'View',\n          actionName: 'view-bridge'\n        }\n      ]\n    })\n  }\n\n  return banners\n}\n\nexport const getDappActionRequestsBanners = (actions: ActionFromActionsQueue[]): Banner[] => {\n  const requests = actions.filter((a) => !['accountOp', 'benzin', 'swapAndBridge'].includes(a.type))\n  if (!requests.length) return []\n\n  return [\n    {\n      id: 'dapp-requests-banner',\n      type: 'info',\n      title: `You have ${requests.length} pending app request${requests.length > 1 ? 's' : ''}`,\n      text: '',\n      actions: [\n        {\n          label: 'Open',\n          actionName: 'open-pending-dapp-requests'\n        }\n      ]\n    }\n  ]\n}\n\nconst getAccountOpBannerText = (\n  activeSwapAndBridgeRoutesForSelectedAccount: SwapAndBridgeActiveRoute[],\n  chainId: bigint,\n  nonSwapAndBridgeTxns: number,\n  networks: Network[]\n) => {\n  const swapsAndBridges: string[] = []\n  const networkSwapAndBridgeRoutes = activeSwapAndBridgeRoutesForSelectedAccount.filter((route) => {\n    return route.route && BigInt(route.route.fromChainId) === chainId\n  })\n\n  if (networkSwapAndBridgeRoutes.length) {\n    networkSwapAndBridgeRoutes.forEach((route) => {\n      const isBridgeTxn = !!route.route?.userTxs.some((t) => getIsBridgeTxn(t.userTxType))\n      const desc = getBridgeBannerText(route, isBridgeTxn, networks)\n\n      swapsAndBridges.push(desc)\n    })\n\n    return `${swapsAndBridges.join(', ')} ${\n      nonSwapAndBridgeTxns\n        ? `and ${nonSwapAndBridgeTxns} other transaction${nonSwapAndBridgeTxns > 1 ? 's' : ''}`\n        : ''\n    }`\n  }\n\n  return ''\n}\n\nexport const getAccountOpBanners = ({\n  accountOpActionsByNetwork,\n  selectedAccount,\n  accounts,\n  networks,\n  swapAndBridgeRoutesPendingSignature\n}: {\n  accountOpActionsByNetwork: {\n    [key: string]: AccountOpAction[]\n  }\n\n  selectedAccount: string\n  accounts: Account[]\n  networks: Network[]\n  swapAndBridgeRoutesPendingSignature: SwapAndBridgeActiveRoute[]\n}): Banner[] => {\n  if (!accountOpActionsByNetwork) return []\n  const txnBanners: Banner[] = []\n\n  const account = accounts.find((acc) => acc.addr === selectedAccount)\n\n  if (account?.creation) {\n    Object.entries(accountOpActionsByNetwork).forEach(([netId, actions]) => {\n      actions.forEach((action) => {\n        const network = networks.filter((n) => n.chainId.toString() === netId)[0]\n        const nonSwapAndBridgeTxns = action.accountOp.calls.reduce((prev, call) => {\n          const isSwapAndBridge = swapAndBridgeRoutesPendingSignature.some(\n            (route) => route.activeRouteId === call.fromUserRequestId\n          )\n\n          if (isSwapAndBridge) return prev\n\n          return prev + 1\n        }, 0)\n        const text = getAccountOpBannerText(\n          swapAndBridgeRoutesPendingSignature,\n          BigInt(network.chainId),\n          nonSwapAndBridgeTxns,\n          networks\n        )\n\n        txnBanners.push({\n          id: `${selectedAccount}-${netId}`,\n          type: 'info',\n          category: 'pending-to-be-signed-acc-op',\n          title: `Transaction waiting to be signed ${network.name ? `on ${network.name}` : ''}`,\n          text,\n          actions: [\n            {\n              label: 'Reject',\n              actionName: 'reject-accountOp',\n              meta: {\n                err: 'User rejected the transaction request.',\n                actionId: action.id,\n                shouldOpenNextAction: false\n              }\n            },\n            {\n              label: 'Open',\n              actionName: 'open-accountOp',\n              meta: { actionId: action.id }\n            }\n          ]\n        })\n      })\n    })\n  } else {\n    Object.entries(accountOpActionsByNetwork).forEach(([netId, actions]) => {\n      const network = networks.filter((n) => n.chainId.toString() === netId)[0]\n      const nonSwapAndBridgeTxns = actions.reduce((prev, action) => {\n        action.accountOp.calls.forEach((call) => {\n          const isSwapAndBridge = swapAndBridgeRoutesPendingSignature.some(\n            (route) => route.activeRouteId === call.fromUserRequestId\n          )\n\n          if (isSwapAndBridge) return prev\n\n          return prev + 1\n        })\n\n        return prev\n      }, 0)\n\n      const text = getAccountOpBannerText(\n        swapAndBridgeRoutesPendingSignature,\n        BigInt(network.chainId),\n        nonSwapAndBridgeTxns,\n        networks\n      )\n\n      txnBanners.push({\n        id: `${selectedAccount}-${netId}`,\n        type: 'info',\n        title: `${actions.length} transaction${\n          actions.length > 1 ? 's' : ''\n        } waiting to be signed ${network.name ? `on ${network.name}` : ''}`,\n        text,\n        actions: [\n          actions.length <= 1\n            ? {\n                label: 'Reject',\n                actionName: 'reject-accountOp',\n                meta: {\n                  err: 'User rejected the transaction request.',\n                  actionId: actions[0].id\n                }\n              }\n            : undefined,\n          {\n            label: 'Open',\n            actionName: 'open-accountOp',\n            meta: {\n              actionId: actions[0].id\n            }\n          }\n        ].filter(Boolean) as Action[]\n      })\n    })\n  }\n\n  return txnBanners\n}\n\nexport const getKeySyncBanner = (addr: string, email: string, keys: string[]) => {\n  const banner: Banner = {\n    id: `keys-sync:${addr}:${email}`,\n    accountAddr: addr,\n    type: 'info',\n    title: 'Sync Key Store keys',\n    text: 'This account has no signing keys added therefore it is in a view-only mode. Make a request for keys sync from another device.',\n    actions: [\n      {\n        label: 'Sync',\n        actionName: 'sync-keys',\n        meta: { email, keys }\n      }\n    ]\n  }\n  return banner\n}\n\nexport const getFirstCashbackBanners = ({\n  selectedAccountAddr,\n  cashbackStatusByAccount\n}: {\n  selectedAccountAddr: string\n  cashbackStatusByAccount: CashbackStatusByAccount\n}): Banner[] => {\n  const banners: Banner[] = []\n\n  const shouldShowBanner = cashbackStatusByAccount[selectedAccountAddr] === 'unseen-cashback'\n\n  if (shouldShowBanner) {\n    banners.push({\n      id: `${selectedAccountAddr}-first-cashback-banner-banner`,\n      type: 'info',\n      title: \"You've got cashback!\",\n      text: 'You just received your first cashback from paying gas with Smart Account.',\n      actions: [\n        {\n          label: 'Open',\n          actionName: 'open-first-cashback-modal'\n        }\n      ]\n    })\n  }\n\n  return banners\n}\n"]}