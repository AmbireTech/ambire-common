{"version":3,"file":"keyIterator.js","sourceRoot":"","sources":["../../../src/interfaces/keyIterator.ts"],"names":[],"mappings":"","sourcesContent":["import { HD_PATH_TEMPLATE_TYPE } from '../consts/derivation'\nimport { SelectedAccountForImport } from './account'\nimport { ExternalSignerController, Key } from './keystore'\n\nexport interface KeyIterator {\n  type: Key['type']\n  subType?: 'seed' | 'private-key'\n  /** The wallet native SDK instance, if any exists */\n  walletSDK?: any\n  /** Needed for the hardware wallets only */\n  controller?: ExternalSignerController\n  /** Retrieves the the public addresses (accounts) from specific indexes */\n  retrieve: (\n    fromToArr: { from: number; to: number }[],\n    derivation?: HD_PATH_TEMPLATE_TYPE\n  ) => Promise<string[]>\n  /** Retrieves the private keys (optional, for hot wallets only) */\n  retrieveInternalKeys?: (\n    selectedAccountsForImport: SelectedAccountForImport[],\n    hdPathTemplate: HD_PATH_TEMPLATE_TYPE,\n    keystoreKeys: Key[]\n  ) => {\n    addr: string\n    type: 'internal'\n    label: string\n    privateKey: string\n    dedicatedToOneSA: boolean\n    meta: {\n      createdAt: number\n    }\n  }[]\n  /** Checks if the seed matches the key iterator's seed (optional, for hot wallets) */\n  isSeedMatching?: (seedToCompareWith: string) => boolean\n}\n"]}