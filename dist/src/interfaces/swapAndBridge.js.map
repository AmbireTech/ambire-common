{"version":3,"file":"swapAndBridge.js","sourceRoot":"","sources":["../../../src/interfaces/swapAndBridge.ts"],"names":[],"mappings":"","sourcesContent":["export interface SocketAPIResponse<T> {\n  result: T\n  success?: boolean\n  message?: { error?: string; details?: any }\n}\n\nexport interface SocketAPIToken {\n  address: string\n  chainId: number\n  decimals: number\n  icon: string\n  logoURI: string\n  name: string\n  symbol: string\n}\n\nexport interface SwapAndBridgeToToken extends SocketAPIToken {\n  // TODO: Strip out the properties that are not needed.\n}\n\nexport interface SocketAPIQuote {\n  fromAsset: SocketAPIToken\n  fromChainId: number\n  toAsset: SocketAPIToken\n  toChainId: number\n  selectedRoute: SocketAPIRoute\n  selectedRouteSteps: SocketAPIStep[]\n  routes: SocketAPIRoute[]\n}\n\nexport interface SocketAPIRoute {\n  routeId: string\n  isOnlySwapRoute: boolean\n  fromAmount: string\n  toAmount: string\n  usedBridgeNames?: string[]\n  usedDexName?: string\n  totalUserTx: number\n  totalGasFeesInUsd: number\n  recipient: string\n  sender: string\n  userTxs: SocketAPIUserTx[]\n  receivedValueInUsd: number\n  inputValueInUsd: number\n  outputValueInUsd: number\n  serviceTime: number\n  maxServiceTime: number\n  integratorFee: {\n    feeTakerAddress: string\n    amount: string\n    asset: SocketAPIToken\n  }\n  chainGasBalances: object\n  minimumGasBalances: object\n  extraData: object\n  errorMessage?: string\n}\n\nexport interface SocketAPISwapUserTx {\n  userTxType: 'dex-swap'\n  userTxIndex: number\n  txType: string\n  fromAsset: SocketAPIToken\n  toAsset: SocketAPIToken\n  chainId: number\n  fromAmount: string\n  toAmount: string\n  swapSlippage: number\n  sender: string\n  recipient: string\n  protocol: {\n    displayName: string\n    icon: string\n    name: string\n  }\n  minAmountOut: string\n  gasFees: {\n    gasAmount: string\n    gasLimit: number\n    feesInUsd: number\n    asset: SocketAPIToken\n  }\n  approvalData: SocketAPIUserTxApprovalData | null\n}\n\nexport interface SocketAPIBridgeUserTx {\n  userTxType: 'fund-movr'\n  userTxIndex: number\n  txType: string\n  toAsset: SocketAPIToken\n  toAmount: string\n  steps: SocketAPIStep[]\n  stepCount: number\n  serviceTime: number\n  sender: string\n  routePath: string\n  recipient: string\n  maxServiceTime: number\n  gasFees: {\n    gasAmount: string\n    gasLimit: number\n    feesInUsd: number\n    asset: SocketAPIToken\n  }\n  chainId: number\n  bridgeSlippage: number\n  approvalData: SocketAPIUserTxApprovalData | null\n}\n\nexport interface SocketApiSwapStep {\n  chainId: number\n  fromAmount: string\n  fromAsset: SocketAPIToken\n  gasFees: {\n    gasAmount: string\n    gasLimit: number\n    feesInUsd: number\n    asset: SocketAPIToken\n  }\n  minAmountOut: string\n  protocol: {\n    name: string\n    displayName: string\n    icon: string\n  }\n  swapSlippage: number\n  toAmount: string\n  toAsset: SocketAPIToken\n  type: 'middleware' | 'swap'\n  userTxIndex?: number\n}\n\nexport interface SocketApiBridgeStep {\n  fromChainId: number\n  toChainId: number\n  fromAmount: string\n  fromAsset: SocketAPIToken\n  gasFees: {\n    gasAmount: string\n    gasLimit: number\n    feesInUsd: number\n    asset: SocketAPIToken\n  }\n  minAmountOut: string\n  protocol: {\n    name: string\n    displayName: string\n    icon: string\n  }\n  protocolFees: {\n    amount: string\n    asset: SocketAPIToken\n    feesInUsd: number\n  }\n  bridgeSlippage: number\n  toAmount: string\n  toAsset: SocketAPIToken\n  serviceTime: number\n  maxServiceTime: number\n  type: 'bridge'\n  userTxIndex?: number\n}\n\nexport type SocketAPIStep = SocketApiSwapStep | SocketApiBridgeStep\n\nexport type SocketAPIUserTx = SocketAPISwapUserTx | SocketAPIBridgeUserTx\n\nexport type SocketAPIUserTxApprovalData = {\n  allowanceTarget: string\n  approvalTokenAddress: string\n  minimumApprovalAmount: string\n  owner: string\n}\n\nexport type SocketAPISendTransactionRequest = {\n  activeRouteId: number\n  approvalData: SocketAPIUserTxApprovalData | null\n  chainId: number\n  totalUserTx: number\n  txData: string\n  txTarget: string\n  txType: 'eth_sendTransaction'\n  userTxIndex: number\n  userTxType: 'fund-movr' | 'dex-swap'\n  value: string\n}\n\nexport type ActiveRoute = {\n  activeRouteId: SocketAPISendTransactionRequest['activeRouteId']\n  userTxIndex: SocketAPISendTransactionRequest['userTxIndex']\n  userTxHash: string | null\n  route: Omit<SocketAPIQuote['selectedRoute'], 'serviceTime' | 'maxServiceTime'> & {\n    createdAt: string\n    updatedAt: string\n    routeStatus: string\n    fromChainId: number\n    toChainId: number\n    currentUserTxIndex: number\n    transactionData: { txHash: string }[] | null\n    userAddress: string\n  }\n  routeStatus: 'waiting-approval-to-resolve' | 'in-progress' | 'ready' | 'completed' | 'failed'\n  error?: string\n}\n\nexport type SocketAPIActiveRoutes = ActiveRoute['route'] & {\n  activeRouteId: SocketAPISendTransactionRequest['activeRouteId']\n  userAddress: string\n  totalUserTx: number\n  userTxs: SocketAPIUserTx[]\n  fromAssetAddress: string\n  toAssetAddress: string\n  fromAmount: string\n  toAmount: string\n  fromAsset: SocketAPIToken\n  toAsset: SocketAPIToken\n}\n\nexport type SocketRouteStatus = 'ready' | 'completed' | null\n\nexport type SocketAPISupportedChain = {\n  chainId: number\n  name: string\n  isL1: boolean\n  sendingEnabled: boolean\n  icon: string\n  receivingEnabled: boolean\n  refuel: {\n    sendingEnabled: boolean\n    receivingEnabled: boolean\n  }\n  currency: {\n    address: SocketAPIToken['address']\n    icon: SocketAPIToken['icon']\n    name: SocketAPIToken['name']\n    symbol: SocketAPIToken['symbol']\n    decimals: SocketAPIToken['decimals']\n    minNativeCurrencyForGas: string\n  }\n  rpcs: string[]\n  explorers: string[]\n}\n\nexport type CachedSupportedChains = { lastFetched: number; data: SocketAPISupportedChain[] }\n\ntype StringifiedChainId = string\nexport type CachedTokenListKey = `from-${StringifiedChainId}-to-${StringifiedChainId}`\nexport type CachedToTokenLists = {\n  [key: CachedTokenListKey]: { lastFetched: number; data: SocketAPIToken[] }\n}\n"]}