{"version":3,"file":"userRequest.js","sourceRoot":"","sources":["../../../src/interfaces/userRequest.ts"],"names":[],"mappings":"","sourcesContent":["import { SignMessageAction } from '../controllers/actions/actions'\nimport { TypedDataDomain, TypedDataField } from 'ethers'\n\nimport { PaymasterService } from '../libs/erc7677/types'\nimport { AccountId } from './account'\nimport { DappProviderRequest } from './dapp'\nimport { Hex } from './hex'\nimport { EIP7702Signature } from './signatures'\n\nexport interface Calls {\n  kind: 'calls'\n  calls: {\n    to: string\n    value: bigint\n    data: string\n    id?: string\n  }[]\n}\nexport interface PlainTextMessage {\n  kind: 'message'\n  message: string\n}\n\nexport interface TypedMessage {\n  kind: 'typedMessage'\n  domain: TypedDataDomain\n  types: Record<string, Array<TypedDataField>>\n  message: Record<string, any>\n  primaryType: keyof TypedMessage['types']\n}\n\nexport interface Authorization {\n  kind: 'authorization-7702'\n  chainId: bigint\n  nonce: bigint\n  contractAddr: Hex\n  message: Hex\n}\n\n// @TODO: move this type and it's deps (PlainTextMessage, TypedMessage) to another place,\n// probably interfaces\nexport interface Message {\n  fromActionId: SignMessageAction['id']\n  accountAddr: AccountId\n  chainId: bigint\n  content: PlainTextMessage | TypedMessage | Authorization\n  signature: EIP7702Signature | string | null\n}\n\nexport interface SignUserRequest {\n  id: string | number\n  action: Calls | PlainTextMessage | TypedMessage | Authorization | { kind: 'benzin' }\n  session?: DappProviderRequest['session']\n  meta: {\n    isSignAction: true\n    accountAddr: AccountId\n    chainId: bigint\n    paymasterService?: PaymasterService\n    isWalletSendCalls?: boolean\n    submittedAccountOp?: any\n    activeRouteId?: string\n    [key: string]: any\n  }\n  // defined only when SignUserRequest is built from a DappRequest\n  dappPromise?: {\n    session: { name: string; origin: string; icon: string }\n    resolve: (data: any) => void\n    reject: (data: any) => void\n  }\n}\n\nexport interface DappUserRequest {\n  id: string | number\n  action: {\n    kind: Exclude<string, 'calls' | 'message' | 'typedMessage' | 'benzin' | 'switchAccount'>\n    params: any\n  }\n  session: DappProviderRequest['session']\n  meta: {\n    isSignAction: false\n    [key: string]: any\n  }\n  dappPromise: {\n    session: { name: string; origin: string; icon: string }\n    resolve: (data: any) => void\n    reject: (data: any) => void\n  }\n}\n\nexport type UserRequest = DappUserRequest | SignUserRequest\n"]}