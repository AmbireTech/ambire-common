{"version":3,"file":"messenger.js","sourceRoot":"","sources":["../../../src/interfaces/messenger.ts"],"names":[],"mappings":"","sourcesContent":["export type CallbackOptions = {\n  /** The sender of the message. */\n  sender: chrome.runtime.MessageSender\n  /** The topic provided. */\n  topic: string\n  /** An optional scoped identifier. */\n  id?: number | string\n}\n\nexport type CallbackFunction<TPayload, TResponse> = (\n  payload: TPayload,\n  callbackOptions: CallbackOptions\n) => Promise<TResponse>\n\nexport type Source = 'background' | 'content' | 'inpage'\n\nexport type SendMessage<TPayload> = {\n  topic: string\n  payload: TPayload\n  id?: number | string\n}\n\nexport type ReplyMessage<TResponse> = {\n  topic: string\n  id: number | string\n  payload: { response: TResponse; error: Error }\n}\n\nexport interface Messenger {\n  /** Whether or not the messenger is available in the context. */\n  available: boolean\n  /** Name of the messenger */\n  name: string\n  /** Sends a message to the `reply` handler. */\n  send: <TPayload, TResponse>(\n    /** A scoped topic that the `reply` will listen for. */\n    topic: string,\n    /** The payload to send to the `reply` handler. */\n    payload: TPayload,\n    options?: {\n      /** Identify & scope the request via an ID. */\n      id?: string | number\n      [key: string]: any\n    }\n  ) => Promise<TResponse>\n  /** Replies to `send`. */\n  reply: <TPayload, TResponse>(\n    /** A scoped topic that was sent from `send`. */\n    topic: string,\n    callback: CallbackFunction<TPayload, TResponse>\n  ) => () => void\n}\n"]}