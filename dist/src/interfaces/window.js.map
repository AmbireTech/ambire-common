{"version":3,"file":"window.js","sourceRoot":"","sources":["../../../src/interfaces/window.ts"],"names":[],"mappings":"","sourcesContent":["import { EventEmitter } from 'events'\n\nexport type WindowId = number\n\nexport type WindowProps = {\n  id: WindowId\n  top: number\n  left: number\n  width: number\n  height: number\n  focused: boolean\n  createdFromWindowId?: number\n} | null\n\nexport interface WindowManager {\n  event: EventEmitter\n  open: (options?: {\n    route?: string\n    customSize?: { width: number; height: number }\n  }) => Promise<WindowProps>\n  focus: (windowProps: WindowProps) => Promise<WindowProps>\n  closePopupWithUrl: (url: string) => Promise<void>\n  remove: (winId: WindowId) => Promise<void>\n  sendWindowToastMessage: (\n    message: string,\n    options?: {\n      timeout?: number\n      type?: 'error' | 'success' | 'info' | 'warning'\n      sticky?: boolean\n    }\n  ) => void\n  sendWindowUiMessage: (params: {}) => void\n}\n"]}