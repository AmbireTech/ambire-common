{"version":3,"file":"network.js","sourceRoot":"","sources":["../../../src/interfaces/network.ts"],"names":[],"mappings":"","sourcesContent":["import { BUNDLER } from '../consts/bundlers'\n\nexport type ChainId = bigint\n\nexport interface Erc4337settings {\n  enabled: boolean\n  hasPaymaster: boolean\n  hasBundlerSupport?: boolean\n  bundlers?: BUNDLER[]\n  defaultBundler?: BUNDLER\n  // increase the bundler estimation & gas price by a percent so we get\n  // \"txn underpriced\" errors less often\n  increasePreVerGas?: number\n}\n\ninterface FeeOptions {\n  is1559: boolean\n  minBaseFee?: bigint\n  elasticityMultiplier?: bigint\n  baseFeeMaxChangeDenominator?: bigint\n  feeIncrease?: bigint // should we increase the relayer fee in %\n  // transactions on Base get stuck on slow as we lower the baseFee a lot\n  // so we make the minBaseFee the same as the last block one\n  minBaseFeeEqualToLastBlock?: boolean\n}\n\n/** Current network configuration and statuses, which may change over time */\nexport interface NetworkInfo {\n  chainId: bigint\n  isSAEnabled: boolean\n  hasSingleton: boolean\n  isOptimistic: boolean\n  rpcNoStateOverride: boolean\n  erc4337: Erc4337settings\n  areContractsDeployed: boolean\n  feeOptions: FeeOptions\n  platformId: string\n  nativeAssetId: string\n  flagged: boolean\n}\n\nexport type NetworkInfoLoading<T> = {\n  [K in keyof T]: T[K] | 'LOADING'\n}\n\nexport interface NetworkFeature {\n  id: string\n  title: string\n  msg?: string\n  level: 'success' | 'danger' | 'warning' | 'loading' | 'initial'\n}\n\nexport interface Network {\n  chainId: bigint\n  name: string\n  nativeAssetSymbol: string\n  nativeAssetName: string\n  rpcUrls: string[]\n  explorerUrl: string\n  selectedRpcUrl: string\n  erc4337: NetworkInfo['erc4337']\n  rpcNoStateOverride: NetworkInfo['rpcNoStateOverride']\n  feeOptions: NetworkInfo['feeOptions']\n  isSAEnabled: NetworkInfo['isSAEnabled']\n  areContractsDeployed: NetworkInfo['areContractsDeployed']\n  features: NetworkFeature[]\n  hasRelayer: boolean\n  hasSingleton: NetworkInfo['hasSingleton']\n  platformId: NetworkInfo['platformId']\n  nativeAssetId: NetworkInfo['nativeAssetId']\n  iconUrls?: string[]\n  isOptimistic?: NetworkInfo['isOptimistic']\n  flagged?: NetworkInfo['flagged']\n  predefined: boolean\n  wrappedAddr?: string\n  blockGasLimit?: bigint\n  oldNativeAssetSymbols?: string[]\n  disableEstimateGas?: boolean\n  predefinedConfigVersion?: number\n  // Last time the network details were updated from the rpc for custom and no SA networks\n  lastUpdatedNetworkInfo?: number\n  has7702: boolean\n  allowForce4337?: boolean\n  disabled?: boolean\n}\n\nexport interface AddNetworkRequestParams {\n  name: Network['name']\n  rpcUrls: Network['rpcUrls']\n  selectedRpcUrl: Network['selectedRpcUrl']\n  chainId: Network['chainId']\n  nativeAssetSymbol: Network['nativeAssetSymbol']\n  nativeAssetName: Network['nativeAssetName']\n  explorerUrl: Network['explorerUrl']\n  iconUrls: Network['iconUrls']\n}\n\nexport interface ChainlistNetwork {\n  name: string\n  chain: string\n  icon: string\n  rpc: string[]\n  features: {\n    name: string\n  }[]\n  faucets: string[]\n  nativeCurrency: {\n    name: string\n    symbol: string\n    decimals: number\n  }\n  infoURL: string\n  shortName: string\n  chainId: number\n  networkId: number\n  slip44: number\n  ens: {\n    registry: string\n  }\n  explorers: {\n    name: string\n    url: string\n    standard: string\n    icon?: string\n  }[]\n}\n\nexport type RelayerNetwork = {\n  /**\n   * Mechanism to merge incoming config with user storage. If versions match -\n   * prioritize user changed values. If incoming config version is higher, override user config.\n   */\n  predefinedConfigVersion: number\n  ambireId: string\n  platformId: string\n  name: string\n  iconUrls: string[]\n  explorerUrl: string\n  rpcUrls: string[]\n  selectedRpcUrl: string\n  native: {\n    symbol: string\n    name: string\n    coingeckoId: string\n    icon: string\n    decimals: number\n    wrapped: {\n      address: string\n      symbol: string\n      name: string\n      coingeckoId: string\n      icon: string\n      decimals: number\n    }\n    oldNativeAssetSymbols?: string[]\n  }\n  isOptimistic: boolean\n  disableEstimateGas: boolean\n  feeOptions: {\n    is1559: boolean\n    elasticityMultiplier?: number\n    baseFeeMaxChangeDenominator?: number\n    feeIncrease?: number\n    minBaseFee?: number\n    minBaseFeeEqualToLastBlock?: boolean\n  }\n  has7702?: boolean\n  smartAccounts?: {\n    hasRelayer: boolean\n    erc4337: {\n      enabled: boolean\n      hasPaymaster: boolean\n      hasBundlerSupport?: boolean\n      bundlers?: [bundler: BUNDLER]\n      defaultBundler?: BUNDLER\n      increasePreVerGas?: number\n    }\n  }\n  disabledByDefault?: boolean\n}\n\nexport type RelayerNetworkConfigResponse = { [chainId: string]: RelayerNetwork }\n"]}