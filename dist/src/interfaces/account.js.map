{"version":3,"file":"account.js","sourceRoot":"","sources":["../../../src/interfaces/account.ts"],"names":[],"mappings":"AAwEA;;GAEG;AACH,MAAM,CAAN,IAAY,YAUX;AAVD,WAAY,YAAY;IACtB,4CAA4B,CAAA;IAC5B,2DAA2C,CAAA;IAC3C,4EAA4D,CAAA;IAC5D,qFAAqF;IACrF,uEAAuD,CAAA;IACvD,4DAA4D;IAC5D,0EAA0D,CAAA,CAAC,gBAAgB;IAC3E,wEAAwE;IACxE,8CAA8C;AAChD,CAAC,EAVW,YAAY,KAAZ,YAAY,QAUvB","sourcesContent":["import { Network } from './network'\n\nexport type AccountId = string\n\nexport type AccountPreferences = {\n  label: string\n  pfp: string // profile picture - acc address as default value to display a unique jazz icon\n}\n\nexport interface Account {\n  addr: AccountId\n  // Associated keys that can control the account\n  // For EOAs this must be set to [account.addr]\n  associatedKeys: string[]\n  initialPrivileges: [string, string][]\n  // Creation data; `null` in case of an EOA\n  creation: AccountCreation | null\n  preferences: AccountPreferences\n  email?: string\n  newlyCreated?: boolean\n  newlyAdded?: boolean\n}\n\nexport interface AccountCreation {\n  factoryAddr: string\n  bytecode: string\n  salt: string\n  // baseIdentityAddr is intentionally omitted because it's not used anywhere\n  // and because it can be retrieved from the bytecode\n}\n\nexport interface AccountOnchainState {\n  accountAddr: string\n  isDeployed: boolean\n  // this is a number and not a bigint because of ethers (it uses number for nonces)\n  nonce: bigint\n  erc4337Nonce: bigint\n  associatedKeysPriviliges: { [key: string]: string }\n  deployError: boolean\n  balance: bigint\n  isEOA: boolean\n  isErc4337Enabled: boolean\n  isErc4337Nonce: boolean\n  isV2: boolean\n  currentBlock: bigint\n}\n\nexport type AccountStates = {\n  [accountId: string]: {\n    [networkId: string]: AccountOnchainState\n  }\n}\n\ntype AccountDerivationMeta = {\n  slot: number // the iteration on which the account is derived, starting from 1\n  index: number // the derivation index of the <account> in the slot, starting from 0\n  isLinked: boolean // linked accounts are also smart accounts, so use a flag to differentiate\n}\n\nexport type AccountWithNetworkMeta = Account & { usedOnNetworks: Network[] }\n\n/**\n * The account that is derived programmatically and internally by Ambire.\n * Could be either a basic (EOA) account, a derived with custom derivation\n * basic (EOA) account (used for smart account key only) or a smart account.\n */\nexport type DerivedAccount = AccountDerivationMeta & { account: AccountWithNetworkMeta }\n// Sub-type, used during intermediate step during the deriving accounts process\nexport type DerivedAccountWithoutNetworkMeta = Omit<DerivedAccount, 'account'> & {\n  account: Account\n}\n\n/**\n * Enum for tracking the import status of an account during the import process.\n */\nexport enum ImportStatus {\n  NotImported = 'not-imported',\n  ImportedWithoutKey = 'imported-without-key', // as a view only account\n  ImportedWithSomeOfTheKeys = 'imported-with-some-of-the-keys', // imported with\n  // some of the keys (having the same key type), but not all found on the current page\n  ImportedWithTheSameKeys = 'imported-with-the-same-keys', // imported with all\n  // keys (having the same key type) found on the current page\n  ImportedWithDifferentKeys = 'imported-with-different-keys' // different key\n  // meaning that could be a key with the same address but different type,\n  // or a key with different address altogether.\n}\n\n/**\n * All the accounts that should be visible on the current page - the Basic\n * Accounts, Smart Accounts and the linked accounts. Excludes the derived\n * EOA (basic) accounts used for smart account keys only.\n */\nexport type AccountOnPage = DerivedAccount & { importStatus: ImportStatus }\n\n/**\n * The account that the user has actively chosen (selected) via the app UI.\n * It's always one of the visible accounts returned by the accountsOnPage().\n * Could be either a basic (EOA) account, a smart account or a linked account.\n */\nexport type SelectedAccountForImport = {\n  account: Account\n  isLinked: AccountDerivationMeta['isLinked']\n  accountKeys: (Omit<AccountDerivationMeta, 'isLinked'> & { addr: Account['addr'] })[]\n}\n"]}