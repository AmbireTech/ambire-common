{"version":3,"file":"coingecko.js","sourceRoot":"","sources":["../../../src/consts/coingecko.ts"],"names":[],"mappings":";;;AASA,sCAOC;AAMD,0DAKC;AAOD,0DAeC;AAjDD,mCAAoC;AAGpC,2CAA+D;AAE/D,MAAM,sBAAsB,GAAG,yCAAyC,CAAA;AACxE,MAAM,kBAAkB,GAAG,qCAAqC,CAAA;AAEhE,sCAAsC;AACtC,SAAgB,aAAa,CAAC,OAAe,EAAE,OAAgB;IAC7D,IAAI,OAAO,KAAK,oBAAW;QAAE,OAAO,OAAO,CAAC,aAAa,CAAA;IAEzD,oDAAoD;IACpD,IAAI,OAAO,KAAK,4CAA4C;QAAE,OAAO,MAAM,CAAA;IAE3E,OAAO,IAAI,CAAA;AACb,CAAC;AAED;;;GAGG;AACH,SAAgB,uBAAuB,CAAC,OAAe;IACrD,0FAA0F;IAC1F,IAAI,OAAO,KAAK,+BAAmB;QAAE,OAAO,wBAAY,CAAA;IAExD,OAAO,OAAO,CAAA;AAChB,CAAC;AAED;;;;GAIG;AACH,SAAgB,uBAAuB,CAAC,EACtC,SAAS,EACT,YAAY,EACZ,iBAAiB,EAKlB;IACC,2FAA2F;IAC3F,kFAAkF;IAClF,IAAI,SAAS,KAAK,oBAAW;QAAE,OAAO,GAAG,sBAAsB,GAAG,iBAAiB,EAAE,CAAA;IAErF,MAAM,iBAAiB,GAAG,uBAAuB,CAAC,SAAS,CAAC,CAAA;IAC5D,OAAO,GAAG,sBAAsB,GAAG,YAAY,aAAa,iBAAiB,EAAE,CAAA;AACjF,CAAC;AAED,2DAA2D;AACpD,MAAM,oBAAoB,GAAG,CAAC,IAAY,EAAE,EAAE,CAAC,GAAG,kBAAkB,GAAG,IAAI,EAAE,CAAA;AAAvE,QAAA,oBAAoB,wBAAmD","sourcesContent":["import { ZeroAddress } from 'ethers'\n\nimport { Network } from '../interfaces/network'\nimport { WALLET_STAKING_ADDR, WALLET_TOKEN } from './addresses'\n\nconst COINGECKO_API_BASE_URL = 'https://api.coingecko.com/api/v3/coins/'\nconst COINGECKO_BASE_URL = 'https://www.coingecko.com/en/coins/'\n\n// @TODO some form of a constants list\nexport function geckoIdMapper(address: string, network: Network): string | null {\n  if (address === ZeroAddress) return network.nativeAssetId\n\n  // we currently can't map aave so we're leaving this\n  if (address === '0x4da27a545c0c5B758a6BA100e3a049001de870f5') return 'aave'\n\n  return null\n}\n\n/**\n * Maps specific token addresses to alternative addresses if they are missing on\n * CoinGecko (so that they are aliased to existing tokens).\n */\nexport function geckoTokenAddressMapper(address: string) {\n  // xWALLET is missing on CoinGecko, so alias it to WALLET token (that exists on CoinGecko)\n  if (address === WALLET_STAKING_ADDR) return WALLET_TOKEN\n\n  return address\n}\n\n/**\n * Constructs the CoinGecko API URL for a given token address and network ID.\n * Handles special cases where the CoinGecko API handles differently certain\n * tokens like the native tokens.\n */\nexport function getCoinGeckoTokenApiUrl({\n  tokenAddr,\n  geckoChainId,\n  geckoNativeCoinId\n}: {\n  tokenAddr: string\n  geckoChainId: string\n  geckoNativeCoinId: string\n}) {\n  // CoinGecko does not handle native assets (ETH, MATIC, BNB...) via the /contract endpoint.\n  // Instead, native assets are identified by URL with the `nativeAssetId` directly.\n  if (tokenAddr === ZeroAddress) return `${COINGECKO_API_BASE_URL}${geckoNativeCoinId}`\n\n  const geckoTokenAddress = geckoTokenAddressMapper(tokenAddr)\n  return `${COINGECKO_API_BASE_URL}${geckoChainId}/contract/${geckoTokenAddress}`\n}\n\n/** Constructs the CoinGecko URL for a given token slug. */\nexport const getCoinGeckoTokenUrl = (slug: string) => `${COINGECKO_BASE_URL}${slug}`\n"]}