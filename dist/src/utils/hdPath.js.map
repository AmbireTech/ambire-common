{"version":3,"file":"hdPath.js","sourceRoot":"","sources":["../../../src/utils/hdPath.ts"],"names":[],"mappings":";;;AAEO,MAAM,qBAAqB,GAAG,CAAC,cAAqC,EAAE,KAAa,EAAE,EAAE;IAC5F,OAAO,cAAc,CAAC,OAAO,CAAC,WAAW,EAAE,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAA;AAC9D,CAAC,CAAA;AAFY,QAAA,qBAAqB,yBAEjC;AAED,MAAM,eAAe,GAAG,UAAU,CAAA;AAC3B,MAAM,gBAAgB,GAAG,CAAC,cAAqC,EAAE,SAAS,GAAG,CAAC,EAAE,EAAE;IACvF,MAAM,IAAI,GAAG,cAAc,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;IAC/C,MAAM,OAAO,GAAG,EAAE,CAAA;IAClB,IAAI,KAAK,GAAG,KAAK,CAAA;IACjB,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;QACpB,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,CAAA;QAChD,IAAI,GAAG,GAAG,UAAU,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,CAAA;QAC1C,8EAA8E;QAC9E,uEAAuE;QACvE,6EAA6E;QAC7E,qBAAqB;QACrB,IAAI,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;YACnC,GAAG,IAAI,SAAS,CAAA;YAChB,KAAK,GAAG,IAAI,CAAA;QACd,CAAC;aAAM,IAAI,UAAU,EAAE,CAAC;YACtB,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAA;QAC/C,CAAC;aAAM,CAAC;YACN,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,CAAA;QACrB,CAAC;QACD,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;IACnB,CAAC,CAAC,CAAA;IACF,gFAAgF;IAChF,kCAAkC;IAClC,IAAI,KAAK,KAAK,KAAK,EAAE,CAAC;QACpB,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;IACzB,CAAC;IACD,uEAAuE;IACvE,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC;QAAE,MAAM,IAAI,KAAK,CAAC,iDAAiD,CAAC,CAAA;IAC1F,OAAO,OAAO,CAAA;AAChB,CAAC,CAAA;AA7BY,QAAA,gBAAgB,oBA6B5B","sourcesContent":["import { HD_PATH_TEMPLATE_TYPE } from '../consts/derivation'\n\nexport const getHdPathFromTemplate = (hdPathTemplate: HD_PATH_TEMPLATE_TYPE, index: number) => {\n  return hdPathTemplate.replace('<account>', index.toString())\n}\n\nconst HARDENED_OFFSET = 0x80000000\nexport const getHDPathIndices = (hdPathTemplate: HD_PATH_TEMPLATE_TYPE, insertIdx = 0) => {\n  const path = hdPathTemplate.split('/').slice(1)\n  const indices = []\n  let usedX = false\n  path.forEach((_idx) => {\n    const isHardened = _idx[_idx.length - 1] === \"'\"\n    let idx = isHardened ? HARDENED_OFFSET : 0\n    // If there is an `<account>` in the path string, we will use it to insert our\n    // index. This is useful for e.g. Ledger Live path. Most paths have the\n    // changing index as the last one, so having an `<account>` in the path isn't\n    // usually necessary.\n    if (_idx.indexOf('<account>') > -1) {\n      idx += insertIdx\n      usedX = true\n    } else if (isHardened) {\n      idx += Number(_idx.slice(0, _idx.length - 1))\n    } else {\n      idx += Number(_idx)\n    }\n    indices.push(idx)\n  })\n  // If this path string does not include an `<account>`, we just append the index\n  // to the end of the extracted set\n  if (usedX === false) {\n    indices.push(insertIdx)\n  }\n  // Sanity check -- Lattice firmware will throw an error for large paths\n  if (indices.length > 5) throw new Error('Only HD paths with up to 5 indices are allowed.')\n  return indices\n}\n"]}