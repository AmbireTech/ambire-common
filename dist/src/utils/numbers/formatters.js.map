{"version":3,"file":"formatters.js","sourceRoot":"","sources":["../../../../src/utils/numbers/formatters.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,UAAU,EAAE,MAAM,QAAQ,CAAA;AAEhD;;GAEG;AACH,MAAM,yBAAyB,GAAG,CAChC,UAAkB,EAIlB,EAAE;IACF,MAAM,gBAAgB,GAAG,MAAM,CAAC,UAAU,CAAC,CAAA;IAE3C,+BAA+B;IAC/B,IAAI,gBAAgB,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;QAClC,MAAM,CAAC,IAAI,EAAE,WAAW,CAAC,GAAG,gBAAgB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;QACvD,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAA;QAE9C,MAAM,EAAE,gBAAgB,EAAE,kBAAkB,EAAE,YAAY,EAAE,GAAG,yBAAyB,CACtF,MAAM,CAAC,IAAI,CAAC,CACb,CAAA;QAED,OAAO;YACL,gBAAgB;YAChB,kBAAkB,EAAE,YAAY,GAAG,QAAQ;SAC5C,CAAA;KACF;IAED,0BAA0B;IAC1B,MAAM,kBAAkB,GAAG,gBAAgB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,MAAM,IAAI,CAAC,CAAA;IACtE,MAAM,gBAAgB,GAAG,UAAU,CAAC,gBAAgB,EAAE,kBAAkB,CAAC,CAAA;IAEzE,OAAO,EAAE,gBAAgB,EAAE,kBAAkB,EAAE,CAAA;AACjD,CAAC,CAAA;AAED,MAAM,sCAAsC,GAAG,CAC7C,MAAc,EACd,QAAgB,EAChB,UAAkB,EAClB,EAAE;IACF,MAAM,EAAE,gBAAgB,EAAE,kBAAkB,EAAE,GAAG,yBAAyB,CAAC,UAAU,CAAC,CAAA;IAEtF,OAAO,WAAW,CAChB,MAAM,GAAG,gBAAgB;IACzB,uEAAuE;IACvE,QAAQ,GAAG,kBAAkB,CAC9B,CAAA;AACH,CAAC,CAAA;AAED,OAAO,EAAE,yBAAyB,EAAE,sCAAsC,EAAE,CAAA","sourcesContent":["import { formatUnits, parseUnits } from 'ethers'\n\n/**\n * Converts floating point token price to big int\n */\nconst convertTokenPriceToBigInt = (\n  tokenPrice: number\n): {\n  tokenPriceBigInt: bigint\n  tokenPriceDecimals: number\n} => {\n  const tokenPriceString = String(tokenPrice)\n\n  // Scientific notation handling\n  if (tokenPriceString.includes('e')) {\n    const [base, rawExponent] = tokenPriceString.split('e')\n    const exponent = Math.abs(Number(rawExponent))\n\n    const { tokenPriceBigInt, tokenPriceDecimals: baseDecimals } = convertTokenPriceToBigInt(\n      Number(base)\n    )\n\n    return {\n      tokenPriceBigInt,\n      tokenPriceDecimals: baseDecimals + exponent\n    }\n  }\n\n  // Regular number handling\n  const tokenPriceDecimals = tokenPriceString.split('.')[1]?.length || 0\n  const tokenPriceBigInt = parseUnits(tokenPriceString, tokenPriceDecimals)\n\n  return { tokenPriceBigInt, tokenPriceDecimals }\n}\n\nconst safeTokenAmountAndNumberMultiplication = (\n  amount: bigint,\n  decimals: number,\n  tokenPrice: number\n) => {\n  const { tokenPriceBigInt, tokenPriceDecimals } = convertTokenPriceToBigInt(tokenPrice)\n\n  return formatUnits(\n    amount * tokenPriceBigInt,\n    // Shift the decimal point by the number of decimals in the token price\n    decimals + tokenPriceDecimals\n  )\n}\n\nexport { convertTokenPriceToBigInt, safeTokenAmountAndNumberMultiplication }\n"]}