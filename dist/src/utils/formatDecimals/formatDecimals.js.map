{"version":3,"file":"formatDecimals.js","sourceRoot":"","sources":["../../../../src/utils/formatDecimals/formatDecimals.ts"],"names":[],"mappings":"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","sourcesContent":["type FormatType = 'value' | 'price' | 'amount' | 'default' | 'precise'\n\nconst DEFAULT_DECIMALS = 2\nconst DECIMAL_RULES = {\n  value: {\n    min: 2,\n    max: 2\n  },\n  price: {\n    min: 2,\n    max: 2\n  },\n  amount: {\n    min: 0,\n    max: 2\n  },\n  default: {\n    min: 0,\n    max: 2\n  },\n  precise: {\n    min: 0,\n    max: 8\n  }\n}\nconst TYPES_WITH_DOLLAR_PREFIX: FormatType[] = ['value', 'price']\n\n/**\n * Removes trailing zeros from a decimal string.\n * @example\n * removeTrailingZeros('1.0500') // '1.05'\n */\nconst removeTrailingZeros = (decimalStr: string, minDecimals: number = 0) => {\n  if (!decimalStr.includes('.')) return decimalStr // If there's no decimal point, return the original string\n\n  let result = decimalStr\n\n  // Loop from the end of the string until a non-zero character is found\n  while (\n    result.endsWith('0') &&\n    (!minDecimals || result.length - 1 - result.indexOf('.') > minDecimals)\n  ) {\n    result = result.slice(0, -1) // Remove the last character\n  }\n\n  // If the string ends with a decimal point after removing zeros, remove it\n  if (result.endsWith('.')) {\n    result = result.slice(0, -1)\n  }\n\n  return result\n}\n\nconst getIndexOfFirstNonZeroInDecimals = (value: number, type: FormatType) => {\n  // Fixes scientific notation when converting to string\n  const decimalValue = value.toFixed(value < 1 ? 16 : 2)\n  const valueString = decimalValue.toString()\n  const indexOfDot = valueString.indexOf('.')\n  if (indexOfDot === -1) return 0\n  const decimals = valueString.slice(indexOfDot + 1)\n  const indexOfFirstNonZero = decimals.split('').findIndex((char) => char !== '0')\n\n  return indexOfFirstNonZero === -1 ? DECIMAL_RULES[type].min : indexOfFirstNonZero\n}\n\nconst getPrefix = (widthDollarPrefix: boolean) => (widthDollarPrefix ? '$' : '')\n\nconst formatNumber = (\n  value: number,\n  withDollarPrefix: boolean,\n  decimals: number,\n  sign: string,\n  type: FormatType\n) => {\n  const stringValue = value.toFixed(16)\n  const [integer, decimal] = stringValue.split('.')\n  // Display the number with the determined number of decimals\n  const decimalFormatted = decimal ? decimal.slice(0, decimals) : '0'\n  // Add commas to the integer part of the number. E.g. 1000 -> 1,000\n  const integerFormatted = Number(integer).toLocaleString('en-US', { maximumFractionDigits: 0 })\n  const reconstructedStringValue = `${integerFormatted}.${decimalFormatted}`\n  const stringValueWithoutTrailingZeros = removeTrailingZeros(\n    reconstructedStringValue,\n    type ? DECIMAL_RULES[type].min : undefined\n  )\n\n  return `${sign}${getPrefix(withDollarPrefix)}${stringValueWithoutTrailingZeros}`\n}\n\n// A function that formats a number to a string with a specific number of decimals.\n// Based on the passed type it will add a dollar sign prefix.\nconst formatDecimals = (value: number | undefined = undefined, type: FormatType = 'default') => {\n  const withDollarPrefix = TYPES_WITH_DOLLAR_PREFIX.includes(type || '')\n\n  if (value === 0) {\n    if (type === 'amount') return `${getPrefix(withDollarPrefix)}0`\n\n    return `${getPrefix(withDollarPrefix)}0.00`\n  }\n  if (!value || Number.isNaN(value)) return `${getPrefix(withDollarPrefix)}-`\n\n  // The absolute value is used to determine the number of decimals and\n  // then the actual value is formatted with the determined number of decimals.\n  const absoluteValue = Math.abs(value)\n  const sign = value < 0 ? '-' : ''\n\n  if (type === 'value') {\n    if (absoluteValue < 0.01) {\n      return `${sign}<$0.01`\n    }\n\n    return formatNumber(absoluteValue, withDollarPrefix, DEFAULT_DECIMALS, sign, type)\n  }\n\n  if (type === 'amount') {\n    if (absoluteValue < 0.00001) {\n      return `${sign}<0.00001`\n    }\n  }\n\n  const indexOfFirstNonZero = getIndexOfFirstNonZeroInDecimals(value, type)\n\n  const decimals = indexOfFirstNonZero + DECIMAL_RULES[type].max\n\n  return formatNumber(absoluteValue, withDollarPrefix, decimals, sign, type)\n}\n\nexport default formatDecimals\n"]}