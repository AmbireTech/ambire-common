{"version":3,"file":"networks.js","sourceRoot":"","sources":["../../../src/utils/networks.ts"],"names":[],"mappings":"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","sourcesContent":["import { JsonRpcProvider } from 'ethers'\n\nimport { ChainlistNetwork, Network } from '../interfaces/network'\n\nconst checkIsRpcUrlWorking = async (rpcUrl: string) => {\n  const provider = new JsonRpcProvider(rpcUrl)\n\n  try {\n    await provider.getBlockNumber()\n  } catch {\n    provider?.destroy()\n    return false\n  }\n\n  provider.destroy()\n\n  return true\n}\n\nconst rollProviderUrlsAndFindWorking = async (\n  rpcUrls: string[],\n  index: number\n): Promise<string | null> => {\n  const isProviderWorking = await checkIsRpcUrlWorking(rpcUrls[index])\n\n  if (isProviderWorking) {\n    return rpcUrls[index]\n  }\n\n  const nextIndex = index + 1\n\n  if (rpcUrls.length > nextIndex) {\n    return rollProviderUrlsAndFindWorking(rpcUrls, nextIndex)\n  }\n\n  return null\n}\n\nconst convertToAmbireNetworkFormat = async (network: ChainlistNetwork): Promise<Network> => {\n  const freeHttpRpcUrls = network.rpc.filter((rpcUrl: string) => {\n    const isHttpOrHttps = rpcUrl.startsWith('http')\n\n    if (!isHttpOrHttps) return false\n\n    const isApiKeyRequired = /${.+}/.test(rpcUrl)\n\n    return !isApiKeyRequired\n  })\n  const workingRpcUrl = await rollProviderUrlsAndFindWorking(freeHttpRpcUrls, 0)\n\n  let platformId = null\n  let nativeAssetId = null\n\n  try {\n    const coingeckoRequest = await fetch(\n      `https://cena.ambire.com/api/v3/platform/${Number(network.chainId)}`\n    ).catch(() => ({\n      error: 'currently, we cannot fetch the coingecko information'\n    }))\n\n    // set the coingecko info\n\n    if (!('error' in coingeckoRequest)) {\n      const coingeckoInfo = await coingeckoRequest.json()\n      if (!coingeckoInfo.error) {\n        platformId = coingeckoInfo.platformId\n        nativeAssetId = coingeckoInfo.nativeAssetId\n      }\n    }\n  } catch (e) {\n    console.error(e)\n    // do nothing\n  }\n\n  return {\n    id: network.name.toLowerCase(),\n    name: network.name,\n    chainId: BigInt(network.chainId),\n    rpcUrls: [workingRpcUrl ?? network.rpc[0]],\n    explorerUrl: network.explorers[0].url,\n    selectedRpcUrl: workingRpcUrl || '',\n    platformId,\n    nativeAssetId,\n    nativeAssetSymbol: network.nativeCurrency.symbol,\n    // Not needed for benzin\n    hasRelayer: false,\n    rpcNoStateOverride: false, // TODO\n    reestimateOn: 0,\n    areContractsDeployed: false, // TODO\n    features: [],\n    feeOptions: { is1559: false },\n    flagged: false,\n    hasSingleton: false,\n    iconUrls: [],\n    erc4337: { enabled: false, hasPaymaster: false },\n    isSAEnabled: false,\n    predefined: false\n  }\n}\n\nexport { rollProviderUrlsAndFindWorking, checkIsRpcUrlWorking, convertToAmbireNetworkFormat }\n"]}